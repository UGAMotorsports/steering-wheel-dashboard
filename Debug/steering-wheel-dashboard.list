
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdf0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007ba0  0800ff90  0800ff90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b30  08017b30  00019184  2**0
                  CONTENTS
  4 .ARM          00000008  08017b30  08017b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b38  08017b38  00019184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017b38  08017b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017b44  08017b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08017b48  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017ec  20000184  08017ccc  00019184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001970  08017ccc  00019970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d33  00000000  00000000  000191b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fb8  00000000  00000000  0003cee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  00042ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001680  00000000  00000000  00044c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020552  00000000  00000000  000462c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027736  00000000  00000000  00066812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abc3  00000000  00000000  0008df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008140  00000000  00000000  00128b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00130c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ff78 	.word	0x0800ff78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800ff78 	.word	0x0800ff78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200b      	movs	r0, #11
 80005c4:	f004 f91b 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f004 f934 	bl	8004836 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	203b      	movs	r0, #59	@ 0x3b
 80005d4:	f004 f913 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005d8:	203b      	movs	r0, #59	@ 0x3b
 80005da:	f004 f92c 	bl	8004836 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SELECT+0x18>)
 80005f6:	f004 fe4f 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f004 f800 	bl	8004600 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400

08000608 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <DESELECT+0x18>)
 8000612:	f004 fe41 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f003 fff2 	bl	8004600 <HAL_Delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <SPI_TxByte+0x30>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SPI_TxByte+0x30>)
 8000646:	f006 fd64 	bl	8007112 <HAL_SPI_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000214 	.word	0x20000214

08000658 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000664:	bf00      	nop
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <SPI_TxBuffer+0x30>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b02      	cmp	r3, #2
 8000672:	d1f8      	bne.n	8000666 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_TxBuffer+0x30>)
 800067c:	f006 fd49 	bl	8007112 <HAL_SPI_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000214 	.word	0x20000214

0800068c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000696:	bf00      	nop
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <SPI_RxByte+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d1f8      	bne.n	8000698 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006a6:	1dba      	adds	r2, r7, #6
 80006a8:	1df9      	adds	r1, r7, #7
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <SPI_RxByte+0x34>)
 80006b2:	f006 ff8b 	bl	80075cc <HAL_SPI_TransmitReceive>

	return data;
 80006b6:	79bb      	ldrb	r3, [r7, #6]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000214 	.word	0x20000214

080006c4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006cc:	f7ff ffde 	bl	800068c <SPI_RxByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <SD_ReadyWait+0x30>)
 80006e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ec:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006ee:	f7ff ffcd 	bl	800068c <SPI_RxByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2bff      	cmp	r3, #255	@ 0xff
 80006fa:	d003      	beq.n	8000704 <SD_ReadyWait+0x24>
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <SD_ReadyWait+0x30>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f4      	bne.n	80006ee <SD_ReadyWait+0xe>

	return res;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001a2 	.word	0x200001a2

08000714 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800071a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800071e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000720:	f7ff ff72 	bl	8000608 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e005      	b.n	8000736 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	f7ff ff7a 	bl	8000624 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b09      	cmp	r3, #9
 800073a:	ddf6      	ble.n	800072a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800073c:	f7ff ff56 	bl	80005ec <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000754:	2395      	movs	r3, #149	@ 0x95
 8000756:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000758:	463b      	mov	r3, r7
 800075a:	2106      	movs	r1, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff7b 	bl	8000658 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000762:	e002      	b.n	800076a <SD_PowerOn+0x56>
	{
		cnt--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3b01      	subs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800076a:	f7ff ff8f 	bl	800068c <SPI_RxByte>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d002      	beq.n	800077a <SD_PowerOn+0x66>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_PowerOn+0x50>
	}

	DESELECT();
 800077a:	f7ff ff45 	bl	8000608 <DESELECT>
	SPI_TxByte(0XFF);
 800077e:	20ff      	movs	r0, #255	@ 0xff
 8000780:	f7ff ff50 	bl	8000624 <SPI_TxByte>

	PowerFlag = 1;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SD_PowerOn+0x80>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200001a5 	.word	0x200001a5

08000798 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <SD_PowerOff+0x14>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200001a5 	.word	0x200001a5

080007b0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <SD_CheckPower+0x14>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	200001a5 	.word	0x200001a5

080007c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007d4:	22c8      	movs	r2, #200	@ 0xc8
 80007d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007d8:	f7ff ff58 	bl	800068c <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d103      	bne.n	80007ee <SD_RxDataBlock+0x26>
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f4      	bne.n	80007d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007f2:	d001      	beq.n	80007f8 <SD_RxDataBlock+0x30>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e00f      	b.n	8000818 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff60 	bl	80006c4 <SPI_RxBytePtr>
	} while(len--);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	603a      	str	r2, [r7, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f4      	bne.n	80007f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800080e:	f7ff ff3d 	bl	800068c <SPI_RxByte>
	SPI_RxByte();
 8000812:	f7ff ff3b 	bl	800068c <SPI_RxByte>

	return TRUE;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200001a0 	.word	0x200001a0

08000824 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000834:	f7ff ff54 	bl	80006e0 <SD_ReadyWait>
 8000838:	4603      	mov	r3, r0
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	d001      	beq.n	8000842 <SD_TxDataBlock+0x1e>
 800083e:	2300      	movs	r3, #0
 8000840:	e02f      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff feed 	bl	8000624 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2bfd      	cmp	r3, #253	@ 0xfd
 800084e:	d020      	beq.n	8000892 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff feff 	bl	8000658 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800085a:	f7ff ff17 	bl	800068c <SPI_RxByte>
		SPI_RxByte();
 800085e:	f7ff ff15 	bl	800068c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000862:	e00b      	b.n	800087c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000864:	f7ff ff12 	bl	800068c <SPI_RxByte>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b05      	cmp	r3, #5
 8000874:	d006      	beq.n	8000884 <SD_TxDataBlock+0x60>
			i++;
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	2b40      	cmp	r3, #64	@ 0x40
 8000880:	d9f0      	bls.n	8000864 <SD_TxDataBlock+0x40>
 8000882:	e000      	b.n	8000886 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000884:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000886:	bf00      	nop
 8000888:	f7ff ff00 	bl	800068c <SPI_RxByte>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fa      	beq.n	8000888 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2b05      	cmp	r3, #5
 800089a:	d101      	bne.n	80008a0 <SD_TxDataBlock+0x7c>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008b6:	f7ff ff13 	bl	80006e0 <SD_ReadyWait>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d001      	beq.n	80008c4 <SD_SendCmd+0x1a>
 80008c0:	23ff      	movs	r3, #255	@ 0xff
 80008c2:	e042      	b.n	800094a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff feac 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	0e1b      	lsrs	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fea6 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fea0 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe9a 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe95 	bl	8000624 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d102      	bne.n	8000906 <SD_SendCmd+0x5c>
 8000900:	2395      	movs	r3, #149	@ 0x95
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e007      	b.n	8000916 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b48      	cmp	r3, #72	@ 0x48
 800090a:	d102      	bne.n	8000912 <SD_SendCmd+0x68>
 800090c:	2387      	movs	r3, #135	@ 0x87
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e001      	b.n	8000916 <SD_SendCmd+0x6c>
	else crc = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe83 	bl	8000624 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b4c      	cmp	r3, #76	@ 0x4c
 8000922:	d101      	bne.n	8000928 <SD_SendCmd+0x7e>
 8000924:	f7ff feb2 	bl	800068c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800092c:	f7ff feae 	bl	800068c <SPI_RxByte>
 8000930:	4603      	mov	r3, r0
 8000932:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000934:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da05      	bge.n	8000948 <SD_SendCmd+0x9e>
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3b01      	subs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <SD_SendCmd+0x82>

	return res;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SD_disk_initialize+0x14>
 8000964:	2301      	movs	r3, #1
 8000966:	e0d1      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000968:	4b6a      	ldr	r3, [pc, #424]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SD_disk_initialize+0x2a>
 8000976:	4b67      	ldr	r3, [pc, #412]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	e0c6      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800097e:	f7ff fec9 	bl	8000714 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000982:	f7ff fe33 	bl	80005ec <SELECT>

	/* check disk type */
	type = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800098a:	2100      	movs	r1, #0
 800098c:	2040      	movs	r0, #64	@ 0x40
 800098e:	f7ff ff8c 	bl	80008aa <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	f040 80a1 	bne.w	8000adc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800099a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 800099c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009a2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009a6:	2048      	movs	r0, #72	@ 0x48
 80009a8:	f7ff ff7f 	bl	80008aa <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d155      	bne.n	8000a5e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e00c      	b.n	80009d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009b8:	7bfc      	ldrb	r4, [r7, #15]
 80009ba:	f7ff fe67 	bl	800068c <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	f104 0310 	add.w	r3, r4, #16
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d9ef      	bls.n	80009b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d17e      	bne.n	8000adc <SD_disk_initialize+0x188>
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2baa      	cmp	r3, #170	@ 0xaa
 80009e2:	d17b      	bne.n	8000adc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	2100      	movs	r1, #0
 80009e6:	2077      	movs	r0, #119	@ 0x77
 80009e8:	f7ff ff5f 	bl	80008aa <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d807      	bhi.n	8000a02 <SD_disk_initialize+0xae>
 80009f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009f6:	2069      	movs	r0, #105	@ 0x69
 80009f8:	f7ff ff57 	bl	80008aa <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ec      	bne.n	80009e4 <SD_disk_initialize+0x90>
 8000a0a:	e000      	b.n	8000a0e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d062      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f7ff ff46 	bl	80008aa <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15b      	bne.n	8000adc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e00c      	b.n	8000a44 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	f7ff fe2e 	bl	800068c <SPI_RxByte>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	f104 0310 	add.w	r3, r4, #16
 8000a38:	443b      	add	r3, r7
 8000a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3301      	adds	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9ef      	bls.n	8000a2a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a4a:	7a3b      	ldrb	r3, [r7, #8]
 8000a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x104>
 8000a54:	230c      	movs	r3, #12
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x106>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
 8000a5c:	e03e      	b.n	8000adc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2077      	movs	r0, #119	@ 0x77
 8000a62:	f7ff ff22 	bl	80008aa <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d808      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2069      	movs	r0, #105	@ 0x69
 8000a70:	f7ff ff1b 	bl	80008aa <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d801      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x12c>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d10e      	bne.n	8000aa6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff0d 	bl	80008aa <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d80e      	bhi.n	8000ab4 <SD_disk_initialize+0x160>
 8000a96:	2100      	movs	r1, #0
 8000a98:	2069      	movs	r0, #105	@ 0x69
 8000a9a:	f7ff ff06 	bl	80008aa <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <SD_disk_initialize+0x160>
 8000aa4:	e00c      	b.n	8000ac0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f7ff fefe 	bl	80008aa <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e2      	bne.n	8000a82 <SD_disk_initialize+0x12e>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000abe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <SD_disk_initialize+0x184>
 8000ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000acc:	2050      	movs	r0, #80	@ 0x50
 8000ace:	f7ff feec 	bl	80008aa <SD_SendCmd>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <SD_disk_initialize+0x1c8>)
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ae2:	f7ff fd91 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000ae6:	f7ff fdd1 	bl	800068c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e001      	b.n	8000b06 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b02:	f7ff fe49 	bl	8000798 <SD_PowerOff>
	}

	return Stat;
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	200001a0 	.word	0x200001a0
 8000b1c:	200001a4 	.word	0x200001a4

08000b20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SD_disk_status+0x14>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e002      	b.n	8000b3a <SD_disk_status+0x1a>
	return Stat;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SD_disk_status+0x28>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_read+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_read+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e051      	b.n	8000c10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <SD_disk_read+0xcc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_read+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e048      	b.n	8000c10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SD_disk_read+0xd0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_read+0x44>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b90:	f7ff fd2c 	bl	80005ec <SELECT>

	if (count == 1)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d111      	bne.n	8000bbe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2051      	movs	r0, #81	@ 0x51
 8000b9e:	f7ff fe84 	bl	80008aa <SD_SendCmd>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d129      	bne.n	8000bfc <SD_disk_read+0xb0>
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fe0b 	bl	80007c8 <SD_RxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <SD_disk_read+0xb0>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e01e      	b.n	8000bfc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2052      	movs	r0, #82	@ 0x52
 8000bc2:	f7ff fe72 	bl	80008aa <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d117      	bne.n	8000bfc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fdf9 	bl	80007c8 <SD_RxDataBlock>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <SD_disk_read+0xa6>
				buff += 512;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ed      	bne.n	8000bcc <SD_disk_read+0x80>
 8000bf0:	e000      	b.n	8000bf4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bf2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	204c      	movs	r0, #76	@ 0x4c
 8000bf8:	f7ff fe57 	bl	80008aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bfc:	f7ff fd04 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000c00:	f7ff fd44 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	200001a4 	.word	0x200001a4

08000c20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <SD_disk_write+0x1c>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <SD_disk_write+0x20>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e06b      	b.n	8000d18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c40:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <SD_disk_write+0x100>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SD_disk_write+0x32>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e062      	b.n	8000d18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SD_disk_write+0x100>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SD_disk_write+0x44>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e059      	b.n	8000d18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <SD_disk_write+0x104>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <SD_disk_write+0x56>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c76:	f7ff fcb9 	bl	80005ec <SELECT>

	if (count == 1)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d110      	bne.n	8000ca2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2058      	movs	r0, #88	@ 0x58
 8000c84:	f7ff fe11 	bl	80008aa <SD_SendCmd>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13a      	bne.n	8000d04 <SD_disk_write+0xe4>
 8000c8e:	21fe      	movs	r1, #254	@ 0xfe
 8000c90:	68b8      	ldr	r0, [r7, #8]
 8000c92:	f7ff fdc7 	bl	8000824 <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d033      	beq.n	8000d04 <SD_disk_write+0xe4>
			count = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e030      	b.n	8000d04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <SD_disk_write+0x104>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2077      	movs	r0, #119	@ 0x77
 8000cb2:	f7ff fdfa 	bl	80008aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	2057      	movs	r0, #87	@ 0x57
 8000cba:	f7ff fdf6 	bl	80008aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2059      	movs	r0, #89	@ 0x59
 8000cc2:	f7ff fdf2 	bl	80008aa <SD_SendCmd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ccc:	21fc      	movs	r1, #252	@ 0xfc
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f7ff fda8 	bl	8000824 <SD_TxDataBlock>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <SD_disk_write+0xd0>
				buff += 512;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ce0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1ee      	bne.n	8000ccc <SD_disk_write+0xac>
 8000cee:	e000      	b.n	8000cf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cf2:	21fd      	movs	r1, #253	@ 0xfd
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fd95 	bl	8000824 <SD_TxDataBlock>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d04:	f7ff fc80 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000d08:	f7ff fcc0 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	200001a4 	.word	0x200001a4

08000d28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	@ 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	603a      	str	r2, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	460b      	mov	r3, r1
 8000d36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x1e>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e113      	b.n	8000f6e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d124      	bne.n	8000d9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d012      	beq.n	8000d80 <SD_disk_ioctl+0x58>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	dc1a      	bgt.n	8000d94 <SD_disk_ioctl+0x6c>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <SD_disk_ioctl+0x40>
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d006      	beq.n	8000d74 <SD_disk_ioctl+0x4c>
 8000d66:	e015      	b.n	8000d94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d68:	f7ff fd16 	bl	8000798 <SD_PowerOff>
			res = RES_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d72:	e0fa      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d74:	f7ff fcce 	bl	8000714 <SD_PowerOn>
			res = RES_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d7e:	e0f4      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	1c5c      	adds	r4, r3, #1
 8000d84:	f7ff fd14 	bl	80007b0 <SD_CheckPower>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d92:	e0ea      	b.n	8000f6a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d9a:	e0e6      	b.n	8000f6a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d9c:	4b76      	ldr	r3, [pc, #472]	@ (8000f78 <SD_disk_ioctl+0x250>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SD_disk_ioctl+0x86>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0df      	b.n	8000f6e <SD_disk_ioctl+0x246>

		SELECT();
 8000dae:	f7ff fc1d 	bl	80005ec <SELECT>

		switch (ctrl)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b0d      	cmp	r3, #13
 8000db6:	f200 80c9 	bhi.w	8000f4c <SD_disk_ioctl+0x224>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <SD_disk_ioctl+0x98>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000eb7 	.word	0x08000eb7
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000ea7 	.word	0x08000ea7
 8000dcc:	08000f4d 	.word	0x08000f4d
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f4d 	.word	0x08000f4d
 8000dd8:	08000f4d 	.word	0x08000f4d
 8000ddc:	08000f4d 	.word	0x08000f4d
 8000de0:	08000f4d 	.word	0x08000f4d
 8000de4:	08000f4d 	.word	0x08000f4d
 8000de8:	08000f4d 	.word	0x08000f4d
 8000dec:	08000ec9 	.word	0x08000ec9
 8000df0:	08000eed 	.word	0x08000eed
 8000df4:	08000f11 	.word	0x08000f11
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2049      	movs	r0, #73	@ 0x49
 8000dfc:	f7ff fd55 	bl	80008aa <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80a6 	bne.w	8000f54 <SD_disk_ioctl+0x22c>
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fcda 	bl	80007c8 <SD_RxDataBlock>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 809c 	beq.w	8000f54 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10d      	bne.n	8000e42 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e26:	7d7b      	ldrb	r3, [r7, #21]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	029a      	lsls	r2, r3, #10
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02d      	b.n	8000e9e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e42:	7c7b      	ldrb	r3, [r7, #17]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	09db      	lsrs	r3, r3, #7
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 0306 	and.w	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3302      	adds	r3, #2
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e6a:	7d3b      	ldrb	r3, [r7, #20]
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	7cbb      	ldrb	r3, [r7, #18]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e90:	8bfa      	ldrh	r2, [r7, #30]
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	3b09      	subs	r3, #9
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ea4:	e056      	b.n	8000f54 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb4:	e055      	b.n	8000f62 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000eb6:	f7ff fc13 	bl	80006e0 <SD_ReadyWait>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2bff      	cmp	r3, #255	@ 0xff
 8000ebe:	d14b      	bne.n	8000f58 <SD_disk_ioctl+0x230>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ec6:	e047      	b.n	8000f58 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	@ 0x49
 8000ecc:	f7ff fced 	bl	80008aa <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d142      	bne.n	8000f5c <SD_disk_ioctl+0x234>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc75 	bl	80007c8 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03b      	beq.n	8000f5c <SD_disk_ioctl+0x234>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eea:	e037      	b.n	8000f5c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eec:	2100      	movs	r1, #0
 8000eee:	204a      	movs	r0, #74	@ 0x4a
 8000ef0:	f7ff fcdb 	bl	80008aa <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d132      	bne.n	8000f60 <SD_disk_ioctl+0x238>
 8000efa:	2110      	movs	r1, #16
 8000efc:	6a38      	ldr	r0, [r7, #32]
 8000efe:	f7ff fc63 	bl	80007c8 <SD_RxDataBlock>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02b      	beq.n	8000f60 <SD_disk_ioctl+0x238>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f0e:	e027      	b.n	8000f60 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f10:	2100      	movs	r1, #0
 8000f12:	207a      	movs	r0, #122	@ 0x7a
 8000f14:	f7ff fcc9 	bl	80008aa <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f24:	e00b      	b.n	8000f3e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f26:	6a3c      	ldr	r4, [r7, #32]
 8000f28:	1c63      	adds	r3, r4, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	f7ff fbae 	bl	800068c <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9ef      	bls.n	8000f26 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f52:	e006      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f60:	bf00      	nop
		}

		DESELECT();
 8000f62:	f7ff fb51 	bl	8000608 <DESELECT>
		SPI_RxByte();
 8000f66:	f7ff fb91 	bl	800068c <SPI_RxByte>
	}

	return res;
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	372c      	adds	r7, #44	@ 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b5d      	ldr	r3, [pc, #372]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b56      	ldr	r3, [pc, #344]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a55      	ldr	r2, [pc, #340]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b53      	ldr	r3, [pc, #332]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b4f      	ldr	r3, [pc, #316]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b48      	ldr	r3, [pc, #288]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a47      	ldr	r2, [pc, #284]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b45      	ldr	r3, [pc, #276]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	4841      	ldr	r0, [pc, #260]	@ (8001110 <MX_GPIO_Init+0x194>)
 800100a:	f004 f945 	bl	8005298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2110      	movs	r1, #16
 8001012:	4840      	ldr	r0, [pc, #256]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001014:	f004 f940 	bl	8005298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001018:	2200      	movs	r2, #0
 800101a:	213b      	movs	r1, #59	@ 0x3b
 800101c:	483e      	ldr	r0, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800101e:	f004 f93b 	bl	8005298 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 8001022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4835      	ldr	r0, [pc, #212]	@ (8001110 <MX_GPIO_Init+0x194>)
 800103c:	f003 ffa8 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 8001040:	2306      	movs	r3, #6
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4830      	ldr	r0, [pc, #192]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001054:	f003 ff9c 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001058:	2310      	movs	r3, #16
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4829      	ldr	r0, [pc, #164]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001070:	f003 ff8e 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001074:	233b      	movs	r3, #59	@ 0x3b
 8001076:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4823      	ldr	r0, [pc, #140]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800108c:	f003 ff80 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <MX_GPIO_Init+0x19c>)
 80010a8:	f003 ff72 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010c4:	f003 ff64 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 80010c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010e0:	f003 ff56 	bl	8004f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2017      	movs	r0, #23
 80010ea:	f003 fb88 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ee:	2017      	movs	r0, #23
 80010f0:	f003 fba1 	bl	8004836 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2028      	movs	r0, #40	@ 0x28
 80010fa:	f003 fb80 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fe:	2028      	movs	r0, #40	@ 0x28
 8001100:	f003 fb99 	bl	8004836 <HAL_NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	@ 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400

0800111c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == button1INT_Pin) {
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800112c:	d103      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x1a>
	  USB_Println("button 1 was pressed\n");
 800112e:	4812      	ldr	r0, [pc, #72]	@ (8001178 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001130:	f001 f928 	bl	8002384 <USB_Println>
  } else if (GPIO_Pin == button4INT_Pin) {
	  USB_Println("button 4 was pressed\n");
  } else {
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
  }
}
 8001134:	e01c      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button2INT_Pin) {
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800113c:	d103      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x2a>
	  USB_Println("button 2 was pressed\n");
 800113e:	480f      	ldr	r0, [pc, #60]	@ (800117c <HAL_GPIO_EXTI_Callback+0x60>)
 8001140:	f001 f920 	bl	8002384 <USB_Println>
}
 8001144:	e014      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button3INT_Pin ) {
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114c:	d103      	bne.n	8001156 <HAL_GPIO_EXTI_Callback+0x3a>
	  USB_Println("button 3 was pressed\n");
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x64>)
 8001150:	f001 f918 	bl	8002384 <USB_Println>
}
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button4INT_Pin) {
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800115c:	d103      	bne.n	8001166 <HAL_GPIO_EXTI_Callback+0x4a>
	  USB_Println("button 4 was pressed\n");
 800115e:	4809      	ldr	r0, [pc, #36]	@ (8001184 <HAL_GPIO_EXTI_Callback+0x68>)
 8001160:	f001 f910 	bl	8002384 <USB_Println>
}
 8001164:	e004      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4619      	mov	r1, r3
 800116a:	4807      	ldr	r0, [pc, #28]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x6c>)
 800116c:	f001 f90a 	bl	8002384 <USB_Println>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0800ff90 	.word	0x0800ff90
 800117c:	0800ffa8 	.word	0x0800ffa8
 8001180:	0800ffc0 	.word	0x0800ffc0
 8001184:	0800ffd8 	.word	0x0800ffd8
 8001188:	0800fff0 	.word	0x0800fff0

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	f5ad 6def 	sub.w	sp, sp, #1912	@ 0x778
 8001192:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f003 f9c2 	bl	800451c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 faa6 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f7ff feee 	bl	8000f7c <MX_GPIO_Init>
  MX_DMA_Init();
 80011a0:	f7ff f9ee 	bl	8000580 <MX_DMA_Init>
  MX_SPI1_Init();
 80011a4:	f000 fd98 	bl	8001cd8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011a8:	f00d fc20 	bl	800e9ec <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011ac:	f000 fdcc 	bl	8001d48 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011b0:	f000 ffe4 	bl	800217c <MX_TIM4_Init>
  MX_FATFS_Init();
 80011b4:	f009 fa58 	bl	800a668 <MX_FATFS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	@ 0x64
 80011ba:	f003 fa21 	bl	8004600 <HAL_Delay>

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011be:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80011c2:	2201      	movs	r2, #1
 80011c4:	49a6      	ldr	r1, [pc, #664]	@ (8001460 <main+0x2d4>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00c ffcc 	bl	800e164 <f_mount>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 3763 	strb.w	r3, [r7, #1891]	@ 0x763
//	  USB_Println("There was an error: %d\n", fresult);
//  } else {
//	  USB_Println("the sdcard is mounted\n");
//  }

  initializeMCP2515();
 80011d2:	f000 fafb 	bl	80017cc <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 3000, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 80011d6:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80011da:	f5a3 63db 	sub.w	r3, r3, #1752	@ 0x6d8
 80011de:	4aa1      	ldr	r2, [pc, #644]	@ (8001464 <main+0x2d8>)
 80011e0:	461c      	mov	r4, r3
 80011e2:	4615      	mov	r5, r2
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10500};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80011f4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80011f8:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 80011fc:	2100      	movs	r1, #0
 80011fe:	489a      	ldr	r0, [pc, #616]	@ (8001468 <main+0x2dc>)
 8001200:	f000 fbaa 	bl	8001958 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001204:	2300      	movs	r3, #0
 8001206:	9303      	str	r3, [sp, #12]
 8001208:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	2300      	movs	r3, #0
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2300      	movs	r3, #0
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	4892      	ldr	r0, [pc, #584]	@ (8001468 <main+0x2dc>)
 8001220:	f000 fb1e 	bl	8001860 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001224:	2301      	movs	r3, #1
 8001226:	9303      	str	r3, [sp, #12]
 8001228:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	2300      	movs	r3, #0
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2300      	movs	r3, #0
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	488a      	ldr	r0, [pc, #552]	@ (8001468 <main+0x2dc>)
 8001240:	f000 fb0e 	bl	8001860 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001244:	230e      	movs	r3, #14
 8001246:	9303      	str	r3, [sp, #12]
 8001248:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	2300      	movs	r3, #0
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	4882      	ldr	r0, [pc, #520]	@ (8001468 <main+0x2dc>)
 8001260:	f000 fafe 	bl	8001860 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001264:	230f      	movs	r3, #15
 8001266:	9303      	str	r3, [sp, #12]
 8001268:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	487a      	ldr	r0, [pc, #488]	@ (8001468 <main+0x2dc>)
 8001280:	f000 faee 	bl	8001860 <setColor>

  resetScreen();
 8001284:	f001 fd00 	bl	8002c88 <resetScreen>
  initializeScreen();
 8001288:	f001 fd1c 	bl	8002cc4 <initializeScreen>
  //dosplashscene();
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 800128c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001290:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 8001294:	2100      	movs	r1, #0
 8001296:	4874      	ldr	r0, [pc, #464]	@ (8001468 <main+0x2dc>)
 8001298:	f000 fcb6 	bl	8001c08 <startUp>
  HAL_Delay(200);
 800129c:	20c8      	movs	r0, #200	@ 0xc8
 800129e:	f003 f9af 	bl	8004600 <HAL_Delay>

  char result[20] = "null"; //rpm
 80012a2:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012a6:	f2a3 62ec 	subw	r2, r3, #1772	@ 0x6ec
 80012aa:	4970      	ldr	r1, [pc, #448]	@ (800146c <main+0x2e0>)
 80012ac:	4613      	mov	r3, r2
 80012ae:	c903      	ldmia	r1, {r0, r1}
 80012b0:	6018      	str	r0, [r3, #0]
 80012b2:	3304      	adds	r3, #4
 80012b4:	7019      	strb	r1, [r3, #0]
 80012b6:	1d53      	adds	r3, r2, #5
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	f8c3 200b 	str.w	r2, [r3, #11]
  char result2[20] = "null";//temp
 80012c4:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012c8:	f5a3 62e0 	sub.w	r2, r3, #1792	@ 0x700
 80012cc:	4967      	ldr	r1, [pc, #412]	@ (800146c <main+0x2e0>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	c903      	ldmia	r1, {r0, r1}
 80012d2:	6018      	str	r0, [r3, #0]
 80012d4:	3304      	adds	r3, #4
 80012d6:	7019      	strb	r1, [r3, #0]
 80012d8:	1d53      	adds	r3, r2, #5
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	f8c3 200b 	str.w	r2, [r3, #11]
  char result3[20] = "8";//gear
 80012e6:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012ea:	f2a3 7314 	subw	r3, r3, #1812	@ 0x714
 80012ee:	2238      	movs	r2, #56	@ 0x38
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	3304      	adds	r3, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 80012fe:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001302:	f5a3 62e5 	sub.w	r2, r3, #1832	@ 0x728
 8001306:	4959      	ldr	r1, [pc, #356]	@ (800146c <main+0x2e0>)
 8001308:	4613      	mov	r3, r2
 800130a:	c903      	ldmia	r1, {r0, r1}
 800130c:	6018      	str	r0, [r3, #0]
 800130e:	3304      	adds	r3, #4
 8001310:	7019      	strb	r1, [r3, #0]
 8001312:	1d53      	adds	r3, r2, #5
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	f8c3 200b 	str.w	r2, [r3, #11]
  char result5[20] = "null"; //speed
 8001320:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001324:	f2a3 723c 	subw	r2, r3, #1852	@ 0x73c
 8001328:	4950      	ldr	r1, [pc, #320]	@ (800146c <main+0x2e0>)
 800132a:	4613      	mov	r3, r2
 800132c:	c903      	ldmia	r1, {r0, r1}
 800132e:	6018      	str	r0, [r3, #0]
 8001330:	3304      	adds	r3, #4
 8001332:	7019      	strb	r1, [r3, #0]
 8001334:	1d53      	adds	r3, r2, #5
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	f8c3 200b 	str.w	r2, [r3, #11]
  settempdata(result2);
 8001342:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001346:	4618      	mov	r0, r3
 8001348:	f002 f992 	bl	8003670 <settempdata>
  setgeardata(result3);
 800134c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001350:	4618      	mov	r0, r3
 8001352:	f002 f9b9 	bl	80036c8 <setgeardata>
  setrpmdata(result);
 8001356:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800135a:	4618      	mov	r0, r3
 800135c:	f002 f950 	bl	8003600 <setrpmdata>
  setbattdata(result4);
 8001360:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001364:	4618      	mov	r0, r3
 8001366:	f002 f9d9 	bl	800371c <setbattdata>
  setspeeddata(result5);
 800136a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fa00 	bl	8003774 <setspeeddata>
  domainscreen();
 8001374:	f002 fa28 	bl	80037c8 <domainscreen>

  struct can_frame frame;

  while (1)
  {
	  for (int i = 0; i < 10; i++) {
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 800137e:	e19f      	b.n	80016c0 <main+0x534>
		  int canresult = readMessage(&frame);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fa33 	bl	80017f0 <readMessage>
 800138a:	f8c7 075c 	str.w	r0, [r7, #1884]	@ 0x75c
		  if (canresult == 0) {
 800138e:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 818f 	bne.w	80016b6 <main+0x52a>
			  if (frame.can_id == (1520 + 0)) {
 8001398:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800139c:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 80013a6:	d12b      	bne.n	8001400 <main+0x274>
				  uint16_t rpm = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 80013a8:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80013ac:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80013b0:	7b9b      	ldrb	r3, [r3, #14]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 80013ba:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 80013be:	7bd2      	ldrb	r2, [r2, #15]
 80013c0:	4413      	add	r3, r2
 80013c2:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
				  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80013c6:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 80013ca:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013ce:	f207 41ec 	addw	r1, r7, #1260	@ 0x4ec
 80013d2:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	2100      	movs	r1, #0
 80013e0:	4821      	ldr	r0, [pc, #132]	@ (8001468 <main+0x2dc>)
 80013e2:	f000 fb49 	bl	8001a78 <UpdateShiftLights>

				  itoa(rpm, (char*)(result), 10);
 80013e6:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 80013ea:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80013ee:	220a      	movs	r2, #10
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00e f848 	bl	800f486 <itoa>
				  setrpmdata(result);
 80013f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 f900 	bl	8003600 <setrpmdata>
			  }
			  if (frame.can_id == (1520 + 2)) {
 8001400:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001404:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f240 52f2 	movw	r2, #1522	@ 0x5f2
 800140e:	4293      	cmp	r3, r2
 8001410:	d153      	bne.n	80014ba <main+0x32e>
				  uint16_t temp = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 8001412:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001416:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 800141a:	7b9b      	ldrb	r3, [r3, #14]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b29b      	uxth	r3, r3
 8001420:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 8001424:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 8001428:	7bd2      	ldrb	r2, [r2, #15]
 800142a:	4413      	add	r3, r2
 800142c:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758
				  if (temp > 2150) {
 8001430:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 8001434:	f640 0266 	movw	r2, #2150	@ 0x866
 8001438:	4293      	cmp	r3, r2
 800143a:	d919      	bls.n	8001470 <main+0x2e4>
					setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 800143c:	230f      	movs	r3, #15
 800143e:	9303      	str	r3, [sp, #12]
 8001440:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	2300      	movs	r3, #0
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	23ff      	movs	r3, #255	@ 0xff
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	4804      	ldr	r0, [pc, #16]	@ (8001468 <main+0x2dc>)
 8001458:	f000 fa02 	bl	8001860 <setColor>
 800145c:	e018      	b.n	8001490 <main+0x304>
 800145e:	bf00      	nop
 8001460:	08010010 	.word	0x08010010
 8001464:	08010024 	.word	0x08010024
 8001468:	200002d4 	.word	0x200002d4
 800146c:	08010054 	.word	0x08010054
				  } else {
					setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001470:	230f      	movs	r3, #15
 8001472:	9303      	str	r3, [sp, #12]
 8001474:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	4891      	ldr	r0, [pc, #580]	@ (80016d0 <main+0x544>)
 800148c:	f000 f9e8 	bl	8001860 <setColor>
				  }
				  temp /= 10;
 8001490:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 8001494:	4a8f      	ldr	r2, [pc, #572]	@ (80016d4 <main+0x548>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758
				  itoa(temp, result2, 10);
 80014a0:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 80014a4:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80014a8:	220a      	movs	r2, #10
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00d ffeb 	bl	800f486 <itoa>
				  settempdata(result2);
 80014b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 f8db 	bl	8003670 <settempdata>
			  }
			  if (frame.can_id == 1520 + 33) {
 80014ba:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80014be:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f240 6211 	movw	r2, #1553	@ 0x611
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d117      	bne.n	80014fc <main+0x370>
				  uint8_t gear = ((uint8_t)frame.data[6]);
 80014cc:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80014d0:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80014d4:	7b9b      	ldrb	r3, [r3, #14]
 80014d6:	f887 3757 	strb.w	r3, [r7, #1879]	@ 0x757
				  if (gear != 0) {
 80014da:	f897 3757 	ldrb.w	r3, [r7, #1879]	@ 0x757
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00c      	beq.n	80014fc <main+0x370>
					  //USB_Println("the gear value is %d\n", gear);
					  itoa(gear, result3, 10);
 80014e2:	f897 3757 	ldrb.w	r3, [r7, #1879]	@ 0x757
 80014e6:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80014ea:	220a      	movs	r2, #10
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00d ffca 	bl	800f486 <itoa>
					  setgeardata(result3);
 80014f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 f8e6 	bl	80036c8 <setgeardata>
				  }
			  }
			  if (frame.can_id == (1520 + 3)) {
 80014fc:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001500:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f240 52f3 	movw	r2, #1523	@ 0x5f3
 800150a:	4293      	cmp	r3, r2
 800150c:	d155      	bne.n	80015ba <main+0x42e>
				  uint8_t battvalue = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 800150e:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001512:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001516:	7adb      	ldrb	r3, [r3, #11]
 8001518:	f887 3751 	strb.w	r3, [r7, #1873]	@ 0x751
				  uint8_t batIntPart = battvalue / 10;
 800151c:	f897 3751 	ldrb.w	r3, [r7, #1873]	@ 0x751
 8001520:	4a6c      	ldr	r2, [pc, #432]	@ (80016d4 <main+0x548>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	08db      	lsrs	r3, r3, #3
 8001528:	f887 3750 	strb.w	r3, [r7, #1872]	@ 0x750
				  uint8_t batDecimalPart = battvalue % 10;
 800152c:	f897 2751 	ldrb.w	r2, [r7, #1873]	@ 0x751
 8001530:	4b68      	ldr	r3, [pc, #416]	@ (80016d4 <main+0x548>)
 8001532:	fba3 1302 	umull	r1, r3, r3, r2
 8001536:	08d9      	lsrs	r1, r3, #3
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
				  char batint[10];
				  char batdec[10];
				  itoa(batIntPart, batint, 10);
 8001546:	f897 3750 	ldrb.w	r3, [r7, #1872]	@ 0x750
 800154a:	f107 010c 	add.w	r1, r7, #12
 800154e:	220a      	movs	r2, #10
 8001550:	4618      	mov	r0, r3
 8001552:	f00d ff98 	bl	800f486 <itoa>
				  itoa(batDecimalPart, batdec, 10);
 8001556:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 800155a:	4639      	mov	r1, r7
 800155c:	220a      	movs	r2, #10
 800155e:	4618      	mov	r0, r3
 8001560:	f00d ff91 	bl	800f486 <itoa>
				  strncpy(result4, "", 20);
 8001564:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001568:	2214      	movs	r2, #20
 800156a:	495b      	ldr	r1, [pc, #364]	@ (80016d8 <main+0x54c>)
 800156c:	4618      	mov	r0, r3
 800156e:	f00e f8e2 	bl	800f736 <strncpy>
				  strncat(result4, batint, 5);
 8001572:	f107 010c 	add.w	r1, r7, #12
 8001576:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800157a:	2205      	movs	r2, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f00e f8c7 	bl	800f710 <strncat>
				  strncat(result4, ".", 5);
 8001582:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe2a 	bl	80001e0 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001594:	4413      	add	r3, r2
 8001596:	4951      	ldr	r1, [pc, #324]	@ (80016dc <main+0x550>)
 8001598:	461a      	mov	r2, r3
 800159a:	460b      	mov	r3, r1
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	8013      	strh	r3, [r2, #0]
				  strncat(result4, batdec, 1);
 80015a0:	4639      	mov	r1, r7
 80015a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a6:	2201      	movs	r2, #1
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00e f8b1 	bl	800f710 <strncat>
				  setbattdata(result4);
 80015ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 f8b2 	bl	800371c <setbattdata>
 80015b8:	e07d      	b.n	80016b6 <main+0x52a>
			  } else if (frame.can_id == 504) {
 80015ba:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015be:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80015c8:	d14f      	bne.n	800166a <main+0x4de>
				  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 80015ca:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015ce:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015d2:	7b9b      	ldrb	r3, [r3, #14]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015dc:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015e0:	7bdb      	ldrb	r3, [r3, #15]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  if (neutrallight < 1024) {
 80015ec:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 80015f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015f4:	d21c      	bcs.n	8001630 <main+0x4a4>
					  setColor(&htim4, TIM_CHANNEL_1, 128, 255, 0, ledcolors, ledbytes, 0);
 80015f6:	2300      	movs	r3, #0
 80015f8:	9303      	str	r3, [sp, #12]
 80015fa:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	2300      	movs	r3, #0
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	23ff      	movs	r3, #255	@ 0xff
 800160c:	2280      	movs	r2, #128	@ 0x80
 800160e:	2100      	movs	r1, #0
 8001610:	482f      	ldr	r0, [pc, #188]	@ (80016d0 <main+0x544>)
 8001612:	f000 f925 	bl	8001860 <setColor>
					  strncpy(result3, "7", 10);
 8001616:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800161a:	220a      	movs	r2, #10
 800161c:	4930      	ldr	r1, [pc, #192]	@ (80016e0 <main+0x554>)
 800161e:	4618      	mov	r0, r3
 8001620:	f00e f889 	bl	800f736 <strncpy>
					  setgeardata(result3);
 8001624:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001628:	4618      	mov	r0, r3
 800162a:	f002 f84d 	bl	80036c8 <setgeardata>
 800162e:	e042      	b.n	80016b6 <main+0x52a>
				  } else {
					  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001630:	2300      	movs	r3, #0
 8001632:	9303      	str	r3, [sp, #12]
 8001634:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	4821      	ldr	r0, [pc, #132]	@ (80016d0 <main+0x544>)
 800164c:	f000 f908 	bl	8001860 <setColor>
					  strncpy(result3, "8", 10);
 8001650:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001654:	220a      	movs	r2, #10
 8001656:	4923      	ldr	r1, [pc, #140]	@ (80016e4 <main+0x558>)
 8001658:	4618      	mov	r0, r3
 800165a:	f00e f86c 	bl	800f736 <strncpy>
					  setgeardata(result3);
 800165e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001662:	4618      	mov	r0, r3
 8001664:	f002 f830 	bl	80036c8 <setgeardata>
 8001668:	e025      	b.n	80016b6 <main+0x52a>
				  }
				  //USB_Println("the neutral light value is %d\n", neutrallight);
			  } else if (frame.can_id == 1520) {
 800166a:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800166e:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 8001678:	d11d      	bne.n	80016b6 <main+0x52a>
				  uint16_t speed = (uint16_t)((frame.data[0] << 8) | (frame.data[1]));
 800167a:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800167e:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800168c:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001690:	7a5b      	ldrb	r3, [r3, #9]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  itoa(speed, (char*) result5, 10);
 800169c:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 80016a0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80016a4:	220a      	movs	r2, #10
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00d feed 	bl	800f486 <itoa>
				  setspeeddata(result5);
 80016ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 f85f 	bl	8003774 <setspeeddata>
	  for (int i = 0; i < 10; i++) {
 80016b6:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 80016ba:	3301      	adds	r3, #1
 80016bc:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 80016c0:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	f77f ae5b 	ble.w	8001380 <main+0x1f4>
			  }
		  }
	  }

	  domainscreen();
 80016ca:	f002 f87d 	bl	80037c8 <domainscreen>
	  for (int i = 0; i < 10; i++) {
 80016ce:	e653      	b.n	8001378 <main+0x1ec>
 80016d0:	200002d4 	.word	0x200002d4
 80016d4:	cccccccd 	.word	0xcccccccd
 80016d8:	08010014 	.word	0x08010014
 80016dc:	08010018 	.word	0x08010018
 80016e0:	0801001c 	.word	0x0801001c
 80016e4:	08010020 	.word	0x08010020

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b094      	sub	sp, #80	@ 0x50
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	2230      	movs	r2, #48	@ 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00e f802 	bl	800f700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <SystemClock_Config+0xd0>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	4a28      	ldr	r2, [pc, #160]	@ (80017b8 <SystemClock_Config+0xd0>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6413      	str	r3, [r2, #64]	@ 0x40
 800171c:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <SystemClock_Config+0xd0>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <SystemClock_Config+0xd4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001734:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <SystemClock_Config+0xd4>)
 8001736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <SystemClock_Config+0xd4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001748:	2301      	movs	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800174c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2302      	movs	r3, #2
 8001754:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001756:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800175c:	2319      	movs	r3, #25
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001760:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001766:	2304      	movs	r3, #4
 8001768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800176a:	2307      	movs	r3, #7
 800176c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	4618      	mov	r0, r3
 8001774:	f005 f814 	bl	80067a0 <HAL_RCC_OscConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800177e:	f000 f81f 	bl	80017c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001782:	230f      	movs	r3, #15
 8001784:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001786:	2302      	movs	r3, #2
 8001788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800178e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2102      	movs	r1, #2
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 fa76 	bl	8006c90 <HAL_RCC_ClockConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017aa:	f000 f809 	bl	80017c0 <Error_Handler>
  }
}
 80017ae:	bf00      	nop
 80017b0:	3750      	adds	r7, #80	@ 0x50
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <Error_Handler+0x8>

080017cc <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	myMCP.reset();
 80017d0:	4806      	ldr	r0, [pc, #24]	@ (80017ec <initializeMCP2515+0x20>)
 80017d2:	f002 f965 	bl	8003aa0 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80017d6:	2202      	movs	r2, #2
 80017d8:	210e      	movs	r1, #14
 80017da:	4804      	ldr	r0, [pc, #16]	@ (80017ec <initializeMCP2515+0x20>)
 80017dc:	f002 fb32 	bl	8003e44 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <initializeMCP2515+0x20>)
 80017e2:	f002 fae3 	bl	8003dac <_ZN7MCP251513setNormalModeEv>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200001a8 	.word	0x200001a8

080017f0 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4804      	ldr	r0, [pc, #16]	@ (800180c <readMessage+0x1c>)
 80017fc:	f002 fe38 	bl	8004470 <_ZN7MCP251511readMessageEP9can_frame>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001a8 	.word	0x200001a8

08001810 <_Z41__static_initialization_and_destruction_0ii>:
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af02      	add	r7, sp, #8
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10c      	bne.n	800183a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001826:	4293      	cmp	r3, r2
 8001828:	d107      	bne.n	800183a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 800182a:	2310      	movs	r3, #16
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001830:	220a      	movs	r2, #10
 8001832:	4905      	ldr	r1, [pc, #20]	@ (8001848 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001836:	f002 f8d3 	bl	80039e0 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40020000 	.word	0x40020000
 8001848:	20000214 	.word	0x20000214
 800184c:	200001a8 	.word	0x200001a8

08001850 <_GLOBAL__sub_I_myMCP>:
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
 8001854:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff ffd9 	bl	8001810 <_Z41__static_initialization_and_destruction_0ii>
 800185e:	bd80      	pop	{r7, pc}

08001860 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	460b      	mov	r3, r1
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	4613      	mov	r3, r2
 8001874:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8001876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001884:	4413      	add	r3, r2
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	3301      	adds	r3, #1
 800188e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001890:	4413      	add	r3, r2
 8001892:	79ba      	ldrb	r2, [r7, #6]
 8001894:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3302      	adds	r3, #2
 800189a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800189c:	4413      	add	r3, r2
 800189e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018a2:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e02a      	b.n	8001900 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	e021      	b.n	80018f4 <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b4:	4413      	add	r3, r2
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	00da      	lsls	r2, r3, #3
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018d4:	4413      	add	r3, r2
 80018d6:	2246      	movs	r2, #70	@ 0x46
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	e008      	b.n	80018ee <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	00da      	lsls	r2, r3, #3
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	4413      	add	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018e8:	4413      	add	r3, r2
 80018ea:	2223      	movs	r2, #35	@ 0x23
 80018ec:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	ddda      	ble.n	80018b0 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	3302      	adds	r3, #2
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	429a      	cmp	r2, r3
 8001908:	ddcf      	ble.n	80018aa <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800190a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e008      	b.n	8001924 <setColor+0xc4>
    	ledbytes[i] = 0;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001918:	4413      	add	r3, r2
 800191a:	2200      	movs	r2, #0
 800191c:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f240 2215 	movw	r2, #533	@ 0x215
 800192a:	4293      	cmp	r3, r2
 800192c:	ddf1      	ble.n	8001912 <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 800192e:	f240 2316 	movw	r3, #534	@ 0x216
 8001932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f006 fb24 	bl	8007f84 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 800193c:	bf00      	nop
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <setColor+0xf4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0fb      	beq.n	800193e <setColor+0xde>
    datasentflag = 0;
 8001946:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <setColor+0xf4>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200001b8 	.word	0x200001b8

08001958 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e013      	b.n	8001994 <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3302      	adds	r3, #2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	22ff      	movs	r2, #255	@ 0xff
 800198c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3303      	adds	r3, #3
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b2f      	cmp	r3, #47	@ 0x2f
 8001998:	dde8      	ble.n	800196c <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e02a      	b.n	80019f6 <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e021      	b.n	80019ea <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	00da      	lsls	r2, r3, #3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	4413      	add	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	2246      	movs	r2, #70	@ 0x46
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	e008      	b.n	80019e4 <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	00da      	lsls	r2, r3, #3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4413      	add	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	2223      	movs	r2, #35	@ 0x23
 80019e2:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	ddda      	ble.n	80019a6 <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80019fa:	ddd1      	ble.n	80019a0 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80019fc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e008      	b.n	8001a16 <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	3301      	adds	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f240 2215 	movw	r2, #533	@ 0x215
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	ddf1      	ble.n	8001a04 <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001a20:	f240 2316 	movw	r3, #534	@ 0x216
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f006 faab 	bl	8007f84 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8001a2e:	bf00      	nop
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <shiftLightsInit+0xf4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0fb      	beq.n	8001a30 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <shiftLightsInit+0xf4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200001b8 	.word	0x200001b8

08001a50 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a5c:	f006 fc42 	bl	80082e4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200002d4 	.word	0x200002d4
 8001a74:	200001b8 	.word	0x200001b8

08001a78 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af04      	add	r7, sp, #16
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	dd06      	ble.n	8001a9e <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f8b6 	bl	8001c08 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001a9c:	e02a      	b.n	8001af4 <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e024      	b.n	8001aee <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001aaa:	3b02      	subs	r3, #2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6a3a      	ldr	r2, [r7, #32]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	db08      	blt.n	8001acc <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f819 	bl	8001afc <lightOn>
 8001aca:	e00d      	b.n	8001ae8 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	9303      	str	r3, [sp, #12]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f7ff febc 	bl	8001860 <setColor>
	for (int i = 2; i < 14; i++) {
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b0d      	cmp	r3, #13
 8001af2:	ddd7      	ble.n	8001aa4 <UpdateShiftLights+0x2c>
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b0d      	cmp	r3, #13
 8001b0e:	d140      	bne.n	8001b92 <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff ff1e 	bl	8001958 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	4834      	ldr	r0, [pc, #208]	@ (8001c04 <lightOn+0x108>)
 8001b34:	f7ff fe94 	bl	8001860 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9303      	str	r3, [sp, #12]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	482d      	ldr	r0, [pc, #180]	@ (8001c04 <lightOn+0x108>)
 8001b50:	f7ff fe86 	bl	8001860 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001b54:	230e      	movs	r3, #14
 8001b56:	9303      	str	r3, [sp, #12]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2300      	movs	r3, #0
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4826      	ldr	r0, [pc, #152]	@ (8001c04 <lightOn+0x108>)
 8001b6c:	f7ff fe78 	bl	8001860 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001b70:	230f      	movs	r3, #15
 8001b72:	9303      	str	r3, [sp, #12]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	481f      	ldr	r0, [pc, #124]	@ (8001c04 <lightOn+0x108>)
 8001b88:	f7ff fe6a 	bl	8001860 <setColor>
		HAL_Delay(5);
 8001b8c:	2005      	movs	r0, #5
 8001b8e:	f002 fd37 	bl	8004600 <HAL_Delay>
	}
	if (index < 6) {
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	dc0e      	bgt.n	8001bb6 <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	9303      	str	r3, [sp, #12]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	22ff      	movs	r2, #255	@ 0xff
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff fe56 	bl	8001860 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001bb4:	e022      	b.n	8001bfc <lightOn+0x100>
	} else if (index < 10) {
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	dc0e      	bgt.n	8001bda <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	9303      	str	r3, [sp, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	23ff      	movs	r3, #255	@ 0xff
 8001bce:	2200      	movs	r2, #0
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff fe44 	bl	8001860 <setColor>
}
 8001bd8:	e010      	b.n	8001bfc <lightOn+0x100>
	} else if (index < 14){
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b0d      	cmp	r3, #13
 8001bde:	dc0d      	bgt.n	8001bfc <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	23ff      	movs	r3, #255	@ 0xff
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff fe32 	bl	8001860 <setColor>
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200002d4 	.word	0x200002d4

08001c08 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	@ 0x30
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001c16:	2307      	movs	r3, #7
 8001c18:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e026      	b.n	8001c6e <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	9303      	str	r3, [sp, #12]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2300      	movs	r3, #0
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	23ff      	movs	r3, #255	@ 0xff
 8001c36:	2200      	movs	r2, #0
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fe10 	bl	8001860 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4413      	add	r3, r2
 8001c46:	3301      	adds	r3, #1
 8001c48:	9303      	str	r3, [sp, #12]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	23ff      	movs	r3, #255	@ 0xff
 8001c58:	2200      	movs	r2, #0
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff fdff 	bl	8001860 <setColor>
		HAL_Delay(20);
 8001c62:	2014      	movs	r0, #20
 8001c64:	f002 fccc 	bl	8004600 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	ddd5      	ble.n	8001c20 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	e026      	b.n	8001cc8 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	9303      	str	r3, [sp, #12]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2200      	movs	r2, #0
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fde3 	bl	8001860 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	9303      	str	r3, [sp, #12]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff fdd2 	bl	8001860 <setColor>
		HAL_Delay(20);
 8001cbc:	2014      	movs	r0, #20
 8001cbe:	f002 fc9f 	bl	8004600 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	ddd5      	ble.n	8001c7a <startUp+0x72>
	}
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001cde:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <MX_SPI1_Init+0x6c>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001ce4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ce8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d04:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d26:	220a      	movs	r2, #10
 8001d28:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d2c:	f005 f968 	bl	8007000 <HAL_SPI_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d36:	f7ff fd43 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200001bc 	.word	0x200001bc
 8001d44:	40013000 	.word	0x40013000

08001d48 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d4e:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <MX_SPI2_Init+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d52:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d94:	220a      	movs	r2, #10
 8001d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d9a:	f005 f931 	bl	8007000 <HAL_SPI_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001da4:	f7ff fd0c 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000214 	.word	0x20000214
 8001db0:	40003800 	.word	0x40003800

08001db4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	@ 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8001efc <HAL_SPI_MspInit+0x148>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d15c      	bne.n	8001e90 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	4b49      	ldr	r3, [pc, #292]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	4a48      	ldr	r2, [pc, #288]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001de0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de6:	4b46      	ldr	r3, [pc, #280]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	4b42      	ldr	r3, [pc, #264]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a41      	ldr	r2, [pc, #260]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e0e:	23a0      	movs	r3, #160	@ 0xa0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	4836      	ldr	r0, [pc, #216]	@ (8001f04 <HAL_SPI_MspInit+0x150>)
 8001e2a:	f003 f8b1 	bl	8004f90 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e2e:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e30:	4a36      	ldr	r2, [pc, #216]	@ (8001f0c <HAL_SPI_MspInit+0x158>)
 8001e32:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e34:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e36:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e3a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e3c:	4b32      	ldr	r3, [pc, #200]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e42:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e48:	4b2f      	ldr	r3, [pc, #188]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e50:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e58:	4b2b      	ldr	r3, [pc, #172]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e60:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e66:	4b28      	ldr	r3, [pc, #160]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6c:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e72:	4825      	ldr	r0, [pc, #148]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e74:	f002 fcfa 	bl	800486c <HAL_DMA_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001e7e:	f7ff fc9f 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a20      	ldr	r2, [pc, #128]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e86:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e88:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e8e:	e031      	b.n	8001ef4 <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_SPI_MspInit+0x15c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d12c      	bne.n	8001ef4 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001ed2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4809      	ldr	r0, [pc, #36]	@ (8001f14 <HAL_SPI_MspInit+0x160>)
 8001ef0:	f003 f84e 	bl	8004f90 <HAL_GPIO_Init>
}
 8001ef4:	bf00      	nop
 8001ef6:	3730      	adds	r7, #48	@ 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013000 	.word	0x40013000
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	2000026c 	.word	0x2000026c
 8001f0c:	40026458 	.word	0x40026458
 8001f10:	40003800 	.word	0x40003800
 8001f14:	40020400 	.word	0x40020400

08001f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	4a0f      	ldr	r2, [pc, #60]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <SDTimer_Handler+0x40>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <SDTimer_Handler+0x1c>
    Timer1--;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <SDTimer_Handler+0x40>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <SDTimer_Handler+0x40>)
 8001f82:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <SDTimer_Handler+0x44>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <SDTimer_Handler+0x34>
    Timer2--;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <SDTimer_Handler+0x44>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <SDTimer_Handler+0x44>)
 8001f9a:	801a      	strh	r2, [r3, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200001a0 	.word	0x200001a0
 8001fac:	200001a2 	.word	0x200001a2

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002008:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <SysTick_Handler+0x30>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <SysTick_Handler+0x30>)
 8002014:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <SysTick_Handler+0x30>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b09      	cmp	r3, #9
 800201e:	d904      	bls.n	800202a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002020:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <SysTick_Handler+0x30>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002026:	f7ff ff9f 	bl	8001f68 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202a:	f002 fac9 	bl	80045c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200002cc 	.word	0x200002cc

08002038 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <DMA1_Stream0_IRQHandler+0x10>)
 800203e:	f002 fd3d 	bl	8004abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000031c 	.word	0x2000031c

0800204c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 8002050:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002054:	f003 f93a 	bl	80052cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 8002058:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800205c:	f003 f936 	bl	80052cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 8002068:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800206c:	f003 f92e 	bl	80052cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 8002070:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002074:	f003 f92a 	bl	80052cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA2_Stream3_IRQHandler+0x10>)
 8002082:	f002 fd1b 	bl	8004abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000026c 	.word	0x2000026c

08002090 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <OTG_FS_IRQHandler+0x10>)
 8002096:	f003 fa75 	bl	8005584 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20001120 	.word	0x20001120

080020a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_kill>:

int _kill(int pid, int sig)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020be:	f00d fba1 	bl	800f804 <__errno>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2216      	movs	r2, #22
 80020c6:	601a      	str	r2, [r3, #0]
  return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffe7 	bl	80020b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e6:	bf00      	nop
 80020e8:	e7fd      	b.n	80020e6 <_exit+0x12>
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	@ (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f00d fb72 	bl	800f804 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20010000 	.word	0x20010000
 800214c:	00000400 	.word	0x00000400
 8002150:	200002d0 	.word	0x200002d0
 8002154:	20001970 	.word	0x20001970

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	@ 0x38
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <MX_TIM4_Init+0xe8>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 80021be:	4b28      	ldr	r3, [pc, #160]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021c0:	2269      	movs	r2, #105	@ 0x69
 80021c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021d0:	4823      	ldr	r0, [pc, #140]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021d2:	f005 fe2f 	bl	8007e34 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80021dc:	f7ff faf0 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ea:	4619      	mov	r1, r3
 80021ec:	481c      	ldr	r0, [pc, #112]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021ee:	f006 fa01 	bl	80085f4 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80021f8:	f7ff fae2 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021fc:	4818      	ldr	r0, [pc, #96]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021fe:	f005 fe68 	bl	8007ed2 <HAL_TIM_PWM_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002208:	f7ff fada 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002214:	f107 0320 	add.w	r3, r7, #32
 8002218:	4619      	mov	r1, r3
 800221a:	4811      	ldr	r0, [pc, #68]	@ (8002260 <MX_TIM4_Init+0xe4>)
 800221c:	f006 fe6e 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002226:	f7ff facb 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222a:	2360      	movs	r3, #96	@ 0x60
 800222c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	@ (8002260 <MX_TIM4_Init+0xe4>)
 8002242:	f006 f915 	bl	8008470 <HAL_TIM_PWM_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800224c:	f7ff fab8 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002250:	4803      	ldr	r0, [pc, #12]	@ (8002260 <MX_TIM4_Init+0xe4>)
 8002252:	f000 f85d 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8002256:	bf00      	nop
 8002258:	3738      	adds	r7, #56	@ 0x38
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200002d4 	.word	0x200002d4
 8002264:	40000800 	.word	0x40000800

08002268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a22      	ldr	r2, [pc, #136]	@ (8002300 <HAL_TIM_Base_MspInit+0x98>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d13d      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <HAL_TIM_Base_MspInit+0x9c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <HAL_TIM_Base_MspInit+0x9c>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6413      	str	r3, [r2, #64]	@ 0x40
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_TIM_Base_MspInit+0x9c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 8002298:	4a1c      	ldr	r2, [pc, #112]	@ (800230c <HAL_TIM_Base_MspInit+0xa4>)
 800229a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 800229e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022a2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a4:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022b0:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022be:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80022da:	480b      	ldr	r0, [pc, #44]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022dc:	f002 fac6 	bl	800486c <HAL_DMA_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80022e6:	f7ff fa6b 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a06      	ldr	r2, [pc, #24]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80022f0:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40000800 	.word	0x40000800
 8002304:	40023800 	.word	0x40023800
 8002308:	2000031c 	.word	0x2000031c
 800230c:	40026010 	.word	0x40026010

08002310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_TIM_MspPostInit+0x68>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11d      	bne.n	800236e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800234e:	2340      	movs	r3, #64	@ 0x40
 8002350:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800235e:	2302      	movs	r3, #2
 8002360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	@ (8002380 <HAL_TIM_MspPostInit+0x70>)
 800236a:	f002 fe11 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40000800 	.word	0x40000800
 800237c:	40023800 	.word	0x40023800
 8002380:	40020400 	.word	0x40020400

08002384 <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 8002384:	b40f      	push	{r0, r1, r2, r3}
 8002386:	b580      	push	{r7, lr}
 8002388:	b0a2      	sub	sp, #136	@ 0x88
 800238a:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 800238c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002390:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002392:	f107 0008 	add.w	r0, r7, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800239c:	2180      	movs	r1, #128	@ 0x80
 800239e:	f00d f9a1 	bl	800f6e4 <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fd ff1a 	bl	80001e0 <strlen>
 80023ac:	4603      	mov	r3, r0
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00c fbd6 	bl	800eb68 <CDC_Transmit_FS>
}
 80023bc:	bf00      	nop
 80023be:	3788      	adds	r7, #136	@ 0x88
 80023c0:	46bd      	mov	sp, r7
 80023c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023c6:	b004      	add	sp, #16
 80023c8:	4770      	bx	lr
	...

080023cc <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <transmitdma+0x28>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f005 fa9a 	bl	8007920 <HAL_SPI_Transmit_DMA>
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2000037c 	.word	0x2000037c

080023f8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a05      	ldr	r2, [pc, #20]	@ (800241c <HAL_SPI_TxCpltCallback+0x24>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d102      	bne.n	8002410 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_SPI_TxCpltCallback+0x28>)
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
	}
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40013000 	.word	0x40013000
 8002420:	2000037c 	.word	0x2000037c

08002424 <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	461a      	mov	r2, r3
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f805 	bl	8002448 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e014      	b.n	800249e <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4413      	add	r3, r2
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f9da 	bl	8002838 <_ZN13DisplayObject11getpriorityEv>
 8002484:	4603      	mov	r3, r0
 8002486:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	799b      	ldrb	r3, [r3, #6]
 800248c:	7cfa      	ldrb	r2, [r7, #19]
 800248e:	429a      	cmp	r2, r3
 8002490:	d902      	bls.n	8002498 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	7cfa      	ldrb	r2, [r7, #19]
 8002496:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbe6      	blt.n	8002474 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024be:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024c2:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 80024c4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024c8:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	795b      	ldrb	r3, [r3, #5]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 813e 	beq.w	8002752 <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 80024d6:	f240 133f 	movw	r3, #319	@ 0x13f
 80024da:	f240 12df 	movw	r2, #479	@ 0x1df
 80024de:	2100      	movs	r1, #0
 80024e0:	2000      	movs	r0, #0
 80024e2:	f000 fca8 	bl	8002e36 <modifySpace>
		startCommand(WRITE_COMMAND);
 80024e6:	202c      	movs	r0, #44	@ 0x2c
 80024e8:	f000 fbb2 	bl	8002c50 <startCommand>
		dataOrRegister(1);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 fb6d 	bl	8002bcc <dataOrRegister>
		uint8_t anychanges = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024f8:	f102 021f 	add.w	r2, r2, #31
 80024fc:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80024fe:	2300      	movs	r3, #0
 8002500:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002504:	f102 0218 	add.w	r2, r2, #24
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e028      	b.n	800255e <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 800250c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002510:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800251c:	f103 0318 	add.w	r3, r3, #24
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f9a0 	bl	800286e <_ZN13DisplayObject13getChangeFlagEv>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002536:	f103 031f 	add.w	r3, r3, #31
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4413      	add	r3, r2
 800253e:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002542:	f102 021f 	add.w	r2, r2, #31
 8002546:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002548:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800254c:	f103 0318 	add.w	r3, r3, #24
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002558:	f102 0218 	add.w	r2, r2, #24
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002562:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	791b      	ldrb	r3, [r3, #4]
 800256a:	461a      	mov	r2, r3
 800256c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002570:	f103 0318 	add.w	r3, r3, #24
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4293      	cmp	r3, r2
 8002578:	dbc8      	blt.n	800250c <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 800257a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800257e:	f103 031f 	add.w	r3, r3, #31
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80ec 	beq.w	8002762 <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 800258a:	2300      	movs	r3, #0
 800258c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002590:	f102 0214 	add.w	r2, r2, #20
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e0d2      	b.n	800273e <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 8002598:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800259c:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 80025a0:	4618      	mov	r0, r3
 80025a2:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80025a6:	461a      	mov	r2, r3
 80025a8:	2100      	movs	r1, #0
 80025aa:	f00d f8a9 	bl	800f700 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 80025ae:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025b2:	f103 0314 	add.w	r3, r3, #20
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025c4:	f102 0208 	add.w	r2, r2, #8
 80025c8:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 80025ca:	2300      	movs	r3, #0
 80025cc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025d0:	f102 0210 	add.w	r2, r2, #16
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e084      	b.n	80026e2 <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 80025d8:	2300      	movs	r3, #0
 80025da:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025de:	f102 020c 	add.w	r2, r2, #12
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	e064      	b.n	80026b0 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 80025e6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025ea:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025f6:	f103 030c 	add.w	r3, r3, #12
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f918 	bl	8002838 <_ZN13DisplayObject11getpriorityEv>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002610:	f103 0310 	add.w	r3, r3, #16
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4293      	cmp	r3, r2
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03a      	beq.n	800269a <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 8002624:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002628:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002634:	f103 030c 	add.w	r3, r3, #12
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002644:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002650:	f103 030c 	add.w	r3, r3, #12
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3308      	adds	r3, #8
 8002660:	681c      	ldr	r4, [r3, #0]
 8002662:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002666:	f103 0308 	add.w	r3, r3, #8
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	f107 0120 	add.w	r1, r7, #32
 8002672:	3918      	subs	r1, #24
 8002674:	2250      	movs	r2, #80	@ 0x50
 8002676:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 8002678:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800267c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002688:	f103 030c 	add.w	r3, r3, #12
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f87f 	bl	8002798 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 800269a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800269e:	f103 030c 	add.w	r3, r3, #12
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026aa:	f102 020c 	add.w	r2, r2, #12
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026b4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	461a      	mov	r2, r3
 80026be:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026c2:	f103 030c 	add.w	r3, r3, #12
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4293      	cmp	r3, r2
 80026ca:	db8c      	blt.n	80025e6 <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 80026cc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026d0:	f103 0310 	add.w	r3, r3, #16
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026dc:	f102 0210 	add.w	r2, r2, #16
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026e6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	799b      	ldrb	r3, [r3, #6]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026f4:	f103 0310 	add.w	r3, r3, #16
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	f77f af6c 	ble.w	80025d8 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	3b18      	subs	r3, #24
 8002706:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800270a:	4619      	mov	r1, r3
 800270c:	4818      	ldr	r0, [pc, #96]	@ (8002770 <_ZN5Scene9drawSceneEv+0x2c0>)
 800270e:	f7ff fe5d 	bl	80023cc <transmitdma>
			while(!spidatasentflag) {}
 8002712:	bf00      	nop
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <_ZN5Scene9drawSceneEv+0x2c4>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f5      	bne.n	8002714 <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002728:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800272c:	f103 0314 	add.w	r3, r3, #20
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002738:	f102 0214 	add.w	r2, r2, #20
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002742:	f103 0314 	add.w	r3, r3, #20
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b05      	cmp	r3, #5
 800274a:	f77f af25 	ble.w	8002598 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 800274e:	f000 fa95 	bl	8002c7c <endCommand>
	}
	this->changed = 0;
 8002752:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002756:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	715a      	strb	r2, [r3, #5]
 8002760:	e000      	b.n	8002764 <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 8002762:	bf00      	nop
}
 8002764:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	200001bc 	.word	0x200001bc
 8002774:	2000037c 	.word	0x2000037c

08002778 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <_ZN13DisplayObjectD1Ev+0x1c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	080101e8 	.word	0x080101e8

08002798 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	715a      	strb	r2, [r3, #5]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	715a      	strb	r2, [r3, #5]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	return this->xpos;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	88db      	ldrh	r3, [r3, #6]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	80da      	strh	r2, [r3, #6]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
	return this->ypos;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	891b      	ldrh	r3, [r3, #8]
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	887a      	ldrh	r2, [r7, #2]
 800282a:	811a      	strh	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	return this->priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	791b      	ldrb	r3, [r3, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	711a      	strb	r2, [r3, #4]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
	return this->changed;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	795b      	ldrb	r3, [r3, #5]
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <_ZN13DisplayObjectC1Ev+0x1c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	080101e8 	.word	0x080101e8

080028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	460b      	mov	r3, r1
 80028bc:	813b      	strh	r3, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ffdf 	bl	8002888 <_ZN13DisplayObjectC1Ev>
 80028ca:	4a15      	ldr	r2, [pc, #84]	@ (8002920 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a3a      	ldr	r2, [r7, #32]
 80028d4:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	897a      	ldrh	r2, [r7, #10]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff81 	bl	80027e4 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	893a      	ldrh	r2, [r7, #8]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff96 	bl	800281a <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7f3a      	ldrb	r2, [r7, #28]
 80028f8:	751a      	strb	r2, [r3, #20]
	this->font = font;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ffa1 	bl	8002850 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff4e 	bl	80027b2 <_ZN13DisplayObject12redrawObjectEv>
}
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	080101d4 	.word	0x080101d4

08002924 <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002928:	b08a      	sub	sp, #40	@ 0x28
 800292a:	af06      	add	r7, sp, #24
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	4611      	mov	r1, r2
 8002932:	461a      	mov	r2, r3
 8002934:	460b      	mov	r3, r1
 8002936:	80fb      	strh	r3, [r7, #6]
 8002938:	4613      	mov	r3, r2
 800293a:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	68dc      	ldr	r4, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691d      	ldr	r5, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	895e      	ldrh	r6, [r3, #10]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ff3e 	bl	80027cc <_ZN13DisplayObject7getxposEv>
 8002950:	4603      	mov	r3, r0
 8002952:	4698      	mov	r8, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff53 	bl	8002802 <_ZN13DisplayObject7getyposEv>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	7d1b      	ldrb	r3, [r3, #20]
 8002964:	88ba      	ldrh	r2, [r7, #4]
 8002966:	9204      	str	r2, [sp, #16]
 8002968:	88fa      	ldrh	r2, [r7, #6]
 800296a:	9203      	str	r2, [sp, #12]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	9202      	str	r2, [sp, #8]
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	9100      	str	r1, [sp, #0]
 8002974:	4643      	mov	r3, r8
 8002976:	4632      	mov	r2, r6
 8002978:	4629      	mov	r1, r5
 800297a:	4620      	mov	r0, r4
 800297c:	f000 fc70 	bl	8003260 <drawStringIntoFramebuffer>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	460b      	mov	r3, r1
 800299c:	71fb      	strb	r3, [r7, #7]
 800299e:	4613      	mov	r3, r2
 80029a0:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88ba      	ldrh	r2, [r7, #4]
 80029b2:	815a      	strh	r2, [r3, #10]
	this->font = font;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8bba      	ldrh	r2, [r7, #28]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff0f 	bl	80027e4 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8c3a      	ldrh	r2, [r7, #32]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff24 	bl	800281a <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff38 	bl	8002850 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fee5 	bl	80027b2 <_ZN13DisplayObject12redrawObjectEv>
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af04      	add	r7, sp, #16
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	460b      	mov	r3, r1
 8002a00:	80fb      	strh	r3, [r7, #6]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80bb      	strh	r3, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff3d 	bl	8002888 <_ZN13DisplayObjectC1Ev>
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a40 <_ZN11ImageObjectC1EPctttthh+0x50>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8002a14:	88b9      	ldrh	r1, [r7, #4]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002a1c:	9303      	str	r3, [sp, #12]
 8002a1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a22:	9302      	str	r3, [sp, #8]
 8002a24:	8bbb      	ldrh	r3, [r7, #28]
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	8b3b      	ldrh	r3, [r7, #24]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f83b 	bl	8002aac <_ZN11ImageObject11updateImageEPctttthh>
}
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	080101c0 	.word	0x080101c0

08002a44 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a48:	b08a      	sub	sp, #40	@ 0x28
 8002a4a:	af06      	add	r7, sp, #24
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	4611      	mov	r1, r2
 8002a52:	461a      	mov	r2, r3
 8002a54:	460b      	mov	r3, r1
 8002a56:	80fb      	strh	r3, [r7, #6]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	691c      	ldr	r4, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	895d      	ldrh	r5, [r3, #10]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	899e      	ldrh	r6, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff feae 	bl	80027cc <_ZN13DisplayObject7getxposEv>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4698      	mov	r8, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fec3 	bl	8002802 <_ZN13DisplayObject7getyposEv>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4619      	mov	r1, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	7b9b      	ldrb	r3, [r3, #14]
 8002a84:	88ba      	ldrh	r2, [r7, #4]
 8002a86:	9204      	str	r2, [sp, #16]
 8002a88:	88fa      	ldrh	r2, [r7, #6]
 8002a8a:	9203      	str	r2, [sp, #12]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	9202      	str	r2, [sp, #8]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	9100      	str	r1, [sp, #0]
 8002a94:	4643      	mov	r3, r8
 8002a96:	4632      	mov	r2, r6
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f000 fc58 	bl	8003350 <drawImageIntoFramebuffer>
	return 0;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002aac <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	460b      	mov	r3, r1
 8002abc:	80fb      	strh	r3, [r7, #6]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8b3a      	ldrh	r2, [r7, #24]
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fe8b 	bl	80027e4 <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8bba      	ldrh	r2, [r7, #28]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fea0 	bl	800281a <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	88ba      	ldrh	r2, [r7, #4]
 8002aea:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002af2:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fea7 	bl	8002850 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fe54 	bl	80027b2 <_ZN13DisplayObject12redrawObjectEv>
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	4a05      	ldr	r2, [pc, #20]	@ (8002b34 <_ZN11ImageObjectD1Ev+0x20>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fe27 	bl	8002778 <_ZN13DisplayObjectD1Ev>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	080101c0 	.word	0x080101c0

08002b38 <_ZN11ImageObjectD0Ev>:
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ffe7 	bl	8002b14 <_ZN11ImageObjectD1Ev>
 8002b46:	2114      	movs	r1, #20
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f00c fc5f 	bl	800f40c <_ZdlPvj>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <_ZN12StringObjectD1Ev+0x20>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fe05 	bl	8002778 <_ZN13DisplayObjectD1Ev>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	080101d4 	.word	0x080101d4

08002b7c <_ZN12StringObjectD0Ev>:
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ffe7 	bl	8002b58 <_ZN12StringObjectD1Ev>
 8002b8a:	2118      	movs	r1, #24
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f00c fc3d 	bl	800f40c <_ZdlPvj>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2108      	movs	r1, #8
 8002ba4:	4802      	ldr	r0, [pc, #8]	@ (8002bb0 <startTransaction+0x14>)
 8002ba6:	f002 fb77 	bl	8005298 <HAL_GPIO_WritePin>
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40020400 	.word	0x40020400

08002bb4 <endTransaction>:

void endTransaction() {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	2108      	movs	r1, #8
 8002bbc:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <endTransaction+0x14>)
 8002bbe:	f002 fb6b 	bl	8005298 <HAL_GPIO_WritePin>
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40020400 	.word	0x40020400

08002bcc <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002bdc:	2201      	movs	r2, #1
 8002bde:	2110      	movs	r1, #16
 8002be0:	4806      	ldr	r0, [pc, #24]	@ (8002bfc <dataOrRegister+0x30>)
 8002be2:	f002 fb59 	bl	8005298 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002be6:	e004      	b.n	8002bf2 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2110      	movs	r1, #16
 8002bec:	4803      	ldr	r0, [pc, #12]	@ (8002bfc <dataOrRegister+0x30>)
 8002bee:	f002 fb53 	bl	8005298 <HAL_GPIO_WritePin>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40020400 	.word	0x40020400

08002c00 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002c0e:	f7ff ffc5 	bl	8002b9c <startTransaction>

	dataOrRegister(0);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7ff ffda 	bl	8002bcc <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002c18:	f107 010e 	add.w	r1, r7, #14
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	2201      	movs	r2, #1
 8002c20:	480a      	ldr	r0, [pc, #40]	@ (8002c4c <commandAndData+0x4c>)
 8002c22:	f004 fa76 	bl	8007112 <HAL_SPI_Transmit>

	if (size) {
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <commandAndData+0x40>
		dataOrRegister(1);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7ff ffcd 	bl	8002bcc <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	230a      	movs	r3, #10
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	4804      	ldr	r0, [pc, #16]	@ (8002c4c <commandAndData+0x4c>)
 8002c3c:	f004 fa69 	bl	8007112 <HAL_SPI_Transmit>
	}

	endTransaction();
 8002c40:	f7ff ffb8 	bl	8002bb4 <endTransaction>
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	200001bc 	.word	0x200001bc

08002c50 <startCommand>:

void startCommand(uint16_t command) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002c5a:	f7ff ff9f 	bl	8002b9c <startTransaction>
	dataOrRegister(0);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7ff ffb4 	bl	8002bcc <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002c64:	1db9      	adds	r1, r7, #6
 8002c66:	230a      	movs	r3, #10
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4803      	ldr	r0, [pc, #12]	@ (8002c78 <startCommand+0x28>)
 8002c6c:	f004 fa51 	bl	8007112 <HAL_SPI_Transmit>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200001bc 	.word	0x200001bc

08002c7c <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	endTransaction();
 8002c80:	f7ff ff98 	bl	8002bb4 <endTransaction>
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <resetScreen>:

void resetScreen() {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2120      	movs	r1, #32
 8002c90:	480b      	ldr	r0, [pc, #44]	@ (8002cc0 <resetScreen+0x38>)
 8002c92:	f002 fb01 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002c96:	2014      	movs	r0, #20
 8002c98:	f001 fcb2 	bl	8004600 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2120      	movs	r1, #32
 8002ca0:	4807      	ldr	r0, [pc, #28]	@ (8002cc0 <resetScreen+0x38>)
 8002ca2:	f002 faf9 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002ca6:	2014      	movs	r0, #20
 8002ca8:	f001 fcaa 	bl	8004600 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002cac:	2201      	movs	r2, #1
 8002cae:	2120      	movs	r1, #32
 8002cb0:	4803      	ldr	r0, [pc, #12]	@ (8002cc0 <resetScreen+0x38>)
 8002cb2:	f002 faf1 	bl	8005298 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cb6:	2064      	movs	r0, #100	@ 0x64
 8002cb8:	f001 fca2 	bl	8004600 <HAL_Delay>
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40020400 	.word	0x40020400

08002cc4 <initializeScreen>:

void initializeScreen() {
 8002cc4:	b5b0      	push	{r4, r5, r7, lr}
 8002cc6:	b09c      	sub	sp, #112	@ 0x70
 8002cc8:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f7ff ff96 	bl	8002c00 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	2011      	movs	r0, #17
 8002cda:	f7ff ff91 	bl	8002c00 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002cde:	2355      	movs	r3, #85	@ 0x55
 8002ce0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002ce4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002ce8:	2202      	movs	r2, #2
 8002cea:	4619      	mov	r1, r3
 8002cec:	203a      	movs	r0, #58	@ 0x3a
 8002cee:	f7ff ff87 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002cf2:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <initializeScreen+0x14c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002cf8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	20c0      	movs	r0, #192	@ 0xc0
 8002d02:	f7ff ff7d 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002d06:	2345      	movs	r3, #69	@ 0x45
 8002d08:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002d12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d16:	2204      	movs	r2, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	20c1      	movs	r0, #193	@ 0xc1
 8002d1c:	f7ff ff70 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002d20:	2333      	movs	r3, #51	@ 0x33
 8002d22:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002d26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	20c2      	movs	r0, #194	@ 0xc2
 8002d30:	f7ff ff66 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002d3a:	2328      	movs	r3, #40	@ 0x28
 8002d3c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002d40:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002d44:	2204      	movs	r2, #4
 8002d46:	4619      	mov	r1, r3
 8002d48:	20c5      	movs	r0, #197	@ 0xc5
 8002d4a:	f7ff ff59 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002d4e:	4b31      	ldr	r3, [pc, #196]	@ (8002e14 <initializeScreen+0x150>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002d54:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d58:	2204      	movs	r2, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	20b1      	movs	r0, #177	@ 0xb1
 8002d5e:	f7ff ff4f 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002d62:	2302      	movs	r3, #2
 8002d64:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002d68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	20b4      	movs	r0, #180	@ 0xb4
 8002d72:	f7ff ff45 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002d76:	4a28      	ldr	r2, [pc, #160]	@ (8002e18 <initializeScreen+0x154>)
 8002d78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d80:	6018      	str	r0, [r3, #0]
 8002d82:	3304      	adds	r3, #4
 8002d84:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002d86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d8a:	2206      	movs	r2, #6
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	20b6      	movs	r0, #182	@ 0xb6
 8002d90:	f7ff ff36 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002d94:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <initializeScreen+0x158>)
 8002d96:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002d9a:	461d      	mov	r5, r3
 8002d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002da0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002da4:	c407      	stmia	r4!, {r0, r1, r2}
 8002da6:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dac:	221e      	movs	r2, #30
 8002dae:	4619      	mov	r1, r3
 8002db0:	20e0      	movs	r0, #224	@ 0xe0
 8002db2:	f7ff ff25 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002db6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <initializeScreen+0x15c>)
 8002db8:	f107 040c 	add.w	r4, r7, #12
 8002dbc:	461d      	mov	r5, r3
 8002dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002dc6:	c407      	stmia	r4!, {r0, r1, r2}
 8002dc8:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	221e      	movs	r2, #30
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	20e1      	movs	r0, #225	@ 0xe1
 8002dd4:	f7ff ff14 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002dd8:	2300      	movs	r3, #0
 8002dda:	813b      	strh	r3, [r7, #8]
 8002ddc:	2322      	movs	r3, #34	@ 0x22
 8002dde:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002de0:	f107 0308 	add.w	r3, r7, #8
 8002de4:	2204      	movs	r2, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	20b6      	movs	r0, #182	@ 0xb6
 8002dea:	f7ff ff09 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002dee:	2308      	movs	r3, #8
 8002df0:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2202      	movs	r2, #2
 8002df6:	4619      	mov	r1, r3
 8002df8:	2036      	movs	r0, #54	@ 0x36
 8002dfa:	f7ff ff01 	bl	8002c00 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f000 f85a 	bl	8002eb8 <clearScreenfast>
	displayOn();
 8002e04:	f000 f80e 	bl	8002e24 <displayOn>
}
 8002e08:	bf00      	nop
 8002e0a:	3770      	adds	r7, #112	@ 0x70
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e10:	08010068 	.word	0x08010068
 8002e14:	0801006c 	.word	0x0801006c
 8002e18:	08010070 	.word	0x08010070
 8002e1c:	08010078 	.word	0x08010078
 8002e20:	08010098 	.word	0x08010098

08002e24 <displayOn>:

void displayOn() {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2029      	movs	r0, #41	@ 0x29
 8002e2e:	f7ff fee7 	bl	8002c00 <commandAndData>
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002e36:	b590      	push	{r4, r7, lr}
 8002e38:	b087      	sub	sp, #28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	4608      	mov	r0, r1
 8002e40:	4611      	mov	r1, r2
 8002e42:	461a      	mov	r2, r3
 8002e44:	4623      	mov	r3, r4
 8002e46:	80fb      	strh	r3, [r7, #6]
 8002e48:	4603      	mov	r3, r0
 8002e4a:	80bb      	strh	r3, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002e54:	88bb      	ldrh	r3, [r7, #4]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	823b      	strh	r3, [r7, #16]
 8002e5c:	88bb      	ldrh	r3, [r7, #4]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	827b      	strh	r3, [r7, #18]
 8002e64:	883b      	ldrh	r3, [r7, #0]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	82bb      	strh	r3, [r7, #20]
 8002e6c:	883b      	ldrh	r3, [r7, #0]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	2208      	movs	r2, #8
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	202a      	movs	r0, #42	@ 0x2a
 8002e7e:	f7ff febf 	bl	8002c00 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	813b      	strh	r3, [r7, #8]
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	817b      	strh	r3, [r7, #10]
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	81bb      	strh	r3, [r7, #12]
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8002ea2:	f107 0308 	add.w	r3, r7, #8
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	202b      	movs	r0, #43	@ 0x2b
 8002eac:	f7ff fea8 	bl	8002c00 <commandAndData>
	}
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd90      	pop	{r4, r7, pc}

08002eb8 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002ec8:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8002ecc:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ed4:	f102 020c 	add.w	r2, r2, #12
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e01a      	b.n	8002f12 <clearScreenfast+0x5a>
		buffer1[i] = color;
 8002edc:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002ee0:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8002ee4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ee8:	f102 020c 	add.w	r2, r2, #12
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8002ef2:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 8002ef6:	8809      	ldrh	r1, [r1, #0]
 8002ef8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002efc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002f00:	f103 030c 	add.w	r3, r3, #12
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002f0c:	f102 020c 	add.w	r2, r2, #12
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002f16:	f103 030c 	add.w	r3, r3, #12
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8002f20:	dbdc      	blt.n	8002edc <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 8002f22:	f240 133f 	movw	r3, #319	@ 0x13f
 8002f26:	f240 12df 	movw	r2, #479	@ 0x1df
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7ff ff82 	bl	8002e36 <modifySpace>
	startCommand(0x2C);
 8002f32:	202c      	movs	r0, #44	@ 0x2c
 8002f34:	f7ff fe8c 	bl	8002c50 <startCommand>
	dataOrRegister(1);
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f7ff fe47 	bl	8002bcc <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002f44:	f102 0208 	add.w	r2, r2, #8
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e019      	b.n	8002f80 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	3b08      	subs	r3, #8
 8002f52:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002f56:	4619      	mov	r1, r3
 8002f58:	4811      	ldr	r0, [pc, #68]	@ (8002fa0 <clearScreenfast+0xe8>)
 8002f5a:	f7ff fa37 	bl	80023cc <transmitdma>
		while (!spidatasentflag) {}
 8002f5e:	bf00      	nop
 8002f60:	4b10      	ldr	r3, [pc, #64]	@ (8002fa4 <clearScreenfast+0xec>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0fa      	beq.n	8002f60 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002f6a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002f6e:	f103 0308 	add.w	r3, r3, #8
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002f7a:	f102 0208 	add.w	r2, r2, #8
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002f84:	f103 0308 	add.w	r3, r3, #8
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	ddde      	ble.n	8002f4c <clearScreenfast+0x94>
	}
	endCommand();
 8002f8e:	f7ff fe75 	bl	8002c7c <endCommand>
}
 8002f92:	bf00      	nop
 8002f94:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200001bc 	.word	0x200001bc
 8002fa4:	2000037c 	.word	0x2000037c

08002fa8 <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	80fb      	strh	r3, [r7, #6]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	88bb      	ldrh	r3, [r7, #4]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	801a      	strh	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8002fee:	b480      	push	{r7}
 8002ff0:	b089      	sub	sp, #36	@ 0x24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003004:	e015      	b.n	8003032 <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	4619      	mov	r1, r3
 8003010:	460b      	mov	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800301c:	4413      	add	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	791b      	ldrb	r3, [r3, #4]
 8003024:	461a      	mov	r2, r3
 8003026:	8b7b      	ldrh	r3, [r7, #26]
 8003028:	4413      	add	r3, r2
 800302a:	837b      	strh	r3, [r7, #26]
		currentletter++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e5      	bne.n	8003006 <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	8b7b      	ldrh	r3, [r7, #26]
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 800304c:	bf00      	nop
 800304e:	3724      	adds	r7, #36	@ 0x24
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	@ 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 800306e:	e015      	b.n	800309c <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	460b      	mov	r3, r1
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003086:	4413      	add	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	791b      	ldrb	r3, [r3, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	8b7b      	ldrh	r3, [r7, #26]
 8003092:	4413      	add	r3, r2
 8003094:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e5      	bne.n	8003070 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	881a      	ldrh	r2, [r3, #0]
 80030a8:	8b7b      	ldrh	r3, [r7, #26]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 80030b2:	bf00      	nop
 80030b4:	3724      	adds	r7, #36	@ 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <getCharXadv>:
	}

	return (uint16_t)xadv;
}

uint16_t getCharXadv(char letter, const GFXfont *font) {
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	6039      	str	r1, [r7, #0]
 80030c8:	71fb      	strb	r3, [r7, #7]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	79fa      	ldrb	r2, [r7, #7]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030dc:	440b      	add	r3, r1
 80030de:	60fb      	str	r3, [r7, #12]
	return toDraw->xAdvance;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	791b      	ldrb	r3, [r3, #4]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <drawCharIntoFramebuffer>:

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80030f0:	b480      	push	{r7}
 80030f2:	b08d      	sub	sp, #52	@ 0x34
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	4611      	mov	r1, r2
 80030fa:	461a      	mov	r2, r3
 80030fc:	4603      	mov	r3, r0
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	460b      	mov	r3, r1
 8003102:	81bb      	strh	r3, [r7, #12]
 8003104:	4613      	mov	r3, r2
 8003106:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800311a:	440b      	add	r3, r1
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	789b      	ldrb	r3, [r3, #2]
 8003122:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	78db      	ldrb	r3, [r3, #3]
 8003128:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003138:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	791b      	ldrb	r3, [r3, #4]
 800313e:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 8003158:	2300      	movs	r3, #0
 800315a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800315c:	e071      	b.n	8003242 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 800315e:	2300      	movs	r3, #0
 8003160:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003162:	e062      	b.n	800322a <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 8003164:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 8003176:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 800317c:	461a      	mov	r2, r3
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4413      	add	r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 8003188:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800318c:	2b00      	cmp	r3, #0
 800318e:	da41      	bge.n	8003214 <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 8003190:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003194:	b29a      	uxth	r2, r3
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	4413      	add	r3, r2
 800319a:	b29a      	uxth	r2, r3
 800319c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 80031ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80031ae:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 80031be:	8afa      	ldrh	r2, [r7, #22]
 80031c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80031c4:	429a      	cmp	r2, r3
 80031c6:	bf2c      	ite	cs
 80031c8:	2301      	movcs	r3, #1
 80031ca:	2300      	movcc	r3, #0
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	8af9      	ldrh	r1, [r7, #22]
 80031d0:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80031d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80031d8:	4403      	add	r3, r0
 80031da:	4299      	cmp	r1, r3
 80031dc:	bfb4      	ite	lt
 80031de:	2301      	movlt	r3, #1
 80031e0:	2300      	movge	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4013      	ands	r3, r2
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 80031ec:	8abb      	ldrh	r3, [r7, #20]
 80031ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031f2:	d20f      	bcs.n	8003214 <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80031f4:	8afa      	ldrh	r2, [r7, #22]
 80031f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	019b      	lsls	r3, r3, #6
 8003204:	461a      	mov	r2, r3
 8003206:	8abb      	ldrh	r3, [r7, #20]
 8003208:	4413      	add	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800320e:	4413      	add	r3, r2
 8003210:	89ba      	ldrh	r2, [r7, #12]
 8003212:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 8003214:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 800321e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003222:	b29b      	uxth	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	b29b      	uxth	r3, r3
 8003228:	853b      	strh	r3, [r7, #40]	@ 0x28
 800322a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 800322e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003232:	429a      	cmp	r2, r3
 8003234:	db96      	blt.n	8003164 <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 8003236:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3301      	adds	r3, #1
 800323e:	b29b      	uxth	r3, r3
 8003240:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003242:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8003246:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800324a:	429a      	cmp	r2, r3
 800324c:	db87      	blt.n	800315e <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 800324e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003252:	b29b      	uxth	r3, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	3734      	adds	r7, #52	@ 0x34
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b08d      	sub	sp, #52	@ 0x34
 8003264:	af06      	add	r7, sp, #24
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	4611      	mov	r1, r2
 800326c:	461a      	mov	r2, r3
 800326e:	460b      	mov	r3, r1
 8003270:	80fb      	strh	r3, [r7, #6]
 8003272:	4613      	mov	r3, r2
 8003274:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8003276:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8003282:	1d38      	adds	r0, r7, #4
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800328c:	f7ff feaf 	bl	8002fee <getStringCenter>
 8003290:	e00c      	b.n	80032ac <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 8003292:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 800329e:	1d38      	adds	r0, r7, #4
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80032a8:	f7ff fed6 	bl	8003058 <getStringLeft>
	}
	uint16_t xAdvance = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 80032b4:	bf00      	nop
 80032b6:	8abb      	ldrh	r3, [r7, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	82bb      	strh	r3, [r7, #20]
 80032bc:	8abb      	ldrh	r3, [r7, #20]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f6      	bne.n	80032b6 <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 80032c8:	8abb      	ldrh	r3, [r7, #20]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	e036      	b.n	800333e <drawStringIntoFramebuffer+0xde>
		if ((stringxpos + xAdvance) > (xstart + framewidth)) {
 80032d0:	88bb      	ldrh	r3, [r7, #4]
 80032d2:	461a      	mov	r2, r3
 80032d4:	8afb      	ldrh	r3, [r7, #22]
 80032d6:	441a      	add	r2, r3
 80032d8:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80032da:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80032dc:	440b      	add	r3, r1
 80032de:	429a      	cmp	r2, r3
 80032e0:	dd0d      	ble.n	80032fe <drawStringIntoFramebuffer+0x9e>
			xAdvance += getCharXadv(buffer[i], font);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fee6 	bl	80030be <getCharXadv>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	8afb      	ldrh	r3, [r7, #22]
 80032f8:	4413      	add	r3, r2
 80032fa:	82fb      	strh	r3, [r7, #22]
			break;
 80032fc:	e022      	b.n	8003344 <drawStringIntoFramebuffer+0xe4>
		}
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	7818      	ldrb	r0, [r3, #0]
 8003306:	88ba      	ldrh	r2, [r7, #4]
 8003308:	8afb      	ldrh	r3, [r7, #22]
 800330a:	4413      	add	r3, r2
 800330c:	b29c      	uxth	r4, r3
 800330e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003310:	88f9      	ldrh	r1, [r7, #6]
 8003312:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003314:	9204      	str	r2, [sp, #16]
 8003316:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003318:	9203      	str	r2, [sp, #12]
 800331a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800331c:	9202      	str	r2, [sp, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	9201      	str	r2, [sp, #4]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	4623      	mov	r3, r4
 8003326:	460a      	mov	r2, r1
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	f7ff fee1 	bl	80030f0 <drawCharIntoFramebuffer>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	8afb      	ldrh	r3, [r7, #22]
 8003334:	4413      	add	r3, r2
 8003336:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	3b01      	subs	r3, #1
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	dac5      	bge.n	80032d0 <drawStringIntoFramebuffer+0x70>
	}
	return font->yAdvance;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	7b1b      	ldrb	r3, [r3, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}

08003350 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003354:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8003358:	af00      	add	r7, sp, #0
 800335a:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 800335e:	f5a6 7619 	sub.w	r6, r6, #612	@ 0x264
 8003362:	6030      	str	r0, [r6, #0]
 8003364:	460e      	mov	r6, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800336e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003372:	4632      	mov	r2, r6
 8003374:	801a      	strh	r2, [r3, #0]
 8003376:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800337a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800337e:	4602      	mov	r2, r0
 8003380:	801a      	strh	r2, [r3, #0]
 8003382:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003386:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800338a:	460a      	mov	r2, r1
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	466b      	mov	r3, sp
 8003390:	469a      	mov	sl, r3
	length = 400;
 8003392:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003396:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800339a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800339e:	801a      	strh	r2, [r3, #0]
	height = 215;
 80033a0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80033a4:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80033a8:	22d7      	movs	r2, #215	@ 0xd7
 80033aa:	801a      	strh	r2, [r3, #0]
	if (positioning & CENTER_OBJECT) {
 80033ac:	f897 3294 	ldrb.w	r3, [r7, #660]	@ 0x294
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00f      	beq.n	80033d8 <drawImageIntoFramebuffer+0x88>
		 getRectCenter(&x, &y, length, height);
 80033b8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80033bc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80033c0:	8819      	ldrh	r1, [r3, #0]
 80033c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80033c6:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	1db8      	adds	r0, r7, #6
 80033ce:	460b      	mov	r3, r1
 80033d0:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80033d4:	f7ff fde8 	bl	8002fa8 <getRectCenter>
	}
	FIL newfile;
	FRESULT fresult = f_open(&newfile, image, FA_READ);
 80033d8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80033dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80033e0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80033e4:	2201      	movs	r2, #1
 80033e6:	6819      	ldr	r1, [r3, #0]
 80033e8:	f00a ff02 	bl	800e1f0 <f_open>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (fresult == FR_OK) {
 80033f2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <drawImageIntoFramebuffer+0xb2>
		USB_Println("the file was opened good\n");
 80033fa:	487e      	ldr	r0, [pc, #504]	@ (80035f4 <drawImageIntoFramebuffer+0x2a4>)
 80033fc:	f7fe ffc2 	bl	8002384 <USB_Println>
 8003400:	e007      	b.n	8003412 <drawImageIntoFramebuffer+0xc2>
	} else {
		USB_Println("failure to open %s\n", image);
 8003402:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003406:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	487a      	ldr	r0, [pc, #488]	@ (80035f8 <drawImageIntoFramebuffer+0x2a8>)
 800340e:	f7fe ffb9 	bl	8002384 <USB_Println>
	}
	uint16_t readbuffer[height];
 8003412:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003416:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800341a:	881e      	ldrh	r6, [r3, #0]
 800341c:	4633      	mov	r3, r6
 800341e:	3b01      	subs	r3, #1
 8003420:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8003424:	b2b3      	uxth	r3, r6
 8003426:	2200      	movs	r2, #0
 8003428:	4698      	mov	r8, r3
 800342a:	4691      	mov	r9, r2
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003438:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800343c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003440:	b2b3      	uxth	r3, r6
 8003442:	2200      	movs	r2, #0
 8003444:	461c      	mov	r4, r3
 8003446:	4615      	mov	r5, r2
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	012b      	lsls	r3, r5, #4
 8003452:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003456:	0122      	lsls	r2, r4, #4
 8003458:	4633      	mov	r3, r6
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	3307      	adds	r3, #7
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	ebad 0d03 	sub.w	sp, sp, r3
 8003466:	466b      	mov	r3, sp
 8003468:	3301      	adds	r3, #1
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	unsigned int br = 0;
 8003472:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003476:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
	for (int xx = x; xx < x + length; xx++) {
 800347e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003482:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800348c:	e093      	b.n	80035b6 <drawImageIntoFramebuffer+0x266>
		f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 800348e:	4633      	mov	r3, r6
 8003490:	005a      	lsls	r2, r3, #1
 8003492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003496:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800349a:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 800349e:	f00b f861 	bl	800e564 <f_read>
		if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 80034a2:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 80034a6:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	bfac      	ite	ge
 80034ae:	2301      	movge	r3, #1
 80034b0:	2300      	movlt	r3, #0
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	f8b7 12a0 	ldrh.w	r1, [r7, #672]	@ 0x2a0
 80034b8:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 80034bc:	440b      	add	r3, r1
 80034be:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 80034c2:	4299      	cmp	r1, r3
 80034c4:	bfb4      	ite	lt
 80034c6:	2301      	movlt	r3, #1
 80034c8:	2300      	movge	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4013      	ands	r3, r2
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d062      	beq.n	800359a <drawImageIntoFramebuffer+0x24a>
			for (int i = 0; i < height; i++) {
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80034da:	e055      	b.n	8003588 <drawImageIntoFramebuffer+0x238>
				//USB_Println("writing to screen, x:%d, y:%d\n",xx, y + i);
				int coordinate = ((xx - xstart) * SCREEN_HEIGHT) + y + i;
 80034dc:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 80034e0:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80034e4:	1ad2      	subs	r2, r2, r3
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	019b      	lsls	r3, r3, #6
 80034ee:	461a      	mov	r2, r3
 80034f0:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 80034f4:	4413      	add	r3, r2
 80034f6:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80034fa:	4413      	add	r3, r2
 80034fc:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
				char whatbuffer[20];
				itoa(coordinate, whatbuffer, 10);
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	220a      	movs	r2, #10
 8003506:	4619      	mov	r1, r3
 8003508:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 800350c:	f00b ffbb 	bl	800f486 <itoa>
				strncat(whatbuffer, "\n", 10);
 8003510:	f107 0310 	add.w	r3, r7, #16
 8003514:	4618      	mov	r0, r3
 8003516:	f7fc fe63 	bl	80001e0 <strlen>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	f107 0310 	add.w	r3, r7, #16
 8003522:	4413      	add	r3, r2
 8003524:	4935      	ldr	r1, [pc, #212]	@ (80035fc <drawImageIntoFramebuffer+0x2ac>)
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)whatbuffer, strlen(whatbuffer));
 800352e:	f107 0310 	add.w	r3, r7, #16
 8003532:	4618      	mov	r0, r3
 8003534:	f7fc fe54 	bl	80001e0 <strlen>
 8003538:	4603      	mov	r3, r0
 800353a:	b29a      	uxth	r2, r3
 800353c:	f107 0310 	add.w	r3, r7, #16
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f00b fb10 	bl	800eb68 <CDC_Transmit_FS>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + y + i] = readbuffer[i];
 8003548:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 800354c:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003550:	1ad2      	subs	r2, r2, r3
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	461a      	mov	r2, r3
 800355c:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8003560:	441a      	add	r2, r3
 8003562:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003566:	4413      	add	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 800356e:	4413      	add	r3, r2
 8003570:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8003574:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 8003578:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800357c:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < height; i++) {
 800357e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003582:	3301      	adds	r3, #1
 8003584:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003588:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800358c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8003596:	429a      	cmp	r2, r3
 8003598:	dba0      	blt.n	80034dc <drawImageIntoFramebuffer+0x18c>
			}
		}
		if (xx > (xstart + framewidth)) {
 800359a:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 800359e:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 80035a2:	4413      	add	r3, r2
 80035a4:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80035a8:	429a      	cmp	r2, r3
 80035aa:	dc16      	bgt.n	80035da <drawImageIntoFramebuffer+0x28a>
	for (int xx = x; xx < x + length; xx++) {
 80035ac:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80035b0:	3301      	adds	r3, #1
 80035b2:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 80035b6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80035ba:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80035c6:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80035d2:	429a      	cmp	r2, r3
 80035d4:	f6ff af5b 	blt.w	800348e <drawImageIntoFramebuffer+0x13e>
 80035d8:	e000      	b.n	80035dc <drawImageIntoFramebuffer+0x28c>
			break;
 80035da:	bf00      	nop
		}
	}
	f_close(&newfile);
 80035dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035e0:	4618      	mov	r0, r3
 80035e2:	f00b f97c 	bl	800e8de <f_close>
 80035e6:	46d5      	mov	sp, sl
}
 80035e8:	bf00      	nop
 80035ea:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80035ee:	46bd      	mov	sp, r7
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f4:	080100c8 	.word	0x080100c8
 80035f8:	080100e4 	.word	0x080100e4
 80035fc:	080100f8 	.word	0x080100f8

08003600 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af04      	add	r7, sp, #16
 8003606:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 8003608:	220a      	movs	r2, #10
 800360a:	4914      	ldr	r1, [pc, #80]	@ (800365c <setrpmdata+0x5c>)
 800360c:	4814      	ldr	r0, [pc, #80]	@ (8003660 <setrpmdata+0x60>)
 800360e:	f00c f892 	bl	800f736 <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 8003612:	220a      	movs	r2, #10
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4812      	ldr	r0, [pc, #72]	@ (8003660 <setrpmdata+0x60>)
 8003618:	f00c f87a 	bl	800f710 <strncat>
	strncat(rpmresult, "RPM", 10);
 800361c:	4810      	ldr	r0, [pc, #64]	@ (8003660 <setrpmdata+0x60>)
 800361e:	f7fc fddf 	bl	80001e0 <strlen>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	4b0e      	ldr	r3, [pc, #56]	@ (8003660 <setrpmdata+0x60>)
 8003628:	4413      	add	r3, r2
 800362a:	4a0e      	ldr	r2, [pc, #56]	@ (8003664 <setrpmdata+0x64>)
 800362c:	6810      	ldr	r0, [r2, #0]
 800362e:	6018      	str	r0, [r3, #0]
	((StringObject*)otherobjects[0])->updateString(rpmresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 420, 260, 1);
 8003630:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <setrpmdata+0x68>)
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	2301      	movs	r3, #1
 8003636:	9303      	str	r3, [sp, #12]
 8003638:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800363c:	9302      	str	r3, [sp, #8]
 800363e:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	4b09      	ldr	r3, [pc, #36]	@ (800366c <setrpmdata+0x6c>)
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800364c:	2201      	movs	r2, #1
 800364e:	4904      	ldr	r1, [pc, #16]	@ (8003660 <setrpmdata+0x60>)
 8003650:	f7ff f99c 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	08010108 	.word	0x08010108
 8003660:	20000380 	.word	0x20000380
 8003664:	0801010c 	.word	0x0801010c
 8003668:	200003d0 	.word	0x200003d0
 800366c:	08013444 	.word	0x08013444

08003670 <settempdata>:

void settempdata(char *tempvalue) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af04      	add	r7, sp, #16
 8003676:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 8003678:	220a      	movs	r2, #10
 800367a:	490f      	ldr	r1, [pc, #60]	@ (80036b8 <settempdata+0x48>)
 800367c:	480f      	ldr	r0, [pc, #60]	@ (80036bc <settempdata+0x4c>)
 800367e:	f00c f85a 	bl	800f736 <strncpy>
	strncat(tempresult, tempvalue, 10);
 8003682:	220a      	movs	r2, #10
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	480d      	ldr	r0, [pc, #52]	@ (80036bc <settempdata+0x4c>)
 8003688:	f00c f842 	bl	800f710 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <settempdata+0x50>)
 800368e:	6858      	ldr	r0, [r3, #4]
 8003690:	2303      	movs	r3, #3
 8003692:	9303      	str	r3, [sp, #12]
 8003694:	2364      	movs	r3, #100	@ 0x64
 8003696:	9302      	str	r3, [sp, #8]
 8003698:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <settempdata+0x54>)
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036a6:	2202      	movs	r2, #2
 80036a8:	4904      	ldr	r1, [pc, #16]	@ (80036bc <settempdata+0x4c>)
 80036aa:	f7ff f96f 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	08010108 	.word	0x08010108
 80036bc:	20000394 	.word	0x20000394
 80036c0:	200003d0 	.word	0x200003d0
 80036c4:	080115ec 	.word	0x080115ec

080036c8 <setgeardata>:

void setgeardata(char *gearvalue) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af04      	add	r7, sp, #16
 80036ce:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 80036d0:	220a      	movs	r2, #10
 80036d2:	490e      	ldr	r1, [pc, #56]	@ (800370c <setgeardata+0x44>)
 80036d4:	480e      	ldr	r0, [pc, #56]	@ (8003710 <setgeardata+0x48>)
 80036d6:	f00c f82e 	bl	800f736 <strncpy>
	strncat(gearresult, gearvalue, 10);
 80036da:	220a      	movs	r2, #10
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	480c      	ldr	r0, [pc, #48]	@ (8003710 <setgeardata+0x48>)
 80036e0:	f00c f816 	bl	800f710 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <setgeardata+0x4c>)
 80036e6:	68d8      	ldr	r0, [r3, #12]
 80036e8:	2302      	movs	r3, #2
 80036ea:	9303      	str	r3, [sp, #12]
 80036ec:	23f0      	movs	r3, #240	@ 0xf0
 80036ee:	9302      	str	r3, [sp, #8]
 80036f0:	2364      	movs	r3, #100	@ 0x64
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <setgeardata+0x50>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036fc:	2202      	movs	r2, #2
 80036fe:	4904      	ldr	r1, [pc, #16]	@ (8003710 <setgeardata+0x48>)
 8003700:	f7ff f944 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	08010108 	.word	0x08010108
 8003710:	20000008 	.word	0x20000008
 8003714:	200003d0 	.word	0x200003d0
 8003718:	08017850 	.word	0x08017850

0800371c <setbattdata>:

void setbattdata(char *battvalue) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af04      	add	r7, sp, #16
 8003722:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 8003724:	220a      	movs	r2, #10
 8003726:	490f      	ldr	r1, [pc, #60]	@ (8003764 <setbattdata+0x48>)
 8003728:	480f      	ldr	r0, [pc, #60]	@ (8003768 <setbattdata+0x4c>)
 800372a:	f00c f804 	bl	800f736 <strncpy>
	strncat(battresult, battvalue, 10);
 800372e:	220a      	movs	r2, #10
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	480d      	ldr	r0, [pc, #52]	@ (8003768 <setbattdata+0x4c>)
 8003734:	f00b ffec 	bl	800f710 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <setbattdata+0x50>)
 800373a:	6898      	ldr	r0, [r3, #8]
 800373c:	2306      	movs	r3, #6
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	233c      	movs	r3, #60	@ 0x3c
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <setbattdata+0x54>)
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003752:	2202      	movs	r2, #2
 8003754:	4904      	ldr	r1, [pc, #16]	@ (8003768 <setbattdata+0x4c>)
 8003756:	f7ff f919 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08010108 	.word	0x08010108
 8003768:	200003bc 	.word	0x200003bc
 800376c:	200003d0 	.word	0x200003d0
 8003770:	080115ec 	.word	0x080115ec

08003774 <setspeeddata>:

void setspeeddata(char *speedvalue) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af04      	add	r7, sp, #16
 800377a:	6078      	str	r0, [r7, #4]
	strncpy(speedresult, "", 10);
 800377c:	220a      	movs	r2, #10
 800377e:	490e      	ldr	r1, [pc, #56]	@ (80037b8 <setspeeddata+0x44>)
 8003780:	480e      	ldr	r0, [pc, #56]	@ (80037bc <setspeeddata+0x48>)
 8003782:	f00b ffd8 	bl	800f736 <strncpy>
	strncat(speedresult, speedvalue, 10);
 8003786:	220a      	movs	r2, #10
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	480c      	ldr	r0, [pc, #48]	@ (80037bc <setspeeddata+0x48>)
 800378c:	f00b ffc0 	bl	800f710 <strncat>
	((StringObject*)otherobjects[6])->updateString(speedresult, NO_CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 100, 80, 7);
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <setspeeddata+0x4c>)
 8003792:	6998      	ldr	r0, [r3, #24]
 8003794:	2307      	movs	r3, #7
 8003796:	9303      	str	r3, [sp, #12]
 8003798:	2350      	movs	r3, #80	@ 0x50
 800379a:	9302      	str	r3, [sp, #8]
 800379c:	2364      	movs	r3, #100	@ 0x64
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <setspeeddata+0x50>)
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037a8:	2200      	movs	r2, #0
 80037aa:	4904      	ldr	r1, [pc, #16]	@ (80037bc <setspeeddata+0x48>)
 80037ac:	f7ff f8ee 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	08010108 	.word	0x08010108
 80037bc:	200003a8 	.word	0x200003a8
 80037c0:	200003d0 	.word	0x200003d0
 80037c4:	080115ec 	.word	0x080115ec

080037c8 <domainscreen>:

void domainscreen() {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 80037cc:	4804      	ldr	r0, [pc, #16]	@ (80037e0 <domainscreen+0x18>)
 80037ce:	f7fe fe6f 	bl	80024b0 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 7);
 80037d2:	2207      	movs	r2, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	@ (80037e4 <domainscreen+0x1c>)
 80037d6:	4802      	ldr	r0, [pc, #8]	@ (80037e0 <domainscreen+0x18>)
 80037d8:	f7fe fe36 	bl	8002448 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	200003ec 	.word	0x200003ec
 80037e4:	200003d0 	.word	0x200003d0

080037e8 <_Z41__static_initialization_and_destruction_0ii>:

void dosplashscene() {
	splashScene.drawScene();
	splashScene.setScene(splashobjects, 1);
}
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 80c7 	bne.w	8003988 <_Z41__static_initialization_and_destruction_0ii+0x1a0>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003800:	4293      	cmp	r3, r2
 8003802:	f040 80c1 	bne.w	8003988 <_Z41__static_initialization_and_destruction_0ii+0x1a0>
		new StringObject(420, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, LEFTDRAW_OBJECT, rpmresult, 1),
 8003806:	2018      	movs	r0, #24
 8003808:	f00b fe02 	bl	800f410 <_Znwj>
 800380c:	4603      	mov	r3, r0
 800380e:	461c      	mov	r4, r3
 8003810:	2301      	movs	r3, #1
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	4b5e      	ldr	r3, [pc, #376]	@ (8003990 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	2301      	movs	r3, #1
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	4b5d      	ldr	r3, [pc, #372]	@ (8003994 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003824:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003828:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800382c:	4620      	mov	r0, r4
 800382e:	f7ff f83b 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003832:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8003834:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 8003836:	2018      	movs	r0, #24
 8003838:	f00b fdea 	bl	800f410 <_Znwj>
 800383c:	4603      	mov	r3, r0
 800383e:	461c      	mov	r4, r3
 8003840:	2303      	movs	r3, #3
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	4b55      	ldr	r3, [pc, #340]	@ (800399c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	2302      	movs	r3, #2
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	4b54      	ldr	r3, [pc, #336]	@ (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003854:	2264      	movs	r2, #100	@ 0x64
 8003856:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800385a:	4620      	mov	r0, r4
 800385c:	f7ff f824 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003860:	4b4d      	ldr	r3, [pc, #308]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8003862:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 8003864:	2018      	movs	r0, #24
 8003866:	f00b fdd3 	bl	800f410 <_Znwj>
 800386a:	4603      	mov	r3, r0
 800386c:	461c      	mov	r4, r3
 800386e:	2306      	movs	r3, #6
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	4b4c      	ldr	r3, [pc, #304]	@ (80039a4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8003874:	9302      	str	r3, [sp, #8]
 8003876:	2302      	movs	r3, #2
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	4b49      	ldr	r3, [pc, #292]	@ (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003882:	223c      	movs	r2, #60	@ 0x3c
 8003884:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff f80d 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800388e:	4b42      	ldr	r3, [pc, #264]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8003890:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 8003892:	2018      	movs	r0, #24
 8003894:	f00b fdbc 	bl	800f410 <_Znwj>
 8003898:	4603      	mov	r3, r0
 800389a:	461c      	mov	r4, r3
 800389c:	2302      	movs	r3, #2
 800389e:	9303      	str	r3, [sp, #12]
 80038a0:	4b41      	ldr	r3, [pc, #260]	@ (80039a8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80038a2:	9302      	str	r3, [sp, #8]
 80038a4:	2302      	movs	r3, #2
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	4b40      	ldr	r3, [pc, #256]	@ (80039ac <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038b0:	22f0      	movs	r2, #240	@ 0xf0
 80038b2:	2164      	movs	r1, #100	@ 0x64
 80038b4:	4620      	mov	r0, r4
 80038b6:	f7fe fff7 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80038ba:	4b37      	ldr	r3, [pc, #220]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 80038bc:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 80038be:	2018      	movs	r0, #24
 80038c0:	f00b fda6 	bl	800f410 <_Znwj>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461c      	mov	r4, r3
 80038c8:	2304      	movs	r3, #4
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	4b38      	ldr	r3, [pc, #224]	@ (80039b0 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80038ce:	9302      	str	r3, [sp, #8]
 80038d0:	2302      	movs	r3, #2
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	4b37      	ldr	r3, [pc, #220]	@ (80039b4 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038dc:	2282      	movs	r2, #130	@ 0x82
 80038de:	f240 118b 	movw	r1, #395	@ 0x18b
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7fe ffe0 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80038e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 80038ea:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5),
 80038ec:	2018      	movs	r0, #24
 80038ee:	f00b fd8f 	bl	800f410 <_Znwj>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461c      	mov	r4, r3
 80038f6:	2305      	movs	r3, #5
 80038f8:	9303      	str	r3, [sp, #12]
 80038fa:	4b2f      	ldr	r3, [pc, #188]	@ (80039b8 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80038fc:	9302      	str	r3, [sp, #8]
 80038fe:	2302      	movs	r3, #2
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	4b2c      	ldr	r3, [pc, #176]	@ (80039b4 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800390a:	225a      	movs	r2, #90	@ 0x5a
 800390c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003910:	4620      	mov	r0, r4
 8003912:	f7fe ffc9 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003916:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8003918:	615c      	str	r4, [r3, #20]
		new StringObject(100, 80, 0xFFFF, FREE_SANS_18PT7B, NO_CENTER_OBJECT, speedresult, 7)
 800391a:	2018      	movs	r0, #24
 800391c:	f00b fd78 	bl	800f410 <_Znwj>
 8003920:	4603      	mov	r3, r0
 8003922:	461c      	mov	r4, r3
 8003924:	2307      	movs	r3, #7
 8003926:	9303      	str	r3, [sp, #12]
 8003928:	4b24      	ldr	r3, [pc, #144]	@ (80039bc <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800392a:	9302      	str	r3, [sp, #8]
 800392c:	2300      	movs	r3, #0
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003938:	2250      	movs	r2, #80	@ 0x50
 800393a:	2164      	movs	r1, #100	@ 0x64
 800393c:	4620      	mov	r0, r4
 800393e:	f7fe ffb3 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003942:	4b15      	ldr	r3, [pc, #84]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8003944:	619c      	str	r4, [r3, #24]
Scene myScene2(otherobjects, 6);
 8003946:	2206      	movs	r2, #6
 8003948:	4913      	ldr	r1, [pc, #76]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800394a:	481d      	ldr	r0, [pc, #116]	@ (80039c0 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 800394c:	f7fe fd6a 	bl	8002424 <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003950:	2014      	movs	r0, #20
 8003952:	f00b fd5d 	bl	800f410 <_Znwj>
 8003956:	4603      	mov	r3, r0
 8003958:	461c      	mov	r4, r3
 800395a:	4b1a      	ldr	r3, [pc, #104]	@ (80039c4 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	2302      	movs	r3, #2
 8003960:	9303      	str	r3, [sp, #12]
 8003962:	2302      	movs	r3, #2
 8003964:	9302      	str	r3, [sp, #8]
 8003966:	23a0      	movs	r3, #160	@ 0xa0
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	23f0      	movs	r3, #240	@ 0xf0
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	23d7      	movs	r3, #215	@ 0xd7
 8003970:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003974:	4620      	mov	r0, r4
 8003976:	f7ff f83b 	bl	80029f0 <_ZN11ImageObjectC1EPctttthh>
};
 800397a:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 800397c:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 800397e:	2201      	movs	r2, #1
 8003980:	4911      	ldr	r1, [pc, #68]	@ (80039c8 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003982:	4812      	ldr	r0, [pc, #72]	@ (80039cc <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003984:	f7fe fd4e 	bl	8002424 <_ZN5SceneC1EPP13DisplayObjecth>
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	20000380 	.word	0x20000380
 8003994:	08013444 	.word	0x08013444
 8003998:	200003d0 	.word	0x200003d0
 800399c:	20000394 	.word	0x20000394
 80039a0:	080115ec 	.word	0x080115ec
 80039a4:	200003bc 	.word	0x200003bc
 80039a8:	20000008 	.word	0x20000008
 80039ac:	08017850 	.word	0x08017850
 80039b0:	2000001c 	.word	0x2000001c
 80039b4:	08017a38 	.word	0x08017a38
 80039b8:	20000020 	.word	0x20000020
 80039bc:	200003a8 	.word	0x200003a8
 80039c0:	200003ec 	.word	0x200003ec
 80039c4:	20000024 	.word	0x20000024
 80039c8:	200003f4 	.word	0x200003f4
 80039cc:	200003f8 	.word	0x200003f8

080039d0 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80039d8:	2001      	movs	r0, #1
 80039da:	f7ff ff05 	bl	80037e8 <_Z41__static_initialization_and_destruction_0ii>
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	7e3a      	ldrb	r2, [r7, #24]
 80039f8:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	605a      	str	r2, [r3, #4]
    endSPI();
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f839 	bl	8003a7e <_ZN7MCP25156endSPIEv>
}
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	1cf9      	adds	r1, r7, #3
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f003 fb70 	bl	8007112 <HAL_SPI_Transmit>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f107 010f 	add.w	r1, r7, #15
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f003 fca3 	bl	800739a <HAL_SPI_Receive>
	return retVal;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6898      	ldr	r0, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7b1b      	ldrb	r3, [r3, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4619      	mov	r1, r3
 8003a72:	f001 fc11 	bl	8005298 <HAL_GPIO_WritePin>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6898      	ldr	r0, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7b1b      	ldrb	r3, [r3, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4619      	mov	r1, r3
 8003a92:	f001 fc01 	bl	8005298 <HAL_GPIO_WritePin>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	@ 0x30
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	startSPI();
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ffd8 	bl	8003a5e <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8003aae:	21c0      	movs	r1, #192	@ 0xc0
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ffb0 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff ffe1 	bl	8003a7e <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8003abc:	f107 0314 	add.w	r3, r7, #20
 8003ac0:	220e      	movs	r2, #14
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f00b fe1b 	bl	800f700 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8003aca:	f107 0214 	add.w	r2, r7, #20
 8003ace:	230e      	movs	r3, #14
 8003ad0:	2130      	movs	r1, #48	@ 0x30
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8ec 	bl	8003cb0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8003ad8:	f107 0214 	add.w	r2, r7, #20
 8003adc:	230e      	movs	r3, #14
 8003ade:	2140      	movs	r1, #64	@ 0x40
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8e5 	bl	8003cb0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8003ae6:	f107 0214 	add.w	r2, r7, #20
 8003aea:	230e      	movs	r3, #14
 8003aec:	2150      	movs	r1, #80	@ 0x50
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f8de 	bl	8003cb0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8003af4:	2200      	movs	r2, #0
 8003af6:	2160      	movs	r1, #96	@ 0x60
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8b9 	bl	8003c70 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	2170      	movs	r1, #112	@ 0x70
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8b4 	bl	8003c70 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8003b08:	22a3      	movs	r2, #163	@ 0xa3
 8003b0a:	212b      	movs	r1, #43	@ 0x2b
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8af 	bl	8003c70 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8003b12:	2304      	movs	r3, #4
 8003b14:	2267      	movs	r2, #103	@ 0x67
 8003b16:	2160      	movs	r1, #96	@ 0x60
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f8f8 	bl	8003d0e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8003b1e:	2301      	movs	r3, #1
 8003b20:	2267      	movs	r2, #103	@ 0x67
 8003b22:	2170      	movs	r1, #112	@ 0x70
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f8f2 	bl	8003d0e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003b2a:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <_ZN7MCP25155resetEv+0x130>)
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b34:	6018      	str	r0, [r3, #0]
 8003b36:	3304      	adds	r3, #4
 8003b38:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3e:	e01e      	b.n	8003b7e <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003b4e:	f107 020c 	add.w	r2, r7, #12
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	4413      	add	r3, r2
 8003b56:	7819      	ldrb	r1, [r3, #0]
 8003b58:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fbcc 	bl	80042fc <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003b6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003b72:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b76:	e027      	b.n	8003bc8 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	dddd      	ble.n	8003b40 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003b84:	2300      	movs	r3, #0
 8003b86:	723b      	strb	r3, [r7, #8]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b90:	e016      	b.n	8003bc0 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003b92:	f107 0208 	add.w	r2, r7, #8
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	4413      	add	r3, r2
 8003b9a:	7819      	ldrb	r1, [r3, #0]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fb77 	bl	8004294 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bb8:	e006      	b.n	8003bc8 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	dde5      	ble.n	8003b92 <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3730      	adds	r7, #48	@ 0x30
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08010110 	.word	0x08010110

08003bd4 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff3c 	bl	8003a5e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003be6:	2103      	movs	r1, #3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff14 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ff0f 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff1e 	bl	8003a3a <_ZN7MCP25156SPI_RxEv>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ff3b 	bl	8003a7e <_ZN7MCP25156endSPIEv>

    return ret;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003c12:	b590      	push	{r4, r7, lr}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	460b      	mov	r3, r1
 8003c20:	72fb      	strb	r3, [r7, #11]
 8003c22:	4613      	mov	r3, r2
 8003c24:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff ff19 	bl	8003a5e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003c2c:	2103      	movs	r1, #3
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7ff fef1 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003c34:	7afb      	ldrb	r3, [r7, #11]
 8003c36:	4619      	mov	r1, r3
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff feec 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
 8003c42:	e00a      	b.n	8003c5a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	18d4      	adds	r4, r2, r3
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff fef5 	bl	8003a3a <_ZN7MCP25156SPI_RxEv>
 8003c50:	4603      	mov	r3, r0
 8003c52:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	3301      	adds	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
 8003c5a:	7dfa      	ldrb	r2, [r7, #23]
 8003c5c:	7abb      	ldrb	r3, [r7, #10]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d3f0      	bcc.n	8003c44 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff ff0b 	bl	8003a7e <_ZN7MCP25156endSPIEv>
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff feec 	bl	8003a5e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003c86:	2102      	movs	r1, #2
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fec4 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff febf 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003c98:	78bb      	ldrb	r3, [r7, #2]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff feba 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff feeb 	bl	8003a7e <_ZN7MCP25156endSPIEv>
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	72fb      	strb	r3, [r7, #11]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7ff feca 	bl	8003a5e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003cca:	2102      	movs	r1, #2
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff fea2 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003cd2:	7afb      	ldrb	r3, [r7, #11]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fe9d 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003cdc:	2300      	movs	r3, #0
 8003cde:	75fb      	strb	r3, [r7, #23]
 8003ce0:	e00a      	b.n	8003cf8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff fe92 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
 8003cf8:	7dfa      	ldrb	r2, [r7, #23]
 8003cfa:	7abb      	ldrb	r3, [r7, #10]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d3f0      	bcc.n	8003ce2 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff febc 	bl	8003a7e <_ZN7MCP25156endSPIEv>
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	4608      	mov	r0, r1
 8003d18:	4611      	mov	r1, r2
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	70fb      	strb	r3, [r7, #3]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70bb      	strb	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
    startSPI();
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff fe98 	bl	8003a5e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8003d2e:	2105      	movs	r1, #5
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fe70 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fe6b 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8003d40:	78bb      	ldrb	r3, [r7, #2]
 8003d42:	4619      	mov	r1, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff fe66 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8003d4a:	787b      	ldrb	r3, [r7, #1]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fe61 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fe92 	bl	8003a7e <_ZN7MCP25156endSPIEv>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
    startSPI();
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff fe77 	bl	8003a5e <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8003d70:	21a0      	movs	r1, #160	@ 0xa0
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fe4f 	bl	8003a16 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fe5e 	bl	8003a3a <_ZN7MCP25156SPI_RxEv>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fe7b 	bl	8003a7e <_ZN7MCP25156endSPIEv>

    return i;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8003d9a:	2180      	movs	r1, #128	@ 0x80
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f812 	bl	8003dc6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003da2:	4603      	mov	r3, r0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8003db4:	2100      	movs	r1, #0
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f805 	bl	8003dc6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	22e0      	movs	r2, #224	@ 0xe0
 8003dd6:	210f      	movs	r1, #15
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff98 	bl	8003d0e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8003dde:	f000 fc03 	bl	80045e8 <HAL_GetTick>
 8003de2:	4603      	mov	r3, r0
 8003de4:	330a      	adds	r3, #10
 8003de6:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8003de8:	2300      	movs	r3, #0
 8003dea:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8003dec:	e013      	b.n	8003e16 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8003dee:	210e      	movs	r1, #14
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff feef 	bl	8003bd4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8003df6:	4603      	mov	r3, r0
 8003df8:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	f023 031f 	bic.w	r3, r3, #31
 8003e00:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8003e16:	f000 fbe7 	bl	80045e8 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	bf8c      	ite	hi
 8003e22:	2301      	movhi	r3, #1
 8003e24:	2300      	movls	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e0      	bne.n	8003dee <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8003e2c:	e000      	b.n	8003e30 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8003e2e:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8003e3a:	2301      	movs	r3, #1

}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
 8003e50:	4613      	mov	r3, r2
 8003e52:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff9c 	bl	8003d92 <_ZN7MCP251513setConfigModeEv>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8003e5e:	7afb      	ldrb	r3, [r7, #11]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8003e64:	7afb      	ldrb	r3, [r7, #11]
 8003e66:	e1b5      	b.n	80041d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8003e6c:	78bb      	ldrb	r3, [r7, #2]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d009      	beq.n	8003e86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	f300 8193 	bgt.w	800419e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 811f 	beq.w	80040bc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	f000 808e 	beq.w	8003fa0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8003e84:	e18b      	b.n	800419e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	2b0f      	cmp	r3, #15
 8003e8a:	f200 8085 	bhi.w	8003f98 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 8003e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ed5 	.word	0x08003ed5
 8003e98:	08003ee3 	.word	0x08003ee3
 8003e9c:	08003ef1 	.word	0x08003ef1
 8003ea0:	08003eff 	.word	0x08003eff
 8003ea4:	08003f0d 	.word	0x08003f0d
 8003ea8:	08003f1b 	.word	0x08003f1b
 8003eac:	08003f29 	.word	0x08003f29
 8003eb0:	08003f37 	.word	0x08003f37
 8003eb4:	08003f99 	.word	0x08003f99
 8003eb8:	08003f99 	.word	0x08003f99
 8003ebc:	08003f45 	.word	0x08003f45
 8003ec0:	08003f53 	.word	0x08003f53
 8003ec4:	08003f61 	.word	0x08003f61
 8003ec8:	08003f6f 	.word	0x08003f6f
 8003ecc:	08003f7d 	.word	0x08003f7d
 8003ed0:	08003f8b 	.word	0x08003f8b
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8003ed4:	231f      	movs	r3, #31
 8003ed6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8003ed8:	23bf      	movs	r3, #191	@ 0xbf
 8003eda:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8003edc:	2387      	movs	r3, #135	@ 0x87
 8003ede:	733b      	strb	r3, [r7, #12]
            break;
 8003ee0:	e05d      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8003ee2:	230f      	movs	r3, #15
 8003ee4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8003ee6:	23bf      	movs	r3, #191	@ 0xbf
 8003ee8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8003eea:	2387      	movs	r3, #135	@ 0x87
 8003eec:	733b      	strb	r3, [r7, #12]
            break;
 8003eee:	e056      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8003ef0:	2307      	movs	r3, #7
 8003ef2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8003ef4:	23bf      	movs	r3, #191	@ 0xbf
 8003ef6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8003ef8:	2387      	movs	r3, #135	@ 0x87
 8003efa:	733b      	strb	r3, [r7, #12]
            break;
 8003efc:	e04f      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8003efe:	2307      	movs	r3, #7
 8003f00:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8003f02:	23a4      	movs	r3, #164	@ 0xa4
 8003f04:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8003f06:	2384      	movs	r3, #132	@ 0x84
 8003f08:	733b      	strb	r3, [r7, #12]
            break;
 8003f0a:	e048      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8003f0c:	2347      	movs	r3, #71	@ 0x47
 8003f0e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8003f10:	23e2      	movs	r3, #226	@ 0xe2
 8003f12:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8003f14:	2385      	movs	r3, #133	@ 0x85
 8003f16:	733b      	strb	r3, [r7, #12]
            break;
 8003f18:	e041      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8003f1e:	23bf      	movs	r3, #191	@ 0xbf
 8003f20:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8003f22:	2387      	movs	r3, #135	@ 0x87
 8003f24:	733b      	strb	r3, [r7, #12]
            break;
 8003f26:	e03a      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8003f2c:	23b4      	movs	r3, #180	@ 0xb4
 8003f2e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8003f30:	2386      	movs	r3, #134	@ 0x86
 8003f32:	733b      	strb	r3, [r7, #12]
            break;
 8003f34:	e033      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8003f3a:	23bf      	movs	r3, #191	@ 0xbf
 8003f3c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8003f3e:	2387      	movs	r3, #135	@ 0x87
 8003f40:	733b      	strb	r3, [r7, #12]
            break;
 8003f42:	e02c      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8003f48:	23b4      	movs	r3, #180	@ 0xb4
 8003f4a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8003f4c:	2386      	movs	r3, #134	@ 0x86
 8003f4e:	733b      	strb	r3, [r7, #12]
            break;
 8003f50:	e025      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8003f56:	23b1      	movs	r3, #177	@ 0xb1
 8003f58:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8003f5a:	2385      	movs	r3, #133	@ 0x85
 8003f5c:	733b      	strb	r3, [r7, #12]
            break;
 8003f5e:	e01e      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8003f64:	23b4      	movs	r3, #180	@ 0xb4
 8003f66:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8003f68:	2386      	movs	r3, #134	@ 0x86
 8003f6a:	733b      	strb	r3, [r7, #12]
            break;
 8003f6c:	e017      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8003f72:	23b1      	movs	r3, #177	@ 0xb1
 8003f74:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8003f76:	2385      	movs	r3, #133	@ 0x85
 8003f78:	733b      	strb	r3, [r7, #12]
            break;
 8003f7a:	e010      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8003f80:	2390      	movs	r3, #144	@ 0x90
 8003f82:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8003f84:	2382      	movs	r3, #130	@ 0x82
 8003f86:	733b      	strb	r3, [r7, #12]
            break;
 8003f88:	e009      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8003f92:	2380      	movs	r3, #128	@ 0x80
 8003f94:	733b      	strb	r3, [r7, #12]
            break;
 8003f96:	e002      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
            break;
 8003f9c:	bf00      	nop
        }
        break;
 8003f9e:	e101      	b.n	80041a4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	2b0f      	cmp	r3, #15
 8003fa4:	f200 8086 	bhi.w	80040b4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8003fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08003fff 	.word	0x08003fff
 8003fb8:	0800400d 	.word	0x0800400d
 8003fbc:	080040b5 	.word	0x080040b5
 8003fc0:	0800401b 	.word	0x0800401b
 8003fc4:	08004029 	.word	0x08004029
 8003fc8:	08004037 	.word	0x08004037
 8003fcc:	08004045 	.word	0x08004045
 8003fd0:	08004053 	.word	0x08004053
 8003fd4:	080040b5 	.word	0x080040b5
 8003fd8:	08004061 	.word	0x08004061
 8003fdc:	0800406f 	.word	0x0800406f
 8003fe0:	0800407d 	.word	0x0800407d
 8003fe4:	0800408b 	.word	0x0800408b
 8003fe8:	08004099 	.word	0x08004099
 8003fec:	080040a7 	.word	0x080040a7
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8003ff0:	233f      	movs	r3, #63	@ 0x3f
 8003ff2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8003ff4:	23ff      	movs	r3, #255	@ 0xff
 8003ff6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8003ff8:	2387      	movs	r3, #135	@ 0x87
 8003ffa:	733b      	strb	r3, [r7, #12]
            break;
 8003ffc:	e05d      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8003ffe:	231f      	movs	r3, #31
 8004000:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8004002:	23ff      	movs	r3, #255	@ 0xff
 8004004:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8004006:	2387      	movs	r3, #135	@ 0x87
 8004008:	733b      	strb	r3, [r7, #12]
            break;
 800400a:	e056      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 800400c:	230f      	movs	r3, #15
 800400e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8004010:	23ff      	movs	r3, #255	@ 0xff
 8004012:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8004014:	2387      	movs	r3, #135	@ 0x87
 8004016:	733b      	strb	r3, [r7, #12]
            break;
 8004018:	e04f      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 800401a:	234e      	movs	r3, #78	@ 0x4e
 800401c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 800401e:	23f1      	movs	r3, #241	@ 0xf1
 8004020:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8004022:	2385      	movs	r3, #133	@ 0x85
 8004024:	733b      	strb	r3, [r7, #12]
            break;
 8004026:	e048      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8004028:	2307      	movs	r3, #7
 800402a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 800402c:	23ff      	movs	r3, #255	@ 0xff
 800402e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8004030:	2387      	movs	r3, #135	@ 0x87
 8004032:	733b      	strb	r3, [r7, #12]
            break;
 8004034:	e041      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8004036:	2307      	movs	r3, #7
 8004038:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 800403a:	23fa      	movs	r3, #250	@ 0xfa
 800403c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 800403e:	2387      	movs	r3, #135	@ 0x87
 8004040:	733b      	strb	r3, [r7, #12]
            break;
 8004042:	e03a      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8004044:	2303      	movs	r3, #3
 8004046:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8004048:	23ff      	movs	r3, #255	@ 0xff
 800404a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 800404c:	2387      	movs	r3, #135	@ 0x87
 800404e:	733b      	strb	r3, [r7, #12]
            break;
 8004050:	e033      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8004052:	2303      	movs	r3, #3
 8004054:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8004056:	23be      	movs	r3, #190	@ 0xbe
 8004058:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 800405a:	2307      	movs	r3, #7
 800405c:	733b      	strb	r3, [r7, #12]
            break;
 800405e:	e02c      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8004060:	2303      	movs	r3, #3
 8004062:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8004064:	23fa      	movs	r3, #250	@ 0xfa
 8004066:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8004068:	2387      	movs	r3, #135	@ 0x87
 800406a:	733b      	strb	r3, [r7, #12]
            break;
 800406c:	e025      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 800406e:	2303      	movs	r3, #3
 8004070:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8004072:	23f0      	movs	r3, #240	@ 0xf0
 8004074:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8004076:	2386      	movs	r3, #134	@ 0x86
 8004078:	733b      	strb	r3, [r7, #12]
            break;
 800407a:	e01e      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 800407c:	2301      	movs	r3, #1
 800407e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8004080:	23fa      	movs	r3, #250	@ 0xfa
 8004082:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8004084:	2387      	movs	r3, #135	@ 0x87
 8004086:	733b      	strb	r3, [r7, #12]
            break;
 8004088:	e017      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 800408a:	2341      	movs	r3, #65	@ 0x41
 800408c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 800408e:	23f1      	movs	r3, #241	@ 0xf1
 8004090:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8004092:	2385      	movs	r3, #133	@ 0x85
 8004094:	733b      	strb	r3, [r7, #12]
            break;
 8004096:	e010      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8004098:	2300      	movs	r3, #0
 800409a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 800409c:	23f0      	movs	r3, #240	@ 0xf0
 800409e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 80040a0:	2386      	movs	r3, #134	@ 0x86
 80040a2:	733b      	strb	r3, [r7, #12]
            break;
 80040a4:	e009      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 80040aa:	23d0      	movs	r3, #208	@ 0xd0
 80040ac:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 80040ae:	2382      	movs	r3, #130	@ 0x82
 80040b0:	733b      	strb	r3, [r7, #12]
            break;
 80040b2:	e002      	b.n	80040ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
            break;
 80040b8:	bf00      	nop
        }
        break;
 80040ba:	e073      	b.n	80041a4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	3b04      	subs	r3, #4
 80040c0:	2b0b      	cmp	r3, #11
 80040c2:	d868      	bhi.n	8004196 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040fd 	.word	0x080040fd
 80040d0:	0800410b 	.word	0x0800410b
 80040d4:	08004119 	.word	0x08004119
 80040d8:	08004127 	.word	0x08004127
 80040dc:	08004135 	.word	0x08004135
 80040e0:	08004197 	.word	0x08004197
 80040e4:	08004143 	.word	0x08004143
 80040e8:	08004151 	.word	0x08004151
 80040ec:	0800415f 	.word	0x0800415f
 80040f0:	0800416d 	.word	0x0800416d
 80040f4:	0800417b 	.word	0x0800417b
 80040f8:	08004189 	.word	0x08004189
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 80040fc:	230b      	movs	r3, #11
 80040fe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8004100:	23ff      	movs	r3, #255	@ 0xff
 8004102:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8004104:	2387      	movs	r3, #135	@ 0x87
 8004106:	733b      	strb	r3, [r7, #12]
	    break;
 8004108:	e048      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 800410a:	2309      	movs	r3, #9
 800410c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 800410e:	23ff      	movs	r3, #255	@ 0xff
 8004110:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8004112:	2387      	movs	r3, #135	@ 0x87
 8004114:	733b      	strb	r3, [r7, #12]
            break;
 8004116:	e041      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8004118:	2309      	movs	r3, #9
 800411a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 800411c:	23fa      	movs	r3, #250	@ 0xfa
 800411e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8004120:	2387      	movs	r3, #135	@ 0x87
 8004122:	733b      	strb	r3, [r7, #12]
            break;
 8004124:	e03a      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8004126:	2304      	movs	r3, #4
 8004128:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 800412a:	23ff      	movs	r3, #255	@ 0xff
 800412c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 800412e:	2387      	movs	r3, #135	@ 0x87
 8004130:	733b      	strb	r3, [r7, #12]
            break;
 8004132:	e033      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8004134:	2304      	movs	r3, #4
 8004136:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8004138:	23fe      	movs	r3, #254	@ 0xfe
 800413a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 800413c:	2387      	movs	r3, #135	@ 0x87
 800413e:	733b      	strb	r3, [r7, #12]
	    break;
 8004140:	e02c      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8004142:	2304      	movs	r3, #4
 8004144:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8004146:	23fa      	movs	r3, #250	@ 0xfa
 8004148:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 800414a:	2387      	movs	r3, #135	@ 0x87
 800414c:	733b      	strb	r3, [r7, #12]
            break;
 800414e:	e025      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8004150:	2303      	movs	r3, #3
 8004152:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8004154:	23fa      	movs	r3, #250	@ 0xfa
 8004156:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8004158:	2387      	movs	r3, #135	@ 0x87
 800415a:	733b      	strb	r3, [r7, #12]
            break;
 800415c:	e01e      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 800415e:	2301      	movs	r3, #1
 8004160:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8004162:	23ff      	movs	r3, #255	@ 0xff
 8004164:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8004166:	2387      	movs	r3, #135	@ 0x87
 8004168:	733b      	strb	r3, [r7, #12]
            break;
 800416a:	e017      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 800416c:	2341      	movs	r3, #65	@ 0x41
 800416e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8004170:	23fb      	movs	r3, #251	@ 0xfb
 8004172:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8004174:	2386      	movs	r3, #134	@ 0x86
 8004176:	733b      	strb	r3, [r7, #12]
            break;
 8004178:	e010      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 800417a:	2300      	movs	r3, #0
 800417c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 800417e:	23fa      	movs	r3, #250	@ 0xfa
 8004180:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8004182:	2387      	movs	r3, #135	@ 0x87
 8004184:	733b      	strb	r3, [r7, #12]
            break;
 8004186:	e009      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8004188:	2300      	movs	r3, #0
 800418a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 800418c:	23d9      	movs	r3, #217	@ 0xd9
 800418e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8004190:	2382      	movs	r3, #130	@ 0x82
 8004192:	733b      	strb	r3, [r7, #12]
            break;
 8004194:	e002      	b.n	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
            break;
 800419a:	bf00      	nop
        }
        break;
 800419c:	e002      	b.n	80041a4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
        break;
 80041a2:	bf00      	nop
    }

    if (set) {
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d013      	beq.n	80041d2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 80041aa:	7bbb      	ldrb	r3, [r7, #14]
 80041ac:	461a      	mov	r2, r3
 80041ae:	212a      	movs	r1, #42	@ 0x2a
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fd5d 	bl	8003c70 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 80041b6:	7b7b      	ldrb	r3, [r7, #13]
 80041b8:	461a      	mov	r2, r3
 80041ba:	2129      	movs	r1, #41	@ 0x29
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fd57 	bl	8003c70 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 80041c2:	7b3b      	ldrb	r3, [r7, #12]
 80041c4:	461a      	mov	r2, r3
 80041c6:	2128      	movs	r1, #40	@ 0x28
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fd51 	bl	8003c70 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 80041d2:	2301      	movs	r3, #1
    }
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d034      	beq.n	8004260 <_ZN7MCP25159prepareIdEPhbm+0x84>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	3303      	adds	r3, #3
 80041fa:	8afa      	ldrh	r2, [r7, #22]
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8004200:	8afb      	ldrh	r3, [r7, #22]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	b29a      	uxth	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3302      	adds	r3, #2
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8004214:	8afb      	ldrh	r3, [r7, #22]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3301      	adds	r3, #1
 800421c:	f002 0203 	and.w	r2, r2, #3
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	3301      	adds	r3, #1
 8004228:	7819      	ldrb	r1, [r3, #0]
 800422a:	8afb      	ldrh	r3, [r7, #22]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f023 031f 	bic.w	r3, r3, #31
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3301      	adds	r3, #1
 800423a:	440a      	add	r2, r1
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	3301      	adds	r3, #1
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	3301      	adds	r3, #1
 800424a:	f042 0208 	orr.w	r2, r2, #8
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8004252:	8afb      	ldrh	r3, [r7, #22]
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	b29b      	uxth	r3, r3
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 800425e:	e013      	b.n	8004288 <_ZN7MCP25159prepareIdEPhbm+0xac>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8004260:	8afb      	ldrh	r3, [r7, #22]
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	b29b      	uxth	r3, r3
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	3301      	adds	r3, #1
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3303      	adds	r3, #3
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3302      	adds	r3, #2
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	72fb      	strb	r3, [r7, #11]
 80042a2:	4613      	mov	r3, r2
 80042a4:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fd73 	bl	8003d92 <_ZN7MCP251513setConfigModeEv>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80042b0:	7dbb      	ldrb	r3, [r7, #22]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 80042b6:	7dbb      	ldrb	r3, [r7, #22]
 80042b8:	e01c      	b.n	80042f4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80042ba:	7aba      	ldrb	r2, [r7, #10]
 80042bc:	f107 0110 	add.w	r1, r7, #16
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7ff ff8a 	bl	80041dc <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 80042c8:	7afb      	ldrb	r3, [r7, #11]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d003      	beq.n	80042da <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 80042d2:	e005      	b.n	80042e0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 80042d4:	2320      	movs	r3, #32
 80042d6:	75fb      	strb	r3, [r7, #23]
 80042d8:	e004      	b.n	80042e4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 80042da:	2324      	movs	r3, #36	@ 0x24
 80042dc:	75fb      	strb	r3, [r7, #23]
 80042de:	e001      	b.n	80042e4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e007      	b.n	80042f4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 80042e4:	f107 0210 	add.w	r2, r7, #16
 80042e8:	7df9      	ldrb	r1, [r7, #23]
 80042ea:	2304      	movs	r3, #4
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff fcdf 	bl	8003cb0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	607b      	str	r3, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	72fb      	strb	r3, [r7, #11]
 800430a:	4613      	mov	r3, r2
 800430c:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff fd3f 	bl	8003d92 <_ZN7MCP251513setConfigModeEv>
 8004314:	4603      	mov	r3, r0
 8004316:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004318:	7dbb      	ldrb	r3, [r7, #22]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 800431e:	7dbb      	ldrb	r3, [r7, #22]
 8004320:	e035      	b.n	800438e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 8004322:	7afb      	ldrb	r3, [r7, #11]
 8004324:	2b05      	cmp	r3, #5
 8004326:	d821      	bhi.n	800436c <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004349 	.word	0x08004349
 8004334:	0800434f 	.word	0x0800434f
 8004338:	08004355 	.word	0x08004355
 800433c:	0800435b 	.word	0x0800435b
 8004340:	08004361 	.word	0x08004361
 8004344:	08004367 	.word	0x08004367
        case RXF0: reg = MCP_RXF0SIDH; break;
 8004348:	2300      	movs	r3, #0
 800434a:	75fb      	strb	r3, [r7, #23]
 800434c:	e010      	b.n	8004370 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 800434e:	2304      	movs	r3, #4
 8004350:	75fb      	strb	r3, [r7, #23]
 8004352:	e00d      	b.n	8004370 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8004354:	2308      	movs	r3, #8
 8004356:	75fb      	strb	r3, [r7, #23]
 8004358:	e00a      	b.n	8004370 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 800435a:	2310      	movs	r3, #16
 800435c:	75fb      	strb	r3, [r7, #23]
 800435e:	e007      	b.n	8004370 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8004360:	2314      	movs	r3, #20
 8004362:	75fb      	strb	r3, [r7, #23]
 8004364:	e004      	b.n	8004370 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 8004366:	2318      	movs	r3, #24
 8004368:	75fb      	strb	r3, [r7, #23]
 800436a:	e001      	b.n	8004370 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 800436c:	2301      	movs	r3, #1
 800436e:	e00e      	b.n	800438e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8004370:	7aba      	ldrb	r2, [r7, #10]
 8004372:	f107 0110 	add.w	r1, r7, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff ff2f 	bl	80041dc <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 800437e:	f107 0210 	add.w	r2, r7, #16
 8004382:	7df9      	ldrb	r1, [r7, #23]
 8004384:	2304      	movs	r3, #4
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fc92 	bl	8003cb0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop

08004398 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	460b      	mov	r3, r1
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 80043a6:	7afb      	ldrb	r3, [r7, #11]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4a30      	ldr	r2, [pc, #192]	@ (800446c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 80043ac:	4413      	add	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	7859      	ldrb	r1, [r3, #1]
 80043b4:	f107 0210 	add.w	r2, r7, #16
 80043b8:	2305      	movs	r3, #5
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff fc29 	bl	8003c12 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80043c0:	7c3b      	ldrb	r3, [r7, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	7c7a      	ldrb	r2, [r7, #17]
 80043c6:	0952      	lsrs	r2, r2, #5
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	4413      	add	r3, r2
 80043cc:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80043ce:	7c7b      	ldrb	r3, [r7, #17]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d014      	beq.n	8004402 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	009a      	lsls	r2, r3, #2
 80043dc:	7c7b      	ldrb	r3, [r7, #17]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	7cba      	ldrb	r2, [r7, #18]
 80043ec:	4413      	add	r3, r2
 80043ee:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	7cfa      	ldrb	r2, [r7, #19]
 80043f6:	4413      	add	r3, r2
 80043f8:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004400:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 8004402:	7d3b      	ldrb	r3, [r7, #20]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d901      	bls.n	8004414 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8004410:	2301      	movs	r3, #1
 8004412:	e027      	b.n	8004464 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff fbda 	bl	8003bd4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004420:	4603      	mov	r3, r0
 8004422:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 8004424:	7dbb      	ldrb	r3, [r7, #22]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004434:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7dfa      	ldrb	r2, [r7, #23]
 8004440:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	7899      	ldrb	r1, [r3, #2]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f103 0208 	add.w	r2, r3, #8
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7ff fbdf 	bl	8003c12 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	78da      	ldrb	r2, [r3, #3]
 8004458:	2300      	movs	r3, #0
 800445a:	212c      	movs	r1, #44	@ 0x2c
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff fc56 	bl	8003d0e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	08017a48 	.word	0x08017a48

08004470 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff fc71 	bl	8003d62 <_ZN7MCP25159getStatusEv>
 8004480:	4603      	mov	r3, r0
 8004482:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8004484:	7bbb      	ldrb	r3, [r7, #14]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	2100      	movs	r1, #0
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ff80 	bl	8004398 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e00e      	b.n	80044bc <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 800449e:	7bbb      	ldrb	r3, [r7, #14]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	2101      	movs	r1, #1
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff73 	bl	8004398 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	e001      	b.n	80044bc <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 80044b8:	2305      	movs	r3, #5
 80044ba:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004500 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80044cc:	f7fd fe44 	bl	8002158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044d0:	480c      	ldr	r0, [pc, #48]	@ (8004504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044d2:	490d      	ldr	r1, [pc, #52]	@ (8004508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044d4:	4a0d      	ldr	r2, [pc, #52]	@ (800450c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d8:	e002      	b.n	80044e0 <LoopCopyDataInit>

080044da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044de:	3304      	adds	r3, #4

080044e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044e4:	d3f9      	bcc.n	80044da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044ec:	e001      	b.n	80044f2 <LoopFillZerobss>

080044ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044f0:	3204      	adds	r2, #4

080044f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044f4:	d3fb      	bcc.n	80044ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044f6:	f00b f98b 	bl	800f810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044fa:	f7fc fe47 	bl	800118c <main>
  bx  lr    
 80044fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004500:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004508:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800450c:	08017b48 	.word	0x08017b48
  ldr r2, =_sbss
 8004510:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8004514:	20001970 	.word	0x20001970

08004518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004518:	e7fe      	b.n	8004518 <ADC_IRQHandler>
	...

0800451c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004520:	4b0e      	ldr	r3, [pc, #56]	@ (800455c <HAL_Init+0x40>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0d      	ldr	r2, [pc, #52]	@ (800455c <HAL_Init+0x40>)
 8004526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800452a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_Init+0x40>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <HAL_Init+0x40>)
 8004532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004538:	4b08      	ldr	r3, [pc, #32]	@ (800455c <HAL_Init+0x40>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a07      	ldr	r2, [pc, #28]	@ (800455c <HAL_Init+0x40>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004544:	2003      	movs	r0, #3
 8004546:	f000 f94f 	bl	80047e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800454a:	200f      	movs	r0, #15
 800454c:	f000 f808 	bl	8004560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004550:	f7fd fce2 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40023c00 	.word	0x40023c00

08004560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004568:	4b12      	ldr	r3, [pc, #72]	@ (80045b4 <HAL_InitTick+0x54>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <HAL_InitTick+0x58>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4619      	mov	r1, r3
 8004572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004576:	fbb3 f3f1 	udiv	r3, r3, r1
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f967 	bl	8004852 <HAL_SYSTICK_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e00e      	b.n	80045ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b0f      	cmp	r3, #15
 8004592:	d80a      	bhi.n	80045aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004594:	2200      	movs	r2, #0
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	f000 f92f 	bl	80047fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045a0:	4a06      	ldr	r2, [pc, #24]	@ (80045bc <HAL_InitTick+0x5c>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e000      	b.n	80045ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000004 	.word	0x20000004
 80045b8:	2000002c 	.word	0x2000002c
 80045bc:	20000028 	.word	0x20000028

080045c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045c4:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <HAL_IncTick+0x20>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <HAL_IncTick+0x24>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4413      	add	r3, r2
 80045d0:	4a04      	ldr	r2, [pc, #16]	@ (80045e4 <HAL_IncTick+0x24>)
 80045d2:	6013      	str	r3, [r2, #0]
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	2000002c 	.word	0x2000002c
 80045e4:	20000400 	.word	0x20000400

080045e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return uwTick;
 80045ec:	4b03      	ldr	r3, [pc, #12]	@ (80045fc <HAL_GetTick+0x14>)
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000400 	.word	0x20000400

08004600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004608:	f7ff ffee 	bl	80045e8 <HAL_GetTick>
 800460c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d005      	beq.n	8004626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800461a:	4b0a      	ldr	r3, [pc, #40]	@ (8004644 <HAL_Delay+0x44>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004626:	bf00      	nop
 8004628:	f7ff ffde 	bl	80045e8 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	429a      	cmp	r2, r3
 8004636:	d8f7      	bhi.n	8004628 <HAL_Delay+0x28>
  {
  }
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	2000002c 	.word	0x2000002c

08004648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004658:	4b0c      	ldr	r3, [pc, #48]	@ (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467a:	4a04      	ldr	r2, [pc, #16]	@ (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	60d3      	str	r3, [r2, #12]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 0307 	and.w	r3, r3, #7
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db0b      	blt.n	80046d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	4907      	ldr	r1, [pc, #28]	@ (80046e4 <__NVIC_EnableIRQ+0x38>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2001      	movs	r0, #1
 80046ce:	fa00 f202 	lsl.w	r2, r0, r2
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	e000e100 	.word	0xe000e100

080046e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	6039      	str	r1, [r7, #0]
 80046f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db0a      	blt.n	8004712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	490c      	ldr	r1, [pc, #48]	@ (8004734 <__NVIC_SetPriority+0x4c>)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	440b      	add	r3, r1
 800470c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004710:	e00a      	b.n	8004728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	4908      	ldr	r1, [pc, #32]	@ (8004738 <__NVIC_SetPriority+0x50>)
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	3b04      	subs	r3, #4
 8004720:	0112      	lsls	r2, r2, #4
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	440b      	add	r3, r1
 8004726:	761a      	strb	r2, [r3, #24]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000e100 	.word	0xe000e100
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	@ 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f1c3 0307 	rsb	r3, r3, #7
 8004756:	2b04      	cmp	r3, #4
 8004758:	bf28      	it	cs
 800475a:	2304      	movcs	r3, #4
 800475c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3304      	adds	r3, #4
 8004762:	2b06      	cmp	r3, #6
 8004764:	d902      	bls.n	800476c <NVIC_EncodePriority+0x30>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3b03      	subs	r3, #3
 800476a:	e000      	b.n	800476e <NVIC_EncodePriority+0x32>
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43da      	mvns	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	401a      	ands	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004784:	f04f 31ff 	mov.w	r1, #4294967295
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	43d9      	mvns	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004794:	4313      	orrs	r3, r2
         );
}
 8004796:	4618      	mov	r0, r3
 8004798:	3724      	adds	r7, #36	@ 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047b4:	d301      	bcc.n	80047ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047b6:	2301      	movs	r3, #1
 80047b8:	e00f      	b.n	80047da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ba:	4a0a      	ldr	r2, [pc, #40]	@ (80047e4 <SysTick_Config+0x40>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047c2:	210f      	movs	r1, #15
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	f7ff ff8e 	bl	80046e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <SysTick_Config+0x40>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047d2:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <SysTick_Config+0x40>)
 80047d4:	2207      	movs	r2, #7
 80047d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	e000e010 	.word	0xe000e010

080047e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ff29 	bl	8004648 <__NVIC_SetPriorityGrouping>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004810:	f7ff ff3e 	bl	8004690 <__NVIC_GetPriorityGrouping>
 8004814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	6978      	ldr	r0, [r7, #20]
 800481c:	f7ff ff8e 	bl	800473c <NVIC_EncodePriority>
 8004820:	4602      	mov	r2, r0
 8004822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff5d 	bl	80046e8 <__NVIC_SetPriority>
}
 800482e:	bf00      	nop
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	4603      	mov	r3, r0
 800483e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ff31 	bl	80046ac <__NVIC_EnableIRQ>
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff ffa2 	bl	80047a4 <SysTick_Config>
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7ff feb6 	bl	80045e8 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e099      	b.n	80049bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048a8:	e00f      	b.n	80048ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048aa:	f7ff fe9d 	bl	80045e8 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d908      	bls.n	80048ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2203      	movs	r2, #3
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e078      	b.n	80049bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e8      	bne.n	80048aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4b38      	ldr	r3, [pc, #224]	@ (80049c4 <HAL_DMA_Init+0x158>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	2b04      	cmp	r3, #4
 8004922:	d107      	bne.n	8004934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	4313      	orrs	r3, r2
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	2b04      	cmp	r3, #4
 800495c:	d117      	bne.n	800498e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa91 	bl	8004e98 <DMA_CheckFifoParam>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2240      	movs	r2, #64	@ 0x40
 8004980:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800498a:	2301      	movs	r3, #1
 800498c:	e016      	b.n	80049bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa48 	bl	8004e2c <DMA_CalcBaseAndBitshift>
 800499c:	4603      	mov	r3, r0
 800499e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a4:	223f      	movs	r2, #63	@ 0x3f
 80049a6:	409a      	lsls	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	f010803f 	.word	0xf010803f

080049c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_DMA_Start_IT+0x26>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e040      	b.n	8004a70 <HAL_DMA_Start_IT+0xa8>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d12f      	bne.n	8004a62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f9da 	bl	8004dd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	223f      	movs	r2, #63	@ 0x3f
 8004a22:	409a      	lsls	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0216 	orr.w	r2, r2, #22
 8004a36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0208 	orr.w	r2, r2, #8
 8004a4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e005      	b.n	8004a6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d004      	beq.n	8004a96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2280      	movs	r2, #128	@ 0x80
 8004a90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e00c      	b.n	8004ab0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2205      	movs	r2, #5
 8004a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8004d04 <HAL_DMA_IRQHandler+0x248>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a8e      	ldr	r2, [pc, #568]	@ (8004d08 <HAL_DMA_IRQHandler+0x24c>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	0a9b      	lsrs	r3, r3, #10
 8004ad4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01a      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0204 	bic.w	r2, r2, #4
 8004b0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b14:	2208      	movs	r2, #8
 8004b16:	409a      	lsls	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d012      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b56:	f043 0202 	orr.w	r2, r3, #2
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b62:	2204      	movs	r2, #4
 8004b64:	409a      	lsls	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d012      	beq.n	8004b94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b80:	2204      	movs	r2, #4
 8004b82:	409a      	lsls	r2, r3
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8c:	f043 0204 	orr.w	r2, r3, #4
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b98:	2210      	movs	r2, #16
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d043      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d03c      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d018      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d024      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
 8004bea:	e01f      	b.n	8004c2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
 8004bfc:	e016      	b.n	8004c2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d107      	bne.n	8004c1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0208 	bic.w	r2, r2, #8
 8004c1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c30:	2220      	movs	r2, #32
 8004c32:	409a      	lsls	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 808f 	beq.w	8004d5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8087 	beq.w	8004d5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c52:	2220      	movs	r2, #32
 8004c54:	409a      	lsls	r2, r3
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d136      	bne.n	8004cd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0216 	bic.w	r2, r2, #22
 8004c74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <HAL_DMA_IRQHandler+0x1da>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0208 	bic.w	r2, r2, #8
 8004ca4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004caa:	223f      	movs	r2, #63	@ 0x3f
 8004cac:	409a      	lsls	r2, r3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d07e      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4798      	blx	r3
        }
        return;
 8004cd2:	e079      	b.n	8004dc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01d      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10d      	bne.n	8004d0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d031      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
 8004d00:	e02c      	b.n	8004d5c <HAL_DMA_IRQHandler+0x2a0>
 8004d02:	bf00      	nop
 8004d04:	20000004 	.word	0x20000004
 8004d08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d023      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
 8004d1c:	e01e      	b.n	8004d5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10f      	bne.n	8004d4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0210 	bic.w	r2, r2, #16
 8004d3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d032      	beq.n	8004dca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d022      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2205      	movs	r2, #5
 8004d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d307      	bcc.n	8004da4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f2      	bne.n	8004d88 <HAL_DMA_IRQHandler+0x2cc>
 8004da2:	e000      	b.n	8004da6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004da4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
 8004dc6:	e000      	b.n	8004dca <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dc8:	bf00      	nop
    }
  }
}
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004dec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b40      	cmp	r3, #64	@ 0x40
 8004dfc:	d108      	bne.n	8004e10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e0e:	e007      	b.n	8004e20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	3b10      	subs	r3, #16
 8004e3c:	4a14      	ldr	r2, [pc, #80]	@ (8004e90 <DMA_CalcBaseAndBitshift+0x64>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e46:	4a13      	ldr	r2, [pc, #76]	@ (8004e94 <DMA_CalcBaseAndBitshift+0x68>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d909      	bls.n	8004e6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	1d1a      	adds	r2, r3, #4
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e6c:	e007      	b.n	8004e7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	aaaaaaab 	.word	0xaaaaaaab
 8004e94:	08017a50 	.word	0x08017a50

08004e98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11f      	bne.n	8004ef2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d856      	bhi.n	8004f66 <DMA_CheckFifoParam+0xce>
 8004eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec0 <DMA_CheckFifoParam+0x28>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ed1 	.word	0x08004ed1
 8004ec4:	08004ee3 	.word	0x08004ee3
 8004ec8:	08004ed1 	.word	0x08004ed1
 8004ecc:	08004f67 	.word	0x08004f67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d046      	beq.n	8004f6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee0:	e043      	b.n	8004f6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004eea:	d140      	bne.n	8004f6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef0:	e03d      	b.n	8004f6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004efa:	d121      	bne.n	8004f40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d837      	bhi.n	8004f72 <DMA_CheckFifoParam+0xda>
 8004f02:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <DMA_CheckFifoParam+0x70>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f1f 	.word	0x08004f1f
 8004f10:	08004f19 	.word	0x08004f19
 8004f14:	08004f31 	.word	0x08004f31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1c:	e030      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d025      	beq.n	8004f76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f2e:	e022      	b.n	8004f76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f38:	d11f      	bne.n	8004f7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f3e:	e01c      	b.n	8004f7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d903      	bls.n	8004f4e <DMA_CheckFifoParam+0xb6>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d003      	beq.n	8004f54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f4c:	e018      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
      break;
 8004f52:	e015      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00e      	beq.n	8004f7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e00b      	b.n	8004f7e <DMA_CheckFifoParam+0xe6>
      break;
 8004f66:	bf00      	nop
 8004f68:	e00a      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e008      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e006      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
      break;
 8004f72:	bf00      	nop
 8004f74:	e004      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
      break;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
      break;
 8004f7e:	bf00      	nop
    }
  } 
  
  return status; 
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop

08004f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	@ 0x24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	e159      	b.n	8005260 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fac:	2201      	movs	r2, #1
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	f040 8148 	bne.w	800525a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d005      	beq.n	8004fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d130      	bne.n	8005044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	2203      	movs	r2, #3
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005018:	2201      	movs	r2, #1
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 0201 	and.w	r2, r3, #1
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b03      	cmp	r3, #3
 800504e:	d017      	beq.n	8005080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	2203      	movs	r2, #3
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d123      	bne.n	80050d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	08da      	lsrs	r2, r3, #3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3208      	adds	r2, #8
 8005094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	220f      	movs	r2, #15
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	08da      	lsrs	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3208      	adds	r2, #8
 80050ce:	69b9      	ldr	r1, [r7, #24]
 80050d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	2203      	movs	r2, #3
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 0203 	and.w	r2, r3, #3
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80a2 	beq.w	800525a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	4b57      	ldr	r3, [pc, #348]	@ (8005278 <HAL_GPIO_Init+0x2e8>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511e:	4a56      	ldr	r2, [pc, #344]	@ (8005278 <HAL_GPIO_Init+0x2e8>)
 8005120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005124:	6453      	str	r3, [r2, #68]	@ 0x44
 8005126:	4b54      	ldr	r3, [pc, #336]	@ (8005278 <HAL_GPIO_Init+0x2e8>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005132:	4a52      	ldr	r2, [pc, #328]	@ (800527c <HAL_GPIO_Init+0x2ec>)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3302      	adds	r3, #2
 800513a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	220f      	movs	r2, #15
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a49      	ldr	r2, [pc, #292]	@ (8005280 <HAL_GPIO_Init+0x2f0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d019      	beq.n	8005192 <HAL_GPIO_Init+0x202>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a48      	ldr	r2, [pc, #288]	@ (8005284 <HAL_GPIO_Init+0x2f4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_GPIO_Init+0x1fe>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a47      	ldr	r2, [pc, #284]	@ (8005288 <HAL_GPIO_Init+0x2f8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00d      	beq.n	800518a <HAL_GPIO_Init+0x1fa>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a46      	ldr	r2, [pc, #280]	@ (800528c <HAL_GPIO_Init+0x2fc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <HAL_GPIO_Init+0x1f6>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a45      	ldr	r2, [pc, #276]	@ (8005290 <HAL_GPIO_Init+0x300>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <HAL_GPIO_Init+0x1f2>
 800517e:	2304      	movs	r3, #4
 8005180:	e008      	b.n	8005194 <HAL_GPIO_Init+0x204>
 8005182:	2307      	movs	r3, #7
 8005184:	e006      	b.n	8005194 <HAL_GPIO_Init+0x204>
 8005186:	2303      	movs	r3, #3
 8005188:	e004      	b.n	8005194 <HAL_GPIO_Init+0x204>
 800518a:	2302      	movs	r3, #2
 800518c:	e002      	b.n	8005194 <HAL_GPIO_Init+0x204>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <HAL_GPIO_Init+0x204>
 8005192:	2300      	movs	r3, #0
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	f002 0203 	and.w	r2, r2, #3
 800519a:	0092      	lsls	r2, r2, #2
 800519c:	4093      	lsls	r3, r2
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a4:	4935      	ldr	r1, [pc, #212]	@ (800527c <HAL_GPIO_Init+0x2ec>)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	3302      	adds	r3, #2
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051b2:	4b38      	ldr	r3, [pc, #224]	@ (8005294 <HAL_GPIO_Init+0x304>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005294 <HAL_GPIO_Init+0x304>)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005294 <HAL_GPIO_Init+0x304>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005200:	4a24      	ldr	r2, [pc, #144]	@ (8005294 <HAL_GPIO_Init+0x304>)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005206:	4b23      	ldr	r3, [pc, #140]	@ (8005294 <HAL_GPIO_Init+0x304>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800522a:	4a1a      	ldr	r2, [pc, #104]	@ (8005294 <HAL_GPIO_Init+0x304>)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005230:	4b18      	ldr	r3, [pc, #96]	@ (8005294 <HAL_GPIO_Init+0x304>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005254:	4a0f      	ldr	r2, [pc, #60]	@ (8005294 <HAL_GPIO_Init+0x304>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	f67f aea2 	bls.w	8004fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	3724      	adds	r7, #36	@ 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800
 800527c:	40013800 	.word	0x40013800
 8005280:	40020000 	.word	0x40020000
 8005284:	40020400 	.word	0x40020400
 8005288:	40020800 	.word	0x40020800
 800528c:	40020c00 	.word	0x40020c00
 8005290:	40021000 	.word	0x40021000
 8005294:	40013c00 	.word	0x40013c00

08005298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
 80052a4:	4613      	mov	r3, r2
 80052a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052a8:	787b      	ldrb	r3, [r7, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ae:	887a      	ldrh	r2, [r7, #2]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052b4:	e003      	b.n	80052be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052b6:	887b      	ldrh	r3, [r7, #2]
 80052b8:	041a      	lsls	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	619a      	str	r2, [r3, #24]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052d6:	4b08      	ldr	r3, [pc, #32]	@ (80052f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	4013      	ands	r3, r2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d006      	beq.n	80052f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052e2:	4a05      	ldr	r2, [pc, #20]	@ (80052f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fb ff16 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40013c00 	.word	0x40013c00

080052fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e101      	b.n	8005512 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f009 fd65 	bl	800edf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2203      	movs	r2, #3
 8005332:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800533c:	d102      	bne.n	8005344 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f003 ff5c 	bl	8009206 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	7c1a      	ldrb	r2, [r3, #16]
 8005356:	f88d 2000 	strb.w	r2, [sp]
 800535a:	3304      	adds	r3, #4
 800535c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800535e:	f003 fe3b 	bl	8008fd8 <USB_CoreInit>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0ce      	b.n	8005512 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f003 ff54 	bl	8009228 <USB_SetCurrentMode>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e0bf      	b.n	8005512 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	73fb      	strb	r3, [r7, #15]
 8005396:	e04a      	b.n	800542e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	3315      	adds	r3, #21
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053ac:	7bfa      	ldrb	r2, [r7, #15]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	3314      	adds	r3, #20
 80053bc:	7bfa      	ldrb	r2, [r7, #15]
 80053be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053c0:	7bfa      	ldrb	r2, [r7, #15]
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	b298      	uxth	r0, r3
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	332e      	adds	r3, #46	@ 0x2e
 80053d4:	4602      	mov	r2, r0
 80053d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3318      	adds	r3, #24
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053ec:	7bfa      	ldrb	r2, [r7, #15]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	331c      	adds	r3, #28
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	3320      	adds	r3, #32
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	3324      	adds	r3, #36	@ 0x24
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	3301      	adds	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	7bfa      	ldrb	r2, [r7, #15]
 8005434:	429a      	cmp	r2, r3
 8005436:	d3af      	bcc.n	8005398 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005438:	2300      	movs	r3, #0
 800543a:	73fb      	strb	r3, [r7, #15]
 800543c:	e044      	b.n	80054c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800543e:	7bfa      	ldrb	r2, [r7, #15]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005454:	7bfa      	ldrb	r2, [r7, #15]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005466:	7bfa      	ldrb	r2, [r7, #15]
 8005468:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800546a:	7bfa      	ldrb	r2, [r7, #15]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005480:	7bfa      	ldrb	r2, [r7, #15]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005496:	7bfa      	ldrb	r2, [r7, #15]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054ac:	7bfa      	ldrb	r2, [r7, #15]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	3301      	adds	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	791b      	ldrb	r3, [r3, #4]
 80054cc:	7bfa      	ldrb	r2, [r7, #15]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d3b5      	bcc.n	800543e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	7c1a      	ldrb	r2, [r3, #16]
 80054da:	f88d 2000 	strb.w	r2, [sp]
 80054de:	3304      	adds	r3, #4
 80054e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054e2:	f003 feed 	bl	80092c0 <USB_DevInit>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e00c      	b.n	8005512 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f004 ff37 	bl	800a37e <USB_DevDisconnect>

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_PCD_Start+0x1c>
 8005532:	2302      	movs	r3, #2
 8005534:	e022      	b.n	800557c <HAL_PCD_Start+0x62>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800554e:	2b01      	cmp	r3, #1
 8005550:	d105      	bne.n	800555e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005556:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f003 fe3e 	bl	80091e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f004 fee5 	bl	800a33c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005584:	b590      	push	{r4, r7, lr}
 8005586:	b08d      	sub	sp, #52	@ 0x34
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f004 ffa3 	bl	800a4e6 <USB_GetMode>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 848c 	bne.w	8005ec0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f004 ff07 	bl	800a3c0 <USB_ReadInterrupts>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8482 	beq.w	8005ebe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f004 fef4 	bl	800a3c0 <USB_ReadInterrupts>
 80055d8:	4603      	mov	r3, r0
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d107      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f002 0202 	and.w	r2, r2, #2
 80055f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f004 fee2 	bl	800a3c0 <USB_ReadInterrupts>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b10      	cmp	r3, #16
 8005604:	d161      	bne.n	80056ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699a      	ldr	r2, [r3, #24]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0210 	bic.w	r2, r2, #16
 8005614:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	0c5b      	lsrs	r3, r3, #17
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	2b02      	cmp	r3, #2
 8005640:	d124      	bne.n	800568c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d035      	beq.n	80056ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800565c:	b29b      	uxth	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	6a38      	ldr	r0, [r7, #32]
 8005662:	f004 fd19 	bl	800a098 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005672:	441a      	add	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005684:	441a      	add	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	615a      	str	r2, [r3, #20]
 800568a:	e016      	b.n	80056ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	0c5b      	lsrs	r3, r3, #17
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	2b06      	cmp	r3, #6
 8005696:	d110      	bne.n	80056ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800569e:	2208      	movs	r2, #8
 80056a0:	4619      	mov	r1, r3
 80056a2:	6a38      	ldr	r0, [r7, #32]
 80056a4:	f004 fcf8 	bl	800a098 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056b4:	441a      	add	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0210 	orr.w	r2, r2, #16
 80056c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f004 fe76 	bl	800a3c0 <USB_ReadInterrupts>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80056de:	f040 80a7 	bne.w	8005830 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f004 fe7b 	bl	800a3e6 <USB_ReadDevAllOutEpInterrupt>
 80056f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80056f2:	e099      	b.n	8005828 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 808e 	beq.w	800581c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f004 fe9f 	bl	800a44e <USB_ReadDevOutEPInterrupt>
 8005710:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	2301      	movs	r3, #1
 800572c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800572e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fea3 	bl	800647c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574c:	461a      	mov	r2, r3
 800574e:	2308      	movs	r3, #8
 8005750:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005752:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 ff79 	bl	800664c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005770:	461a      	mov	r2, r3
 8005772:	2310      	movs	r3, #16
 8005774:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d030      	beq.n	80057e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005788:	2b80      	cmp	r3, #128	@ 0x80
 800578a:	d109      	bne.n	80057a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800579a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800579e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80057a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a2:	4613      	mov	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	3304      	adds	r3, #4
 80057b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	78db      	ldrb	r3, [r3, #3]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d108      	bne.n	80057d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2200      	movs	r2, #0
 80057c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f009 fc10 	bl	800eff0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057dc:	461a      	mov	r2, r3
 80057de:	2302      	movs	r3, #2
 80057e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f8:	461a      	mov	r2, r3
 80057fa:	2320      	movs	r3, #32
 80057fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005814:	461a      	mov	r2, r3
 8005816:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800581a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	3301      	adds	r3, #1
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	f47f af62 	bne.w	80056f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f004 fdc3 	bl	800a3c0 <USB_ReadInterrupts>
 800583a:	4603      	mov	r3, r0
 800583c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005840:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005844:	f040 80db 	bne.w	80059fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f004 fde4 	bl	800a41a <USB_ReadDevAllInEpInterrupt>
 8005852:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005858:	e0cd      	b.n	80059f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80c2 	beq.w	80059ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f004 fe0a 	bl	800a48a <USB_ReadDevInEPInterrupt>
 8005876:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d057      	beq.n	8005932 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	2201      	movs	r2, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	43db      	mvns	r3, r3
 800589c:	69f9      	ldr	r1, [r7, #28]
 800589e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058a2:	4013      	ands	r3, r2
 80058a4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b2:	461a      	mov	r2, r3
 80058b4:	2301      	movs	r3, #1
 80058b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	799b      	ldrb	r3, [r3, #6]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d132      	bne.n	8005926 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c4:	4613      	mov	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	3320      	adds	r3, #32
 80058d0:	6819      	ldr	r1, [r3, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4403      	add	r3, r0
 80058e0:	331c      	adds	r3, #28
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4419      	add	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ea:	4613      	mov	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4403      	add	r3, r0
 80058f4:	3320      	adds	r3, #32
 80058f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d113      	bne.n	8005926 <HAL_PCD_IRQHandler+0x3a2>
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	3324      	adds	r3, #36	@ 0x24
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d108      	bne.n	8005926 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800591e:	461a      	mov	r2, r3
 8005920:	2101      	movs	r1, #1
 8005922:	f004 fe11 	bl	800a548 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	b2db      	uxtb	r3, r3
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f009 fae4 	bl	800eefa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005948:	461a      	mov	r2, r3
 800594a:	2308      	movs	r3, #8
 800594c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005964:	461a      	mov	r2, r3
 8005966:	2310      	movs	r3, #16
 8005968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005980:	461a      	mov	r2, r3
 8005982:	2340      	movs	r3, #64	@ 0x40
 8005984:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d023      	beq.n	80059d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005992:	6a38      	ldr	r0, [r7, #32]
 8005994:	f003 fdf8 	bl	8009588 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	3310      	adds	r3, #16
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	4413      	add	r3, r2
 80059a8:	3304      	adds	r3, #4
 80059aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	78db      	ldrb	r3, [r3, #3]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d108      	bne.n	80059c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2200      	movs	r2, #0
 80059b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f009 fb27 	bl	800f014 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d2:	461a      	mov	r2, r3
 80059d4:	2302      	movs	r3, #2
 80059d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80059e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fcbd 	bl	8006364 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	3301      	adds	r3, #1
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f47f af2e 	bne.w	800585a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f004 fcdc 	bl	800a3c0 <USB_ReadInterrupts>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a12:	d122      	bne.n	8005a5a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d108      	bne.n	8005a44 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fea3 	bl	8006788 <HAL_PCDEx_LPM_Callback>
 8005a42:	e002      	b.n	8005a4a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f009 fac5 	bl	800efd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f004 fcae 	bl	800a3c0 <USB_ReadInterrupts>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a6e:	d112      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d102      	bne.n	8005a86 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f009 fa81 	bl	800ef88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005a94:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f004 fc90 	bl	800a3c0 <USB_ReadInterrupts>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aaa:	f040 80b7 	bne.w	8005c1c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2110      	movs	r1, #16
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f003 fd5d 	bl	8009588 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad2:	e046      	b.n	8005b62 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ae6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5e:	3301      	adds	r3, #1
 8005b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	791b      	ldrb	r3, [r3, #4]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d3b2      	bcc.n	8005ad4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b7c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005b80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	7bdb      	ldrb	r3, [r3, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d016      	beq.n	8005bb8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b9a:	f043 030b 	orr.w	r3, r3, #11
 8005b9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bb0:	f043 030b 	orr.w	r3, r3, #11
 8005bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bb6:	e015      	b.n	8005be4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005bca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005bce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bde:	f043 030b 	orr.w	r3, r3, #11
 8005be2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bf2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005bf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c06:	461a      	mov	r2, r3
 8005c08:	f004 fc9e 	bl	800a548 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f004 fbcd 	bl	800a3c0 <USB_ReadInterrupts>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c30:	d123      	bne.n	8005c7a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f004 fc63 	bl	800a502 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f003 fd1a 	bl	800967a <USB_GetDevSpeed>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681c      	ldr	r4, [r3, #0]
 8005c52:	f001 f9c9 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8005c56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f003 fa1e 	bl	80090a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f009 f970 	bl	800ef4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f004 fb9e 	bl	800a3c0 <USB_ReadInterrupts>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d10a      	bne.n	8005ca4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f009 f94d 	bl	800ef2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f002 0208 	and.w	r2, r2, #8
 8005ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f004 fb89 	bl	800a3c0 <USB_ReadInterrupts>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb4:	2b80      	cmp	r3, #128	@ 0x80
 8005cb6:	d123      	bne.n	8005d00 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc8:	e014      	b.n	8005cf4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d105      	bne.n	8005cee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb0a 	bl	8006302 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	791b      	ldrb	r3, [r3, #4]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d3e4      	bcc.n	8005cca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f004 fb5b 	bl	800a3c0 <USB_ReadInterrupts>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d14:	d13c      	bne.n	8005d90 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d16:	2301      	movs	r3, #1
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1a:	e02b      	b.n	8005d74 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d30:	4613      	mov	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	3318      	adds	r3, #24
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d115      	bne.n	8005d6e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da12      	bge.n	8005d6e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3317      	adds	r3, #23
 8005d58:	2201      	movs	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 faca 	bl	8006302 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	3301      	adds	r3, #1
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	791b      	ldrb	r3, [r3, #4]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d3cd      	bcc.n	8005d1c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f004 fb13 	bl	800a3c0 <USB_ReadInterrupts>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005da4:	d156      	bne.n	8005e54 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005da6:	2301      	movs	r3, #1
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005daa:	e045      	b.n	8005e38 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d12e      	bne.n	8005e32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005dd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da2b      	bge.n	8005e32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005de6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d121      	bne.n	8005e32 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e2e:	6053      	str	r3, [r2, #4]
            break;
 8005e30:	e008      	b.n	8005e44 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	3301      	adds	r3, #1
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	791b      	ldrb	r3, [r3, #4]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d3b3      	bcc.n	8005dac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f004 fab1 	bl	800a3c0 <USB_ReadInterrupts>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e68:	d10a      	bne.n	8005e80 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f009 f8e4 	bl	800f038 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f004 fa9b 	bl	800a3c0 <USB_ReadInterrupts>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d115      	bne.n	8005ec0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f009 f8d4 	bl	800f054 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6859      	ldr	r1, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
 8005ebc:	e000      	b.n	8005ec0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005ebe:	bf00      	nop
    }
  }
}
 8005ec0:	3734      	adds	r7, #52	@ 0x34
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd90      	pop	{r4, r7, pc}

08005ec6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_PCD_SetAddress+0x1a>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e012      	b.n	8005f06 <HAL_PCD_SetAddress+0x40>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f004 f9fa 	bl	800a2f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	4608      	mov	r0, r1
 8005f18:	4611      	mov	r1, r2
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	70fb      	strb	r3, [r7, #3]
 8005f20:	460b      	mov	r3, r1
 8005f22:	803b      	strh	r3, [r7, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da0f      	bge.n	8005f54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	f003 020f 	and.w	r2, r3, #15
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	3310      	adds	r3, #16
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	4413      	add	r3, r2
 8005f48:	3304      	adds	r3, #4
 8005f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	705a      	strb	r2, [r3, #1]
 8005f52:	e00f      	b.n	8005f74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	f003 020f 	and.w	r2, r3, #15
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	4413      	add	r3, r2
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005f80:	883b      	ldrh	r3, [r7, #0]
 8005f82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	78ba      	ldrb	r2, [r7, #2]
 8005f8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fa2:	78bb      	ldrb	r3, [r7, #2]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d102      	bne.n	8005fae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_PCD_EP_Open+0xae>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e00e      	b.n	8005fda <HAL_PCD_EP_Open+0xcc>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68f9      	ldr	r1, [r7, #12]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f003 fb7a 	bl	80096c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da0f      	bge.n	8006016 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	f003 020f 	and.w	r2, r3, #15
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	3310      	adds	r3, #16
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	3304      	adds	r3, #4
 800600c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	705a      	strb	r2, [r3, #1]
 8006014:	e00f      	b.n	8006036 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	f003 020f 	and.w	r2, r3, #15
 800601c:	4613      	mov	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	3304      	adds	r3, #4
 800602e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	b2da      	uxtb	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_PCD_EP_Close+0x6e>
 800604c:	2302      	movs	r3, #2
 800604e:	e00e      	b.n	800606e <HAL_PCD_EP_Close+0x8c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	4618      	mov	r0, r3
 8006060:	f003 fbb8 	bl	80097d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
 8006082:	460b      	mov	r3, r1
 8006084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006086:	7afb      	ldrb	r3, [r7, #11]
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	4613      	mov	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	3304      	adds	r3, #4
 800609e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2200      	movs	r2, #0
 80060b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060b8:	7afb      	ldrb	r3, [r7, #11]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	799b      	ldrb	r3, [r3, #6]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d102      	bne.n	80060d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	799b      	ldrb	r3, [r3, #6]
 80060da:	461a      	mov	r2, r3
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	f003 fc55 	bl	800998c <USB_EPStartXfer>

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800610e:	681b      	ldr	r3, [r3, #0]
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	460b      	mov	r3, r1
 800612a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800612c:	7afb      	ldrb	r3, [r7, #11]
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	3310      	adds	r3, #16
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	3304      	adds	r3, #4
 8006142:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2200      	movs	r2, #0
 8006154:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2201      	movs	r2, #1
 800615a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800615c:	7afb      	ldrb	r3, [r7, #11]
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	b2da      	uxtb	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	799b      	ldrb	r3, [r3, #6]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d102      	bne.n	8006176 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	799b      	ldrb	r3, [r3, #6]
 800617e:	461a      	mov	r2, r3
 8006180:	6979      	ldr	r1, [r7, #20]
 8006182:	f003 fc03 	bl	800998c <USB_EPStartXfer>

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	7912      	ldrb	r2, [r2, #4]
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d901      	bls.n	80061ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e04f      	b.n	800624e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da0f      	bge.n	80061d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 020f 	and.w	r2, r3, #15
 80061bc:	4613      	mov	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	3310      	adds	r3, #16
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	3304      	adds	r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	705a      	strb	r2, [r3, #1]
 80061d4:	e00d      	b.n	80061f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	4613      	mov	r3, r2
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4413      	add	r3, r2
 80061e8:	3304      	adds	r3, #4
 80061ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_PCD_EP_SetStall+0x82>
 800620e:	2302      	movs	r3, #2
 8006210:	e01d      	b.n	800624e <HAL_PCD_EP_SetStall+0xbe>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68f9      	ldr	r1, [r7, #12]
 8006220:	4618      	mov	r0, r3
 8006222:	f003 ff91 	bl	800a148 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	2b00      	cmp	r3, #0
 800622e:	d109      	bne.n	8006244 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	7999      	ldrb	r1, [r3, #6]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800623e:	461a      	mov	r2, r3
 8006240:	f004 f982 	bl	800a548 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	7912      	ldrb	r2, [r2, #4]
 800626c:	4293      	cmp	r3, r2
 800626e:	d901      	bls.n	8006274 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e042      	b.n	80062fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006278:	2b00      	cmp	r3, #0
 800627a:	da0f      	bge.n	800629c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	4613      	mov	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	3310      	adds	r3, #16
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	4413      	add	r3, r2
 8006290:	3304      	adds	r3, #4
 8006292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	705a      	strb	r2, [r3, #1]
 800629a:	e00f      	b.n	80062bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	f003 020f 	and.w	r2, r3, #15
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4413      	add	r3, r2
 80062b2:	3304      	adds	r3, #4
 80062b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_PCD_EP_ClrStall+0x86>
 80062d8:	2302      	movs	r3, #2
 80062da:	e00e      	b.n	80062fa <HAL_PCD_EP_ClrStall+0xa4>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68f9      	ldr	r1, [r7, #12]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f003 ff9a 	bl	800a224 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800630e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006312:	2b00      	cmp	r3, #0
 8006314:	da0c      	bge.n	8006330 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f003 020f 	and.w	r2, r3, #15
 800631c:	4613      	mov	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	3310      	adds	r3, #16
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	4413      	add	r3, r2
 800632a:	3304      	adds	r3, #4
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	e00c      	b.n	800634a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	f003 020f 	and.w	r2, r3, #15
 8006336:	4613      	mov	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4413      	add	r3, r2
 8006346:	3304      	adds	r3, #4
 8006348:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68f9      	ldr	r1, [r7, #12]
 8006350:	4618      	mov	r0, r3
 8006352:	f003 fdb9 	bl	8009ec8 <USB_EPStopXfer>
 8006356:	4603      	mov	r3, r0
 8006358:	72fb      	strb	r3, [r7, #11]

  return ret;
 800635a:	7afb      	ldrb	r3, [r7, #11]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af02      	add	r7, sp, #8
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	4613      	mov	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	3310      	adds	r3, #16
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	3304      	adds	r3, #4
 800638a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	695a      	ldr	r2, [r3, #20]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	429a      	cmp	r2, r3
 8006396:	d901      	bls.n	800639c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e06b      	b.n	8006474 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d902      	bls.n	80063b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3303      	adds	r3, #3
 80063bc:	089b      	lsrs	r3, r3, #2
 80063be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063c0:	e02a      	b.n	8006418 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d902      	bls.n	80063de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3303      	adds	r3, #3
 80063e2:	089b      	lsrs	r3, r3, #2
 80063e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68d9      	ldr	r1, [r3, #12]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	4603      	mov	r3, r0
 80063fa:	6978      	ldr	r0, [r7, #20]
 80063fc:	f003 fe0e 	bl	800a01c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	441a      	add	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	441a      	add	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	429a      	cmp	r2, r3
 800642c:	d809      	bhi.n	8006442 <PCD_WriteEmptyTxFifo+0xde>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006436:	429a      	cmp	r2, r3
 8006438:	d203      	bcs.n	8006442 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1bf      	bne.n	80063c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	429a      	cmp	r2, r3
 800644c:	d811      	bhi.n	8006472 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	2201      	movs	r2, #1
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	43db      	mvns	r3, r3
 8006468:	6939      	ldr	r1, [r7, #16]
 800646a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800646e:	4013      	ands	r3, r2
 8006470:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	333c      	adds	r3, #60	@ 0x3c
 8006494:	3304      	adds	r3, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	799b      	ldrb	r3, [r3, #6]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d17b      	bne.n	80065aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d015      	beq.n	80064e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	4a61      	ldr	r2, [pc, #388]	@ (8006644 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	f240 80b9 	bls.w	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80b3 	beq.w	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064de:	461a      	mov	r2, r3
 80064e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064e4:	6093      	str	r3, [r2, #8]
 80064e6:	e0a7      	b.n	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064fe:	461a      	mov	r2, r3
 8006500:	2320      	movs	r3, #32
 8006502:	6093      	str	r3, [r2, #8]
 8006504:	e098      	b.n	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	f040 8093 	bne.w	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4a4b      	ldr	r2, [pc, #300]	@ (8006644 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d90f      	bls.n	800653a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006530:	461a      	mov	r2, r3
 8006532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006536:	6093      	str	r3, [r2, #8]
 8006538:	e07e      	b.n	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	4413      	add	r3, r2
 800654c:	3304      	adds	r3, #4
 800654e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1a      	ldr	r2, [r3, #32]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	0159      	lsls	r1, r3, #5
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	440b      	add	r3, r1
 800655c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d114      	bne.n	800659c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006584:	461a      	mov	r2, r3
 8006586:	2101      	movs	r1, #1
 8006588:	f003 ffde 	bl	800a548 <USB_EP0_OutStart>
 800658c:	e006      	b.n	800659c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	441a      	add	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f008 fc8e 	bl	800eec4 <HAL_PCD_DataOutStageCallback>
 80065a8:	e046      	b.n	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4a26      	ldr	r2, [pc, #152]	@ (8006648 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d124      	bne.n	80065fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c8:	461a      	mov	r2, r3
 80065ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ce:	6093      	str	r3, [r2, #8]
 80065d0:	e032      	b.n	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e8:	461a      	mov	r2, r3
 80065ea:	2320      	movs	r3, #32
 80065ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f008 fc65 	bl	800eec4 <HAL_PCD_DataOutStageCallback>
 80065fa:	e01d      	b.n	8006638 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d114      	bne.n	800662c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d108      	bne.n	800662c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006624:	461a      	mov	r2, r3
 8006626:	2100      	movs	r1, #0
 8006628:	f003 ff8e 	bl	800a548 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f008 fc46 	bl	800eec4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	4f54300a 	.word	0x4f54300a
 8006648:	4f54310a 	.word	0x4f54310a

0800664c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	333c      	adds	r3, #60	@ 0x3c
 8006664:	3304      	adds	r3, #4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4a15      	ldr	r2, [pc, #84]	@ (80066d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d90e      	bls.n	80066a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006698:	461a      	mov	r2, r3
 800669a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800669e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f008 fbfd 	bl	800eea0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a0a      	ldr	r2, [pc, #40]	@ (80066d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d90c      	bls.n	80066c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	799b      	ldrb	r3, [r3, #6]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d108      	bne.n	80066c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80066c0:	461a      	mov	r2, r3
 80066c2:	2101      	movs	r1, #1
 80066c4:	f003 ff40 	bl	800a548 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	4f54300a 	.word	0x4f54300a

080066d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
 80066e4:	4613      	mov	r3, r2
 80066e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d107      	bne.n	8006706 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80066f6:	883b      	ldrh	r3, [r7, #0]
 80066f8:	0419      	lsls	r1, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	430a      	orrs	r2, r1
 8006702:	629a      	str	r2, [r3, #40]	@ 0x28
 8006704:	e028      	b.n	8006758 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4413      	add	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
 8006718:	e00d      	b.n	8006736 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	3340      	adds	r3, #64	@ 0x40
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	0c1b      	lsrs	r3, r3, #16
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4413      	add	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	3301      	adds	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]
 8006736:	7bfa      	ldrb	r2, [r7, #15]
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	3b01      	subs	r3, #1
 800673c:	429a      	cmp	r2, r3
 800673e:	d3ec      	bcc.n	800671a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006740:	883b      	ldrh	r3, [r7, #0]
 8006742:	0418      	lsls	r0, r3, #16
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6819      	ldr	r1, [r3, #0]
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	3b01      	subs	r3, #1
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	4302      	orrs	r2, r0
 8006750:	3340      	adds	r3, #64	@ 0x40
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	887a      	ldrh	r2, [r7, #2]
 8006778:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e267      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d075      	beq.n	80068aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80067be:	4b88      	ldr	r3, [pc, #544]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d00c      	beq.n	80067e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ca:	4b85      	ldr	r3, [pc, #532]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d112      	bne.n	80067fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067d6:	4b82      	ldr	r3, [pc, #520]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067e2:	d10b      	bne.n	80067fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e4:	4b7e      	ldr	r3, [pc, #504]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d05b      	beq.n	80068a8 <HAL_RCC_OscConfig+0x108>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d157      	bne.n	80068a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e242      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006804:	d106      	bne.n	8006814 <HAL_RCC_OscConfig+0x74>
 8006806:	4b76      	ldr	r3, [pc, #472]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a75      	ldr	r2, [pc, #468]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 800680c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e01d      	b.n	8006850 <HAL_RCC_OscConfig+0xb0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800681c:	d10c      	bne.n	8006838 <HAL_RCC_OscConfig+0x98>
 800681e:	4b70      	ldr	r3, [pc, #448]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a6f      	ldr	r2, [pc, #444]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	4b6d      	ldr	r3, [pc, #436]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a6c      	ldr	r2, [pc, #432]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e00b      	b.n	8006850 <HAL_RCC_OscConfig+0xb0>
 8006838:	4b69      	ldr	r3, [pc, #420]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a68      	ldr	r2, [pc, #416]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 800683e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	4b66      	ldr	r3, [pc, #408]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a65      	ldr	r2, [pc, #404]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 800684a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800684e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006858:	f7fd fec6 	bl	80045e8 <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006860:	f7fd fec2 	bl	80045e8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b64      	cmp	r3, #100	@ 0x64
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e207      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006872:	4b5b      	ldr	r3, [pc, #364]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0xc0>
 800687e:	e014      	b.n	80068aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006880:	f7fd feb2 	bl	80045e8 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006888:	f7fd feae 	bl	80045e8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b64      	cmp	r3, #100	@ 0x64
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e1f3      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800689a:	4b51      	ldr	r3, [pc, #324]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0xe8>
 80068a6:	e000      	b.n	80068aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d063      	beq.n	800697e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068b6:	4b4a      	ldr	r3, [pc, #296]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068c2:	4b47      	ldr	r3, [pc, #284]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d11c      	bne.n	8006908 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ce:	4b44      	ldr	r3, [pc, #272]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d116      	bne.n	8006908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068da:	4b41      	ldr	r3, [pc, #260]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_RCC_OscConfig+0x152>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d001      	beq.n	80068f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e1c7      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f2:	4b3b      	ldr	r3, [pc, #236]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	4937      	ldr	r1, [pc, #220]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006906:	e03a      	b.n	800697e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006910:	4b34      	ldr	r3, [pc, #208]	@ (80069e4 <HAL_RCC_OscConfig+0x244>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006916:	f7fd fe67 	bl	80045e8 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800691e:	f7fd fe63 	bl	80045e8 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e1a8      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006930:	4b2b      	ldr	r3, [pc, #172]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693c:	4b28      	ldr	r3, [pc, #160]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4925      	ldr	r1, [pc, #148]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 800694c:	4313      	orrs	r3, r2
 800694e:	600b      	str	r3, [r1, #0]
 8006950:	e015      	b.n	800697e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006952:	4b24      	ldr	r3, [pc, #144]	@ (80069e4 <HAL_RCC_OscConfig+0x244>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fd fe46 	bl	80045e8 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006960:	f7fd fe42 	bl	80045e8 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e187      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006972:	4b1b      	ldr	r3, [pc, #108]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d036      	beq.n	80069f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d016      	beq.n	80069c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006992:	4b15      	ldr	r3, [pc, #84]	@ (80069e8 <HAL_RCC_OscConfig+0x248>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006998:	f7fd fe26 	bl	80045e8 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a0:	f7fd fe22 	bl	80045e8 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e167      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069b2:	4b0b      	ldr	r3, [pc, #44]	@ (80069e0 <HAL_RCC_OscConfig+0x240>)
 80069b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f0      	beq.n	80069a0 <HAL_RCC_OscConfig+0x200>
 80069be:	e01b      	b.n	80069f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069c0:	4b09      	ldr	r3, [pc, #36]	@ (80069e8 <HAL_RCC_OscConfig+0x248>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c6:	f7fd fe0f 	bl	80045e8 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069cc:	e00e      	b.n	80069ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ce:	f7fd fe0b 	bl	80045e8 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d907      	bls.n	80069ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e150      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
 80069e0:	40023800 	.word	0x40023800
 80069e4:	42470000 	.word	0x42470000
 80069e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ec:	4b88      	ldr	r3, [pc, #544]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 80069ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1ea      	bne.n	80069ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8097 	beq.w	8006b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a06:	2300      	movs	r3, #0
 8006a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a0a:	4b81      	ldr	r3, [pc, #516]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10f      	bne.n	8006a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	4b7d      	ldr	r3, [pc, #500]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	4a7c      	ldr	r2, [pc, #496]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a26:	4b7a      	ldr	r3, [pc, #488]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a36:	4b77      	ldr	r3, [pc, #476]	@ (8006c14 <HAL_RCC_OscConfig+0x474>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d118      	bne.n	8006a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a42:	4b74      	ldr	r3, [pc, #464]	@ (8006c14 <HAL_RCC_OscConfig+0x474>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a73      	ldr	r2, [pc, #460]	@ (8006c14 <HAL_RCC_OscConfig+0x474>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4e:	f7fd fdcb 	bl	80045e8 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a56:	f7fd fdc7 	bl	80045e8 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e10c      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a68:	4b6a      	ldr	r3, [pc, #424]	@ (8006c14 <HAL_RCC_OscConfig+0x474>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCC_OscConfig+0x2ea>
 8006a7c:	4b64      	ldr	r3, [pc, #400]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a80:	4a63      	ldr	r2, [pc, #396]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a88:	e01c      	b.n	8006ac4 <HAL_RCC_OscConfig+0x324>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2b05      	cmp	r3, #5
 8006a90:	d10c      	bne.n	8006aac <HAL_RCC_OscConfig+0x30c>
 8006a92:	4b5f      	ldr	r3, [pc, #380]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a96:	4a5e      	ldr	r2, [pc, #376]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006a98:	f043 0304 	orr.w	r3, r3, #4
 8006a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aa4:	f043 0301 	orr.w	r3, r3, #1
 8006aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aaa:	e00b      	b.n	8006ac4 <HAL_RCC_OscConfig+0x324>
 8006aac:	4b58      	ldr	r3, [pc, #352]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab0:	4a57      	ldr	r2, [pc, #348]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ab8:	4b55      	ldr	r3, [pc, #340]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006abc:	4a54      	ldr	r2, [pc, #336]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006abe:	f023 0304 	bic.w	r3, r3, #4
 8006ac2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d015      	beq.n	8006af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006acc:	f7fd fd8c 	bl	80045e8 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad2:	e00a      	b.n	8006aea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad4:	f7fd fd88 	bl	80045e8 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e0cb      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aea:	4b49      	ldr	r3, [pc, #292]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0ee      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x334>
 8006af6:	e014      	b.n	8006b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af8:	f7fd fd76 	bl	80045e8 <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006afe:	e00a      	b.n	8006b16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b00:	f7fd fd72 	bl	80045e8 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e0b5      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b16:	4b3e      	ldr	r3, [pc, #248]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1ee      	bne.n	8006b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d105      	bne.n	8006b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b28:	4b39      	ldr	r3, [pc, #228]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2c:	4a38      	ldr	r2, [pc, #224]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80a1 	beq.w	8006c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b3e:	4b34      	ldr	r3, [pc, #208]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 030c 	and.w	r3, r3, #12
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d05c      	beq.n	8006c04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d141      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b52:	4b31      	ldr	r3, [pc, #196]	@ (8006c18 <HAL_RCC_OscConfig+0x478>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b58:	f7fd fd46 	bl	80045e8 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b60:	f7fd fd42 	bl	80045e8 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e087      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b72:	4b27      	ldr	r3, [pc, #156]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1f0      	bne.n	8006b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69da      	ldr	r2, [r3, #28]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	019b      	lsls	r3, r3, #6
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	3b01      	subs	r3, #1
 8006b98:	041b      	lsls	r3, r3, #16
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba0:	061b      	lsls	r3, r3, #24
 8006ba2:	491b      	ldr	r1, [pc, #108]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <HAL_RCC_OscConfig+0x478>)
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bae:	f7fd fd1b 	bl	80045e8 <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb6:	f7fd fd17 	bl	80045e8 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e05c      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc8:	4b11      	ldr	r3, [pc, #68]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0f0      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x416>
 8006bd4:	e054      	b.n	8006c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd6:	4b10      	ldr	r3, [pc, #64]	@ (8006c18 <HAL_RCC_OscConfig+0x478>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7fd fd04 	bl	80045e8 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be4:	f7fd fd00 	bl	80045e8 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e045      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf6:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <HAL_RCC_OscConfig+0x470>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x444>
 8006c02:	e03d      	b.n	8006c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d107      	bne.n	8006c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e038      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
 8006c10:	40023800 	.word	0x40023800
 8006c14:	40007000 	.word	0x40007000
 8006c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c8c <HAL_RCC_OscConfig+0x4ec>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d028      	beq.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d121      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d11a      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d111      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	3b01      	subs	r3, #1
 8006c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d107      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d001      	beq.n	8006c80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40023800 	.word	0x40023800

08006c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0cc      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca4:	4b68      	ldr	r3, [pc, #416]	@ (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d90c      	bls.n	8006ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb2:	4b65      	ldr	r3, [pc, #404]	@ (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	4b63      	ldr	r3, [pc, #396]	@ (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0b8      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d020      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ce4:	4b59      	ldr	r3, [pc, #356]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4a58      	ldr	r2, [pc, #352]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d005      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cfc:	4b53      	ldr	r3, [pc, #332]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4a52      	ldr	r2, [pc, #328]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d08:	4b50      	ldr	r3, [pc, #320]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	494d      	ldr	r1, [pc, #308]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d044      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d107      	bne.n	8006d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2e:	4b47      	ldr	r3, [pc, #284]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d119      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e07f      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d003      	beq.n	8006d4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d107      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e06f      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e067      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d6e:	4b37      	ldr	r3, [pc, #220]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f023 0203 	bic.w	r2, r3, #3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	4934      	ldr	r1, [pc, #208]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d80:	f7fd fc32 	bl	80045e8 <HAL_GetTick>
 8006d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d88:	f7fd fc2e 	bl	80045e8 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e04f      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 020c 	and.w	r2, r3, #12
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d1eb      	bne.n	8006d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006db0:	4b25      	ldr	r3, [pc, #148]	@ (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d20c      	bcs.n	8006dd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dbe:	4b22      	ldr	r3, [pc, #136]	@ (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	4b20      	ldr	r3, [pc, #128]	@ (8006e48 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e032      	b.n	8006e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de4:	4b19      	ldr	r3, [pc, #100]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4916      	ldr	r1, [pc, #88]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e02:	4b12      	ldr	r3, [pc, #72]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	490e      	ldr	r1, [pc, #56]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e16:	f000 f821 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	490a      	ldr	r1, [pc, #40]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c0>)
 8006e28:	5ccb      	ldrb	r3, [r1, r3]
 8006e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2e:	4a09      	ldr	r2, [pc, #36]	@ (8006e54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e32:	4b09      	ldr	r3, [pc, #36]	@ (8006e58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fd fb92 	bl	8004560 <HAL_InitTick>

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40023c00 	.word	0x40023c00
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	080101a8 	.word	0x080101a8
 8006e54:	20000004 	.word	0x20000004
 8006e58:	20000028 	.word	0x20000028

08006e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e60:	b090      	sub	sp, #64	@ 0x40
 8006e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e74:	4b59      	ldr	r3, [pc, #356]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 030c 	and.w	r3, r3, #12
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d00d      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0x40>
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	f200 80a1 	bhi.w	8006fc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_RCC_GetSysClockFreq+0x34>
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d003      	beq.n	8006e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e8e:	e09b      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e90:	4b53      	ldr	r3, [pc, #332]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e94:	e09b      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e96:	4b53      	ldr	r3, [pc, #332]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e9a:	e098      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ea4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d028      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	2200      	movs	r2, #0
 8006eba:	623b      	str	r3, [r7, #32]
 8006ebc:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4b47      	ldr	r3, [pc, #284]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ec8:	fb03 f201 	mul.w	r2, r3, r1
 8006ecc:	2300      	movs	r3, #0
 8006ece:	fb00 f303 	mul.w	r3, r0, r3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	4a43      	ldr	r2, [pc, #268]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ed6:	fba0 1202 	umull	r1, r2, r0, r2
 8006eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006edc:	460a      	mov	r2, r1
 8006ede:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ee2:	4413      	add	r3, r2
 8006ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	2200      	movs	r2, #0
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	61fa      	str	r2, [r7, #28]
 8006eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ef2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006ef6:	f7f9 f9cb 	bl	8000290 <__aeabi_uldivmod>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4613      	mov	r3, r2
 8006f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f02:	e053      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f04:	4b35      	ldr	r3, [pc, #212]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	099b      	lsrs	r3, r3, #6
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	617a      	str	r2, [r7, #20]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f16:	f04f 0b00 	mov.w	fp, #0
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	465b      	mov	r3, fp
 8006f1e:	f04f 0000 	mov.w	r0, #0
 8006f22:	f04f 0100 	mov.w	r1, #0
 8006f26:	0159      	lsls	r1, r3, #5
 8006f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f2c:	0150      	lsls	r0, r2, #5
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	ebb2 080a 	subs.w	r8, r2, sl
 8006f36:	eb63 090b 	sbc.w	r9, r3, fp
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006f46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006f4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006f4e:	ebb2 0408 	subs.w	r4, r2, r8
 8006f52:	eb63 0509 	sbc.w	r5, r3, r9
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	00eb      	lsls	r3, r5, #3
 8006f60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f64:	00e2      	lsls	r2, r4, #3
 8006f66:	4614      	mov	r4, r2
 8006f68:	461d      	mov	r5, r3
 8006f6a:	eb14 030a 	adds.w	r3, r4, sl
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	eb45 030b 	adc.w	r3, r5, fp
 8006f74:	607b      	str	r3, [r7, #4]
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f82:	4629      	mov	r1, r5
 8006f84:	028b      	lsls	r3, r1, #10
 8006f86:	4621      	mov	r1, r4
 8006f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	028a      	lsls	r2, r1, #10
 8006f90:	4610      	mov	r0, r2
 8006f92:	4619      	mov	r1, r3
 8006f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f96:	2200      	movs	r2, #0
 8006f98:	60bb      	str	r3, [r7, #8]
 8006f9a:	60fa      	str	r2, [r7, #12]
 8006f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fa0:	f7f9 f976 	bl	8000290 <__aeabi_uldivmod>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4613      	mov	r3, r2
 8006faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006fac:	4b0b      	ldr	r3, [pc, #44]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006fbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006fc6:	e002      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fc8:	4b05      	ldr	r3, [pc, #20]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006fca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3740      	adds	r7, #64	@ 0x40
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fda:	bf00      	nop
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	00f42400 	.word	0x00f42400
 8006fe4:	017d7840 	.word	0x017d7840

08006fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fec:	4b03      	ldr	r3, [pc, #12]	@ (8006ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000004 	.word	0x20000004

08007000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e07b      	b.n	800710a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d108      	bne.n	800702c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007022:	d009      	beq.n	8007038 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	61da      	str	r2, [r3, #28]
 800702a:	e005      	b.n	8007038 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d106      	bne.n	8007058 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fa feae 	bl	8001db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800706e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070bc:	ea42 0103 	orr.w	r1, r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	0c1b      	lsrs	r3, r3, #16
 80070d6:	f003 0104 	and.w	r1, r3, #4
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	f003 0210 	and.w	r2, r3, #16
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b088      	sub	sp, #32
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	603b      	str	r3, [r7, #0]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007122:	f7fd fa61 	bl	80045e8 <HAL_GetTick>
 8007126:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d001      	beq.n	800713c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
 800713a:	e12a      	b.n	8007392 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_SPI_Transmit+0x36>
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e122      	b.n	8007392 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_SPI_Transmit+0x48>
 8007156:	2302      	movs	r3, #2
 8007158:	e11b      	b.n	8007392 <HAL_SPI_Transmit+0x280>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2203      	movs	r2, #3
 8007166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	88fa      	ldrh	r2, [r7, #6]
 800717a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	88fa      	ldrh	r2, [r7, #6]
 8007180:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071a8:	d10f      	bne.n	80071ca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d4:	2b40      	cmp	r3, #64	@ 0x40
 80071d6:	d007      	beq.n	80071e8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071f0:	d152      	bne.n	8007298 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <HAL_SPI_Transmit+0xee>
 80071fa:	8b7b      	ldrh	r3, [r7, #26]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d145      	bne.n	800728c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007204:	881a      	ldrh	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007210:	1c9a      	adds	r2, r3, #2
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007224:	e032      	b.n	800728c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b02      	cmp	r3, #2
 8007232:	d112      	bne.n	800725a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007238:	881a      	ldrh	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007244:	1c9a      	adds	r2, r3, #2
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007258:	e018      	b.n	800728c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800725a:	f7fd f9c5 	bl	80045e8 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d803      	bhi.n	8007272 <HAL_SPI_Transmit+0x160>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d102      	bne.n	8007278 <HAL_SPI_Transmit+0x166>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e082      	b.n	8007392 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1c7      	bne.n	8007226 <HAL_SPI_Transmit+0x114>
 8007296:	e053      	b.n	8007340 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_SPI_Transmit+0x194>
 80072a0:	8b7b      	ldrh	r3, [r7, #26]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d147      	bne.n	8007336 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	7812      	ldrb	r2, [r2, #0]
 80072b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072cc:	e033      	b.n	8007336 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d113      	bne.n	8007304 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	7812      	ldrb	r2, [r2, #0]
 80072e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007302:	e018      	b.n	8007336 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007304:	f7fd f970 	bl	80045e8 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d803      	bhi.n	800731c <HAL_SPI_Transmit+0x20a>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d102      	bne.n	8007322 <HAL_SPI_Transmit+0x210>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d109      	bne.n	8007336 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e02d      	b.n	8007392 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1c6      	bne.n	80072ce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fd21 	bl	8007d8c <SPI_EndRxTxTransaction>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2220      	movs	r2, #32
 8007354:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007390:	2300      	movs	r3, #0
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b088      	sub	sp, #32
 800739e:	af02      	add	r7, sp, #8
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	4613      	mov	r3, r2
 80073a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d001      	beq.n	80073ba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80073b6:	2302      	movs	r3, #2
 80073b8:	e104      	b.n	80075c4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073c2:	d112      	bne.n	80073ea <HAL_SPI_Receive+0x50>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10e      	bne.n	80073ea <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2204      	movs	r2, #4
 80073d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073d4:	88fa      	ldrh	r2, [r7, #6]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	4613      	mov	r3, r2
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f8f3 	bl	80075cc <HAL_SPI_TransmitReceive>
 80073e6:	4603      	mov	r3, r0
 80073e8:	e0ec      	b.n	80075c4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ea:	f7fd f8fd 	bl	80045e8 <HAL_GetTick>
 80073ee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_SPI_Receive+0x62>
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0e1      	b.n	80075c4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_SPI_Receive+0x74>
 800740a:	2302      	movs	r3, #2
 800740c:	e0da      	b.n	80075c4 <HAL_SPI_Receive+0x22a>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2204      	movs	r2, #4
 800741a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800745c:	d10f      	bne.n	800747e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800746c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800747c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007488:	2b40      	cmp	r3, #64	@ 0x40
 800748a:	d007      	beq.n	800749c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800749a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d170      	bne.n	8007586 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80074a4:	e035      	b.n	8007512 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d115      	bne.n	80074e0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f103 020c 	add.w	r2, r3, #12
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	7812      	ldrb	r2, [r2, #0]
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074de:	e018      	b.n	8007512 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074e0:	f7fd f882 	bl	80045e8 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d803      	bhi.n	80074f8 <HAL_SPI_Receive+0x15e>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d102      	bne.n	80074fe <HAL_SPI_Receive+0x164>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e058      	b.n	80075c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1c4      	bne.n	80074a6 <HAL_SPI_Receive+0x10c>
 800751c:	e038      	b.n	8007590 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b01      	cmp	r3, #1
 800752a:	d113      	bne.n	8007554 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007536:	b292      	uxth	r2, r2
 8007538:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753e:	1c9a      	adds	r2, r3, #2
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007552:	e018      	b.n	8007586 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007554:	f7fd f848 	bl	80045e8 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d803      	bhi.n	800756c <HAL_SPI_Receive+0x1d2>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756a:	d102      	bne.n	8007572 <HAL_SPI_Receive+0x1d8>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e01e      	b.n	80075c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1c6      	bne.n	800751e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fb93 	bl	8007cc0 <SPI_EndRxTransaction>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2220      	movs	r2, #32
 80075a4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80075c2:	2300      	movs	r3, #0
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08a      	sub	sp, #40	@ 0x28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075da:	2301      	movs	r3, #1
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075de:	f7fd f803 	bl	80045e8 <HAL_GetTick>
 80075e2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075ea:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80075f2:	887b      	ldrh	r3, [r7, #2]
 80075f4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075f6:	7ffb      	ldrb	r3, [r7, #31]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d00c      	beq.n	8007616 <HAL_SPI_TransmitReceive+0x4a>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007602:	d106      	bne.n	8007612 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d102      	bne.n	8007612 <HAL_SPI_TransmitReceive+0x46>
 800760c:	7ffb      	ldrb	r3, [r7, #31]
 800760e:	2b04      	cmp	r3, #4
 8007610:	d001      	beq.n	8007616 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007612:	2302      	movs	r3, #2
 8007614:	e17f      	b.n	8007916 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <HAL_SPI_TransmitReceive+0x5c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_SPI_TransmitReceive+0x5c>
 8007622:	887b      	ldrh	r3, [r7, #2]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e174      	b.n	8007916 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_SPI_TransmitReceive+0x6e>
 8007636:	2302      	movs	r3, #2
 8007638:	e16d      	b.n	8007916 <HAL_SPI_TransmitReceive+0x34a>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b04      	cmp	r3, #4
 800764c:	d003      	beq.n	8007656 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2205      	movs	r2, #5
 8007652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	887a      	ldrh	r2, [r7, #2]
 800766c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	887a      	ldrh	r2, [r7, #2]
 8007678:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	887a      	ldrh	r2, [r7, #2]
 800767e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007696:	2b40      	cmp	r3, #64	@ 0x40
 8007698:	d007      	beq.n	80076aa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076b2:	d17e      	bne.n	80077b2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_SPI_TransmitReceive+0xf6>
 80076bc:	8afb      	ldrh	r3, [r7, #22]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d16c      	bne.n	800779c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c6:	881a      	ldrh	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d2:	1c9a      	adds	r2, r3, #2
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e6:	e059      	b.n	800779c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d11b      	bne.n	800772e <HAL_SPI_TransmitReceive+0x162>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d016      	beq.n	800772e <HAL_SPI_TransmitReceive+0x162>
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	2b01      	cmp	r3, #1
 8007704:	d113      	bne.n	800772e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770a:	881a      	ldrh	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007716:	1c9a      	adds	r2, r3, #2
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b01      	cmp	r3, #1
 800773a:	d119      	bne.n	8007770 <HAL_SPI_TransmitReceive+0x1a4>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d014      	beq.n	8007770 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	b292      	uxth	r2, r2
 8007752:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007758:	1c9a      	adds	r2, r3, #2
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800776c:	2301      	movs	r3, #1
 800776e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007770:	f7fc ff3a 	bl	80045e8 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777c:	429a      	cmp	r2, r3
 800777e:	d80d      	bhi.n	800779c <HAL_SPI_TransmitReceive+0x1d0>
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d009      	beq.n	800779c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e0bc      	b.n	8007916 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1a0      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x11c>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d19b      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x11c>
 80077b0:	e082      	b.n	80078b8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_SPI_TransmitReceive+0x1f4>
 80077ba:	8afb      	ldrh	r3, [r7, #22]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d171      	bne.n	80078a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	330c      	adds	r3, #12
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e6:	e05d      	b.n	80078a4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d11c      	bne.n	8007830 <HAL_SPI_TransmitReceive+0x264>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d017      	beq.n	8007830 <HAL_SPI_TransmitReceive+0x264>
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	2b01      	cmp	r3, #1
 8007804:	d114      	bne.n	8007830 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	7812      	ldrb	r2, [r2, #0]
 8007812:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	d119      	bne.n	8007872 <HAL_SPI_TransmitReceive+0x2a6>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d014      	beq.n	8007872 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800786e:	2301      	movs	r3, #1
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007872:	f7fc feb9 	bl	80045e8 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800787e:	429a      	cmp	r2, r3
 8007880:	d803      	bhi.n	800788a <HAL_SPI_TransmitReceive+0x2be>
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007888:	d102      	bne.n	8007890 <HAL_SPI_TransmitReceive+0x2c4>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e038      	b.n	8007916 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d19c      	bne.n	80077e8 <HAL_SPI_TransmitReceive+0x21c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d197      	bne.n	80077e8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078b8:	6a3a      	ldr	r2, [r7, #32]
 80078ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fa65 	bl	8007d8c <SPI_EndRxTxTransaction>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d008      	beq.n	80078da <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e01d      	b.n	8007916 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078e2:	2300      	movs	r3, #0
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007914:	2300      	movs	r3, #0
  }
}
 8007916:	4618      	mov	r0, r3
 8007918:	3728      	adds	r7, #40	@ 0x28
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	4613      	mov	r3, r2
 800792c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	d001      	beq.n	800793e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800793a:	2302      	movs	r3, #2
 800793c:	e097      	b.n	8007a6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_SPI_Transmit_DMA+0x2a>
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e08f      	b.n	8007a6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_SPI_Transmit_DMA+0x3c>
 8007958:	2302      	movs	r3, #2
 800795a:	e088      	b.n	8007a6e <HAL_SPI_Transmit_DMA+0x14e>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2203      	movs	r2, #3
 8007968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	88fa      	ldrh	r2, [r7, #6]
 800797c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	88fa      	ldrh	r2, [r7, #6]
 8007982:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079aa:	d10f      	bne.n	80079cc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079d0:	4a29      	ldr	r2, [pc, #164]	@ (8007a78 <HAL_SPI_Transmit_DMA+0x158>)
 80079d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079d8:	4a28      	ldr	r2, [pc, #160]	@ (8007a7c <HAL_SPI_Transmit_DMA+0x15c>)
 80079da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e0:	4a27      	ldr	r2, [pc, #156]	@ (8007a80 <HAL_SPI_Transmit_DMA+0x160>)
 80079e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e8:	2200      	movs	r2, #0
 80079ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f4:	4619      	mov	r1, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	330c      	adds	r3, #12
 80079fc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a02:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a04:	f7fc ffe0 	bl	80049c8 <HAL_DMA_Start_IT>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a12:	f043 0210 	orr.w	r2, r3, #16
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e023      	b.n	8007a6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a30:	2b40      	cmp	r3, #64	@ 0x40
 8007a32:	d007      	beq.n	8007a44 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a42:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0220 	orr.w	r2, r2, #32
 8007a5a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0202 	orr.w	r2, r2, #2
 8007a6a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	08007b55 	.word	0x08007b55
 8007a7c:	08007aad 	.word	0x08007aad
 8007a80:	08007b71 	.word	0x08007b71

08007a84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aba:	f7fc fd95 	bl	80045e8 <HAL_GetTick>
 8007abe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ace:	d03b      	beq.n	8007b48 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0220 	bic.w	r2, r2, #32
 8007ade:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0202 	bic.w	r2, r2, #2
 8007aee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	2164      	movs	r1, #100	@ 0x64
 8007af4:	6978      	ldr	r0, [r7, #20]
 8007af6:	f000 f949 	bl	8007d8c <SPI_EndRxTxTransaction>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b04:	f043 0220 	orr.w	r2, r3, #32
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007b40:	6978      	ldr	r0, [r7, #20]
 8007b42:	f7ff ffa9 	bl	8007a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007b46:	e002      	b.n	8007b4e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007b48:	6978      	ldr	r0, [r7, #20]
 8007b4a:	f7fa fc55 	bl	80023f8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f7ff ff8e 	bl	8007a84 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0203 	bic.w	r2, r2, #3
 8007b8c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b92:	f043 0210 	orr.w	r2, r3, #16
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f7ff ff78 	bl	8007a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bc0:	f7fc fd12 	bl	80045e8 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc8:	1a9b      	subs	r3, r3, r2
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4413      	add	r3, r2
 8007bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bd0:	f7fc fd0a 	bl	80045e8 <HAL_GetTick>
 8007bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bd6:	4b39      	ldr	r3, [pc, #228]	@ (8007cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	015b      	lsls	r3, r3, #5
 8007bdc:	0d1b      	lsrs	r3, r3, #20
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	fb02 f303 	mul.w	r3, r2, r3
 8007be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007be6:	e054      	b.n	8007c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d050      	beq.n	8007c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bf0:	f7fc fcfa 	bl	80045e8 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d902      	bls.n	8007c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d13d      	bne.n	8007c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c1e:	d111      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c28:	d004      	beq.n	8007c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c32:	d107      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c4c:	d10f      	bne.n	8007c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e017      	b.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	bf0c      	ite	eq
 8007ca2:	2301      	moveq	r3, #1
 8007ca4:	2300      	movne	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d19b      	bne.n	8007be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3720      	adds	r7, #32
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000004 	.word	0x20000004

08007cc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cd4:	d111      	bne.n	8007cfa <SPI_EndRxTransaction+0x3a>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cde:	d004      	beq.n	8007cea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ce8:	d107      	bne.n	8007cfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cf8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d02:	d12a      	bne.n	8007d5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d0c:	d012      	beq.n	8007d34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2200      	movs	r2, #0
 8007d16:	2180      	movs	r1, #128	@ 0x80
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff ff49 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d02d      	beq.n	8007d80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d28:	f043 0220 	orr.w	r2, r3, #32
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e026      	b.n	8007d82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff ff36 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d01a      	beq.n	8007d80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4e:	f043 0220 	orr.w	r2, r3, #32
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e013      	b.n	8007d82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2200      	movs	r2, #0
 8007d62:	2101      	movs	r1, #1
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff ff23 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e000      	b.n	8007d82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	2102      	movs	r1, #2
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff ff04 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d007      	beq.n	8007dbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db2:	f043 0220 	orr.w	r2, r3, #32
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e032      	b.n	8007e24 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8007e2c <SPI_EndRxTxTransaction+0xa0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8007e30 <SPI_EndRxTxTransaction+0xa4>)
 8007dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc8:	0d5b      	lsrs	r3, r3, #21
 8007dca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007dce:	fb02 f303 	mul.w	r3, r2, r3
 8007dd2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ddc:	d112      	bne.n	8007e04 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2200      	movs	r2, #0
 8007de6:	2180      	movs	r1, #128	@ 0x80
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff fee1 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d016      	beq.n	8007e22 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e00f      	b.n	8007e24 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e1a:	2b80      	cmp	r3, #128	@ 0x80
 8007e1c:	d0f2      	beq.n	8007e04 <SPI_EndRxTxTransaction+0x78>
 8007e1e:	e000      	b.n	8007e22 <SPI_EndRxTxTransaction+0x96>
        break;
 8007e20:	bf00      	nop
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000004 	.word	0x20000004
 8007e30:	165e9f81 	.word	0x165e9f81

08007e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e041      	b.n	8007eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7fa fa04 	bl	8002268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f000 fd6a 	bl	800894c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e041      	b.n	8007f68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f839 	bl	8007f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2202      	movs	r2, #2
 8007f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f000 fd1b 	bl	800894c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	bf0c      	ite	eq
 8007fa8:	2301      	moveq	r3, #1
 8007faa:	2300      	movne	r3, #0
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	e022      	b.n	8007ff6 <HAL_TIM_PWM_Start_DMA+0x72>
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d109      	bne.n	8007fca <HAL_TIM_PWM_Start_DMA+0x46>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2301      	moveq	r3, #1
 8007fc4:	2300      	movne	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	e015      	b.n	8007ff6 <HAL_TIM_PWM_Start_DMA+0x72>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d109      	bne.n	8007fe4 <HAL_TIM_PWM_Start_DMA+0x60>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	bf0c      	ite	eq
 8007fdc:	2301      	moveq	r3, #1
 8007fde:	2300      	movne	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	e008      	b.n	8007ff6 <HAL_TIM_PWM_Start_DMA+0x72>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	bf0c      	ite	eq
 8007ff0:	2301      	moveq	r3, #1
 8007ff2:	2300      	movne	r3, #0
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e15d      	b.n	80082ba <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <HAL_TIM_PWM_Start_DMA+0x94>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	bf0c      	ite	eq
 8008010:	2301      	moveq	r3, #1
 8008012:	2300      	movne	r3, #0
 8008014:	b2db      	uxtb	r3, r3
 8008016:	e022      	b.n	800805e <HAL_TIM_PWM_Start_DMA+0xda>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b04      	cmp	r3, #4
 800801c:	d109      	bne.n	8008032 <HAL_TIM_PWM_Start_DMA+0xae>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b01      	cmp	r3, #1
 8008028:	bf0c      	ite	eq
 800802a:	2301      	moveq	r3, #1
 800802c:	2300      	movne	r3, #0
 800802e:	b2db      	uxtb	r3, r3
 8008030:	e015      	b.n	800805e <HAL_TIM_PWM_Start_DMA+0xda>
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b08      	cmp	r3, #8
 8008036:	d109      	bne.n	800804c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	bf0c      	ite	eq
 8008044:	2301      	moveq	r3, #1
 8008046:	2300      	movne	r3, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	e008      	b.n	800805e <HAL_TIM_PWM_Start_DMA+0xda>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b01      	cmp	r3, #1
 8008056:	bf0c      	ite	eq
 8008058:	2301      	moveq	r3, #1
 800805a:	2300      	movne	r3, #0
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d024      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <HAL_TIM_PWM_Start_DMA+0xea>
 8008068:	887b      	ldrh	r3, [r7, #2]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e123      	b.n	80082ba <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008080:	e016      	b.n	80080b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b04      	cmp	r3, #4
 8008086:	d104      	bne.n	8008092 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2202      	movs	r2, #2
 800808c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008090:	e00e      	b.n	80080b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b08      	cmp	r3, #8
 8008096:	d104      	bne.n	80080a2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080a0:	e006      	b.n	80080b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2202      	movs	r2, #2
 80080a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080aa:	e001      	b.n	80080b0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e104      	b.n	80082ba <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b0c      	cmp	r3, #12
 80080b4:	f200 80ae 	bhi.w	8008214 <HAL_TIM_PWM_Start_DMA+0x290>
 80080b8:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	080080f5 	.word	0x080080f5
 80080c4:	08008215 	.word	0x08008215
 80080c8:	08008215 	.word	0x08008215
 80080cc:	08008215 	.word	0x08008215
 80080d0:	0800813d 	.word	0x0800813d
 80080d4:	08008215 	.word	0x08008215
 80080d8:	08008215 	.word	0x08008215
 80080dc:	08008215 	.word	0x08008215
 80080e0:	08008185 	.word	0x08008185
 80080e4:	08008215 	.word	0x08008215
 80080e8:	08008215 	.word	0x08008215
 80080ec:	08008215 	.word	0x08008215
 80080f0:	080081cd 	.word	0x080081cd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f8:	4a72      	ldr	r2, [pc, #456]	@ (80082c4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80080fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008100:	4a71      	ldr	r2, [pc, #452]	@ (80082c8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008108:	4a70      	ldr	r2, [pc, #448]	@ (80082cc <HAL_TIM_PWM_Start_DMA+0x348>)
 800810a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3334      	adds	r3, #52	@ 0x34
 8008118:	461a      	mov	r2, r3
 800811a:	887b      	ldrh	r3, [r7, #2]
 800811c:	f7fc fc54 	bl	80049c8 <HAL_DMA_Start_IT>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e0c7      	b.n	80082ba <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68da      	ldr	r2, [r3, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008138:	60da      	str	r2, [r3, #12]
      break;
 800813a:	e06e      	b.n	800821a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008140:	4a60      	ldr	r2, [pc, #384]	@ (80082c4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008142:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	4a5f      	ldr	r2, [pc, #380]	@ (80082c8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800814a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008150:	4a5e      	ldr	r2, [pc, #376]	@ (80082cc <HAL_TIM_PWM_Start_DMA+0x348>)
 8008152:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3338      	adds	r3, #56	@ 0x38
 8008160:	461a      	mov	r2, r3
 8008162:	887b      	ldrh	r3, [r7, #2]
 8008164:	f7fc fc30 	bl	80049c8 <HAL_DMA_Start_IT>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e0a3      	b.n	80082ba <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008180:	60da      	str	r2, [r3, #12]
      break;
 8008182:	e04a      	b.n	800821a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	4a4e      	ldr	r2, [pc, #312]	@ (80082c4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800818a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	4a4d      	ldr	r2, [pc, #308]	@ (80082c8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008192:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008198:	4a4c      	ldr	r2, [pc, #304]	@ (80082cc <HAL_TIM_PWM_Start_DMA+0x348>)
 800819a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	333c      	adds	r3, #60	@ 0x3c
 80081a8:	461a      	mov	r2, r3
 80081aa:	887b      	ldrh	r3, [r7, #2]
 80081ac:	f7fc fc0c 	bl	80049c8 <HAL_DMA_Start_IT>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e07f      	b.n	80082ba <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081c8:	60da      	str	r2, [r3, #12]
      break;
 80081ca:	e026      	b.n	800821a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d0:	4a3c      	ldr	r2, [pc, #240]	@ (80082c4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80081d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d8:	4a3b      	ldr	r2, [pc, #236]	@ (80082c8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80081da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e0:	4a3a      	ldr	r2, [pc, #232]	@ (80082cc <HAL_TIM_PWM_Start_DMA+0x348>)
 80081e2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3340      	adds	r3, #64	@ 0x40
 80081f0:	461a      	mov	r2, r3
 80081f2:	887b      	ldrh	r3, [r7, #2]
 80081f4:	f7fc fbe8 	bl	80049c8 <HAL_DMA_Start_IT>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e05b      	b.n	80082ba <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008210:	60da      	str	r2, [r3, #12]
      break;
 8008212:	e002      	b.n	800821a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
      break;
 8008218:	bf00      	nop
  }

  if (status == HAL_OK)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d14b      	bne.n	80082b8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2201      	movs	r2, #1
 8008226:	68b9      	ldr	r1, [r7, #8]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 fe41 	bl	8008eb0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a27      	ldr	r2, [pc, #156]	@ (80082d0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d107      	bne.n	8008248 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008246:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a20      	ldr	r2, [pc, #128]	@ (80082d0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d018      	beq.n	8008284 <HAL_TIM_PWM_Start_DMA+0x300>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825a:	d013      	beq.n	8008284 <HAL_TIM_PWM_Start_DMA+0x300>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a1c      	ldr	r2, [pc, #112]	@ (80082d4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00e      	beq.n	8008284 <HAL_TIM_PWM_Start_DMA+0x300>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a1b      	ldr	r2, [pc, #108]	@ (80082d8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d009      	beq.n	8008284 <HAL_TIM_PWM_Start_DMA+0x300>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a19      	ldr	r2, [pc, #100]	@ (80082dc <HAL_TIM_PWM_Start_DMA+0x358>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_TIM_PWM_Start_DMA+0x300>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a18      	ldr	r2, [pc, #96]	@ (80082e0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d111      	bne.n	80082a8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2b06      	cmp	r3, #6
 8008294:	d010      	beq.n	80082b8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0201 	orr.w	r2, r2, #1
 80082a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a6:	e007      	b.n	80082b8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	0800883d 	.word	0x0800883d
 80082c8:	080088e5 	.word	0x080088e5
 80082cc:	080087ab 	.word	0x080087ab
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40000400 	.word	0x40000400
 80082d8:	40000800 	.word	0x40000800
 80082dc:	40000c00 	.word	0x40000c00
 80082e0:	40014000 	.word	0x40014000

080082e4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b0c      	cmp	r3, #12
 80082f6:	d855      	bhi.n	80083a4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80082f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008300 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80082fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fe:	bf00      	nop
 8008300:	08008335 	.word	0x08008335
 8008304:	080083a5 	.word	0x080083a5
 8008308:	080083a5 	.word	0x080083a5
 800830c:	080083a5 	.word	0x080083a5
 8008310:	08008351 	.word	0x08008351
 8008314:	080083a5 	.word	0x080083a5
 8008318:	080083a5 	.word	0x080083a5
 800831c:	080083a5 	.word	0x080083a5
 8008320:	0800836d 	.word	0x0800836d
 8008324:	080083a5 	.word	0x080083a5
 8008328:	080083a5 	.word	0x080083a5
 800832c:	080083a5 	.word	0x080083a5
 8008330:	08008389 	.word	0x08008389
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008342:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008348:	4618      	mov	r0, r3
 800834a:	f7fc fb95 	bl	8004a78 <HAL_DMA_Abort_IT>
      break;
 800834e:	e02c      	b.n	80083aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800835e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008364:	4618      	mov	r0, r3
 8008366:	f7fc fb87 	bl	8004a78 <HAL_DMA_Abort_IT>
      break;
 800836a:	e01e      	b.n	80083aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800837a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	4618      	mov	r0, r3
 8008382:	f7fc fb79 	bl	8004a78 <HAL_DMA_Abort_IT>
      break;
 8008386:	e010      	b.n	80083aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008396:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc fb6b 	bl	8004a78 <HAL_DMA_Abort_IT>
      break;
 80083a2:	e002      	b.n	80083aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
      break;
 80083a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d157      	bne.n	8008460 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2200      	movs	r2, #0
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fd79 	bl	8008eb0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a2a      	ldr	r2, [pc, #168]	@ (800846c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d117      	bne.n	80083f8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6a1a      	ldr	r2, [r3, #32]
 80083ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10f      	bne.n	80083f8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6a1a      	ldr	r2, [r3, #32]
 80083de:	f240 4344 	movw	r3, #1092	@ 0x444
 80083e2:	4013      	ands	r3, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d107      	bne.n	80083f8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6a1a      	ldr	r2, [r3, #32]
 80083fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008402:	4013      	ands	r3, r2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10f      	bne.n	8008428 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6a1a      	ldr	r2, [r3, #32]
 800840e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d107      	bne.n	8008428 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0201 	bic.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <HAL_TIM_PWM_Stop_DMA+0x154>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008436:	e013      	b.n	8008460 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b04      	cmp	r3, #4
 800843c:	d104      	bne.n	8008448 <HAL_TIM_PWM_Stop_DMA+0x164>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008446:	e00b      	b.n	8008460 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b08      	cmp	r3, #8
 800844c:	d104      	bne.n	8008458 <HAL_TIM_PWM_Stop_DMA+0x174>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008456:	e003      	b.n	8008460 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40010000 	.word	0x40010000

08008470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800848a:	2302      	movs	r3, #2
 800848c:	e0ae      	b.n	80085ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b0c      	cmp	r3, #12
 800849a:	f200 809f 	bhi.w	80085dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800849e:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084d9 	.word	0x080084d9
 80084a8:	080085dd 	.word	0x080085dd
 80084ac:	080085dd 	.word	0x080085dd
 80084b0:	080085dd 	.word	0x080085dd
 80084b4:	08008519 	.word	0x08008519
 80084b8:	080085dd 	.word	0x080085dd
 80084bc:	080085dd 	.word	0x080085dd
 80084c0:	080085dd 	.word	0x080085dd
 80084c4:	0800855b 	.word	0x0800855b
 80084c8:	080085dd 	.word	0x080085dd
 80084cc:	080085dd 	.word	0x080085dd
 80084d0:	080085dd 	.word	0x080085dd
 80084d4:	0800859b 	.word	0x0800859b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fac0 	bl	8008a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f042 0208 	orr.w	r2, r2, #8
 80084f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0204 	bic.w	r2, r2, #4
 8008502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6999      	ldr	r1, [r3, #24]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	619a      	str	r2, [r3, #24]
      break;
 8008516:	e064      	b.n	80085e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fb06 	bl	8008b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6999      	ldr	r1, [r3, #24]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	021a      	lsls	r2, r3, #8
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	619a      	str	r2, [r3, #24]
      break;
 8008558:	e043      	b.n	80085e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fb51 	bl	8008c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69da      	ldr	r2, [r3, #28]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 0208 	orr.w	r2, r2, #8
 8008574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69da      	ldr	r2, [r3, #28]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0204 	bic.w	r2, r2, #4
 8008584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69d9      	ldr	r1, [r3, #28]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	61da      	str	r2, [r3, #28]
      break;
 8008598:	e023      	b.n	80085e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 fb9b 	bl	8008cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	69da      	ldr	r2, [r3, #28]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69da      	ldr	r2, [r3, #28]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69d9      	ldr	r1, [r3, #28]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	021a      	lsls	r2, r3, #8
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	61da      	str	r2, [r3, #28]
      break;
 80085da:	e002      	b.n	80085e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
      break;
 80085e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <HAL_TIM_ConfigClockSource+0x1c>
 800860c:	2302      	movs	r3, #2
 800860e:	e0b4      	b.n	800877a <HAL_TIM_ConfigClockSource+0x186>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800862e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008648:	d03e      	beq.n	80086c8 <HAL_TIM_ConfigClockSource+0xd4>
 800864a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800864e:	f200 8087 	bhi.w	8008760 <HAL_TIM_ConfigClockSource+0x16c>
 8008652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008656:	f000 8086 	beq.w	8008766 <HAL_TIM_ConfigClockSource+0x172>
 800865a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800865e:	d87f      	bhi.n	8008760 <HAL_TIM_ConfigClockSource+0x16c>
 8008660:	2b70      	cmp	r3, #112	@ 0x70
 8008662:	d01a      	beq.n	800869a <HAL_TIM_ConfigClockSource+0xa6>
 8008664:	2b70      	cmp	r3, #112	@ 0x70
 8008666:	d87b      	bhi.n	8008760 <HAL_TIM_ConfigClockSource+0x16c>
 8008668:	2b60      	cmp	r3, #96	@ 0x60
 800866a:	d050      	beq.n	800870e <HAL_TIM_ConfigClockSource+0x11a>
 800866c:	2b60      	cmp	r3, #96	@ 0x60
 800866e:	d877      	bhi.n	8008760 <HAL_TIM_ConfigClockSource+0x16c>
 8008670:	2b50      	cmp	r3, #80	@ 0x50
 8008672:	d03c      	beq.n	80086ee <HAL_TIM_ConfigClockSource+0xfa>
 8008674:	2b50      	cmp	r3, #80	@ 0x50
 8008676:	d873      	bhi.n	8008760 <HAL_TIM_ConfigClockSource+0x16c>
 8008678:	2b40      	cmp	r3, #64	@ 0x40
 800867a:	d058      	beq.n	800872e <HAL_TIM_ConfigClockSource+0x13a>
 800867c:	2b40      	cmp	r3, #64	@ 0x40
 800867e:	d86f      	bhi.n	8008760 <HAL_TIM_ConfigClockSource+0x16c>
 8008680:	2b30      	cmp	r3, #48	@ 0x30
 8008682:	d064      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x15a>
 8008684:	2b30      	cmp	r3, #48	@ 0x30
 8008686:	d86b      	bhi.n	8008760 <HAL_TIM_ConfigClockSource+0x16c>
 8008688:	2b20      	cmp	r3, #32
 800868a:	d060      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x15a>
 800868c:	2b20      	cmp	r3, #32
 800868e:	d867      	bhi.n	8008760 <HAL_TIM_ConfigClockSource+0x16c>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d05c      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x15a>
 8008694:	2b10      	cmp	r3, #16
 8008696:	d05a      	beq.n	800874e <HAL_TIM_ConfigClockSource+0x15a>
 8008698:	e062      	b.n	8008760 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086aa:	f000 fbe1 	bl	8008e70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	609a      	str	r2, [r3, #8]
      break;
 80086c6:	e04f      	b.n	8008768 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086d8:	f000 fbca 	bl	8008e70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086ea:	609a      	str	r2, [r3, #8]
      break;
 80086ec:	e03c      	b.n	8008768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086fa:	461a      	mov	r2, r3
 80086fc:	f000 fb3e 	bl	8008d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2150      	movs	r1, #80	@ 0x50
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fb97 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 800870c:	e02c      	b.n	8008768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800871a:	461a      	mov	r2, r3
 800871c:	f000 fb5d 	bl	8008dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2160      	movs	r1, #96	@ 0x60
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fb87 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 800872c:	e01c      	b.n	8008768 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800873a:	461a      	mov	r2, r3
 800873c:	f000 fb1e 	bl	8008d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2140      	movs	r1, #64	@ 0x40
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fb77 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 800874c:	e00c      	b.n	8008768 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4619      	mov	r1, r3
 8008758:	4610      	mov	r0, r2
 800875a:	f000 fb6e 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 800875e:	e003      	b.n	8008768 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
      break;
 8008764:	e000      	b.n	8008768 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d107      	bne.n	80087d2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087d0:	e02a      	b.n	8008828 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d107      	bne.n	80087ec <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2202      	movs	r2, #2
 80087e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087ea:	e01d      	b.n	8008828 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d107      	bne.n	8008806 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2204      	movs	r2, #4
 80087fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008804:	e010      	b.n	8008828 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	429a      	cmp	r2, r3
 800880e:	d107      	bne.n	8008820 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2208      	movs	r2, #8
 8008814:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800881e:	e003      	b.n	8008828 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff ffb4 	bl	8008796 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	771a      	strb	r2, [r3, #28]
}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008848:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	d10b      	bne.n	800886c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2201      	movs	r2, #1
 8008858:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d136      	bne.n	80088d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800886a:	e031      	b.n	80088d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	429a      	cmp	r2, r3
 8008874:	d10b      	bne.n	800888e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2202      	movs	r2, #2
 800887a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d125      	bne.n	80088d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800888c:	e020      	b.n	80088d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	429a      	cmp	r2, r3
 8008896:	d10b      	bne.n	80088b0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2204      	movs	r2, #4
 800889c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d114      	bne.n	80088d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088ae:	e00f      	b.n	80088d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d10a      	bne.n	80088d0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2208      	movs	r2, #8
 80088be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d103      	bne.n	80088d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7f9 f8bd 	bl	8001a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	771a      	strb	r2, [r3, #28]
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d103      	bne.n	8008904 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	771a      	strb	r2, [r3, #28]
 8008902:	e019      	b.n	8008938 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	429a      	cmp	r2, r3
 800890c:	d103      	bne.n	8008916 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2202      	movs	r2, #2
 8008912:	771a      	strb	r2, [r3, #28]
 8008914:	e010      	b.n	8008938 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d103      	bne.n	8008928 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2204      	movs	r2, #4
 8008924:	771a      	strb	r2, [r3, #28]
 8008926:	e007      	b.n	8008938 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	429a      	cmp	r2, r3
 8008930:	d102      	bne.n	8008938 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2208      	movs	r2, #8
 8008936:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff ff22 	bl	8008782 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	771a      	strb	r2, [r3, #28]
}
 8008944:	bf00      	nop
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a3a      	ldr	r2, [pc, #232]	@ (8008a48 <TIM_Base_SetConfig+0xfc>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d00f      	beq.n	8008984 <TIM_Base_SetConfig+0x38>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800896a:	d00b      	beq.n	8008984 <TIM_Base_SetConfig+0x38>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a37      	ldr	r2, [pc, #220]	@ (8008a4c <TIM_Base_SetConfig+0x100>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d007      	beq.n	8008984 <TIM_Base_SetConfig+0x38>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a36      	ldr	r2, [pc, #216]	@ (8008a50 <TIM_Base_SetConfig+0x104>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d003      	beq.n	8008984 <TIM_Base_SetConfig+0x38>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a35      	ldr	r2, [pc, #212]	@ (8008a54 <TIM_Base_SetConfig+0x108>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d108      	bne.n	8008996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800898a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4313      	orrs	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a2b      	ldr	r2, [pc, #172]	@ (8008a48 <TIM_Base_SetConfig+0xfc>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d01b      	beq.n	80089d6 <TIM_Base_SetConfig+0x8a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a4:	d017      	beq.n	80089d6 <TIM_Base_SetConfig+0x8a>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a28      	ldr	r2, [pc, #160]	@ (8008a4c <TIM_Base_SetConfig+0x100>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d013      	beq.n	80089d6 <TIM_Base_SetConfig+0x8a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a27      	ldr	r2, [pc, #156]	@ (8008a50 <TIM_Base_SetConfig+0x104>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d00f      	beq.n	80089d6 <TIM_Base_SetConfig+0x8a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a26      	ldr	r2, [pc, #152]	@ (8008a54 <TIM_Base_SetConfig+0x108>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00b      	beq.n	80089d6 <TIM_Base_SetConfig+0x8a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a25      	ldr	r2, [pc, #148]	@ (8008a58 <TIM_Base_SetConfig+0x10c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d007      	beq.n	80089d6 <TIM_Base_SetConfig+0x8a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a24      	ldr	r2, [pc, #144]	@ (8008a5c <TIM_Base_SetConfig+0x110>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d003      	beq.n	80089d6 <TIM_Base_SetConfig+0x8a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a23      	ldr	r2, [pc, #140]	@ (8008a60 <TIM_Base_SetConfig+0x114>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d108      	bne.n	80089e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8008a48 <TIM_Base_SetConfig+0xfc>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d103      	bne.n	8008a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	691a      	ldr	r2, [r3, #16]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d105      	bne.n	8008a3a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f023 0201 	bic.w	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	611a      	str	r2, [r3, #16]
  }
}
 8008a3a:	bf00      	nop
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40010000 	.word	0x40010000
 8008a4c:	40000400 	.word	0x40000400
 8008a50:	40000800 	.word	0x40000800
 8008a54:	40000c00 	.word	0x40000c00
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40014400 	.word	0x40014400
 8008a60:	40014800 	.word	0x40014800

08008a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	f023 0201 	bic.w	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0303 	bic.w	r3, r3, #3
 8008a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f023 0302 	bic.w	r3, r3, #2
 8008aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a1c      	ldr	r2, [pc, #112]	@ (8008b2c <TIM_OC1_SetConfig+0xc8>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d10c      	bne.n	8008ada <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f023 0308 	bic.w	r3, r3, #8
 8008ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f023 0304 	bic.w	r3, r3, #4
 8008ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a13      	ldr	r2, [pc, #76]	@ (8008b2c <TIM_OC1_SetConfig+0xc8>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d111      	bne.n	8008b06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	621a      	str	r2, [r3, #32]
}
 8008b20:	bf00      	nop
 8008b22:	371c      	adds	r7, #28
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	40010000 	.word	0x40010000

08008b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	f023 0210 	bic.w	r2, r3, #16
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f023 0320 	bic.w	r3, r3, #32
 8008b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008c04 <TIM_OC2_SetConfig+0xd4>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d10d      	bne.n	8008bac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008baa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a15      	ldr	r2, [pc, #84]	@ (8008c04 <TIM_OC2_SetConfig+0xd4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d113      	bne.n	8008bdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40010000 	.word	0x40010000

08008c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd8 <TIM_OC3_SetConfig+0xd0>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d10d      	bne.n	8008c82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a14      	ldr	r2, [pc, #80]	@ (8008cd8 <TIM_OC3_SetConfig+0xd0>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d113      	bne.n	8008cb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	621a      	str	r2, [r3, #32]
}
 8008ccc:	bf00      	nop
 8008cce:	371c      	adds	r7, #28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	40010000 	.word	0x40010000

08008cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	031b      	lsls	r3, r3, #12
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a10      	ldr	r2, [pc, #64]	@ (8008d78 <TIM_OC4_SetConfig+0x9c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d109      	bne.n	8008d50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	019b      	lsls	r3, r3, #6
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	621a      	str	r2, [r3, #32]
}
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40010000 	.word	0x40010000

08008d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f023 0201 	bic.w	r2, r3, #1
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f023 030a 	bic.w	r3, r3, #10
 8008db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b087      	sub	sp, #28
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	f023 0210 	bic.w	r2, r3, #16
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	031b      	lsls	r3, r3, #12
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	621a      	str	r2, [r3, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b085      	sub	sp, #20
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	f043 0307 	orr.w	r3, r3, #7
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	609a      	str	r2, [r3, #8]
}
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	021a      	lsls	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	609a      	str	r2, [r3, #8]
}
 8008ea4:	bf00      	nop
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f003 031f 	and.w	r3, r3, #31
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a1a      	ldr	r2, [r3, #32]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	401a      	ands	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1a      	ldr	r2, [r3, #32]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f003 031f 	and.w	r3, r3, #31
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e050      	b.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a1c      	ldr	r2, [pc, #112]	@ (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d018      	beq.n	8008f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f60:	d013      	beq.n	8008f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a18      	ldr	r2, [pc, #96]	@ (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00e      	beq.n	8008f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a16      	ldr	r2, [pc, #88]	@ (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d009      	beq.n	8008f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a15      	ldr	r2, [pc, #84]	@ (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d004      	beq.n	8008f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a13      	ldr	r2, [pc, #76]	@ (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d10c      	bne.n	8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40010000 	.word	0x40010000
 8008fc8:	40000400 	.word	0x40000400
 8008fcc:	40000800 	.word	0x40000800
 8008fd0:	40000c00 	.word	0x40000c00
 8008fd4:	40014000 	.word	0x40014000

08008fd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fd8:	b084      	sub	sp, #16
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	f107 001c 	add.w	r0, r7, #28
 8008fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d123      	bne.n	800903a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800901a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800901e:	2b01      	cmp	r3, #1
 8009020:	d105      	bne.n	800902e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fae8 	bl	800a604 <USB_CoreReset>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
 8009038:	e01b      	b.n	8009072 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 fadc 	bl	800a604 <USB_CoreReset>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009050:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009054:	2b00      	cmp	r3, #0
 8009056:	d106      	bne.n	8009066 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	639a      	str	r2, [r3, #56]	@ 0x38
 8009064:	e005      	b.n	8009072 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009072:	7fbb      	ldrb	r3, [r7, #30]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d10b      	bne.n	8009090 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f043 0206 	orr.w	r2, r3, #6
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f043 0220 	orr.w	r2, r3, #32
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800909c:	b004      	add	sp, #16
 800909e:	4770      	bx	lr

080090a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d165      	bne.n	8009180 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4a41      	ldr	r2, [pc, #260]	@ (80091bc <USB_SetTurnaroundTime+0x11c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d906      	bls.n	80090ca <USB_SetTurnaroundTime+0x2a>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4a40      	ldr	r2, [pc, #256]	@ (80091c0 <USB_SetTurnaroundTime+0x120>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d202      	bcs.n	80090ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090c4:	230f      	movs	r3, #15
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e062      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4a3c      	ldr	r2, [pc, #240]	@ (80091c0 <USB_SetTurnaroundTime+0x120>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d306      	bcc.n	80090e0 <USB_SetTurnaroundTime+0x40>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4a3b      	ldr	r2, [pc, #236]	@ (80091c4 <USB_SetTurnaroundTime+0x124>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d202      	bcs.n	80090e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090da:	230e      	movs	r3, #14
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	e057      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4a38      	ldr	r2, [pc, #224]	@ (80091c4 <USB_SetTurnaroundTime+0x124>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d306      	bcc.n	80090f6 <USB_SetTurnaroundTime+0x56>
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	4a37      	ldr	r2, [pc, #220]	@ (80091c8 <USB_SetTurnaroundTime+0x128>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d202      	bcs.n	80090f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090f0:	230d      	movs	r3, #13
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e04c      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	4a33      	ldr	r2, [pc, #204]	@ (80091c8 <USB_SetTurnaroundTime+0x128>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d306      	bcc.n	800910c <USB_SetTurnaroundTime+0x6c>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4a32      	ldr	r2, [pc, #200]	@ (80091cc <USB_SetTurnaroundTime+0x12c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d802      	bhi.n	800910c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009106:	230c      	movs	r3, #12
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e041      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4a2f      	ldr	r2, [pc, #188]	@ (80091cc <USB_SetTurnaroundTime+0x12c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d906      	bls.n	8009122 <USB_SetTurnaroundTime+0x82>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4a2e      	ldr	r2, [pc, #184]	@ (80091d0 <USB_SetTurnaroundTime+0x130>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d802      	bhi.n	8009122 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800911c:	230b      	movs	r3, #11
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e036      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4a2a      	ldr	r2, [pc, #168]	@ (80091d0 <USB_SetTurnaroundTime+0x130>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d906      	bls.n	8009138 <USB_SetTurnaroundTime+0x98>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	4a29      	ldr	r2, [pc, #164]	@ (80091d4 <USB_SetTurnaroundTime+0x134>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d802      	bhi.n	8009138 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009132:	230a      	movs	r3, #10
 8009134:	617b      	str	r3, [r7, #20]
 8009136:	e02b      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	4a26      	ldr	r2, [pc, #152]	@ (80091d4 <USB_SetTurnaroundTime+0x134>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d906      	bls.n	800914e <USB_SetTurnaroundTime+0xae>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	4a25      	ldr	r2, [pc, #148]	@ (80091d8 <USB_SetTurnaroundTime+0x138>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d202      	bcs.n	800914e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009148:	2309      	movs	r3, #9
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e020      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4a21      	ldr	r2, [pc, #132]	@ (80091d8 <USB_SetTurnaroundTime+0x138>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d306      	bcc.n	8009164 <USB_SetTurnaroundTime+0xc4>
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	4a20      	ldr	r2, [pc, #128]	@ (80091dc <USB_SetTurnaroundTime+0x13c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d802      	bhi.n	8009164 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800915e:	2308      	movs	r3, #8
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e015      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a1d      	ldr	r2, [pc, #116]	@ (80091dc <USB_SetTurnaroundTime+0x13c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d906      	bls.n	800917a <USB_SetTurnaroundTime+0xda>
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4a1c      	ldr	r2, [pc, #112]	@ (80091e0 <USB_SetTurnaroundTime+0x140>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d202      	bcs.n	800917a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009174:	2307      	movs	r3, #7
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e00a      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800917a:	2306      	movs	r3, #6
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e007      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009186:	2309      	movs	r3, #9
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	e001      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800918c:	2309      	movs	r3, #9
 800918e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	029b      	lsls	r3, r3, #10
 80091a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80091a8:	431a      	orrs	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	371c      	adds	r7, #28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	00d8acbf 	.word	0x00d8acbf
 80091c0:	00e4e1c0 	.word	0x00e4e1c0
 80091c4:	00f42400 	.word	0x00f42400
 80091c8:	01067380 	.word	0x01067380
 80091cc:	011a499f 	.word	0x011a499f
 80091d0:	01312cff 	.word	0x01312cff
 80091d4:	014ca43f 	.word	0x014ca43f
 80091d8:	016e3600 	.word	0x016e3600
 80091dc:	01a6ab1f 	.word	0x01a6ab1f
 80091e0:	01e84800 	.word	0x01e84800

080091e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f043 0201 	orr.w	r2, r3, #1
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f023 0201 	bic.w	r2, r3, #1
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d115      	bne.n	8009276 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009256:	200a      	movs	r0, #10
 8009258:	f7fb f9d2 	bl	8004600 <HAL_Delay>
      ms += 10U;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	330a      	adds	r3, #10
 8009260:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 f93f 	bl	800a4e6 <USB_GetMode>
 8009268:	4603      	mov	r3, r0
 800926a:	2b01      	cmp	r3, #1
 800926c:	d01e      	beq.n	80092ac <USB_SetCurrentMode+0x84>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2bc7      	cmp	r3, #199	@ 0xc7
 8009272:	d9f0      	bls.n	8009256 <USB_SetCurrentMode+0x2e>
 8009274:	e01a      	b.n	80092ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d115      	bne.n	80092a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009288:	200a      	movs	r0, #10
 800928a:	f7fb f9b9 	bl	8004600 <HAL_Delay>
      ms += 10U;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	330a      	adds	r3, #10
 8009292:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 f926 	bl	800a4e6 <USB_GetMode>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <USB_SetCurrentMode+0x84>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80092a4:	d9f0      	bls.n	8009288 <USB_SetCurrentMode+0x60>
 80092a6:	e001      	b.n	80092ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e005      	b.n	80092b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80092b0:	d101      	bne.n	80092b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e000      	b.n	80092b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092c0:	b084      	sub	sp, #16
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b086      	sub	sp, #24
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80092ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092da:	2300      	movs	r3, #0
 80092dc:	613b      	str	r3, [r7, #16]
 80092de:	e009      	b.n	80092f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	3340      	adds	r3, #64	@ 0x40
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	2200      	movs	r2, #0
 80092ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	3301      	adds	r3, #1
 80092f2:	613b      	str	r3, [r7, #16]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2b0e      	cmp	r3, #14
 80092f8:	d9f2      	bls.n	80092e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d11c      	bne.n	800933c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009310:	f043 0302 	orr.w	r3, r3, #2
 8009314:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009326:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009332:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	639a      	str	r2, [r3, #56]	@ 0x38
 800933a:	e00b      	b.n	8009354 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009340:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800935a:	461a      	mov	r2, r3
 800935c:	2300      	movs	r3, #0
 800935e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009360:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009364:	2b01      	cmp	r3, #1
 8009366:	d10d      	bne.n	8009384 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800936c:	2b00      	cmp	r3, #0
 800936e:	d104      	bne.n	800937a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009370:	2100      	movs	r1, #0
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f968 	bl	8009648 <USB_SetDevSpeed>
 8009378:	e008      	b.n	800938c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800937a:	2101      	movs	r1, #1
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f963 	bl	8009648 <USB_SetDevSpeed>
 8009382:	e003      	b.n	800938c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009384:	2103      	movs	r1, #3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f95e 	bl	8009648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800938c:	2110      	movs	r1, #16
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f8fa 	bl	8009588 <USB_FlushTxFifo>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f924 	bl	80095ec <USB_FlushRxFifo>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b4:	461a      	mov	r2, r3
 80093b6:	2300      	movs	r3, #0
 80093b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c0:	461a      	mov	r2, r3
 80093c2:	2300      	movs	r3, #0
 80093c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093cc:	461a      	mov	r2, r3
 80093ce:	2300      	movs	r3, #0
 80093d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	e043      	b.n	8009460 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093ee:	d118      	bne.n	8009422 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10a      	bne.n	800940c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009402:	461a      	mov	r2, r3
 8009404:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	e013      	b.n	8009434 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009418:	461a      	mov	r2, r3
 800941a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	e008      	b.n	8009434 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	4413      	add	r3, r2
 800942a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800942e:	461a      	mov	r2, r3
 8009430:	2300      	movs	r3, #0
 8009432:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009440:	461a      	mov	r2, r3
 8009442:	2300      	movs	r3, #0
 8009444:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009452:	461a      	mov	r2, r3
 8009454:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009458:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3301      	adds	r3, #1
 800945e:	613b      	str	r3, [r7, #16]
 8009460:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009464:	461a      	mov	r2, r3
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	4293      	cmp	r3, r2
 800946a:	d3b5      	bcc.n	80093d8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800946c:	2300      	movs	r3, #0
 800946e:	613b      	str	r3, [r7, #16]
 8009470:	e043      	b.n	80094fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009488:	d118      	bne.n	80094bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800949c:	461a      	mov	r2, r3
 800949e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	e013      	b.n	80094ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b2:	461a      	mov	r2, r3
 80094b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	e008      	b.n	80094ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c8:	461a      	mov	r2, r3
 80094ca:	2300      	movs	r3, #0
 80094cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094da:	461a      	mov	r2, r3
 80094dc:	2300      	movs	r3, #0
 80094de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ec:	461a      	mov	r2, r3
 80094ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	3301      	adds	r3, #1
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094fe:	461a      	mov	r2, r3
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	4293      	cmp	r3, r2
 8009504:	d3b5      	bcc.n	8009472 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009518:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009526:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009528:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800952c:	2b00      	cmp	r3, #0
 800952e:	d105      	bne.n	800953c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	f043 0210 	orr.w	r2, r3, #16
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	699a      	ldr	r2, [r3, #24]
 8009540:	4b10      	ldr	r3, [pc, #64]	@ (8009584 <USB_DevInit+0x2c4>)
 8009542:	4313      	orrs	r3, r2
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009548:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	f043 0208 	orr.w	r2, r3, #8
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800955c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009560:	2b01      	cmp	r3, #1
 8009562:	d107      	bne.n	8009574 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800956c:	f043 0304 	orr.w	r3, r3, #4
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009580:	b004      	add	sp, #16
 8009582:	4770      	bx	lr
 8009584:	803c3800 	.word	0x803c3800

08009588 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009592:	2300      	movs	r3, #0
 8009594:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3301      	adds	r3, #1
 800959a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095a2:	d901      	bls.n	80095a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e01b      	b.n	80095e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	daf2      	bge.n	8009596 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	019b      	lsls	r3, r3, #6
 80095b8:	f043 0220 	orr.w	r2, r3, #32
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3301      	adds	r3, #1
 80095c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095cc:	d901      	bls.n	80095d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e006      	b.n	80095e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d0f0      	beq.n	80095c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3301      	adds	r3, #1
 80095fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009604:	d901      	bls.n	800960a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e018      	b.n	800963c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	daf2      	bge.n	80095f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2210      	movs	r2, #16
 800961a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3301      	adds	r3, #1
 8009620:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009628:	d901      	bls.n	800962e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e006      	b.n	800963c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	f003 0310 	and.w	r3, r3, #16
 8009636:	2b10      	cmp	r3, #16
 8009638:	d0f0      	beq.n	800961c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009668:	4313      	orrs	r3, r2
 800966a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800967a:	b480      	push	{r7}
 800967c:	b087      	sub	sp, #28
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f003 0306 	and.w	r3, r3, #6
 8009692:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]
 800969e:	e00a      	b.n	80096b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d002      	beq.n	80096ac <USB_GetDevSpeed+0x32>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b06      	cmp	r3, #6
 80096aa:	d102      	bne.n	80096b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80096ac:	2302      	movs	r3, #2
 80096ae:	75fb      	strb	r3, [r7, #23]
 80096b0:	e001      	b.n	80096b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80096b2:	230f      	movs	r3, #15
 80096b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	785b      	ldrb	r3, [r3, #1]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d13a      	bne.n	8009756 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e6:	69da      	ldr	r2, [r3, #28]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	2101      	movs	r1, #1
 80096f2:	fa01 f303 	lsl.w	r3, r1, r3
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	68f9      	ldr	r1, [r7, #12]
 80096fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096fe:	4313      	orrs	r3, r2
 8009700:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d155      	bne.n	80097c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	791b      	ldrb	r3, [r3, #4]
 8009732:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009734:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	059b      	lsls	r3, r3, #22
 800973a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800973c:	4313      	orrs	r3, r2
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	440a      	add	r2, r1
 8009746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800974a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800974e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	e036      	b.n	80097c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975c:	69da      	ldr	r2, [r3, #28]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	2101      	movs	r1, #1
 8009768:	fa01 f303 	lsl.w	r3, r1, r3
 800976c:	041b      	lsls	r3, r3, #16
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009774:	4313      	orrs	r3, r2
 8009776:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11a      	bne.n	80097c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	791b      	ldrb	r3, [r3, #4]
 80097a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097aa:	430b      	orrs	r3, r1
 80097ac:	4313      	orrs	r3, r2
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
	...

080097d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d161      	bne.n	80098b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009806:	d11f      	bne.n	8009848 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	0151      	lsls	r1, r2, #5
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	440a      	add	r2, r1
 800981e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009822:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009826:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	0151      	lsls	r1, r2, #5
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	440a      	add	r2, r1
 800983e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009842:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800984e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	f003 030f 	and.w	r3, r3, #15
 8009858:	2101      	movs	r1, #1
 800985a:	fa01 f303 	lsl.w	r3, r1, r3
 800985e:	b29b      	uxth	r3, r3
 8009860:	43db      	mvns	r3, r3
 8009862:	68f9      	ldr	r1, [r7, #12]
 8009864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009868:	4013      	ands	r3, r2
 800986a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009872:	69da      	ldr	r2, [r3, #28]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	2101      	movs	r1, #1
 800987e:	fa01 f303 	lsl.w	r3, r1, r3
 8009882:	b29b      	uxth	r3, r3
 8009884:	43db      	mvns	r3, r3
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800988c:	4013      	ands	r3, r2
 800988e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	0159      	lsls	r1, r3, #5
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	440b      	add	r3, r1
 80098a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098aa:	4619      	mov	r1, r3
 80098ac:	4b35      	ldr	r3, [pc, #212]	@ (8009984 <USB_DeactivateEndpoint+0x1b0>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	600b      	str	r3, [r1, #0]
 80098b2:	e060      	b.n	8009976 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ca:	d11f      	bne.n	800990c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	0151      	lsls	r1, r2, #5
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	440a      	add	r2, r1
 80098e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	0151      	lsls	r1, r2, #5
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	440a      	add	r2, r1
 8009902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009906:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800990a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009912:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 030f 	and.w	r3, r3, #15
 800991c:	2101      	movs	r1, #1
 800991e:	fa01 f303 	lsl.w	r3, r1, r3
 8009922:	041b      	lsls	r3, r3, #16
 8009924:	43db      	mvns	r3, r3
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800992c:	4013      	ands	r3, r2
 800992e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009936:	69da      	ldr	r2, [r3, #28]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	f003 030f 	and.w	r3, r3, #15
 8009940:	2101      	movs	r1, #1
 8009942:	fa01 f303 	lsl.w	r3, r1, r3
 8009946:	041b      	lsls	r3, r3, #16
 8009948:	43db      	mvns	r3, r3
 800994a:	68f9      	ldr	r1, [r7, #12]
 800994c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009950:	4013      	ands	r3, r2
 8009952:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	0159      	lsls	r1, r3, #5
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	440b      	add	r3, r1
 800996a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800996e:	4619      	mov	r1, r3
 8009970:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <USB_DeactivateEndpoint+0x1b4>)
 8009972:	4013      	ands	r3, r2
 8009974:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	ec337800 	.word	0xec337800
 8009988:	eff37800 	.word	0xeff37800

0800998c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08a      	sub	sp, #40	@ 0x28
 8009990:	af02      	add	r7, sp, #8
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4613      	mov	r3, r2
 8009998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	785b      	ldrb	r3, [r3, #1]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	f040 817f 	bne.w	8009cac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d132      	bne.n	8009a1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	69ba      	ldr	r2, [r7, #24]
 80099c6:	0151      	lsls	r1, r2, #5
 80099c8:	69fa      	ldr	r2, [r7, #28]
 80099ca:	440a      	add	r2, r1
 80099cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80099d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80099d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	0151      	lsls	r1, r2, #5
 80099ec:	69fa      	ldr	r2, [r7, #28]
 80099ee:	440a      	add	r2, r1
 80099f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a14:	0cdb      	lsrs	r3, r3, #19
 8009a16:	04db      	lsls	r3, r3, #19
 8009a18:	6113      	str	r3, [r2, #16]
 8009a1a:	e097      	b.n	8009b4c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	0151      	lsls	r1, r2, #5
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	440a      	add	r2, r1
 8009a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a36:	0cdb      	lsrs	r3, r3, #19
 8009a38:	04db      	lsls	r3, r3, #19
 8009a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	0151      	lsls	r1, r2, #5
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	440a      	add	r2, r1
 8009a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a5e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d11a      	bne.n	8009a9c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	691a      	ldr	r2, [r3, #16]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d903      	bls.n	8009a7a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	689a      	ldr	r2, [r3, #8]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	69ba      	ldr	r2, [r7, #24]
 8009a8a:	0151      	lsls	r1, r2, #5
 8009a8c:	69fa      	ldr	r2, [r7, #28]
 8009a8e:	440a      	add	r2, r1
 8009a90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a98:	6113      	str	r3, [r2, #16]
 8009a9a:	e044      	b.n	8009b26 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	691a      	ldr	r2, [r3, #16]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	1e5a      	subs	r2, r3, #1
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009abe:	691a      	ldr	r2, [r3, #16]
 8009ac0:	8afb      	ldrh	r3, [r7, #22]
 8009ac2:	04d9      	lsls	r1, r3, #19
 8009ac4:	4ba4      	ldr	r3, [pc, #656]	@ (8009d58 <USB_EPStartXfer+0x3cc>)
 8009ac6:	400b      	ands	r3, r1
 8009ac8:	69b9      	ldr	r1, [r7, #24]
 8009aca:	0148      	lsls	r0, r1, #5
 8009acc:	69f9      	ldr	r1, [r7, #28]
 8009ace:	4401      	add	r1, r0
 8009ad0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	791b      	ldrb	r3, [r3, #4]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d122      	bne.n	8009b26 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	0151      	lsls	r1, r2, #5
 8009af2:	69fa      	ldr	r2, [r7, #28]
 8009af4:	440a      	add	r2, r1
 8009af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009afa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009afe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0c:	691a      	ldr	r2, [r3, #16]
 8009b0e:	8afb      	ldrh	r3, [r7, #22]
 8009b10:	075b      	lsls	r3, r3, #29
 8009b12:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009b16:	69b9      	ldr	r1, [r7, #24]
 8009b18:	0148      	lsls	r0, r1, #5
 8009b1a:	69f9      	ldr	r1, [r7, #28]
 8009b1c:	4401      	add	r1, r0
 8009b1e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b22:	4313      	orrs	r3, r2
 8009b24:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b32:	691a      	ldr	r2, [r3, #16]
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b3c:	69b9      	ldr	r1, [r7, #24]
 8009b3e:	0148      	lsls	r0, r1, #5
 8009b40:	69f9      	ldr	r1, [r7, #28]
 8009b42:	4401      	add	r1, r0
 8009b44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d14b      	bne.n	8009bea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d009      	beq.n	8009b6e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b66:	461a      	mov	r2, r3
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	791b      	ldrb	r3, [r3, #4]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d128      	bne.n	8009bc8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d110      	bne.n	8009ba8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	0151      	lsls	r1, r2, #5
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ba0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	e00f      	b.n	8009bc8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	0151      	lsls	r1, r2, #5
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	440a      	add	r2, r1
 8009bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bc6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	0151      	lsls	r1, r2, #5
 8009bda:	69fa      	ldr	r2, [r7, #28]
 8009bdc:	440a      	add	r2, r1
 8009bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009be2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	e166      	b.n	8009eb8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	0151      	lsls	r1, r2, #5
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	440a      	add	r2, r1
 8009c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c04:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009c08:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	791b      	ldrb	r3, [r3, #4]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d015      	beq.n	8009c3e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 814e 	beq.w	8009eb8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f003 030f 	and.w	r3, r3, #15
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c32:	69f9      	ldr	r1, [r7, #28]
 8009c34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	634b      	str	r3, [r1, #52]	@ 0x34
 8009c3c:	e13c      	b.n	8009eb8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d110      	bne.n	8009c70 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	69ba      	ldr	r2, [r7, #24]
 8009c5e:	0151      	lsls	r1, r2, #5
 8009c60:	69fa      	ldr	r2, [r7, #28]
 8009c62:	440a      	add	r2, r1
 8009c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	e00f      	b.n	8009c90 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	0151      	lsls	r1, r2, #5
 8009c82:	69fa      	ldr	r2, [r7, #28]
 8009c84:	440a      	add	r2, r1
 8009c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c8e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	68d9      	ldr	r1, [r3, #12]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	b298      	uxth	r0, r3
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f9b9 	bl	800a01c <USB_WritePacket>
 8009caa:	e105      	b.n	8009eb8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cc6:	0cdb      	lsrs	r3, r3, #19
 8009cc8:	04db      	lsls	r3, r3, #19
 8009cca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	0151      	lsls	r1, r2, #5
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	440a      	add	r2, r1
 8009ce2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ce6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009cea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009cee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d132      	bne.n	8009d5c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	689a      	ldr	r2, [r3, #8]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d24:	69b9      	ldr	r1, [r7, #24]
 8009d26:	0148      	lsls	r0, r1, #5
 8009d28:	69f9      	ldr	r1, [r7, #28]
 8009d2a:	4401      	add	r1, r0
 8009d2c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d30:	4313      	orrs	r3, r2
 8009d32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	0151      	lsls	r1, r2, #5
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	440a      	add	r2, r1
 8009d4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d52:	6113      	str	r3, [r2, #16]
 8009d54:	e062      	b.n	8009e1c <USB_EPStartXfer+0x490>
 8009d56:	bf00      	nop
 8009d58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d123      	bne.n	8009dac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d70:	691a      	ldr	r2, [r3, #16]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d7a:	69b9      	ldr	r1, [r7, #24]
 8009d7c:	0148      	lsls	r0, r1, #5
 8009d7e:	69f9      	ldr	r1, [r7, #28]
 8009d80:	4401      	add	r1, r0
 8009d82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d86:	4313      	orrs	r3, r2
 8009d88:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	0151      	lsls	r1, r2, #5
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	440a      	add	r2, r1
 8009da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009da4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009da8:	6113      	str	r3, [r2, #16]
 8009daa:	e037      	b.n	8009e1c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	691a      	ldr	r2, [r3, #16]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	4413      	add	r3, r2
 8009db6:	1e5a      	subs	r2, r3, #1
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	8afa      	ldrh	r2, [r7, #22]
 8009dc8:	fb03 f202 	mul.w	r2, r3, r2
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ddc:	691a      	ldr	r2, [r3, #16]
 8009dde:	8afb      	ldrh	r3, [r7, #22]
 8009de0:	04d9      	lsls	r1, r3, #19
 8009de2:	4b38      	ldr	r3, [pc, #224]	@ (8009ec4 <USB_EPStartXfer+0x538>)
 8009de4:	400b      	ands	r3, r1
 8009de6:	69b9      	ldr	r1, [r7, #24]
 8009de8:	0148      	lsls	r0, r1, #5
 8009dea:	69f9      	ldr	r1, [r7, #28]
 8009dec:	4401      	add	r1, r0
 8009dee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009df2:	4313      	orrs	r3, r2
 8009df4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e02:	691a      	ldr	r2, [r3, #16]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e0c:	69b9      	ldr	r1, [r7, #24]
 8009e0e:	0148      	lsls	r0, r1, #5
 8009e10:	69f9      	ldr	r1, [r7, #28]
 8009e12:	4401      	add	r1, r0
 8009e14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d10d      	bne.n	8009e3e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	68d9      	ldr	r1, [r3, #12]
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3a:	460a      	mov	r2, r1
 8009e3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	791b      	ldrb	r3, [r3, #4]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d128      	bne.n	8009e98 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d110      	bne.n	8009e78 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	0151      	lsls	r1, r2, #5
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	440a      	add	r2, r1
 8009e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	e00f      	b.n	8009e98 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	0151      	lsls	r1, r2, #5
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	440a      	add	r2, r1
 8009e8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	0151      	lsls	r1, r2, #5
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	440a      	add	r2, r1
 8009eae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eb2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009eb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3720      	adds	r7, #32
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	1ff80000 	.word	0x1ff80000

08009ec8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b087      	sub	sp, #28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	785b      	ldrb	r3, [r3, #1]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d14a      	bne.n	8009f7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009efe:	f040 8086 	bne.w	800a00e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	7812      	ldrb	r2, [r2, #0]
 8009f16:	0151      	lsls	r1, r2, #5
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	440a      	add	r2, r1
 8009f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	7812      	ldrb	r2, [r2, #0]
 8009f3a:	0151      	lsls	r1, r2, #5
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	440a      	add	r2, r1
 8009f40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d902      	bls.n	8009f60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f5e:	e056      	b.n	800a00e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f78:	d0e7      	beq.n	8009f4a <USB_EPStopXfer+0x82>
 8009f7a:	e048      	b.n	800a00e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f94:	d13b      	bne.n	800a00e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	7812      	ldrb	r2, [r2, #0]
 8009faa:	0151      	lsls	r1, r2, #5
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	440a      	add	r2, r1
 8009fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	7812      	ldrb	r2, [r2, #0]
 8009fce:	0151      	lsls	r1, r2, #5
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	440a      	add	r2, r1
 8009fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009fdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d902      	bls.n	8009ff4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff2:	e00c      	b.n	800a00e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a00c:	d0e7      	beq.n	8009fde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a010:	4618      	mov	r0, r3
 800a012:	371c      	adds	r7, #28
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b089      	sub	sp, #36	@ 0x24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4611      	mov	r1, r2
 800a028:	461a      	mov	r2, r3
 800a02a:	460b      	mov	r3, r1
 800a02c:	71fb      	strb	r3, [r7, #7]
 800a02e:	4613      	mov	r3, r2
 800a030:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a03a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d123      	bne.n	800a08a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a042:	88bb      	ldrh	r3, [r7, #4]
 800a044:	3303      	adds	r3, #3
 800a046:	089b      	lsrs	r3, r3, #2
 800a048:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a04a:	2300      	movs	r3, #0
 800a04c:	61bb      	str	r3, [r7, #24]
 800a04e:	e018      	b.n	800a082 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	031a      	lsls	r2, r3, #12
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	4413      	add	r3, r2
 800a058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a05c:	461a      	mov	r2, r3
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	3301      	adds	r3, #1
 800a068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	3301      	adds	r3, #1
 800a06e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	3301      	adds	r3, #1
 800a074:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	3301      	adds	r3, #1
 800a07a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	3301      	adds	r3, #1
 800a080:	61bb      	str	r3, [r7, #24]
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	429a      	cmp	r2, r3
 800a088:	d3e2      	bcc.n	800a050 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3724      	adds	r7, #36	@ 0x24
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a098:	b480      	push	{r7}
 800a09a:	b08b      	sub	sp, #44	@ 0x2c
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0ae:	88fb      	ldrh	r3, [r7, #6]
 800a0b0:	089b      	lsrs	r3, r3, #2
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0b6:	88fb      	ldrh	r3, [r7, #6]
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0be:	2300      	movs	r3, #0
 800a0c0:	623b      	str	r3, [r7, #32]
 800a0c2:	e014      	b.n	800a0ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	3301      	adds	r3, #1
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0de:	3301      	adds	r3, #1
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	623b      	str	r3, [r7, #32]
 800a0ee:	6a3a      	ldr	r2, [r7, #32]
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d3e6      	bcc.n	800a0c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a0f6:	8bfb      	ldrh	r3, [r7, #30]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01e      	beq.n	800a13a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a106:	461a      	mov	r2, r3
 800a108:	f107 0310 	add.w	r3, r7, #16
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	fa22 f303 	lsr.w	r3, r2, r3
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	701a      	strb	r2, [r3, #0]
      i++;
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	3301      	adds	r3, #1
 800a126:	623b      	str	r3, [r7, #32]
      pDest++;
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	3301      	adds	r3, #1
 800a12c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a12e:	8bfb      	ldrh	r3, [r7, #30]
 800a130:	3b01      	subs	r3, #1
 800a132:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a134:	8bfb      	ldrh	r3, [r7, #30]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1ea      	bne.n	800a110 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	372c      	adds	r7, #44	@ 0x2c
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	785b      	ldrb	r3, [r3, #1]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d12c      	bne.n	800a1be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	015a      	lsls	r2, r3, #5
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	db12      	blt.n	800a19c <USB_EPSetStall+0x54>
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00f      	beq.n	800a19c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	0151      	lsls	r1, r2, #5
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	440a      	add	r2, r1
 800a192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a196:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a19a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	015a      	lsls	r2, r3, #5
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	0151      	lsls	r1, r2, #5
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	440a      	add	r2, r1
 800a1b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	e02b      	b.n	800a216 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	db12      	blt.n	800a1f6 <USB_EPSetStall+0xae>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00f      	beq.n	800a1f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	0151      	lsls	r1, r2, #5
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	440a      	add	r2, r1
 800a1ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a1f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	0151      	lsls	r1, r2, #5
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	440a      	add	r2, r1
 800a20c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a214:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	785b      	ldrb	r3, [r3, #1]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d128      	bne.n	800a292 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	440a      	add	r2, r1
 800a256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a25a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a25e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	791b      	ldrb	r3, [r3, #4]
 800a264:	2b03      	cmp	r3, #3
 800a266:	d003      	beq.n	800a270 <USB_EPClearStall+0x4c>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	791b      	ldrb	r3, [r3, #4]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d138      	bne.n	800a2e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	0151      	lsls	r1, r2, #5
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	440a      	add	r2, r1
 800a286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a28a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	e027      	b.n	800a2e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	0151      	lsls	r1, r2, #5
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	440a      	add	r2, r1
 800a2a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a2b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	791b      	ldrb	r3, [r3, #4]
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d003      	beq.n	800a2c2 <USB_EPClearStall+0x9e>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	791b      	ldrb	r3, [r3, #4]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d10f      	bne.n	800a2e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	015a      	lsls	r2, r3, #5
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	0151      	lsls	r1, r2, #5
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	440a      	add	r2, r1
 800a2d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a30e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a312:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a324:	68f9      	ldr	r1, [r7, #12]
 800a326:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a32a:	4313      	orrs	r3, r2
 800a32c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a356:	f023 0303 	bic.w	r3, r3, #3
 800a35a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a36a:	f023 0302 	bic.w	r3, r3, #2
 800a36e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a37e:	b480      	push	{r7}
 800a380:	b085      	sub	sp, #20
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a398:	f023 0303 	bic.w	r3, r3, #3
 800a39c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3ac:	f043 0302 	orr.w	r3, r3, #2
 800a3b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	4013      	ands	r3, r2
 800a408:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	0c1b      	lsrs	r3, r3, #16
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b085      	sub	sp, #20
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	4013      	ands	r3, r2
 800a43c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	b29b      	uxth	r3, r3
}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a44e:	b480      	push	{r7}
 800a450:	b085      	sub	sp, #20
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	460b      	mov	r3, r1
 800a458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	4413      	add	r3, r2
 800a466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	4013      	ands	r3, r2
 800a47a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a47c:	68bb      	ldr	r3, [r7, #8]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b087      	sub	sp, #28
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	f003 030f 	and.w	r3, r3, #15
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ba:	01db      	lsls	r3, r3, #7
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	693a      	ldr	r2, [r7, #16]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a4c4:	78fb      	ldrb	r3, [r7, #3]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	371c      	adds	r7, #28
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a51c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a520:	f023 0307 	bic.w	r3, r3, #7
 800a524:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a538:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	460b      	mov	r3, r1
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	333c      	adds	r3, #60	@ 0x3c
 800a55e:	3304      	adds	r3, #4
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	4a26      	ldr	r2, [pc, #152]	@ (800a600 <USB_EP0_OutStart+0xb8>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d90a      	bls.n	800a582 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a578:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a57c:	d101      	bne.n	800a582 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	e037      	b.n	800a5f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a588:	461a      	mov	r2, r3
 800a58a:	2300      	movs	r3, #0
 800a58c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a59c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5b0:	f043 0318 	orr.w	r3, r3, #24
 800a5b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a5c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a5ca:	7afb      	ldrb	r3, [r7, #11]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d10f      	bne.n	800a5f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a5ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	371c      	adds	r7, #28
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	4f54300a 	.word	0x4f54300a

0800a604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a60c:	2300      	movs	r3, #0
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a61c:	d901      	bls.n	800a622 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e01b      	b.n	800a65a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	daf2      	bge.n	800a610 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	f043 0201 	orr.w	r2, r3, #1
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a646:	d901      	bls.n	800a64c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e006      	b.n	800a65a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	2b01      	cmp	r3, #1
 800a656:	d0f0      	beq.n	800a63a <USB_CoreReset+0x36>

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
	...

0800a668 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a66c:	4904      	ldr	r1, [pc, #16]	@ (800a680 <MX_FATFS_Init+0x18>)
 800a66e:	4805      	ldr	r0, [pc, #20]	@ (800a684 <MX_FATFS_Init+0x1c>)
 800a670:	f004 f9ac 	bl	800e9cc <FATFS_LinkDriver>
 800a674:	4603      	mov	r3, r0
 800a676:	461a      	mov	r2, r3
 800a678:	4b03      	ldr	r3, [pc, #12]	@ (800a688 <MX_FATFS_Init+0x20>)
 800a67a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a67c:	bf00      	nop
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	20000408 	.word	0x20000408
 800a684:	20000030 	.word	0x20000030
 800a688:	20000404 	.word	0x20000404

0800a68c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a690:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a692:	4618      	mov	r0, r3
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7f6 f953 	bl	8000954 <SD_disk_initialize>
 800a6ae:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	4603      	mov	r3, r0
 800a6c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7f6 fa2b 	bl	8000b20 <SD_disk_status>
 800a6ca:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60b9      	str	r1, [r7, #8]
 800a6dc:	607a      	str	r2, [r7, #4]
 800a6de:	603b      	str	r3, [r7, #0]
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a6e4:	7bf8      	ldrb	r0, [r7, #15]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	68b9      	ldr	r1, [r7, #8]
 800a6ec:	f7f6 fa2e 	bl	8000b4c <SD_disk_read>
 800a6f0:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	603b      	str	r3, [r7, #0]
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a70a:	7bf8      	ldrb	r0, [r7, #15]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	68b9      	ldr	r1, [r7, #8]
 800a712:	f7f6 fa85 	bl	8000c20 <SD_disk_write>
 800a716:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	603a      	str	r2, [r7, #0]
 800a72a:	71fb      	strb	r3, [r7, #7]
 800a72c:	460b      	mov	r3, r1
 800a72e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a730:	79b9      	ldrb	r1, [r7, #6]
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	4618      	mov	r0, r3
 800a738:	f7f6 faf6 	bl	8000d28 <SD_disk_ioctl>
 800a73c:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a754:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a758:	f004 fe14 	bl	800f384 <USBD_static_malloc>
 800a75c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d109      	bne.n	800a778 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	32b0      	adds	r2, #176	@ 0xb0
 800a76e:	2100      	movs	r1, #0
 800a770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a774:	2302      	movs	r3, #2
 800a776:	e0d4      	b.n	800a922 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a778:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a77c:	2100      	movs	r1, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f004 ffbe 	bl	800f700 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	32b0      	adds	r2, #176	@ 0xb0
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	32b0      	adds	r2, #176	@ 0xb0
 800a79e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	7c1b      	ldrb	r3, [r3, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d138      	bne.n	800a822 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7b0:	4b5e      	ldr	r3, [pc, #376]	@ (800a92c <USBD_CDC_Init+0x1e4>)
 800a7b2:	7819      	ldrb	r1, [r3, #0]
 800a7b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f004 fcbf 	bl	800f13e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7c0:	4b5a      	ldr	r3, [pc, #360]	@ (800a92c <USBD_CDC_Init+0x1e4>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	f003 020f 	and.w	r2, r3, #15
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	3324      	adds	r3, #36	@ 0x24
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7da:	4b55      	ldr	r3, [pc, #340]	@ (800a930 <USBD_CDC_Init+0x1e8>)
 800a7dc:	7819      	ldrb	r1, [r3, #0]
 800a7de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f004 fcaa 	bl	800f13e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7ea:	4b51      	ldr	r3, [pc, #324]	@ (800a930 <USBD_CDC_Init+0x1e8>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	f003 020f 	and.w	r2, r3, #15
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	440b      	add	r3, r1
 800a7fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a802:	2201      	movs	r2, #1
 800a804:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a806:	4b4b      	ldr	r3, [pc, #300]	@ (800a934 <USBD_CDC_Init+0x1ec>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	f003 020f 	and.w	r2, r3, #15
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	440b      	add	r3, r1
 800a81a:	3326      	adds	r3, #38	@ 0x26
 800a81c:	2210      	movs	r2, #16
 800a81e:	801a      	strh	r2, [r3, #0]
 800a820:	e035      	b.n	800a88e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a822:	4b42      	ldr	r3, [pc, #264]	@ (800a92c <USBD_CDC_Init+0x1e4>)
 800a824:	7819      	ldrb	r1, [r3, #0]
 800a826:	2340      	movs	r3, #64	@ 0x40
 800a828:	2202      	movs	r2, #2
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f004 fc87 	bl	800f13e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a830:	4b3e      	ldr	r3, [pc, #248]	@ (800a92c <USBD_CDC_Init+0x1e4>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	f003 020f 	and.w	r2, r3, #15
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4613      	mov	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	440b      	add	r3, r1
 800a844:	3324      	adds	r3, #36	@ 0x24
 800a846:	2201      	movs	r2, #1
 800a848:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a84a:	4b39      	ldr	r3, [pc, #228]	@ (800a930 <USBD_CDC_Init+0x1e8>)
 800a84c:	7819      	ldrb	r1, [r3, #0]
 800a84e:	2340      	movs	r3, #64	@ 0x40
 800a850:	2202      	movs	r2, #2
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f004 fc73 	bl	800f13e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a858:	4b35      	ldr	r3, [pc, #212]	@ (800a930 <USBD_CDC_Init+0x1e8>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	f003 020f 	and.w	r2, r3, #15
 800a860:	6879      	ldr	r1, [r7, #4]
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	440b      	add	r3, r1
 800a86c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a870:	2201      	movs	r2, #1
 800a872:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a874:	4b2f      	ldr	r3, [pc, #188]	@ (800a934 <USBD_CDC_Init+0x1ec>)
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	f003 020f 	and.w	r2, r3, #15
 800a87c:	6879      	ldr	r1, [r7, #4]
 800a87e:	4613      	mov	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	440b      	add	r3, r1
 800a888:	3326      	adds	r3, #38	@ 0x26
 800a88a:	2210      	movs	r2, #16
 800a88c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a88e:	4b29      	ldr	r3, [pc, #164]	@ (800a934 <USBD_CDC_Init+0x1ec>)
 800a890:	7819      	ldrb	r1, [r3, #0]
 800a892:	2308      	movs	r3, #8
 800a894:	2203      	movs	r2, #3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f004 fc51 	bl	800f13e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a89c:	4b25      	ldr	r3, [pc, #148]	@ (800a934 <USBD_CDC_Init+0x1ec>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	f003 020f 	and.w	r2, r3, #15
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	440b      	add	r3, r1
 800a8b0:	3324      	adds	r3, #36	@ 0x24
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	33b0      	adds	r3, #176	@ 0xb0
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e018      	b.n	800a922 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	7c1b      	ldrb	r3, [r3, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a8f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a930 <USBD_CDC_Init+0x1e8>)
 800a8fa:	7819      	ldrb	r1, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a902:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f004 fd08 	bl	800f31c <USBD_LL_PrepareReceive>
 800a90c:	e008      	b.n	800a920 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a90e:	4b08      	ldr	r3, [pc, #32]	@ (800a930 <USBD_CDC_Init+0x1e8>)
 800a910:	7819      	ldrb	r1, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a918:	2340      	movs	r3, #64	@ 0x40
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f004 fcfe 	bl	800f31c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	200000cb 	.word	0x200000cb
 800a930:	200000cc 	.word	0x200000cc
 800a934:	200000cd 	.word	0x200000cd

0800a938 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	460b      	mov	r3, r1
 800a942:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a944:	4b3a      	ldr	r3, [pc, #232]	@ (800aa30 <USBD_CDC_DeInit+0xf8>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f004 fc1d 	bl	800f18a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a950:	4b37      	ldr	r3, [pc, #220]	@ (800aa30 <USBD_CDC_DeInit+0xf8>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	f003 020f 	and.w	r2, r3, #15
 800a958:	6879      	ldr	r1, [r7, #4]
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	440b      	add	r3, r1
 800a964:	3324      	adds	r3, #36	@ 0x24
 800a966:	2200      	movs	r2, #0
 800a968:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a96a:	4b32      	ldr	r3, [pc, #200]	@ (800aa34 <USBD_CDC_DeInit+0xfc>)
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f004 fc0a 	bl	800f18a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a976:	4b2f      	ldr	r3, [pc, #188]	@ (800aa34 <USBD_CDC_DeInit+0xfc>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	f003 020f 	and.w	r2, r3, #15
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	440b      	add	r3, r1
 800a98a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a98e:	2200      	movs	r2, #0
 800a990:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a992:	4b29      	ldr	r3, [pc, #164]	@ (800aa38 <USBD_CDC_DeInit+0x100>)
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f004 fbf6 	bl	800f18a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a99e:	4b26      	ldr	r3, [pc, #152]	@ (800aa38 <USBD_CDC_DeInit+0x100>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	f003 020f 	and.w	r2, r3, #15
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	440b      	add	r3, r1
 800a9b2:	3324      	adds	r3, #36	@ 0x24
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a9b8:	4b1f      	ldr	r3, [pc, #124]	@ (800aa38 <USBD_CDC_DeInit+0x100>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	f003 020f 	and.w	r2, r3, #15
 800a9c0:	6879      	ldr	r1, [r7, #4]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	440b      	add	r3, r1
 800a9cc:	3326      	adds	r3, #38	@ 0x26
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	32b0      	adds	r2, #176	@ 0xb0
 800a9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d01f      	beq.n	800aa24 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	33b0      	adds	r3, #176	@ 0xb0
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	32b0      	adds	r2, #176	@ 0xb0
 800aa02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f004 fcca 	bl	800f3a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	32b0      	adds	r2, #176	@ 0xb0
 800aa16:	2100      	movs	r1, #0
 800aa18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	200000cb 	.word	0x200000cb
 800aa34:	200000cc 	.word	0x200000cc
 800aa38:	200000cd 	.word	0x200000cd

0800aa3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	32b0      	adds	r2, #176	@ 0xb0
 800aa50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa54:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e0bf      	b.n	800abec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d050      	beq.n	800ab1a <USBD_CDC_Setup+0xde>
 800aa78:	2b20      	cmp	r3, #32
 800aa7a:	f040 80af 	bne.w	800abdc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	88db      	ldrh	r3, [r3, #6]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d03a      	beq.n	800aafc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	b25b      	sxtb	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	da1b      	bge.n	800aac8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	33b0      	adds	r3, #176	@ 0xb0
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aaa6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	88d2      	ldrh	r2, [r2, #6]
 800aaac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	88db      	ldrh	r3, [r3, #6]
 800aab2:	2b07      	cmp	r3, #7
 800aab4:	bf28      	it	cs
 800aab6:	2307      	movcs	r3, #7
 800aab8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	89fa      	ldrh	r2, [r7, #14]
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f001 fd93 	bl	800c5ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aac6:	e090      	b.n	800abea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	785a      	ldrb	r2, [r3, #1]
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	88db      	ldrh	r3, [r3, #6]
 800aad6:	2b3f      	cmp	r3, #63	@ 0x3f
 800aad8:	d803      	bhi.n	800aae2 <USBD_CDC_Setup+0xa6>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	88db      	ldrh	r3, [r3, #6]
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	e000      	b.n	800aae4 <USBD_CDC_Setup+0xa8>
 800aae2:	2240      	movs	r2, #64	@ 0x40
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aaea:	6939      	ldr	r1, [r7, #16]
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f001 fda5 	bl	800c644 <USBD_CtlPrepareRx>
      break;
 800aafa:	e076      	b.n	800abea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	33b0      	adds	r3, #176	@ 0xb0
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	7850      	ldrb	r0, [r2, #1]
 800ab12:	2200      	movs	r2, #0
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	4798      	blx	r3
      break;
 800ab18:	e067      	b.n	800abea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	785b      	ldrb	r3, [r3, #1]
 800ab1e:	2b0b      	cmp	r3, #11
 800ab20:	d851      	bhi.n	800abc6 <USBD_CDC_Setup+0x18a>
 800ab22:	a201      	add	r2, pc, #4	@ (adr r2, 800ab28 <USBD_CDC_Setup+0xec>)
 800ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab28:	0800ab59 	.word	0x0800ab59
 800ab2c:	0800abd5 	.word	0x0800abd5
 800ab30:	0800abc7 	.word	0x0800abc7
 800ab34:	0800abc7 	.word	0x0800abc7
 800ab38:	0800abc7 	.word	0x0800abc7
 800ab3c:	0800abc7 	.word	0x0800abc7
 800ab40:	0800abc7 	.word	0x0800abc7
 800ab44:	0800abc7 	.word	0x0800abc7
 800ab48:	0800abc7 	.word	0x0800abc7
 800ab4c:	0800abc7 	.word	0x0800abc7
 800ab50:	0800ab83 	.word	0x0800ab83
 800ab54:	0800abad 	.word	0x0800abad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d107      	bne.n	800ab74 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab64:	f107 030a 	add.w	r3, r7, #10
 800ab68:	2202      	movs	r2, #2
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f001 fd3d 	bl	800c5ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab72:	e032      	b.n	800abda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f001 fcbb 	bl	800c4f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	75fb      	strb	r3, [r7, #23]
          break;
 800ab80:	e02b      	b.n	800abda <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d107      	bne.n	800ab9e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab8e:	f107 030d 	add.w	r3, r7, #13
 800ab92:	2201      	movs	r2, #1
 800ab94:	4619      	mov	r1, r3
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f001 fd28 	bl	800c5ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab9c:	e01d      	b.n	800abda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 fca6 	bl	800c4f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aba6:	2303      	movs	r3, #3
 800aba8:	75fb      	strb	r3, [r7, #23]
          break;
 800abaa:	e016      	b.n	800abda <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d00f      	beq.n	800abd8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f001 fc99 	bl	800c4f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800abc0:	2303      	movs	r3, #3
 800abc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800abc4:	e008      	b.n	800abd8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 fc92 	bl	800c4f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800abce:	2303      	movs	r3, #3
 800abd0:	75fb      	strb	r3, [r7, #23]
          break;
 800abd2:	e002      	b.n	800abda <USBD_CDC_Setup+0x19e>
          break;
 800abd4:	bf00      	nop
 800abd6:	e008      	b.n	800abea <USBD_CDC_Setup+0x1ae>
          break;
 800abd8:	bf00      	nop
      }
      break;
 800abda:	e006      	b.n	800abea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 fc87 	bl	800c4f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800abe4:	2303      	movs	r3, #3
 800abe6:	75fb      	strb	r3, [r7, #23]
      break;
 800abe8:	bf00      	nop
  }

  return (uint8_t)ret;
 800abea:	7dfb      	ldrb	r3, [r7, #23]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3718      	adds	r7, #24
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	32b0      	adds	r2, #176	@ 0xb0
 800ac12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e065      	b.n	800acea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	32b0      	adds	r2, #176	@ 0xb0
 800ac28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	f003 020f 	and.w	r2, r3, #15
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	4613      	mov	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	440b      	add	r3, r1
 800ac40:	3318      	adds	r3, #24
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d02f      	beq.n	800aca8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	f003 020f 	and.w	r2, r3, #15
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	4613      	mov	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	440b      	add	r3, r1
 800ac5a:	3318      	adds	r3, #24
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	f003 010f 	and.w	r1, r3, #15
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	460b      	mov	r3, r1
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	440b      	add	r3, r1
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4403      	add	r3, r0
 800ac70:	331c      	adds	r3, #28
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac78:	fb01 f303 	mul.w	r3, r1, r3
 800ac7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d112      	bne.n	800aca8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	f003 020f 	and.w	r2, r3, #15
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	3318      	adds	r3, #24
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac9a:	78f9      	ldrb	r1, [r7, #3]
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	2200      	movs	r2, #0
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f004 fb1a 	bl	800f2da <USBD_LL_Transmit>
 800aca6:	e01f      	b.n	800ace8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	33b0      	adds	r3, #176	@ 0xb0
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d010      	beq.n	800ace8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	33b0      	adds	r3, #176	@ 0xb0
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ace4:	78fa      	ldrb	r2, [r7, #3]
 800ace6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	32b0      	adds	r2, #176	@ 0xb0
 800ad08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	32b0      	adds	r2, #176	@ 0xb0
 800ad18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e01a      	b.n	800ad5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f004 fb18 	bl	800f35e <USBD_LL_GetRxDataSize>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	33b0      	adds	r3, #176	@ 0xb0
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ad54:	4611      	mov	r1, r2
 800ad56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	32b0      	adds	r2, #176	@ 0xb0
 800ad74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e024      	b.n	800adce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	33b0      	adds	r3, #176	@ 0xb0
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d019      	beq.n	800adcc <USBD_CDC_EP0_RxReady+0x6a>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ad9e:	2bff      	cmp	r3, #255	@ 0xff
 800ada0:	d014      	beq.n	800adcc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	33b0      	adds	r3, #176	@ 0xb0
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800adba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800adc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	22ff      	movs	r2, #255	@ 0xff
 800adc8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ade0:	2182      	movs	r1, #130	@ 0x82
 800ade2:	4818      	ldr	r0, [pc, #96]	@ (800ae44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ade4:	f000 fd4f 	bl	800b886 <USBD_GetEpDesc>
 800ade8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adea:	2101      	movs	r1, #1
 800adec:	4815      	ldr	r0, [pc, #84]	@ (800ae44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800adee:	f000 fd4a 	bl	800b886 <USBD_GetEpDesc>
 800adf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800adf4:	2181      	movs	r1, #129	@ 0x81
 800adf6:	4813      	ldr	r0, [pc, #76]	@ (800ae44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800adf8:	f000 fd45 	bl	800b886 <USBD_GetEpDesc>
 800adfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	2210      	movs	r2, #16
 800ae08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d006      	beq.n	800ae1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae18:	711a      	strb	r2, [r3, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d006      	beq.n	800ae32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae2c:	711a      	strb	r2, [r3, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2243      	movs	r2, #67	@ 0x43
 800ae36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae38:	4b02      	ldr	r3, [pc, #8]	@ (800ae44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20000088 	.word	0x20000088

0800ae48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae50:	2182      	movs	r1, #130	@ 0x82
 800ae52:	4818      	ldr	r0, [pc, #96]	@ (800aeb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae54:	f000 fd17 	bl	800b886 <USBD_GetEpDesc>
 800ae58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	4815      	ldr	r0, [pc, #84]	@ (800aeb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae5e:	f000 fd12 	bl	800b886 <USBD_GetEpDesc>
 800ae62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae64:	2181      	movs	r1, #129	@ 0x81
 800ae66:	4813      	ldr	r0, [pc, #76]	@ (800aeb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae68:	f000 fd0d 	bl	800b886 <USBD_GetEpDesc>
 800ae6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	2210      	movs	r2, #16
 800ae78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d006      	beq.n	800ae8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2200      	movs	r2, #0
 800ae84:	711a      	strb	r2, [r3, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f042 0202 	orr.w	r2, r2, #2
 800ae8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d006      	beq.n	800aea2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	711a      	strb	r2, [r3, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f042 0202 	orr.w	r2, r2, #2
 800aea0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2243      	movs	r2, #67	@ 0x43
 800aea6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aea8:	4b02      	ldr	r3, [pc, #8]	@ (800aeb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20000088 	.word	0x20000088

0800aeb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aec0:	2182      	movs	r1, #130	@ 0x82
 800aec2:	4818      	ldr	r0, [pc, #96]	@ (800af24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aec4:	f000 fcdf 	bl	800b886 <USBD_GetEpDesc>
 800aec8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aeca:	2101      	movs	r1, #1
 800aecc:	4815      	ldr	r0, [pc, #84]	@ (800af24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aece:	f000 fcda 	bl	800b886 <USBD_GetEpDesc>
 800aed2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aed4:	2181      	movs	r1, #129	@ 0x81
 800aed6:	4813      	ldr	r0, [pc, #76]	@ (800af24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aed8:	f000 fcd5 	bl	800b886 <USBD_GetEpDesc>
 800aedc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2210      	movs	r2, #16
 800aee8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d006      	beq.n	800aefe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aef8:	711a      	strb	r2, [r3, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d006      	beq.n	800af12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af0c:	711a      	strb	r2, [r3, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2243      	movs	r2, #67	@ 0x43
 800af16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af18:	4b02      	ldr	r3, [pc, #8]	@ (800af24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20000088 	.word	0x20000088

0800af28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	220a      	movs	r2, #10
 800af34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800af36:	4b03      	ldr	r3, [pc, #12]	@ (800af44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	20000044 	.word	0x20000044

0800af48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800af58:	2303      	movs	r3, #3
 800af5a:	e009      	b.n	800af70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	33b0      	adds	r3, #176	@ 0xb0
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	32b0      	adds	r2, #176	@ 0xb0
 800af92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e008      	b.n	800afb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	371c      	adds	r7, #28
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	32b0      	adds	r2, #176	@ 0xb0
 800afd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e004      	b.n	800afee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
	...

0800affc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	32b0      	adds	r2, #176	@ 0xb0
 800b00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b012:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b014:	2301      	movs	r3, #1
 800b016:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b01e:	2303      	movs	r3, #3
 800b020:	e025      	b.n	800b06e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d11f      	bne.n	800b06c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	2201      	movs	r2, #1
 800b030:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b034:	4b10      	ldr	r3, [pc, #64]	@ (800b078 <USBD_CDC_TransmitPacket+0x7c>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	f003 020f 	and.w	r2, r3, #15
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4403      	add	r3, r0
 800b04e:	3318      	adds	r3, #24
 800b050:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b052:	4b09      	ldr	r3, [pc, #36]	@ (800b078 <USBD_CDC_TransmitPacket+0x7c>)
 800b054:	7819      	ldrb	r1, [r3, #0]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f004 f939 	bl	800f2da <USBD_LL_Transmit>

    ret = USBD_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	200000cb 	.word	0x200000cb

0800b07c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	32b0      	adds	r2, #176	@ 0xb0
 800b08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b092:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	32b0      	adds	r2, #176	@ 0xb0
 800b09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e018      	b.n	800b0dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	7c1b      	ldrb	r3, [r3, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10a      	bne.n	800b0c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e4 <USBD_CDC_ReceivePacket+0x68>)
 800b0b4:	7819      	ldrb	r1, [r3, #0]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f004 f92b 	bl	800f31c <USBD_LL_PrepareReceive>
 800b0c6:	e008      	b.n	800b0da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0c8:	4b06      	ldr	r3, [pc, #24]	@ (800b0e4 <USBD_CDC_ReceivePacket+0x68>)
 800b0ca:	7819      	ldrb	r1, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0d2:	2340      	movs	r3, #64	@ 0x40
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f004 f921 	bl	800f31c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	200000cc 	.word	0x200000cc

0800b0e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e01f      	b.n	800b140 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	79fa      	ldrb	r2, [r7, #7]
 800b132:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f003 ff9b 	bl	800f070 <USBD_LL_Init>
 800b13a:	4603      	mov	r3, r0
 800b13c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b15c:	2303      	movs	r3, #3
 800b15e:	e025      	b.n	800b1ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	32ae      	adds	r2, #174	@ 0xae
 800b172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00f      	beq.n	800b19c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	32ae      	adds	r2, #174	@ 0xae
 800b186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b18c:	f107 020e 	add.w	r2, r7, #14
 800b190:	4610      	mov	r0, r2
 800b192:	4798      	blx	r3
 800b194:	4602      	mov	r2, r0
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f003 ffa3 	bl	800f108 <USBD_LL_Start>
 800b1c2:	4603      	mov	r3, r0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d009      	beq.n	800b210 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	78fa      	ldrb	r2, [r7, #3]
 800b206:	4611      	mov	r1, r2
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	4798      	blx	r3
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b210:	7bfb      	ldrb	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	78fa      	ldrb	r2, [r7, #3]
 800b234:	4611      	mov	r1, r2
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	4798      	blx	r3
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b240:	2303      	movs	r3, #3
 800b242:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b244:	7bfb      	ldrb	r3, [r7, #15]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	4618      	mov	r0, r3
 800b262:	f001 f90c 	bl	800c47e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b274:	461a      	mov	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b282:	f003 031f 	and.w	r3, r3, #31
 800b286:	2b02      	cmp	r3, #2
 800b288:	d01a      	beq.n	800b2c0 <USBD_LL_SetupStage+0x72>
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d822      	bhi.n	800b2d4 <USBD_LL_SetupStage+0x86>
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d002      	beq.n	800b298 <USBD_LL_SetupStage+0x4a>
 800b292:	2b01      	cmp	r3, #1
 800b294:	d00a      	beq.n	800b2ac <USBD_LL_SetupStage+0x5e>
 800b296:	e01d      	b.n	800b2d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fb63 	bl	800b96c <USBD_StdDevReq>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2aa:	e020      	b.n	800b2ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fbcb 	bl	800ba50 <USBD_StdItfReq>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b2be:	e016      	b.n	800b2ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fc2d 	bl	800bb28 <USBD_StdEPReq>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d2:	e00c      	b.n	800b2ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b2da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f003 ff70 	bl	800f1c8 <USBD_LL_StallEP>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ec:	bf00      	nop
  }

  return ret;
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	460b      	mov	r3, r1
 800b302:	607a      	str	r2, [r7, #4]
 800b304:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b30a:	7afb      	ldrb	r3, [r7, #11]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d16e      	bne.n	800b3ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b316:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b31e:	2b03      	cmp	r3, #3
 800b320:	f040 8098 	bne.w	800b454 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	689a      	ldr	r2, [r3, #8]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d913      	bls.n	800b358 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	689a      	ldr	r2, [r3, #8]
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	1ad2      	subs	r2, r2, r3
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	68da      	ldr	r2, [r3, #12]
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	4293      	cmp	r3, r2
 800b348:	bf28      	it	cs
 800b34a:	4613      	movcs	r3, r2
 800b34c:	461a      	mov	r2, r3
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f001 f994 	bl	800c67e <USBD_CtlContinueRx>
 800b356:	e07d      	b.n	800b454 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b35e:	f003 031f 	and.w	r3, r3, #31
 800b362:	2b02      	cmp	r3, #2
 800b364:	d014      	beq.n	800b390 <USBD_LL_DataOutStage+0x98>
 800b366:	2b02      	cmp	r3, #2
 800b368:	d81d      	bhi.n	800b3a6 <USBD_LL_DataOutStage+0xae>
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <USBD_LL_DataOutStage+0x7c>
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d003      	beq.n	800b37a <USBD_LL_DataOutStage+0x82>
 800b372:	e018      	b.n	800b3a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	75bb      	strb	r3, [r7, #22]
            break;
 800b378:	e018      	b.n	800b3ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b380:	b2db      	uxtb	r3, r3
 800b382:	4619      	mov	r1, r3
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 fa64 	bl	800b852 <USBD_CoreFindIF>
 800b38a:	4603      	mov	r3, r0
 800b38c:	75bb      	strb	r3, [r7, #22]
            break;
 800b38e:	e00d      	b.n	800b3ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b396:	b2db      	uxtb	r3, r3
 800b398:	4619      	mov	r1, r3
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 fa66 	bl	800b86c <USBD_CoreFindEP>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	75bb      	strb	r3, [r7, #22]
            break;
 800b3a4:	e002      	b.n	800b3ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	75bb      	strb	r3, [r7, #22]
            break;
 800b3aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b3ac:	7dbb      	ldrb	r3, [r7, #22]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d119      	bne.n	800b3e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d113      	bne.n	800b3e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b3be:	7dba      	ldrb	r2, [r7, #22]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	32ae      	adds	r2, #174	@ 0xae
 800b3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00b      	beq.n	800b3e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b3ce:	7dba      	ldrb	r2, [r7, #22]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b3d6:	7dba      	ldrb	r2, [r7, #22]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	32ae      	adds	r2, #174	@ 0xae
 800b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f001 f95a 	bl	800c6a0 <USBD_CtlSendStatus>
 800b3ec:	e032      	b.n	800b454 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b3ee:	7afb      	ldrb	r3, [r7, #11]
 800b3f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 fa37 	bl	800b86c <USBD_CoreFindEP>
 800b3fe:	4603      	mov	r3, r0
 800b400:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b402:	7dbb      	ldrb	r3, [r7, #22]
 800b404:	2bff      	cmp	r3, #255	@ 0xff
 800b406:	d025      	beq.n	800b454 <USBD_LL_DataOutStage+0x15c>
 800b408:	7dbb      	ldrb	r3, [r7, #22]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d122      	bne.n	800b454 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b03      	cmp	r3, #3
 800b418:	d117      	bne.n	800b44a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b41a:	7dba      	ldrb	r2, [r7, #22]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	32ae      	adds	r2, #174	@ 0xae
 800b420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00f      	beq.n	800b44a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b42a:	7dba      	ldrb	r2, [r7, #22]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b432:	7dba      	ldrb	r2, [r7, #22]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	32ae      	adds	r2, #174	@ 0xae
 800b438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	7afa      	ldrb	r2, [r7, #11]
 800b440:	4611      	mov	r1, r2
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	4798      	blx	r3
 800b446:	4603      	mov	r3, r0
 800b448:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	e000      	b.n	800b456 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b086      	sub	sp, #24
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	460b      	mov	r3, r1
 800b468:	607a      	str	r2, [r7, #4]
 800b46a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d16f      	bne.n	800b552 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3314      	adds	r3, #20
 800b476:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d15a      	bne.n	800b538 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	689a      	ldr	r2, [r3, #8]
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d914      	bls.n	800b4b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	689a      	ldr	r2, [r3, #8]
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f001 f8bc 	bl	800c622 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f003 ff33 	bl	800f31c <USBD_LL_PrepareReceive>
 800b4b6:	e03f      	b.n	800b538 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	68da      	ldr	r2, [r3, #12]
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d11c      	bne.n	800b4fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d316      	bcc.n	800b4fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	685a      	ldr	r2, [r3, #4]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d20f      	bcs.n	800b4fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f001 f89d 	bl	800c622 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f003 ff10 	bl	800f31c <USBD_LL_PrepareReceive>
 800b4fc:	e01c      	b.n	800b538 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d10f      	bne.n	800b52a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d009      	beq.n	800b52a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b52a:	2180      	movs	r1, #128	@ 0x80
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f003 fe4b 	bl	800f1c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f001 f8c7 	bl	800c6c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d03a      	beq.n	800b5b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7ff fe42 	bl	800b1cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b550:	e032      	b.n	800b5b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b552:	7afb      	ldrb	r3, [r7, #11]
 800b554:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	4619      	mov	r1, r3
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f000 f985 	bl	800b86c <USBD_CoreFindEP>
 800b562:	4603      	mov	r3, r0
 800b564:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	2bff      	cmp	r3, #255	@ 0xff
 800b56a:	d025      	beq.n	800b5b8 <USBD_LL_DataInStage+0x15a>
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d122      	bne.n	800b5b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b03      	cmp	r3, #3
 800b57c:	d11c      	bne.n	800b5b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b57e:	7dfa      	ldrb	r2, [r7, #23]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	32ae      	adds	r2, #174	@ 0xae
 800b584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d014      	beq.n	800b5b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b58e:	7dfa      	ldrb	r2, [r7, #23]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b596:	7dfa      	ldrb	r2, [r7, #23]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	32ae      	adds	r2, #174	@ 0xae
 800b59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	7afa      	ldrb	r2, [r7, #11]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	4798      	blx	r3
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b5ae:	7dbb      	ldrb	r3, [r7, #22]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b5b4:	7dbb      	ldrb	r3, [r7, #22]
 800b5b6:	e000      	b.n	800b5ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3718      	adds	r7, #24
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d014      	beq.n	800b628 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00e      	beq.n	800b628 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	6852      	ldr	r2, [r2, #4]
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	4611      	mov	r1, r2
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	4798      	blx	r3
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b624:	2303      	movs	r3, #3
 800b626:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b628:	2340      	movs	r3, #64	@ 0x40
 800b62a:	2200      	movs	r2, #0
 800b62c:	2100      	movs	r1, #0
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f003 fd85 	bl	800f13e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2240      	movs	r2, #64	@ 0x40
 800b640:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b644:	2340      	movs	r3, #64	@ 0x40
 800b646:	2200      	movs	r2, #0
 800b648:	2180      	movs	r1, #128	@ 0x80
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f003 fd77 	bl	800f13e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2240      	movs	r2, #64	@ 0x40
 800b65a:	621a      	str	r2, [r3, #32]

  return ret;
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b04      	cmp	r3, #4
 800b698:	d006      	beq.n	800b6a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2204      	movs	r2, #4
 800b6ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d106      	bne.n	800b6e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	2b03      	cmp	r3, #3
 800b700:	d110      	bne.n	800b724 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00b      	beq.n	800b724 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b712:	69db      	ldr	r3, [r3, #28]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	460b      	mov	r3, r1
 800b738:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	32ae      	adds	r2, #174	@ 0xae
 800b744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e01c      	b.n	800b78a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b03      	cmp	r3, #3
 800b75a:	d115      	bne.n	800b788 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	32ae      	adds	r2, #174	@ 0xae
 800b766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	32ae      	adds	r2, #174	@ 0xae
 800b77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77e:	6a1b      	ldr	r3, [r3, #32]
 800b780:	78fa      	ldrb	r2, [r7, #3]
 800b782:	4611      	mov	r1, r2
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b082      	sub	sp, #8
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	32ae      	adds	r2, #174	@ 0xae
 800b7a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e01c      	b.n	800b7ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d115      	bne.n	800b7ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	32ae      	adds	r2, #174	@ 0xae
 800b7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00b      	beq.n	800b7ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	32ae      	adds	r2, #174	@ 0xae
 800b7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e4:	78fa      	ldrb	r2, [r7, #3]
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00e      	beq.n	800b848 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	6852      	ldr	r2, [r2, #4]
 800b836:	b2d2      	uxtb	r2, r2
 800b838:	4611      	mov	r1, r2
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d001      	beq.n	800b848 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b844:	2303      	movs	r3, #3
 800b846:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b852:	b480      	push	{r7}
 800b854:	b083      	sub	sp, #12
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	460b      	mov	r3, r1
 800b85c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b85e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b878:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b086      	sub	sp, #24
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	460b      	mov	r3, r1
 800b890:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b89a:	2300      	movs	r3, #0
 800b89c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	885b      	ldrh	r3, [r3, #2]
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	7812      	ldrb	r2, [r2, #0]
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d91f      	bls.n	800b8ec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b8b2:	e013      	b.n	800b8dc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b8b4:	f107 030a 	add.w	r3, r7, #10
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6978      	ldr	r0, [r7, #20]
 800b8bc:	f000 f81b 	bl	800b8f6 <USBD_GetNextDesc>
 800b8c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	785b      	ldrb	r3, [r3, #1]
 800b8c6:	2b05      	cmp	r3, #5
 800b8c8:	d108      	bne.n	800b8dc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	789b      	ldrb	r3, [r3, #2]
 800b8d2:	78fa      	ldrb	r2, [r7, #3]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d008      	beq.n	800b8ea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	885b      	ldrh	r3, [r3, #2]
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	897b      	ldrh	r3, [r7, #10]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d8e5      	bhi.n	800b8b4 <USBD_GetEpDesc+0x2e>
 800b8e8:	e000      	b.n	800b8ec <USBD_GetEpDesc+0x66>
          break;
 800b8ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b8ec:	693b      	ldr	r3, [r7, #16]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b085      	sub	sp, #20
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	7812      	ldrb	r2, [r2, #0]
 800b90c:	4413      	add	r3, r2
 800b90e:	b29a      	uxth	r2, r3
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	461a      	mov	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4413      	add	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b920:	68fb      	ldr	r3, [r7, #12]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b92e:	b480      	push	{r7}
 800b930:	b087      	sub	sp, #28
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	3301      	adds	r3, #1
 800b944:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b94c:	8a3b      	ldrh	r3, [r7, #16]
 800b94e:	021b      	lsls	r3, r3, #8
 800b950:	b21a      	sxth	r2, r3
 800b952:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b956:	4313      	orrs	r3, r2
 800b958:	b21b      	sxth	r3, r3
 800b95a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b95c:	89fb      	ldrh	r3, [r7, #14]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	371c      	adds	r7, #28
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
	...

0800b96c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b982:	2b40      	cmp	r3, #64	@ 0x40
 800b984:	d005      	beq.n	800b992 <USBD_StdDevReq+0x26>
 800b986:	2b40      	cmp	r3, #64	@ 0x40
 800b988:	d857      	bhi.n	800ba3a <USBD_StdDevReq+0xce>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00f      	beq.n	800b9ae <USBD_StdDevReq+0x42>
 800b98e:	2b20      	cmp	r3, #32
 800b990:	d153      	bne.n	800ba3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	32ae      	adds	r2, #174	@ 0xae
 800b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	4798      	blx	r3
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ac:	e04a      	b.n	800ba44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	785b      	ldrb	r3, [r3, #1]
 800b9b2:	2b09      	cmp	r3, #9
 800b9b4:	d83b      	bhi.n	800ba2e <USBD_StdDevReq+0xc2>
 800b9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9bc <USBD_StdDevReq+0x50>)
 800b9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9bc:	0800ba11 	.word	0x0800ba11
 800b9c0:	0800ba25 	.word	0x0800ba25
 800b9c4:	0800ba2f 	.word	0x0800ba2f
 800b9c8:	0800ba1b 	.word	0x0800ba1b
 800b9cc:	0800ba2f 	.word	0x0800ba2f
 800b9d0:	0800b9ef 	.word	0x0800b9ef
 800b9d4:	0800b9e5 	.word	0x0800b9e5
 800b9d8:	0800ba2f 	.word	0x0800ba2f
 800b9dc:	0800ba07 	.word	0x0800ba07
 800b9e0:	0800b9f9 	.word	0x0800b9f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fa3c 	bl	800be64 <USBD_GetDescriptor>
          break;
 800b9ec:	e024      	b.n	800ba38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fba1 	bl	800c138 <USBD_SetAddress>
          break;
 800b9f6:	e01f      	b.n	800ba38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fbe0 	bl	800c1c0 <USBD_SetConfig>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73fb      	strb	r3, [r7, #15]
          break;
 800ba04:	e018      	b.n	800ba38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fc83 	bl	800c314 <USBD_GetConfig>
          break;
 800ba0e:	e013      	b.n	800ba38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fcb4 	bl	800c380 <USBD_GetStatus>
          break;
 800ba18:	e00e      	b.n	800ba38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fce3 	bl	800c3e8 <USBD_SetFeature>
          break;
 800ba22:	e009      	b.n	800ba38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba24:	6839      	ldr	r1, [r7, #0]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fd07 	bl	800c43a <USBD_ClrFeature>
          break;
 800ba2c:	e004      	b.n	800ba38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fd5e 	bl	800c4f2 <USBD_CtlError>
          break;
 800ba36:	bf00      	nop
      }
      break;
 800ba38:	e004      	b.n	800ba44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 fd58 	bl	800c4f2 <USBD_CtlError>
      break;
 800ba42:	bf00      	nop
  }

  return ret;
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop

0800ba50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba66:	2b40      	cmp	r3, #64	@ 0x40
 800ba68:	d005      	beq.n	800ba76 <USBD_StdItfReq+0x26>
 800ba6a:	2b40      	cmp	r3, #64	@ 0x40
 800ba6c:	d852      	bhi.n	800bb14 <USBD_StdItfReq+0xc4>
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <USBD_StdItfReq+0x26>
 800ba72:	2b20      	cmp	r3, #32
 800ba74:	d14e      	bne.n	800bb14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d840      	bhi.n	800bb06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	889b      	ldrh	r3, [r3, #4]
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d836      	bhi.n	800bafc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	889b      	ldrh	r3, [r3, #4]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff fedb 	bl	800b852 <USBD_CoreFindIF>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	2bff      	cmp	r3, #255	@ 0xff
 800baa4:	d01d      	beq.n	800bae2 <USBD_StdItfReq+0x92>
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d11a      	bne.n	800bae2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800baac:	7bba      	ldrb	r2, [r7, #14]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	32ae      	adds	r2, #174	@ 0xae
 800bab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00f      	beq.n	800badc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800babc:	7bba      	ldrb	r2, [r7, #14]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bac4:	7bba      	ldrb	r2, [r7, #14]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	32ae      	adds	r2, #174	@ 0xae
 800baca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	4798      	blx	r3
 800bad6:	4603      	mov	r3, r0
 800bad8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bada:	e004      	b.n	800bae6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800badc:	2303      	movs	r3, #3
 800bade:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bae0:	e001      	b.n	800bae6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bae2:	2303      	movs	r3, #3
 800bae4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	88db      	ldrh	r3, [r3, #6]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d110      	bne.n	800bb10 <USBD_StdItfReq+0xc0>
 800baee:	7bfb      	ldrb	r3, [r7, #15]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10d      	bne.n	800bb10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fdd3 	bl	800c6a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bafa:	e009      	b.n	800bb10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fcf7 	bl	800c4f2 <USBD_CtlError>
          break;
 800bb04:	e004      	b.n	800bb10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fcf2 	bl	800c4f2 <USBD_CtlError>
          break;
 800bb0e:	e000      	b.n	800bb12 <USBD_StdItfReq+0xc2>
          break;
 800bb10:	bf00      	nop
      }
      break;
 800bb12:	e004      	b.n	800bb1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fceb 	bl	800c4f2 <USBD_CtlError>
      break;
 800bb1c:	bf00      	nop
  }

  return ret;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb32:	2300      	movs	r3, #0
 800bb34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	889b      	ldrh	r3, [r3, #4]
 800bb3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb44:	2b40      	cmp	r3, #64	@ 0x40
 800bb46:	d007      	beq.n	800bb58 <USBD_StdEPReq+0x30>
 800bb48:	2b40      	cmp	r3, #64	@ 0x40
 800bb4a:	f200 817f 	bhi.w	800be4c <USBD_StdEPReq+0x324>
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d02a      	beq.n	800bba8 <USBD_StdEPReq+0x80>
 800bb52:	2b20      	cmp	r3, #32
 800bb54:	f040 817a 	bne.w	800be4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fe85 	bl	800b86c <USBD_CoreFindEP>
 800bb62:	4603      	mov	r3, r0
 800bb64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb66:	7b7b      	ldrb	r3, [r7, #13]
 800bb68:	2bff      	cmp	r3, #255	@ 0xff
 800bb6a:	f000 8174 	beq.w	800be56 <USBD_StdEPReq+0x32e>
 800bb6e:	7b7b      	ldrb	r3, [r7, #13]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f040 8170 	bne.w	800be56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bb76:	7b7a      	ldrb	r2, [r7, #13]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bb7e:	7b7a      	ldrb	r2, [r7, #13]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	32ae      	adds	r2, #174	@ 0xae
 800bb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 8163 	beq.w	800be56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bb90:	7b7a      	ldrb	r2, [r7, #13]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	32ae      	adds	r2, #174	@ 0xae
 800bb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	4798      	blx	r3
 800bba2:	4603      	mov	r3, r0
 800bba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bba6:	e156      	b.n	800be56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	785b      	ldrb	r3, [r3, #1]
 800bbac:	2b03      	cmp	r3, #3
 800bbae:	d008      	beq.n	800bbc2 <USBD_StdEPReq+0x9a>
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	f300 8145 	bgt.w	800be40 <USBD_StdEPReq+0x318>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 809b 	beq.w	800bcf2 <USBD_StdEPReq+0x1ca>
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d03c      	beq.n	800bc3a <USBD_StdEPReq+0x112>
 800bbc0:	e13e      	b.n	800be40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d002      	beq.n	800bbd4 <USBD_StdEPReq+0xac>
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d016      	beq.n	800bc00 <USBD_StdEPReq+0xd8>
 800bbd2:	e02c      	b.n	800bc2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00d      	beq.n	800bbf6 <USBD_StdEPReq+0xce>
 800bbda:	7bbb      	ldrb	r3, [r7, #14]
 800bbdc:	2b80      	cmp	r3, #128	@ 0x80
 800bbde:	d00a      	beq.n	800bbf6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f003 faef 	bl	800f1c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbea:	2180      	movs	r1, #128	@ 0x80
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f003 faeb 	bl	800f1c8 <USBD_LL_StallEP>
 800bbf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbf4:	e020      	b.n	800bc38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fc7a 	bl	800c4f2 <USBD_CtlError>
              break;
 800bbfe:	e01b      	b.n	800bc38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	885b      	ldrh	r3, [r3, #2]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10e      	bne.n	800bc26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00b      	beq.n	800bc26 <USBD_StdEPReq+0xfe>
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b80      	cmp	r3, #128	@ 0x80
 800bc12:	d008      	beq.n	800bc26 <USBD_StdEPReq+0xfe>
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	88db      	ldrh	r3, [r3, #6]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d104      	bne.n	800bc26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f003 fad1 	bl	800f1c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fd3a 	bl	800c6a0 <USBD_CtlSendStatus>

              break;
 800bc2c:	e004      	b.n	800bc38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fc5e 	bl	800c4f2 <USBD_CtlError>
              break;
 800bc36:	bf00      	nop
          }
          break;
 800bc38:	e107      	b.n	800be4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d002      	beq.n	800bc4c <USBD_StdEPReq+0x124>
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d016      	beq.n	800bc78 <USBD_StdEPReq+0x150>
 800bc4a:	e04b      	b.n	800bce4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00d      	beq.n	800bc6e <USBD_StdEPReq+0x146>
 800bc52:	7bbb      	ldrb	r3, [r7, #14]
 800bc54:	2b80      	cmp	r3, #128	@ 0x80
 800bc56:	d00a      	beq.n	800bc6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f003 fab3 	bl	800f1c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc62:	2180      	movs	r1, #128	@ 0x80
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f003 faaf 	bl	800f1c8 <USBD_LL_StallEP>
 800bc6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc6c:	e040      	b.n	800bcf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fc3e 	bl	800c4f2 <USBD_CtlError>
              break;
 800bc76:	e03b      	b.n	800bcf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	885b      	ldrh	r3, [r3, #2]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d136      	bne.n	800bcee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d004      	beq.n	800bc94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f003 fab9 	bl	800f206 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fd03 	bl	800c6a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc9a:	7bbb      	ldrb	r3, [r7, #14]
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7ff fde4 	bl	800b86c <USBD_CoreFindEP>
 800bca4:	4603      	mov	r3, r0
 800bca6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bca8:	7b7b      	ldrb	r3, [r7, #13]
 800bcaa:	2bff      	cmp	r3, #255	@ 0xff
 800bcac:	d01f      	beq.n	800bcee <USBD_StdEPReq+0x1c6>
 800bcae:	7b7b      	ldrb	r3, [r7, #13]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d11c      	bne.n	800bcee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bcb4:	7b7a      	ldrb	r2, [r7, #13]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bcbc:	7b7a      	ldrb	r2, [r7, #13]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	32ae      	adds	r2, #174	@ 0xae
 800bcc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d010      	beq.n	800bcee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bccc:	7b7a      	ldrb	r2, [r7, #13]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	32ae      	adds	r2, #174	@ 0xae
 800bcd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	4798      	blx	r3
 800bcde:	4603      	mov	r3, r0
 800bce0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bce2:	e004      	b.n	800bcee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fc03 	bl	800c4f2 <USBD_CtlError>
              break;
 800bcec:	e000      	b.n	800bcf0 <USBD_StdEPReq+0x1c8>
              break;
 800bcee:	bf00      	nop
          }
          break;
 800bcf0:	e0ab      	b.n	800be4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d002      	beq.n	800bd04 <USBD_StdEPReq+0x1dc>
 800bcfe:	2b03      	cmp	r3, #3
 800bd00:	d032      	beq.n	800bd68 <USBD_StdEPReq+0x240>
 800bd02:	e097      	b.n	800be34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d007      	beq.n	800bd1a <USBD_StdEPReq+0x1f2>
 800bd0a:	7bbb      	ldrb	r3, [r7, #14]
 800bd0c:	2b80      	cmp	r3, #128	@ 0x80
 800bd0e:	d004      	beq.n	800bd1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fbed 	bl	800c4f2 <USBD_CtlError>
                break;
 800bd18:	e091      	b.n	800be3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	da0b      	bge.n	800bd3a <USBD_StdEPReq+0x212>
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd28:	4613      	mov	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	3310      	adds	r3, #16
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	4413      	add	r3, r2
 800bd36:	3304      	adds	r3, #4
 800bd38:	e00b      	b.n	800bd52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd3a:	7bbb      	ldrb	r3, [r7, #14]
 800bd3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd40:	4613      	mov	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	4413      	add	r3, r2
 800bd50:	3304      	adds	r3, #4
 800bd52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	4619      	mov	r1, r3
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fc43 	bl	800c5ec <USBD_CtlSendData>
              break;
 800bd66:	e06a      	b.n	800be3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	da11      	bge.n	800bd94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	f003 020f 	and.w	r2, r3, #15
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	440b      	add	r3, r1
 800bd82:	3324      	adds	r3, #36	@ 0x24
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d117      	bne.n	800bdba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fbb0 	bl	800c4f2 <USBD_CtlError>
                  break;
 800bd92:	e054      	b.n	800be3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
 800bd96:	f003 020f 	and.w	r2, r3, #15
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	440b      	add	r3, r1
 800bda6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bdaa:	881b      	ldrh	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d104      	bne.n	800bdba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fb9d 	bl	800c4f2 <USBD_CtlError>
                  break;
 800bdb8:	e041      	b.n	800be3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	da0b      	bge.n	800bdda <USBD_StdEPReq+0x2b2>
 800bdc2:	7bbb      	ldrb	r3, [r7, #14]
 800bdc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdc8:	4613      	mov	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	4413      	add	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	3310      	adds	r3, #16
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	e00b      	b.n	800bdf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdda:	7bbb      	ldrb	r3, [r7, #14]
 800bddc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	4413      	add	r3, r2
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdf4:	7bbb      	ldrb	r3, [r7, #14]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d002      	beq.n	800be00 <USBD_StdEPReq+0x2d8>
 800bdfa:	7bbb      	ldrb	r3, [r7, #14]
 800bdfc:	2b80      	cmp	r3, #128	@ 0x80
 800bdfe:	d103      	bne.n	800be08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2200      	movs	r2, #0
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	e00e      	b.n	800be26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be08:	7bbb      	ldrb	r3, [r7, #14]
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f003 fa19 	bl	800f244 <USBD_LL_IsStallEP>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d003      	beq.n	800be20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2201      	movs	r2, #1
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	e002      	b.n	800be26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2200      	movs	r2, #0
 800be24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2202      	movs	r2, #2
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fbdd 	bl	800c5ec <USBD_CtlSendData>
              break;
 800be32:	e004      	b.n	800be3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fb5b 	bl	800c4f2 <USBD_CtlError>
              break;
 800be3c:	bf00      	nop
          }
          break;
 800be3e:	e004      	b.n	800be4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fb55 	bl	800c4f2 <USBD_CtlError>
          break;
 800be48:	bf00      	nop
      }
      break;
 800be4a:	e005      	b.n	800be58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fb4f 	bl	800c4f2 <USBD_CtlError>
      break;
 800be54:	e000      	b.n	800be58 <USBD_StdEPReq+0x330>
      break;
 800be56:	bf00      	nop
  }

  return ret;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be6e:	2300      	movs	r3, #0
 800be70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be72:	2300      	movs	r3, #0
 800be74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be76:	2300      	movs	r3, #0
 800be78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	885b      	ldrh	r3, [r3, #2]
 800be7e:	0a1b      	lsrs	r3, r3, #8
 800be80:	b29b      	uxth	r3, r3
 800be82:	3b01      	subs	r3, #1
 800be84:	2b06      	cmp	r3, #6
 800be86:	f200 8128 	bhi.w	800c0da <USBD_GetDescriptor+0x276>
 800be8a:	a201      	add	r2, pc, #4	@ (adr r2, 800be90 <USBD_GetDescriptor+0x2c>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bead 	.word	0x0800bead
 800be94:	0800bec5 	.word	0x0800bec5
 800be98:	0800bf05 	.word	0x0800bf05
 800be9c:	0800c0db 	.word	0x0800c0db
 800bea0:	0800c0db 	.word	0x0800c0db
 800bea4:	0800c07b 	.word	0x0800c07b
 800bea8:	0800c0a7 	.word	0x0800c0a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	7c12      	ldrb	r2, [r2, #16]
 800beb8:	f107 0108 	add.w	r1, r7, #8
 800bebc:	4610      	mov	r0, r2
 800bebe:	4798      	blx	r3
 800bec0:	60f8      	str	r0, [r7, #12]
      break;
 800bec2:	e112      	b.n	800c0ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	7c1b      	ldrb	r3, [r3, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10d      	bne.n	800bee8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed4:	f107 0208 	add.w	r2, r7, #8
 800bed8:	4610      	mov	r0, r2
 800beda:	4798      	blx	r3
 800bedc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	2202      	movs	r2, #2
 800bee4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bee6:	e100      	b.n	800c0ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef0:	f107 0208 	add.w	r2, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	3301      	adds	r3, #1
 800befe:	2202      	movs	r2, #2
 800bf00:	701a      	strb	r2, [r3, #0]
      break;
 800bf02:	e0f2      	b.n	800c0ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	885b      	ldrh	r3, [r3, #2]
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b05      	cmp	r3, #5
 800bf0c:	f200 80ac 	bhi.w	800c068 <USBD_GetDescriptor+0x204>
 800bf10:	a201      	add	r2, pc, #4	@ (adr r2, 800bf18 <USBD_GetDescriptor+0xb4>)
 800bf12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf16:	bf00      	nop
 800bf18:	0800bf31 	.word	0x0800bf31
 800bf1c:	0800bf65 	.word	0x0800bf65
 800bf20:	0800bf99 	.word	0x0800bf99
 800bf24:	0800bfcd 	.word	0x0800bfcd
 800bf28:	0800c001 	.word	0x0800c001
 800bf2c:	0800c035 	.word	0x0800c035
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00b      	beq.n	800bf54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	7c12      	ldrb	r2, [r2, #16]
 800bf48:	f107 0108 	add.w	r1, r7, #8
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	4798      	blx	r3
 800bf50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf52:	e091      	b.n	800c078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 facb 	bl	800c4f2 <USBD_CtlError>
            err++;
 800bf5c:	7afb      	ldrb	r3, [r7, #11]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	72fb      	strb	r3, [r7, #11]
          break;
 800bf62:	e089      	b.n	800c078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00b      	beq.n	800bf88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	7c12      	ldrb	r2, [r2, #16]
 800bf7c:	f107 0108 	add.w	r1, r7, #8
 800bf80:	4610      	mov	r0, r2
 800bf82:	4798      	blx	r3
 800bf84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf86:	e077      	b.n	800c078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fab1 	bl	800c4f2 <USBD_CtlError>
            err++;
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	3301      	adds	r3, #1
 800bf94:	72fb      	strb	r3, [r7, #11]
          break;
 800bf96:	e06f      	b.n	800c078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00b      	beq.n	800bfbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	7c12      	ldrb	r2, [r2, #16]
 800bfb0:	f107 0108 	add.w	r1, r7, #8
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	4798      	blx	r3
 800bfb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfba:	e05d      	b.n	800c078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fa97 	bl	800c4f2 <USBD_CtlError>
            err++;
 800bfc4:	7afb      	ldrb	r3, [r7, #11]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfca:	e055      	b.n	800c078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00b      	beq.n	800bff0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	7c12      	ldrb	r2, [r2, #16]
 800bfe4:	f107 0108 	add.w	r1, r7, #8
 800bfe8:	4610      	mov	r0, r2
 800bfea:	4798      	blx	r3
 800bfec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfee:	e043      	b.n	800c078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fa7d 	bl	800c4f2 <USBD_CtlError>
            err++;
 800bff8:	7afb      	ldrb	r3, [r7, #11]
 800bffa:	3301      	adds	r3, #1
 800bffc:	72fb      	strb	r3, [r7, #11]
          break;
 800bffe:	e03b      	b.n	800c078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	7c12      	ldrb	r2, [r2, #16]
 800c018:	f107 0108 	add.w	r1, r7, #8
 800c01c:	4610      	mov	r0, r2
 800c01e:	4798      	blx	r3
 800c020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c022:	e029      	b.n	800c078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fa63 	bl	800c4f2 <USBD_CtlError>
            err++;
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	3301      	adds	r3, #1
 800c030:	72fb      	strb	r3, [r7, #11]
          break;
 800c032:	e021      	b.n	800c078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00b      	beq.n	800c058 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	7c12      	ldrb	r2, [r2, #16]
 800c04c:	f107 0108 	add.w	r1, r7, #8
 800c050:	4610      	mov	r0, r2
 800c052:	4798      	blx	r3
 800c054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c056:	e00f      	b.n	800c078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fa49 	bl	800c4f2 <USBD_CtlError>
            err++;
 800c060:	7afb      	ldrb	r3, [r7, #11]
 800c062:	3301      	adds	r3, #1
 800c064:	72fb      	strb	r3, [r7, #11]
          break;
 800c066:	e007      	b.n	800c078 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fa41 	bl	800c4f2 <USBD_CtlError>
          err++;
 800c070:	7afb      	ldrb	r3, [r7, #11]
 800c072:	3301      	adds	r3, #1
 800c074:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c076:	bf00      	nop
      }
      break;
 800c078:	e037      	b.n	800c0ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	7c1b      	ldrb	r3, [r3, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d109      	bne.n	800c096 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c08a:	f107 0208 	add.w	r2, r7, #8
 800c08e:	4610      	mov	r0, r2
 800c090:	4798      	blx	r3
 800c092:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c094:	e029      	b.n	800c0ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fa2a 	bl	800c4f2 <USBD_CtlError>
        err++;
 800c09e:	7afb      	ldrb	r3, [r7, #11]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0a4:	e021      	b.n	800c0ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	7c1b      	ldrb	r3, [r3, #16]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10d      	bne.n	800c0ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0b6:	f107 0208 	add.w	r2, r7, #8
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	4798      	blx	r3
 800c0be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	2207      	movs	r2, #7
 800c0c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0c8:	e00f      	b.n	800c0ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 fa10 	bl	800c4f2 <USBD_CtlError>
        err++;
 800c0d2:	7afb      	ldrb	r3, [r7, #11]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c0d8:	e007      	b.n	800c0ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fa08 	bl	800c4f2 <USBD_CtlError>
      err++;
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c0e8:	bf00      	nop
  }

  if (err != 0U)
 800c0ea:	7afb      	ldrb	r3, [r7, #11]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d11e      	bne.n	800c12e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	88db      	ldrh	r3, [r3, #6]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d016      	beq.n	800c126 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c0f8:	893b      	ldrh	r3, [r7, #8]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	88da      	ldrh	r2, [r3, #6]
 800c102:	893b      	ldrh	r3, [r7, #8]
 800c104:	4293      	cmp	r3, r2
 800c106:	bf28      	it	cs
 800c108:	4613      	movcs	r3, r2
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c10e:	893b      	ldrh	r3, [r7, #8]
 800c110:	461a      	mov	r2, r3
 800c112:	68f9      	ldr	r1, [r7, #12]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fa69 	bl	800c5ec <USBD_CtlSendData>
 800c11a:	e009      	b.n	800c130 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f9e7 	bl	800c4f2 <USBD_CtlError>
 800c124:	e004      	b.n	800c130 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 faba 	bl	800c6a0 <USBD_CtlSendStatus>
 800c12c:	e000      	b.n	800c130 <USBD_GetDescriptor+0x2cc>
    return;
 800c12e:	bf00      	nop
  }
}
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop

0800c138 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	889b      	ldrh	r3, [r3, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d131      	bne.n	800c1ae <USBD_SetAddress+0x76>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88db      	ldrh	r3, [r3, #6]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d12d      	bne.n	800c1ae <USBD_SetAddress+0x76>
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	2b7f      	cmp	r3, #127	@ 0x7f
 800c158:	d829      	bhi.n	800c1ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	885b      	ldrh	r3, [r3, #2]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c164:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b03      	cmp	r3, #3
 800c170:	d104      	bne.n	800c17c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f9bc 	bl	800c4f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c17a:	e01d      	b.n	800c1b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7bfa      	ldrb	r2, [r7, #15]
 800c180:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f003 f887 	bl	800f29c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fa86 	bl	800c6a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2202      	movs	r2, #2
 800c19e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1a2:	e009      	b.n	800c1b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ac:	e004      	b.n	800c1b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f99e 	bl	800c4f2 <USBD_CtlError>
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	bf00      	nop
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	885b      	ldrh	r3, [r3, #2]
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	4b4e      	ldr	r3, [pc, #312]	@ (800c310 <USBD_SetConfig+0x150>)
 800c1d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c1d8:	4b4d      	ldr	r3, [pc, #308]	@ (800c310 <USBD_SetConfig+0x150>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d905      	bls.n	800c1ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f985 	bl	800c4f2 <USBD_CtlError>
    return USBD_FAIL;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e08c      	b.n	800c306 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d002      	beq.n	800c1fe <USBD_SetConfig+0x3e>
 800c1f8:	2b03      	cmp	r3, #3
 800c1fa:	d029      	beq.n	800c250 <USBD_SetConfig+0x90>
 800c1fc:	e075      	b.n	800c2ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c1fe:	4b44      	ldr	r3, [pc, #272]	@ (800c310 <USBD_SetConfig+0x150>)
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d020      	beq.n	800c248 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c206:	4b42      	ldr	r3, [pc, #264]	@ (800c310 <USBD_SetConfig+0x150>)
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	461a      	mov	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c210:	4b3f      	ldr	r3, [pc, #252]	@ (800c310 <USBD_SetConfig+0x150>)
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7fe ffe3 	bl	800b1e2 <USBD_SetClassConfig>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c220:	7bfb      	ldrb	r3, [r7, #15]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d008      	beq.n	800c238 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f962 	bl	800c4f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2202      	movs	r2, #2
 800c232:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c236:	e065      	b.n	800c304 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fa31 	bl	800c6a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2203      	movs	r2, #3
 800c242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c246:	e05d      	b.n	800c304 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fa29 	bl	800c6a0 <USBD_CtlSendStatus>
      break;
 800c24e:	e059      	b.n	800c304 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c250:	4b2f      	ldr	r3, [pc, #188]	@ (800c310 <USBD_SetConfig+0x150>)
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d112      	bne.n	800c27e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c260:	4b2b      	ldr	r3, [pc, #172]	@ (800c310 <USBD_SetConfig+0x150>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	461a      	mov	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c26a:	4b29      	ldr	r3, [pc, #164]	@ (800c310 <USBD_SetConfig+0x150>)
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7fe ffd2 	bl	800b21a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fa12 	bl	800c6a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c27c:	e042      	b.n	800c304 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c27e:	4b24      	ldr	r3, [pc, #144]	@ (800c310 <USBD_SetConfig+0x150>)
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d02a      	beq.n	800c2e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	b2db      	uxtb	r3, r3
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7fe ffc0 	bl	800b21a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c29a:	4b1d      	ldr	r3, [pc, #116]	@ (800c310 <USBD_SetConfig+0x150>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c310 <USBD_SetConfig+0x150>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7fe ff99 	bl	800b1e2 <USBD_SetClassConfig>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00f      	beq.n	800c2da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f918 	bl	800c4f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7fe ffa5 	bl	800b21a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c2d8:	e014      	b.n	800c304 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f9e0 	bl	800c6a0 <USBD_CtlSendStatus>
      break;
 800c2e0:	e010      	b.n	800c304 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f9dc 	bl	800c6a0 <USBD_CtlSendStatus>
      break;
 800c2e8:	e00c      	b.n	800c304 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f900 	bl	800c4f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2f2:	4b07      	ldr	r3, [pc, #28]	@ (800c310 <USBD_SetConfig+0x150>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7fe ff8e 	bl	800b21a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c2fe:	2303      	movs	r3, #3
 800c300:	73fb      	strb	r3, [r7, #15]
      break;
 800c302:	bf00      	nop
  }

  return ret;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	2000040c 	.word	0x2000040c

0800c314 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	88db      	ldrh	r3, [r3, #6]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d004      	beq.n	800c330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f8e2 	bl	800c4f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c32e:	e023      	b.n	800c378 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b02      	cmp	r3, #2
 800c33a:	dc02      	bgt.n	800c342 <USBD_GetConfig+0x2e>
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	dc03      	bgt.n	800c348 <USBD_GetConfig+0x34>
 800c340:	e015      	b.n	800c36e <USBD_GetConfig+0x5a>
 800c342:	2b03      	cmp	r3, #3
 800c344:	d00b      	beq.n	800c35e <USBD_GetConfig+0x4a>
 800c346:	e012      	b.n	800c36e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	3308      	adds	r3, #8
 800c352:	2201      	movs	r2, #1
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f948 	bl	800c5ec <USBD_CtlSendData>
        break;
 800c35c:	e00c      	b.n	800c378 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	3304      	adds	r3, #4
 800c362:	2201      	movs	r2, #1
 800c364:	4619      	mov	r1, r3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f940 	bl	800c5ec <USBD_CtlSendData>
        break;
 800c36c:	e004      	b.n	800c378 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f8be 	bl	800c4f2 <USBD_CtlError>
        break;
 800c376:	bf00      	nop
}
 800c378:	bf00      	nop
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c390:	b2db      	uxtb	r3, r3
 800c392:	3b01      	subs	r3, #1
 800c394:	2b02      	cmp	r3, #2
 800c396:	d81e      	bhi.n	800c3d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	88db      	ldrh	r3, [r3, #6]
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d004      	beq.n	800c3aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f8a5 	bl	800c4f2 <USBD_CtlError>
        break;
 800c3a8:	e01a      	b.n	800c3e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d005      	beq.n	800c3c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	f043 0202 	orr.w	r2, r3, #2
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	330c      	adds	r3, #12
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 f90c 	bl	800c5ec <USBD_CtlSendData>
      break;
 800c3d4:	e004      	b.n	800c3e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c3d6:	6839      	ldr	r1, [r7, #0]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f88a 	bl	800c4f2 <USBD_CtlError>
      break;
 800c3de:	bf00      	nop
  }
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	885b      	ldrh	r3, [r3, #2]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d107      	bne.n	800c40a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f94c 	bl	800c6a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c408:	e013      	b.n	800c432 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	885b      	ldrh	r3, [r3, #2]
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d10b      	bne.n	800c42a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	889b      	ldrh	r3, [r3, #4]
 800c416:	0a1b      	lsrs	r3, r3, #8
 800c418:	b29b      	uxth	r3, r3
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f93c 	bl	800c6a0 <USBD_CtlSendStatus>
}
 800c428:	e003      	b.n	800c432 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f860 	bl	800c4f2 <USBD_CtlError>
}
 800c432:	bf00      	nop
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b082      	sub	sp, #8
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	3b01      	subs	r3, #1
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d80b      	bhi.n	800c46a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	885b      	ldrh	r3, [r3, #2]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d10c      	bne.n	800c474 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f91c 	bl	800c6a0 <USBD_CtlSendStatus>
      }
      break;
 800c468:	e004      	b.n	800c474 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c46a:	6839      	ldr	r1, [r7, #0]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f840 	bl	800c4f2 <USBD_CtlError>
      break;
 800c472:	e000      	b.n	800c476 <USBD_ClrFeature+0x3c>
      break;
 800c474:	bf00      	nop
  }
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	781a      	ldrb	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3301      	adds	r3, #1
 800c498:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	781a      	ldrb	r2, [r3, #0]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f7ff fa40 	bl	800b92e <SWAPBYTE>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f7ff fa33 	bl	800b92e <SWAPBYTE>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7ff fa26 	bl	800b92e <SWAPBYTE>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	80da      	strh	r2, [r3, #6]
}
 800c4ea:	bf00      	nop
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4fc:	2180      	movs	r1, #128	@ 0x80
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f002 fe62 	bl	800f1c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c504:	2100      	movs	r1, #0
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f002 fe5e 	bl	800f1c8 <USBD_LL_StallEP>
}
 800c50c:	bf00      	nop
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c520:	2300      	movs	r3, #0
 800c522:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d042      	beq.n	800c5b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c52e:	6938      	ldr	r0, [r7, #16]
 800c530:	f000 f842 	bl	800c5b8 <USBD_GetLen>
 800c534:	4603      	mov	r3, r0
 800c536:	3301      	adds	r3, #1
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c53e:	d808      	bhi.n	800c552 <USBD_GetString+0x3e>
 800c540:	6938      	ldr	r0, [r7, #16]
 800c542:	f000 f839 	bl	800c5b8 <USBD_GetLen>
 800c546:	4603      	mov	r3, r0
 800c548:	3301      	adds	r3, #1
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	b29a      	uxth	r2, r3
 800c550:	e001      	b.n	800c556 <USBD_GetString+0x42>
 800c552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c55a:	7dfb      	ldrb	r3, [r7, #23]
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	4413      	add	r3, r2
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	7812      	ldrb	r2, [r2, #0]
 800c564:	701a      	strb	r2, [r3, #0]
  idx++;
 800c566:	7dfb      	ldrb	r3, [r7, #23]
 800c568:	3301      	adds	r3, #1
 800c56a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	4413      	add	r3, r2
 800c572:	2203      	movs	r2, #3
 800c574:	701a      	strb	r2, [r3, #0]
  idx++;
 800c576:	7dfb      	ldrb	r3, [r7, #23]
 800c578:	3301      	adds	r3, #1
 800c57a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c57c:	e013      	b.n	800c5a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	4413      	add	r3, r2
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	7812      	ldrb	r2, [r2, #0]
 800c588:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	3301      	adds	r3, #1
 800c58e:	613b      	str	r3, [r7, #16]
    idx++;
 800c590:	7dfb      	ldrb	r3, [r7, #23]
 800c592:	3301      	adds	r3, #1
 800c594:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	4413      	add	r3, r2
 800c59c:	2200      	movs	r2, #0
 800c59e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e7      	bne.n	800c57e <USBD_GetString+0x6a>
 800c5ae:	e000      	b.n	800c5b2 <USBD_GetString+0x9e>
    return;
 800c5b0:	bf00      	nop
  }
}
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c5c8:	e005      	b.n	800c5d6 <USBD_GetLen+0x1e>
  {
    len++;
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1f5      	bne.n	800c5ca <USBD_GetLen+0x12>
  }

  return len;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	2100      	movs	r1, #0
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f002 fe61 	bl	800f2da <USBD_LL_Transmit>

  return USBD_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	60f8      	str	r0, [r7, #12]
 800c62a:	60b9      	str	r1, [r7, #8]
 800c62c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	2100      	movs	r1, #0
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f002 fe50 	bl	800f2da <USBD_LL_Transmit>

  return USBD_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2203      	movs	r2, #3
 800c654:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	2100      	movs	r1, #0
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f002 fe54 	bl	800f31c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	2100      	movs	r1, #0
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f002 fe43 	bl	800f31c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2204      	movs	r2, #4
 800c6ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f002 fe0f 	bl	800f2da <USBD_LL_Transmit>

  return USBD_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2205      	movs	r2, #5
 800c6d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2100      	movs	r1, #0
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f002 fe1d 	bl	800f31c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c6f6:	79fb      	ldrb	r3, [r7, #7]
 800c6f8:	4a08      	ldr	r2, [pc, #32]	@ (800c71c <disk_status+0x30>)
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	79fa      	ldrb	r2, [r7, #7]
 800c704:	4905      	ldr	r1, [pc, #20]	@ (800c71c <disk_status+0x30>)
 800c706:	440a      	add	r2, r1
 800c708:	7a12      	ldrb	r2, [r2, #8]
 800c70a:	4610      	mov	r0, r2
 800c70c:	4798      	blx	r3
 800c70e:	4603      	mov	r3, r0
 800c710:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c712:	7bfb      	ldrb	r3, [r7, #15]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	20000438 	.word	0x20000438

0800c720 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	4a0e      	ldr	r2, [pc, #56]	@ (800c76c <disk_initialize+0x4c>)
 800c732:	5cd3      	ldrb	r3, [r2, r3]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d114      	bne.n	800c762 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c738:	79fb      	ldrb	r3, [r7, #7]
 800c73a:	4a0c      	ldr	r2, [pc, #48]	@ (800c76c <disk_initialize+0x4c>)
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	79fa      	ldrb	r2, [r7, #7]
 800c746:	4909      	ldr	r1, [pc, #36]	@ (800c76c <disk_initialize+0x4c>)
 800c748:	440a      	add	r2, r1
 800c74a:	7a12      	ldrb	r2, [r2, #8]
 800c74c:	4610      	mov	r0, r2
 800c74e:	4798      	blx	r3
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d103      	bne.n	800c762 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	4a03      	ldr	r2, [pc, #12]	@ (800c76c <disk_initialize+0x4c>)
 800c75e:	2101      	movs	r1, #1
 800c760:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c762:	7bfb      	ldrb	r3, [r7, #15]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	20000438 	.word	0x20000438

0800c770 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c770:	b590      	push	{r4, r7, lr}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c780:	7bfb      	ldrb	r3, [r7, #15]
 800c782:	4a0a      	ldr	r2, [pc, #40]	@ (800c7ac <disk_read+0x3c>)
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	689c      	ldr	r4, [r3, #8]
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
 800c78e:	4a07      	ldr	r2, [pc, #28]	@ (800c7ac <disk_read+0x3c>)
 800c790:	4413      	add	r3, r2
 800c792:	7a18      	ldrb	r0, [r3, #8]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	68b9      	ldr	r1, [r7, #8]
 800c79a:	47a0      	blx	r4
 800c79c:	4603      	mov	r3, r0
 800c79e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd90      	pop	{r4, r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20000438 	.word	0x20000438

0800c7b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c7b0:	b590      	push	{r4, r7, lr}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60b9      	str	r1, [r7, #8]
 800c7b8:	607a      	str	r2, [r7, #4]
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	4603      	mov	r3, r0
 800c7be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
 800c7c2:	4a0a      	ldr	r2, [pc, #40]	@ (800c7ec <disk_write+0x3c>)
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	4413      	add	r3, r2
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	68dc      	ldr	r4, [r3, #12]
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	4a07      	ldr	r2, [pc, #28]	@ (800c7ec <disk_write+0x3c>)
 800c7d0:	4413      	add	r3, r2
 800c7d2:	7a18      	ldrb	r0, [r3, #8]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	68b9      	ldr	r1, [r7, #8]
 800c7da:	47a0      	blx	r4
 800c7dc:	4603      	mov	r3, r0
 800c7de:	75fb      	strb	r3, [r7, #23]
  return res;
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd90      	pop	{r4, r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20000438 	.word	0x20000438

0800c7f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	603a      	str	r2, [r7, #0]
 800c7fa:	71fb      	strb	r3, [r7, #7]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	4a09      	ldr	r2, [pc, #36]	@ (800c828 <disk_ioctl+0x38>)
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	79fa      	ldrb	r2, [r7, #7]
 800c80e:	4906      	ldr	r1, [pc, #24]	@ (800c828 <disk_ioctl+0x38>)
 800c810:	440a      	add	r2, r1
 800c812:	7a10      	ldrb	r0, [r2, #8]
 800c814:	79b9      	ldrb	r1, [r7, #6]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	4798      	blx	r3
 800c81a:	4603      	mov	r3, r0
 800c81c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	20000438 	.word	0x20000438

0800c82c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3301      	adds	r3, #1
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c83c:	89fb      	ldrh	r3, [r7, #14]
 800c83e:	021b      	lsls	r3, r3, #8
 800c840:	b21a      	sxth	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	b21b      	sxth	r3, r3
 800c848:	4313      	orrs	r3, r2
 800c84a:	b21b      	sxth	r3, r3
 800c84c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c84e:	89fb      	ldrh	r3, [r7, #14]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	3303      	adds	r3, #3
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	021b      	lsls	r3, r3, #8
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	3202      	adds	r2, #2
 800c874:	7812      	ldrb	r2, [r2, #0]
 800c876:	4313      	orrs	r3, r2
 800c878:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	021b      	lsls	r3, r3, #8
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	3201      	adds	r2, #1
 800c882:	7812      	ldrb	r2, [r2, #0]
 800c884:	4313      	orrs	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	021b      	lsls	r3, r3, #8
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	7812      	ldrb	r2, [r2, #0]
 800c890:	4313      	orrs	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
	return rv;
 800c894:	68fb      	ldr	r3, [r7, #12]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b083      	sub	sp, #12
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	1c5a      	adds	r2, r3, #1
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	887a      	ldrh	r2, [r7, #2]
 800c8b6:	b2d2      	uxtb	r2, r2
 800c8b8:	701a      	strb	r2, [r3, #0]
 800c8ba:	887b      	ldrh	r3, [r7, #2]
 800c8bc:	0a1b      	lsrs	r3, r3, #8
 800c8be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	607a      	str	r2, [r7, #4]
 800c8c6:	887a      	ldrh	r2, [r7, #2]
 800c8c8:	b2d2      	uxtb	r2, r2
 800c8ca:	701a      	strb	r2, [r3, #0]
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	1c5a      	adds	r2, r3, #1
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	683a      	ldr	r2, [r7, #0]
 800c8ea:	b2d2      	uxtb	r2, r2
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	0a1b      	lsrs	r3, r3, #8
 800c8f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	1c5a      	adds	r2, r3, #1
 800c8f8:	607a      	str	r2, [r7, #4]
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	b2d2      	uxtb	r2, r2
 800c8fe:	701a      	strb	r2, [r3, #0]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	0a1b      	lsrs	r3, r3, #8
 800c904:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	607a      	str	r2, [r7, #4]
 800c90c:	683a      	ldr	r2, [r7, #0]
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	0a1b      	lsrs	r3, r3, #8
 800c916:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	607a      	str	r2, [r7, #4]
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	b2d2      	uxtb	r2, r2
 800c922:	701a      	strb	r2, [r3, #0]
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c930:	b480      	push	{r7}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00d      	beq.n	800c966 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	1c53      	adds	r3, r2, #1
 800c94e:	613b      	str	r3, [r7, #16]
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	1c59      	adds	r1, r3, #1
 800c954:	6179      	str	r1, [r7, #20]
 800c956:	7812      	ldrb	r2, [r2, #0]
 800c958:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	607b      	str	r3, [r7, #4]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1f1      	bne.n	800c94a <mem_cpy+0x1a>
	}
}
 800c966:	bf00      	nop
 800c968:	371c      	adds	r7, #28
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c972:	b480      	push	{r7}
 800c974:	b087      	sub	sp, #28
 800c976:	af00      	add	r7, sp, #0
 800c978:	60f8      	str	r0, [r7, #12]
 800c97a:	60b9      	str	r1, [r7, #8]
 800c97c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	1c5a      	adds	r2, r3, #1
 800c986:	617a      	str	r2, [r7, #20]
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	b2d2      	uxtb	r2, r2
 800c98c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3b01      	subs	r3, #1
 800c992:	607b      	str	r3, [r7, #4]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1f3      	bne.n	800c982 <mem_set+0x10>
}
 800c99a:	bf00      	nop
 800c99c:	bf00      	nop
 800c99e:	371c      	adds	r7, #28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c9a8:	b480      	push	{r7}
 800c9aa:	b089      	sub	sp, #36	@ 0x24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	61fb      	str	r3, [r7, #28]
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	61fa      	str	r2, [r7, #28]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	1c5a      	adds	r2, r3, #1
 800c9ce:	61ba      	str	r2, [r7, #24]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	1acb      	subs	r3, r1, r3
 800c9d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	607b      	str	r3, [r7, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <mem_cmp+0x40>
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d0eb      	beq.n	800c9c0 <mem_cmp+0x18>

	return r;
 800c9e8:	697b      	ldr	r3, [r7, #20]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3724      	adds	r7, #36	@ 0x24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c9f6:	b480      	push	{r7}
 800c9f8:	b083      	sub	sp, #12
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ca00:	e002      	b.n	800ca08 <chk_chr+0x12>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	3301      	adds	r3, #1
 800ca06:	607b      	str	r3, [r7, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d005      	beq.n	800ca1c <chk_chr+0x26>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	461a      	mov	r2, r3
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d1f2      	bne.n	800ca02 <chk_chr+0xc>
	return *str;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca36:	2300      	movs	r3, #0
 800ca38:	60bb      	str	r3, [r7, #8]
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	e029      	b.n	800ca94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ca40:	4a27      	ldr	r2, [pc, #156]	@ (800cae0 <chk_lock+0xb4>)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	011b      	lsls	r3, r3, #4
 800ca46:	4413      	add	r3, r2
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d01d      	beq.n	800ca8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca4e:	4a24      	ldr	r2, [pc, #144]	@ (800cae0 <chk_lock+0xb4>)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	011b      	lsls	r3, r3, #4
 800ca54:	4413      	add	r3, r2
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d116      	bne.n	800ca8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ca60:	4a1f      	ldr	r2, [pc, #124]	@ (800cae0 <chk_lock+0xb4>)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	011b      	lsls	r3, r3, #4
 800ca66:	4413      	add	r3, r2
 800ca68:	3304      	adds	r3, #4
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d10c      	bne.n	800ca8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca74:	4a1a      	ldr	r2, [pc, #104]	@ (800cae0 <chk_lock+0xb4>)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	011b      	lsls	r3, r3, #4
 800ca7a:	4413      	add	r3, r2
 800ca7c:	3308      	adds	r3, #8
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d102      	bne.n	800ca8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ca88:	e007      	b.n	800ca9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3301      	adds	r3, #1
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d9d2      	bls.n	800ca40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d109      	bne.n	800cab4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d102      	bne.n	800caac <chk_lock+0x80>
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d101      	bne.n	800cab0 <chk_lock+0x84>
 800caac:	2300      	movs	r3, #0
 800caae:	e010      	b.n	800cad2 <chk_lock+0xa6>
 800cab0:	2312      	movs	r3, #18
 800cab2:	e00e      	b.n	800cad2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d108      	bne.n	800cacc <chk_lock+0xa0>
 800caba:	4a09      	ldr	r2, [pc, #36]	@ (800cae0 <chk_lock+0xb4>)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	4413      	add	r3, r2
 800cac2:	330c      	adds	r3, #12
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800caca:	d101      	bne.n	800cad0 <chk_lock+0xa4>
 800cacc:	2310      	movs	r3, #16
 800cace:	e000      	b.n	800cad2 <chk_lock+0xa6>
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	20000418 	.word	0x20000418

0800cae4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800caea:	2300      	movs	r3, #0
 800caec:	607b      	str	r3, [r7, #4]
 800caee:	e002      	b.n	800caf6 <enq_lock+0x12>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	3301      	adds	r3, #1
 800caf4:	607b      	str	r3, [r7, #4]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d806      	bhi.n	800cb0a <enq_lock+0x26>
 800cafc:	4a09      	ldr	r2, [pc, #36]	@ (800cb24 <enq_lock+0x40>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	011b      	lsls	r3, r3, #4
 800cb02:	4413      	add	r3, r2
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f2      	bne.n	800caf0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	bf14      	ite	ne
 800cb10:	2301      	movne	r3, #1
 800cb12:	2300      	moveq	r3, #0
 800cb14:	b2db      	uxtb	r3, r3
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	20000418 	.word	0x20000418

0800cb28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	e01f      	b.n	800cb78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cb38:	4a41      	ldr	r2, [pc, #260]	@ (800cc40 <inc_lock+0x118>)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	011b      	lsls	r3, r3, #4
 800cb3e:	4413      	add	r3, r2
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d113      	bne.n	800cb72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cb4a:	4a3d      	ldr	r2, [pc, #244]	@ (800cc40 <inc_lock+0x118>)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	011b      	lsls	r3, r3, #4
 800cb50:	4413      	add	r3, r2
 800cb52:	3304      	adds	r3, #4
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d109      	bne.n	800cb72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cb5e:	4a38      	ldr	r2, [pc, #224]	@ (800cc40 <inc_lock+0x118>)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	011b      	lsls	r3, r3, #4
 800cb64:	4413      	add	r3, r2
 800cb66:	3308      	adds	r3, #8
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d006      	beq.n	800cb80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3301      	adds	r3, #1
 800cb76:	60fb      	str	r3, [r7, #12]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d9dc      	bls.n	800cb38 <inc_lock+0x10>
 800cb7e:	e000      	b.n	800cb82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cb80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d132      	bne.n	800cbee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	e002      	b.n	800cb94 <inc_lock+0x6c>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3301      	adds	r3, #1
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d806      	bhi.n	800cba8 <inc_lock+0x80>
 800cb9a:	4a29      	ldr	r2, [pc, #164]	@ (800cc40 <inc_lock+0x118>)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	011b      	lsls	r3, r3, #4
 800cba0:	4413      	add	r3, r2
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1f2      	bne.n	800cb8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d101      	bne.n	800cbb2 <inc_lock+0x8a>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	e040      	b.n	800cc34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	4922      	ldr	r1, [pc, #136]	@ (800cc40 <inc_lock+0x118>)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	011b      	lsls	r3, r3, #4
 800cbbc:	440b      	add	r3, r1
 800cbbe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	689a      	ldr	r2, [r3, #8]
 800cbc4:	491e      	ldr	r1, [pc, #120]	@ (800cc40 <inc_lock+0x118>)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	011b      	lsls	r3, r3, #4
 800cbca:	440b      	add	r3, r1
 800cbcc:	3304      	adds	r3, #4
 800cbce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	695a      	ldr	r2, [r3, #20]
 800cbd4:	491a      	ldr	r1, [pc, #104]	@ (800cc40 <inc_lock+0x118>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	011b      	lsls	r3, r3, #4
 800cbda:	440b      	add	r3, r1
 800cbdc:	3308      	adds	r3, #8
 800cbde:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cbe0:	4a17      	ldr	r2, [pc, #92]	@ (800cc40 <inc_lock+0x118>)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	011b      	lsls	r3, r3, #4
 800cbe6:	4413      	add	r3, r2
 800cbe8:	330c      	adds	r3, #12
 800cbea:	2200      	movs	r2, #0
 800cbec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d009      	beq.n	800cc08 <inc_lock+0xe0>
 800cbf4:	4a12      	ldr	r2, [pc, #72]	@ (800cc40 <inc_lock+0x118>)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	011b      	lsls	r3, r3, #4
 800cbfa:	4413      	add	r3, r2
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d001      	beq.n	800cc08 <inc_lock+0xe0>
 800cc04:	2300      	movs	r3, #0
 800cc06:	e015      	b.n	800cc34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d108      	bne.n	800cc20 <inc_lock+0xf8>
 800cc0e:	4a0c      	ldr	r2, [pc, #48]	@ (800cc40 <inc_lock+0x118>)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	011b      	lsls	r3, r3, #4
 800cc14:	4413      	add	r3, r2
 800cc16:	330c      	adds	r3, #12
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	e001      	b.n	800cc24 <inc_lock+0xfc>
 800cc20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc24:	4906      	ldr	r1, [pc, #24]	@ (800cc40 <inc_lock+0x118>)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	011b      	lsls	r3, r3, #4
 800cc2a:	440b      	add	r3, r1
 800cc2c:	330c      	adds	r3, #12
 800cc2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3301      	adds	r3, #1
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr
 800cc40:	20000418 	.word	0x20000418

0800cc44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	607b      	str	r3, [r7, #4]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d825      	bhi.n	800cca4 <dec_lock+0x60>
		n = Files[i].ctr;
 800cc58:	4a17      	ldr	r2, [pc, #92]	@ (800ccb8 <dec_lock+0x74>)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	4413      	add	r3, r2
 800cc60:	330c      	adds	r3, #12
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cc66:	89fb      	ldrh	r3, [r7, #14]
 800cc68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc6c:	d101      	bne.n	800cc72 <dec_lock+0x2e>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cc72:	89fb      	ldrh	r3, [r7, #14]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <dec_lock+0x3a>
 800cc78:	89fb      	ldrh	r3, [r7, #14]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cc7e:	4a0e      	ldr	r2, [pc, #56]	@ (800ccb8 <dec_lock+0x74>)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	011b      	lsls	r3, r3, #4
 800cc84:	4413      	add	r3, r2
 800cc86:	330c      	adds	r3, #12
 800cc88:	89fa      	ldrh	r2, [r7, #14]
 800cc8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cc8c:	89fb      	ldrh	r3, [r7, #14]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d105      	bne.n	800cc9e <dec_lock+0x5a>
 800cc92:	4a09      	ldr	r2, [pc, #36]	@ (800ccb8 <dec_lock+0x74>)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	011b      	lsls	r3, r3, #4
 800cc98:	4413      	add	r3, r2
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	737b      	strb	r3, [r7, #13]
 800cca2:	e001      	b.n	800cca8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cca4:	2302      	movs	r3, #2
 800cca6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cca8:	7b7b      	ldrb	r3, [r7, #13]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	20000418 	.word	0x20000418

0800ccbc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	e010      	b.n	800ccec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ccca:	4a0d      	ldr	r2, [pc, #52]	@ (800cd00 <clear_lock+0x44>)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	011b      	lsls	r3, r3, #4
 800ccd0:	4413      	add	r3, r2
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d105      	bne.n	800cce6 <clear_lock+0x2a>
 800ccda:	4a09      	ldr	r2, [pc, #36]	@ (800cd00 <clear_lock+0x44>)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	011b      	lsls	r3, r3, #4
 800cce0:	4413      	add	r3, r2
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3301      	adds	r3, #1
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d9eb      	bls.n	800ccca <clear_lock+0xe>
	}
}
 800ccf2:	bf00      	nop
 800ccf4:	bf00      	nop
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	20000418 	.word	0x20000418

0800cd04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	78db      	ldrb	r3, [r3, #3]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d034      	beq.n	800cd82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	7858      	ldrb	r0, [r3, #1]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd28:	2301      	movs	r3, #1
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	f7ff fd40 	bl	800c7b0 <disk_write>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <sync_window+0x38>
			res = FR_DISK_ERR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	73fb      	strb	r3, [r7, #15]
 800cd3a:	e022      	b.n	800cd82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	1ad2      	subs	r2, r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	699b      	ldr	r3, [r3, #24]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d217      	bcs.n	800cd82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	789b      	ldrb	r3, [r3, #2]
 800cd56:	613b      	str	r3, [r7, #16]
 800cd58:	e010      	b.n	800cd7c <sync_window+0x78>
					wsect += fs->fsize;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	4413      	add	r3, r2
 800cd62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	7858      	ldrb	r0, [r3, #1]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd6e:	2301      	movs	r3, #1
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	f7ff fd1d 	bl	800c7b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	613b      	str	r3, [r7, #16]
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d8eb      	bhi.n	800cd5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3718      	adds	r7, #24
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d01b      	beq.n	800cddc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7ff ffad 	bl	800cd04 <sync_window>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d113      	bne.n	800cddc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7858      	ldrb	r0, [r3, #1]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	683a      	ldr	r2, [r7, #0]
 800cdc2:	f7ff fcd5 	bl	800c770 <disk_read>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d004      	beq.n	800cdd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff ff87 	bl	800cd04 <sync_window>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d158      	bne.n	800ceb2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b03      	cmp	r3, #3
 800ce06:	d148      	bne.n	800ce9a <sync_fs+0xb2>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	791b      	ldrb	r3, [r3, #4]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d144      	bne.n	800ce9a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3330      	adds	r3, #48	@ 0x30
 800ce14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce18:	2100      	movs	r1, #0
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fda9 	bl	800c972 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3330      	adds	r3, #48	@ 0x30
 800ce24:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ce28:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7ff fd38 	bl	800c8a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	3330      	adds	r3, #48	@ 0x30
 800ce36:	4921      	ldr	r1, [pc, #132]	@ (800cebc <sync_fs+0xd4>)
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff fd4d 	bl	800c8d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3330      	adds	r3, #48	@ 0x30
 800ce42:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ce46:	491e      	ldr	r1, [pc, #120]	@ (800cec0 <sync_fs+0xd8>)
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff fd45 	bl	800c8d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	3330      	adds	r3, #48	@ 0x30
 800ce52:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f7ff fd3b 	bl	800c8d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3330      	adds	r3, #48	@ 0x30
 800ce66:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4610      	mov	r0, r2
 800ce72:	f7ff fd31 	bl	800c8d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	7858      	ldrb	r0, [r3, #1]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce8e:	2301      	movs	r3, #1
 800ce90:	f7ff fc8e 	bl	800c7b0 <disk_write>
			fs->fsi_flag = 0;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	785b      	ldrb	r3, [r3, #1]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2100      	movs	r1, #0
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff fca4 	bl	800c7f0 <disk_ioctl>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <sync_fs+0xca>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	41615252 	.word	0x41615252
 800cec0:	61417272 	.word	0x61417272

0800cec4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	3b02      	subs	r3, #2
 800ced2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	695b      	ldr	r3, [r3, #20]
 800ced8:	3b02      	subs	r3, #2
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d301      	bcc.n	800cee4 <clust2sect+0x20>
 800cee0:	2300      	movs	r3, #0
 800cee2:	e008      	b.n	800cef6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	895b      	ldrh	r3, [r3, #10]
 800cee8:	461a      	mov	r2, r3
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	fb03 f202 	mul.w	r2, r3, r2
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef4:	4413      	add	r3, r2
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b086      	sub	sp, #24
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d904      	bls.n	800cf22 <get_fat+0x20>
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	695b      	ldr	r3, [r3, #20]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d302      	bcc.n	800cf28 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cf22:	2301      	movs	r3, #1
 800cf24:	617b      	str	r3, [r7, #20]
 800cf26:	e08e      	b.n	800d046 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cf28:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d061      	beq.n	800cffa <get_fat+0xf8>
 800cf36:	2b03      	cmp	r3, #3
 800cf38:	dc7b      	bgt.n	800d032 <get_fat+0x130>
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d002      	beq.n	800cf44 <get_fat+0x42>
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d041      	beq.n	800cfc6 <get_fat+0xc4>
 800cf42:	e076      	b.n	800d032 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	085b      	lsrs	r3, r3, #1
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6a1a      	ldr	r2, [r3, #32]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	0a5b      	lsrs	r3, r3, #9
 800cf5a:	4413      	add	r3, r2
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6938      	ldr	r0, [r7, #16]
 800cf60:	f7ff ff14 	bl	800cd8c <move_window>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d166      	bne.n	800d038 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	1c5a      	adds	r2, r3, #1
 800cf6e:	60fa      	str	r2, [r7, #12]
 800cf70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf74:	693a      	ldr	r2, [r7, #16]
 800cf76:	4413      	add	r3, r2
 800cf78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	6a1a      	ldr	r2, [r3, #32]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	0a5b      	lsrs	r3, r3, #9
 800cf86:	4413      	add	r3, r2
 800cf88:	4619      	mov	r1, r3
 800cf8a:	6938      	ldr	r0, [r7, #16]
 800cf8c:	f7ff fefe 	bl	800cd8c <move_window>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d152      	bne.n	800d03c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfa4:	021b      	lsls	r3, r3, #8
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d002      	beq.n	800cfbc <get_fat+0xba>
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	091b      	lsrs	r3, r3, #4
 800cfba:	e002      	b.n	800cfc2 <get_fat+0xc0>
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfc2:	617b      	str	r3, [r7, #20]
			break;
 800cfc4:	e03f      	b.n	800d046 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	6a1a      	ldr	r2, [r3, #32]
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	0a1b      	lsrs	r3, r3, #8
 800cfce:	4413      	add	r3, r2
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6938      	ldr	r0, [r7, #16]
 800cfd4:	f7ff feda 	bl	800cd8c <move_window>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d130      	bne.n	800d040 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	005b      	lsls	r3, r3, #1
 800cfe8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cfec:	4413      	add	r3, r2
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff fc1c 	bl	800c82c <ld_word>
 800cff4:	4603      	mov	r3, r0
 800cff6:	617b      	str	r3, [r7, #20]
			break;
 800cff8:	e025      	b.n	800d046 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	6a1a      	ldr	r2, [r3, #32]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	09db      	lsrs	r3, r3, #7
 800d002:	4413      	add	r3, r2
 800d004:	4619      	mov	r1, r3
 800d006:	6938      	ldr	r0, [r7, #16]
 800d008:	f7ff fec0 	bl	800cd8c <move_window>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d118      	bne.n	800d044 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d020:	4413      	add	r3, r2
 800d022:	4618      	mov	r0, r3
 800d024:	f7ff fc1a 	bl	800c85c <ld_dword>
 800d028:	4603      	mov	r3, r0
 800d02a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d02e:	617b      	str	r3, [r7, #20]
			break;
 800d030:	e009      	b.n	800d046 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d032:	2301      	movs	r3, #1
 800d034:	617b      	str	r3, [r7, #20]
 800d036:	e006      	b.n	800d046 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d038:	bf00      	nop
 800d03a:	e004      	b.n	800d046 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d03c:	bf00      	nop
 800d03e:	e002      	b.n	800d046 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d040:	bf00      	nop
 800d042:	e000      	b.n	800d046 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d044:	bf00      	nop
		}
	}

	return val;
 800d046:	697b      	ldr	r3, [r7, #20]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3718      	adds	r7, #24
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d050:	b590      	push	{r4, r7, lr}
 800d052:	b089      	sub	sp, #36	@ 0x24
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d05c:	2302      	movs	r3, #2
 800d05e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	2b01      	cmp	r3, #1
 800d064:	f240 80d9 	bls.w	800d21a <put_fat+0x1ca>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	429a      	cmp	r2, r3
 800d070:	f080 80d3 	bcs.w	800d21a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	2b03      	cmp	r3, #3
 800d07a:	f000 8096 	beq.w	800d1aa <put_fat+0x15a>
 800d07e:	2b03      	cmp	r3, #3
 800d080:	f300 80cb 	bgt.w	800d21a <put_fat+0x1ca>
 800d084:	2b01      	cmp	r3, #1
 800d086:	d002      	beq.n	800d08e <put_fat+0x3e>
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d06e      	beq.n	800d16a <put_fat+0x11a>
 800d08c:	e0c5      	b.n	800d21a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	61bb      	str	r3, [r7, #24]
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	085b      	lsrs	r3, r3, #1
 800d096:	69ba      	ldr	r2, [r7, #24]
 800d098:	4413      	add	r3, r2
 800d09a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6a1a      	ldr	r2, [r3, #32]
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	0a5b      	lsrs	r3, r3, #9
 800d0a4:	4413      	add	r3, r2
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f7ff fe6f 	bl	800cd8c <move_window>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0b2:	7ffb      	ldrb	r3, [r7, #31]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f040 80a9 	bne.w	800d20c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	1c59      	adds	r1, r3, #1
 800d0c4:	61b9      	str	r1, [r7, #24]
 800d0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ca:	4413      	add	r3, r2
 800d0cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00d      	beq.n	800d0f4 <put_fat+0xa4>
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	b25b      	sxtb	r3, r3
 800d0de:	f003 030f 	and.w	r3, r3, #15
 800d0e2:	b25a      	sxtb	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	011b      	lsls	r3, r3, #4
 800d0ea:	b25b      	sxtb	r3, r3
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	b25b      	sxtb	r3, r3
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	e001      	b.n	800d0f8 <put_fat+0xa8>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2201      	movs	r2, #1
 800d100:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6a1a      	ldr	r2, [r3, #32]
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	0a5b      	lsrs	r3, r3, #9
 800d10a:	4413      	add	r3, r2
 800d10c:	4619      	mov	r1, r3
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f7ff fe3c 	bl	800cd8c <move_window>
 800d114:	4603      	mov	r3, r0
 800d116:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d118:	7ffb      	ldrb	r3, [r7, #31]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d178      	bne.n	800d210 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12a:	4413      	add	r3, r2
 800d12c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <put_fat+0xf0>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	091b      	lsrs	r3, r3, #4
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	e00e      	b.n	800d15e <put_fat+0x10e>
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	b25b      	sxtb	r3, r3
 800d146:	f023 030f 	bic.w	r3, r3, #15
 800d14a:	b25a      	sxtb	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	0a1b      	lsrs	r3, r3, #8
 800d150:	b25b      	sxtb	r3, r3
 800d152:	f003 030f 	and.w	r3, r3, #15
 800d156:	b25b      	sxtb	r3, r3
 800d158:	4313      	orrs	r3, r2
 800d15a:	b25b      	sxtb	r3, r3
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2201      	movs	r2, #1
 800d166:	70da      	strb	r2, [r3, #3]
			break;
 800d168:	e057      	b.n	800d21a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6a1a      	ldr	r2, [r3, #32]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	0a1b      	lsrs	r3, r3, #8
 800d172:	4413      	add	r3, r2
 800d174:	4619      	mov	r1, r3
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f7ff fe08 	bl	800cd8c <move_window>
 800d17c:	4603      	mov	r3, r0
 800d17e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d180:	7ffb      	ldrb	r3, [r7, #31]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d146      	bne.n	800d214 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d194:	4413      	add	r3, r2
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	b292      	uxth	r2, r2
 800d19a:	4611      	mov	r1, r2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fb80 	bl	800c8a2 <st_word>
			fs->wflag = 1;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	70da      	strb	r2, [r3, #3]
			break;
 800d1a8:	e037      	b.n	800d21a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6a1a      	ldr	r2, [r3, #32]
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	09db      	lsrs	r3, r3, #7
 800d1b2:	4413      	add	r3, r2
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7ff fde8 	bl	800cd8c <move_window>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1c0:	7ffb      	ldrb	r3, [r7, #31]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d128      	bne.n	800d218 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d1da:	4413      	add	r3, r2
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7ff fb3d 	bl	800c85c <ld_dword>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d1e8:	4323      	orrs	r3, r4
 800d1ea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d1fa:	4413      	add	r3, r2
 800d1fc:	6879      	ldr	r1, [r7, #4]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7ff fb6a 	bl	800c8d8 <st_dword>
			fs->wflag = 1;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2201      	movs	r2, #1
 800d208:	70da      	strb	r2, [r3, #3]
			break;
 800d20a:	e006      	b.n	800d21a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d20c:	bf00      	nop
 800d20e:	e004      	b.n	800d21a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d210:	bf00      	nop
 800d212:	e002      	b.n	800d21a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d214:	bf00      	nop
 800d216:	e000      	b.n	800d21a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d218:	bf00      	nop
		}
	}
	return res;
 800d21a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3724      	adds	r7, #36	@ 0x24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd90      	pop	{r4, r7, pc}

0800d224 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d230:	2300      	movs	r3, #0
 800d232:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d904      	bls.n	800d24a <remove_chain+0x26>
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	695b      	ldr	r3, [r3, #20]
 800d244:	68ba      	ldr	r2, [r7, #8]
 800d246:	429a      	cmp	r2, r3
 800d248:	d301      	bcc.n	800d24e <remove_chain+0x2a>
 800d24a:	2302      	movs	r3, #2
 800d24c:	e04b      	b.n	800d2e6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00c      	beq.n	800d26e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d254:	f04f 32ff 	mov.w	r2, #4294967295
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	69b8      	ldr	r0, [r7, #24]
 800d25c:	f7ff fef8 	bl	800d050 <put_fat>
 800d260:	4603      	mov	r3, r0
 800d262:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d264:	7ffb      	ldrb	r3, [r7, #31]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d001      	beq.n	800d26e <remove_chain+0x4a>
 800d26a:	7ffb      	ldrb	r3, [r7, #31]
 800d26c:	e03b      	b.n	800d2e6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d26e:	68b9      	ldr	r1, [r7, #8]
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f7ff fe46 	bl	800cf02 <get_fat>
 800d276:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d031      	beq.n	800d2e2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d101      	bne.n	800d288 <remove_chain+0x64>
 800d284:	2302      	movs	r3, #2
 800d286:	e02e      	b.n	800d2e6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d101      	bne.n	800d294 <remove_chain+0x70>
 800d290:	2301      	movs	r3, #1
 800d292:	e028      	b.n	800d2e6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d294:	2200      	movs	r2, #0
 800d296:	68b9      	ldr	r1, [r7, #8]
 800d298:	69b8      	ldr	r0, [r7, #24]
 800d29a:	f7ff fed9 	bl	800d050 <put_fat>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d2a2:	7ffb      	ldrb	r3, [r7, #31]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <remove_chain+0x88>
 800d2a8:	7ffb      	ldrb	r3, [r7, #31]
 800d2aa:	e01c      	b.n	800d2e6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	691a      	ldr	r2, [r3, #16]
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	3b02      	subs	r3, #2
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d20b      	bcs.n	800d2d2 <remove_chain+0xae>
			fs->free_clst++;
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	1c5a      	adds	r2, r3, #1
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	791b      	ldrb	r3, [r3, #4]
 800d2c8:	f043 0301 	orr.w	r3, r3, #1
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	695b      	ldr	r3, [r3, #20]
 800d2da:	68ba      	ldr	r2, [r7, #8]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d3c6      	bcc.n	800d26e <remove_chain+0x4a>
 800d2e0:	e000      	b.n	800d2e4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d2e2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d2e4:	2300      	movs	r3, #0
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3720      	adds	r7, #32
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b088      	sub	sp, #32
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10d      	bne.n	800d320 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d004      	beq.n	800d31a <create_chain+0x2c>
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	69ba      	ldr	r2, [r7, #24]
 800d316:	429a      	cmp	r2, r3
 800d318:	d31b      	bcc.n	800d352 <create_chain+0x64>
 800d31a:	2301      	movs	r3, #1
 800d31c:	61bb      	str	r3, [r7, #24]
 800d31e:	e018      	b.n	800d352 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d320:	6839      	ldr	r1, [r7, #0]
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7ff fded 	bl	800cf02 <get_fat>
 800d328:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d801      	bhi.n	800d334 <create_chain+0x46>
 800d330:	2301      	movs	r3, #1
 800d332:	e070      	b.n	800d416 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33a:	d101      	bne.n	800d340 <create_chain+0x52>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	e06a      	b.n	800d416 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	695b      	ldr	r3, [r3, #20]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	429a      	cmp	r2, r3
 800d348:	d201      	bcs.n	800d34e <create_chain+0x60>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	e063      	b.n	800d416 <create_chain+0x128>
		scl = clst;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	3301      	adds	r3, #1
 800d35a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	695b      	ldr	r3, [r3, #20]
 800d360:	69fa      	ldr	r2, [r7, #28]
 800d362:	429a      	cmp	r2, r3
 800d364:	d307      	bcc.n	800d376 <create_chain+0x88>
				ncl = 2;
 800d366:	2302      	movs	r3, #2
 800d368:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d36a:	69fa      	ldr	r2, [r7, #28]
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d901      	bls.n	800d376 <create_chain+0x88>
 800d372:	2300      	movs	r3, #0
 800d374:	e04f      	b.n	800d416 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d376:	69f9      	ldr	r1, [r7, #28]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7ff fdc2 	bl	800cf02 <get_fat>
 800d37e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00e      	beq.n	800d3a4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d003      	beq.n	800d394 <create_chain+0xa6>
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d392:	d101      	bne.n	800d398 <create_chain+0xaa>
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	e03e      	b.n	800d416 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d398:	69fa      	ldr	r2, [r7, #28]
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d1da      	bne.n	800d356 <create_chain+0x68>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e038      	b.n	800d416 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d3a4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3aa:	69f9      	ldr	r1, [r7, #28]
 800d3ac:	6938      	ldr	r0, [r7, #16]
 800d3ae:	f7ff fe4f 	bl	800d050 <put_fat>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d3b6:	7dfb      	ldrb	r3, [r7, #23]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d109      	bne.n	800d3d0 <create_chain+0xe2>
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d006      	beq.n	800d3d0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d3c2:	69fa      	ldr	r2, [r7, #28]
 800d3c4:	6839      	ldr	r1, [r7, #0]
 800d3c6:	6938      	ldr	r0, [r7, #16]
 800d3c8:	f7ff fe42 	bl	800d050 <put_fat>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d3d0:	7dfb      	ldrb	r3, [r7, #23]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d116      	bne.n	800d404 <create_chain+0x116>
		fs->last_clst = ncl;
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	69fa      	ldr	r2, [r7, #28]
 800d3da:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	691a      	ldr	r2, [r3, #16]
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	3b02      	subs	r3, #2
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d804      	bhi.n	800d3f4 <create_chain+0x106>
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	1e5a      	subs	r2, r3, #1
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	791b      	ldrb	r3, [r3, #4]
 800d3f8:	f043 0301 	orr.w	r3, r3, #1
 800d3fc:	b2da      	uxtb	r2, r3
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	711a      	strb	r2, [r3, #4]
 800d402:	e007      	b.n	800d414 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d404:	7dfb      	ldrb	r3, [r7, #23]
 800d406:	2b01      	cmp	r3, #1
 800d408:	d102      	bne.n	800d410 <create_chain+0x122>
 800d40a:	f04f 33ff 	mov.w	r3, #4294967295
 800d40e:	e000      	b.n	800d412 <create_chain+0x124>
 800d410:	2301      	movs	r3, #1
 800d412:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d414:	69fb      	ldr	r3, [r7, #28]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3720      	adds	r7, #32
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d41e:	b480      	push	{r7}
 800d420:	b087      	sub	sp, #28
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d432:	3304      	adds	r3, #4
 800d434:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	0a5b      	lsrs	r3, r3, #9
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	8952      	ldrh	r2, [r2, #10]
 800d43e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d442:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	1d1a      	adds	r2, r3, #4
 800d448:	613a      	str	r2, [r7, #16]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d101      	bne.n	800d458 <clmt_clust+0x3a>
 800d454:	2300      	movs	r3, #0
 800d456:	e010      	b.n	800d47a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d458:	697a      	ldr	r2, [r7, #20]
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d307      	bcc.n	800d470 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	617b      	str	r3, [r7, #20]
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	3304      	adds	r3, #4
 800d46c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d46e:	e7e9      	b.n	800d444 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d470:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	4413      	add	r3, r2
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	371c      	adds	r7, #28
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b086      	sub	sp, #24
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d49c:	d204      	bcs.n	800d4a8 <dir_sdi+0x22>
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	f003 031f 	and.w	r3, r3, #31
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <dir_sdi+0x26>
		return FR_INT_ERR;
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	e063      	b.n	800d574 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <dir_sdi+0x46>
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d902      	bls.n	800d4cc <dir_sdi+0x46>
		clst = fs->dirbase;
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ca:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10c      	bne.n	800d4ec <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	095b      	lsrs	r3, r3, #5
 800d4d6:	693a      	ldr	r2, [r7, #16]
 800d4d8:	8912      	ldrh	r2, [r2, #8]
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d301      	bcc.n	800d4e2 <dir_sdi+0x5c>
 800d4de:	2302      	movs	r3, #2
 800d4e0:	e048      	b.n	800d574 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	61da      	str	r2, [r3, #28]
 800d4ea:	e029      	b.n	800d540 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	895b      	ldrh	r3, [r3, #10]
 800d4f0:	025b      	lsls	r3, r3, #9
 800d4f2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d4f4:	e019      	b.n	800d52a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6979      	ldr	r1, [r7, #20]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff fd01 	bl	800cf02 <get_fat>
 800d500:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d508:	d101      	bne.n	800d50e <dir_sdi+0x88>
 800d50a:	2301      	movs	r3, #1
 800d50c:	e032      	b.n	800d574 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d904      	bls.n	800d51e <dir_sdi+0x98>
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	695b      	ldr	r3, [r3, #20]
 800d518:	697a      	ldr	r2, [r7, #20]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d301      	bcc.n	800d522 <dir_sdi+0x9c>
 800d51e:	2302      	movs	r3, #2
 800d520:	e028      	b.n	800d574 <dir_sdi+0xee>
			ofs -= csz;
 800d522:	683a      	ldr	r2, [r7, #0]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d2e1      	bcs.n	800d4f6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d532:	6979      	ldr	r1, [r7, #20]
 800d534:	6938      	ldr	r0, [r7, #16]
 800d536:	f7ff fcc5 	bl	800cec4 <clust2sect>
 800d53a:	4602      	mov	r2, r0
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	697a      	ldr	r2, [r7, #20]
 800d544:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	69db      	ldr	r3, [r3, #28]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d101      	bne.n	800d552 <dir_sdi+0xcc>
 800d54e:	2302      	movs	r3, #2
 800d550:	e010      	b.n	800d574 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	69da      	ldr	r2, [r3, #28]
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	0a5b      	lsrs	r3, r3, #9
 800d55a:	441a      	add	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d56c:	441a      	add	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3718      	adds	r7, #24
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	3320      	adds	r3, #32
 800d592:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	69db      	ldr	r3, [r3, #28]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d003      	beq.n	800d5a4 <dir_next+0x28>
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d5a2:	d301      	bcc.n	800d5a8 <dir_next+0x2c>
 800d5a4:	2304      	movs	r3, #4
 800d5a6:	e0aa      	b.n	800d6fe <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f040 8098 	bne.w	800d6e4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	69db      	ldr	r3, [r3, #28]
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10b      	bne.n	800d5de <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	095b      	lsrs	r3, r3, #5
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	8912      	ldrh	r2, [r2, #8]
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	f0c0 8088 	bcc.w	800d6e4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	61da      	str	r2, [r3, #28]
 800d5da:	2304      	movs	r3, #4
 800d5dc:	e08f      	b.n	800d6fe <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	0a5b      	lsrs	r3, r3, #9
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	8952      	ldrh	r2, [r2, #10]
 800d5e6:	3a01      	subs	r2, #1
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d17a      	bne.n	800d6e4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	699b      	ldr	r3, [r3, #24]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	f7ff fc83 	bl	800cf02 <get_fat>
 800d5fc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d801      	bhi.n	800d608 <dir_next+0x8c>
 800d604:	2302      	movs	r3, #2
 800d606:	e07a      	b.n	800d6fe <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60e:	d101      	bne.n	800d614 <dir_next+0x98>
 800d610:	2301      	movs	r3, #1
 800d612:	e074      	b.n	800d6fe <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	695b      	ldr	r3, [r3, #20]
 800d618:	697a      	ldr	r2, [r7, #20]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d358      	bcc.n	800d6d0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d104      	bne.n	800d62e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	61da      	str	r2, [r3, #28]
 800d62a:	2304      	movs	r3, #4
 800d62c:	e067      	b.n	800d6fe <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	4619      	mov	r1, r3
 800d636:	4610      	mov	r0, r2
 800d638:	f7ff fe59 	bl	800d2ee <create_chain>
 800d63c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <dir_next+0xcc>
 800d644:	2307      	movs	r3, #7
 800d646:	e05a      	b.n	800d6fe <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d101      	bne.n	800d652 <dir_next+0xd6>
 800d64e:	2302      	movs	r3, #2
 800d650:	e055      	b.n	800d6fe <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d658:	d101      	bne.n	800d65e <dir_next+0xe2>
 800d65a:	2301      	movs	r3, #1
 800d65c:	e04f      	b.n	800d6fe <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f7ff fb50 	bl	800cd04 <sync_window>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <dir_next+0xf2>
 800d66a:	2301      	movs	r3, #1
 800d66c:	e047      	b.n	800d6fe <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3330      	adds	r3, #48	@ 0x30
 800d672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d676:	2100      	movs	r1, #0
 800d678:	4618      	mov	r0, r3
 800d67a:	f7ff f97a 	bl	800c972 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d67e:	2300      	movs	r3, #0
 800d680:	613b      	str	r3, [r7, #16]
 800d682:	6979      	ldr	r1, [r7, #20]
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f7ff fc1d 	bl	800cec4 <clust2sect>
 800d68a:	4602      	mov	r2, r0
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d690:	e012      	b.n	800d6b8 <dir_next+0x13c>
						fs->wflag = 1;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2201      	movs	r2, #1
 800d696:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f7ff fb33 	bl	800cd04 <sync_window>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d001      	beq.n	800d6a8 <dir_next+0x12c>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e02a      	b.n	800d6fe <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	613b      	str	r3, [r7, #16]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b2:	1c5a      	adds	r2, r3, #1
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	895b      	ldrh	r3, [r3, #10]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d3e6      	bcc.n	800d692 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	1ad2      	subs	r2, r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d6d6:	6979      	ldr	r1, [r7, #20]
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f7ff fbf3 	bl	800cec4 <clust2sect>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6f6:	441a      	add	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b086      	sub	sp, #24
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
 800d70e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d716:	2100      	movs	r1, #0
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7ff feb4 	bl	800d486 <dir_sdi>
 800d71e:	4603      	mov	r3, r0
 800d720:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d722:	7dfb      	ldrb	r3, [r7, #23]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d12b      	bne.n	800d780 <dir_alloc+0x7a>
		n = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	69db      	ldr	r3, [r3, #28]
 800d730:	4619      	mov	r1, r3
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f7ff fb2a 	bl	800cd8c <move_window>
 800d738:	4603      	mov	r3, r0
 800d73a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d11d      	bne.n	800d77e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	2be5      	cmp	r3, #229	@ 0xe5
 800d74a:	d004      	beq.n	800d756 <dir_alloc+0x50>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d107      	bne.n	800d766 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	3301      	adds	r3, #1
 800d75a:	613b      	str	r3, [r7, #16]
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	429a      	cmp	r2, r3
 800d762:	d102      	bne.n	800d76a <dir_alloc+0x64>
 800d764:	e00c      	b.n	800d780 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d766:	2300      	movs	r3, #0
 800d768:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d76a:	2101      	movs	r1, #1
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7ff ff05 	bl	800d57c <dir_next>
 800d772:	4603      	mov	r3, r0
 800d774:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0d7      	beq.n	800d72c <dir_alloc+0x26>
 800d77c:	e000      	b.n	800d780 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d77e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d780:	7dfb      	ldrb	r3, [r7, #23]
 800d782:	2b04      	cmp	r3, #4
 800d784:	d101      	bne.n	800d78a <dir_alloc+0x84>
 800d786:	2307      	movs	r3, #7
 800d788:	75fb      	strb	r3, [r7, #23]
	return res;
 800d78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3718      	adds	r7, #24
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	331a      	adds	r3, #26
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7ff f842 	bl	800c82c <ld_word>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2b03      	cmp	r3, #3
 800d7b2:	d109      	bne.n	800d7c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	3314      	adds	r3, #20
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff f837 	bl	800c82c <ld_word>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	041b      	lsls	r3, r3, #16
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	60f8      	str	r0, [r7, #12]
 800d7da:	60b9      	str	r1, [r7, #8]
 800d7dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	331a      	adds	r3, #26
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	b292      	uxth	r2, r2
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff f85a 	bl	800c8a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	2b03      	cmp	r3, #3
 800d7f4:	d109      	bne.n	800d80a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	f103 0214 	add.w	r2, r3, #20
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	0c1b      	lsrs	r3, r3, #16
 800d800:	b29b      	uxth	r3, r3
 800d802:	4619      	mov	r1, r3
 800d804:	4610      	mov	r0, r2
 800d806:	f7ff f84c 	bl	800c8a2 <st_word>
	}
}
 800d80a:	bf00      	nop
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b086      	sub	sp, #24
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d820:	2100      	movs	r1, #0
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fe2f 	bl	800d486 <dir_sdi>
 800d828:	4603      	mov	r3, r0
 800d82a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d82c:	7dfb      	ldrb	r3, [r7, #23]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <dir_find+0x24>
 800d832:	7dfb      	ldrb	r3, [r7, #23]
 800d834:	e03e      	b.n	800d8b4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	4619      	mov	r1, r3
 800d83c:	6938      	ldr	r0, [r7, #16]
 800d83e:	f7ff faa5 	bl	800cd8c <move_window>
 800d842:	4603      	mov	r3, r0
 800d844:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d846:	7dfb      	ldrb	r3, [r7, #23]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d12f      	bne.n	800d8ac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a1b      	ldr	r3, [r3, #32]
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d854:	7bfb      	ldrb	r3, [r7, #15]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d102      	bne.n	800d860 <dir_find+0x4e>
 800d85a:	2304      	movs	r3, #4
 800d85c:	75fb      	strb	r3, [r7, #23]
 800d85e:	e028      	b.n	800d8b2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a1b      	ldr	r3, [r3, #32]
 800d864:	330b      	adds	r3, #11
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d86c:	b2da      	uxtb	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a1b      	ldr	r3, [r3, #32]
 800d876:	330b      	adds	r3, #11
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	f003 0308 	and.w	r3, r3, #8
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10a      	bne.n	800d898 <dir_find+0x86>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a18      	ldr	r0, [r3, #32]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	3324      	adds	r3, #36	@ 0x24
 800d88a:	220b      	movs	r2, #11
 800d88c:	4619      	mov	r1, r3
 800d88e:	f7ff f88b 	bl	800c9a8 <mem_cmp>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00b      	beq.n	800d8b0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d898:	2100      	movs	r1, #0
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7ff fe6e 	bl	800d57c <dir_next>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d8a4:	7dfb      	ldrb	r3, [r7, #23]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0c5      	beq.n	800d836 <dir_find+0x24>
 800d8aa:	e002      	b.n	800d8b2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d8ac:	bf00      	nop
 800d8ae:	e000      	b.n	800d8b2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d8b0:	bf00      	nop

	return res;
 800d8b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d8ca:	2101      	movs	r1, #1
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7ff ff1a 	bl	800d706 <dir_alloc>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d11c      	bne.n	800d916 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	69db      	ldr	r3, [r3, #28]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	68b8      	ldr	r0, [r7, #8]
 800d8e4:	f7ff fa52 	bl	800cd8c <move_window>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d111      	bne.n	800d916 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7ff f839 	bl	800c972 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6a18      	ldr	r0, [r3, #32]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3324      	adds	r3, #36	@ 0x24
 800d908:	220b      	movs	r2, #11
 800d90a:	4619      	mov	r1, r3
 800d90c:	f7ff f810 	bl	800c930 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	2201      	movs	r2, #1
 800d914:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d916:	7bfb      	ldrb	r3, [r7, #15]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	3324      	adds	r3, #36	@ 0x24
 800d934:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d936:	220b      	movs	r2, #11
 800d938:	2120      	movs	r1, #32
 800d93a:	68b8      	ldr	r0, [r7, #8]
 800d93c:	f7ff f819 	bl	800c972 <mem_set>
	si = i = 0; ni = 8;
 800d940:	2300      	movs	r3, #0
 800d942:	613b      	str	r3, [r7, #16]
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	61fb      	str	r3, [r7, #28]
 800d948:	2308      	movs	r3, #8
 800d94a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	61fa      	str	r2, [r7, #28]
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	4413      	add	r3, r2
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d95a:	7efb      	ldrb	r3, [r7, #27]
 800d95c:	2b20      	cmp	r3, #32
 800d95e:	d94e      	bls.n	800d9fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d960:	7efb      	ldrb	r3, [r7, #27]
 800d962:	2b2f      	cmp	r3, #47	@ 0x2f
 800d964:	d006      	beq.n	800d974 <create_name+0x54>
 800d966:	7efb      	ldrb	r3, [r7, #27]
 800d968:	2b5c      	cmp	r3, #92	@ 0x5c
 800d96a:	d110      	bne.n	800d98e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d96c:	e002      	b.n	800d974 <create_name+0x54>
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	3301      	adds	r3, #1
 800d972:	61fb      	str	r3, [r7, #28]
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	4413      	add	r3, r2
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d97e:	d0f6      	beq.n	800d96e <create_name+0x4e>
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	4413      	add	r3, r2
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b5c      	cmp	r3, #92	@ 0x5c
 800d98a:	d0f0      	beq.n	800d96e <create_name+0x4e>
			break;
 800d98c:	e038      	b.n	800da00 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d98e:	7efb      	ldrb	r3, [r7, #27]
 800d990:	2b2e      	cmp	r3, #46	@ 0x2e
 800d992:	d003      	beq.n	800d99c <create_name+0x7c>
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d30c      	bcc.n	800d9b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2b0b      	cmp	r3, #11
 800d9a0:	d002      	beq.n	800d9a8 <create_name+0x88>
 800d9a2:	7efb      	ldrb	r3, [r7, #27]
 800d9a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9a6:	d001      	beq.n	800d9ac <create_name+0x8c>
 800d9a8:	2306      	movs	r3, #6
 800d9aa:	e044      	b.n	800da36 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d9ac:	2308      	movs	r3, #8
 800d9ae:	613b      	str	r3, [r7, #16]
 800d9b0:	230b      	movs	r3, #11
 800d9b2:	617b      	str	r3, [r7, #20]
			continue;
 800d9b4:	e022      	b.n	800d9fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d9b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	da04      	bge.n	800d9c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d9be:	7efb      	ldrb	r3, [r7, #27]
 800d9c0:	3b80      	subs	r3, #128	@ 0x80
 800d9c2:	4a1f      	ldr	r2, [pc, #124]	@ (800da40 <create_name+0x120>)
 800d9c4:	5cd3      	ldrb	r3, [r2, r3]
 800d9c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d9c8:	7efb      	ldrb	r3, [r7, #27]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	481d      	ldr	r0, [pc, #116]	@ (800da44 <create_name+0x124>)
 800d9ce:	f7ff f812 	bl	800c9f6 <chk_chr>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d001      	beq.n	800d9dc <create_name+0xbc>
 800d9d8:	2306      	movs	r3, #6
 800d9da:	e02c      	b.n	800da36 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d9dc:	7efb      	ldrb	r3, [r7, #27]
 800d9de:	2b60      	cmp	r3, #96	@ 0x60
 800d9e0:	d905      	bls.n	800d9ee <create_name+0xce>
 800d9e2:	7efb      	ldrb	r3, [r7, #27]
 800d9e4:	2b7a      	cmp	r3, #122	@ 0x7a
 800d9e6:	d802      	bhi.n	800d9ee <create_name+0xce>
 800d9e8:	7efb      	ldrb	r3, [r7, #27]
 800d9ea:	3b20      	subs	r3, #32
 800d9ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	613a      	str	r2, [r7, #16]
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	7efa      	ldrb	r2, [r7, #27]
 800d9fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d9fc:	e7a6      	b.n	800d94c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d9fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	441a      	add	r2, r3
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <create_name+0xf4>
 800da10:	2306      	movs	r3, #6
 800da12:	e010      	b.n	800da36 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	2be5      	cmp	r3, #229	@ 0xe5
 800da1a:	d102      	bne.n	800da22 <create_name+0x102>
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	2205      	movs	r2, #5
 800da20:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800da22:	7efb      	ldrb	r3, [r7, #27]
 800da24:	2b20      	cmp	r3, #32
 800da26:	d801      	bhi.n	800da2c <create_name+0x10c>
 800da28:	2204      	movs	r2, #4
 800da2a:	e000      	b.n	800da2e <create_name+0x10e>
 800da2c:	2200      	movs	r2, #0
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	330b      	adds	r3, #11
 800da32:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800da34:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800da36:	4618      	mov	r0, r3
 800da38:	3720      	adds	r7, #32
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	08017a58 	.word	0x08017a58
 800da44:	0801011c 	.word	0x0801011c

0800da48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800da5c:	e002      	b.n	800da64 <follow_path+0x1c>
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	3301      	adds	r3, #1
 800da62:	603b      	str	r3, [r7, #0]
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b2f      	cmp	r3, #47	@ 0x2f
 800da6a:	d0f8      	beq.n	800da5e <follow_path+0x16>
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	2b5c      	cmp	r3, #92	@ 0x5c
 800da72:	d0f4      	beq.n	800da5e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	2200      	movs	r2, #0
 800da78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	2b1f      	cmp	r3, #31
 800da80:	d80a      	bhi.n	800da98 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2280      	movs	r2, #128	@ 0x80
 800da86:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800da8a:	2100      	movs	r1, #0
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7ff fcfa 	bl	800d486 <dir_sdi>
 800da92:	4603      	mov	r3, r0
 800da94:	75fb      	strb	r3, [r7, #23]
 800da96:	e043      	b.n	800db20 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da98:	463b      	mov	r3, r7
 800da9a:	4619      	mov	r1, r3
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ff3f 	bl	800d920 <create_name>
 800daa2:	4603      	mov	r3, r0
 800daa4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d134      	bne.n	800db16 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff feb0 	bl	800d812 <dir_find>
 800dab2:	4603      	mov	r3, r0
 800dab4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dabc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00a      	beq.n	800dada <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dac4:	7dfb      	ldrb	r3, [r7, #23]
 800dac6:	2b04      	cmp	r3, #4
 800dac8:	d127      	bne.n	800db1a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800daca:	7afb      	ldrb	r3, [r7, #11]
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d122      	bne.n	800db1a <follow_path+0xd2>
 800dad4:	2305      	movs	r3, #5
 800dad6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dad8:	e01f      	b.n	800db1a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dada:	7afb      	ldrb	r3, [r7, #11]
 800dadc:	f003 0304 	and.w	r3, r3, #4
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d11c      	bne.n	800db1e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	799b      	ldrb	r3, [r3, #6]
 800dae8:	f003 0310 	and.w	r3, r3, #16
 800daec:	2b00      	cmp	r3, #0
 800daee:	d102      	bne.n	800daf6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800daf0:	2305      	movs	r3, #5
 800daf2:	75fb      	strb	r3, [r7, #23]
 800daf4:	e014      	b.n	800db20 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db04:	4413      	add	r3, r2
 800db06:	4619      	mov	r1, r3
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7ff fe43 	bl	800d794 <ld_clust>
 800db0e:	4602      	mov	r2, r0
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db14:	e7c0      	b.n	800da98 <follow_path+0x50>
			if (res != FR_OK) break;
 800db16:	bf00      	nop
 800db18:	e002      	b.n	800db20 <follow_path+0xd8>
				break;
 800db1a:	bf00      	nop
 800db1c:	e000      	b.n	800db20 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db1e:	bf00      	nop
			}
		}
	}

	return res;
 800db20:	7dfb      	ldrb	r3, [r7, #23]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800db2a:	b480      	push	{r7}
 800db2c:	b087      	sub	sp, #28
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800db32:	f04f 33ff 	mov.w	r3, #4294967295
 800db36:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d031      	beq.n	800dba4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	617b      	str	r3, [r7, #20]
 800db46:	e002      	b.n	800db4e <get_ldnumber+0x24>
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	3301      	adds	r3, #1
 800db4c:	617b      	str	r3, [r7, #20]
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2b20      	cmp	r3, #32
 800db54:	d903      	bls.n	800db5e <get_ldnumber+0x34>
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b3a      	cmp	r3, #58	@ 0x3a
 800db5c:	d1f4      	bne.n	800db48 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	2b3a      	cmp	r3, #58	@ 0x3a
 800db64:	d11c      	bne.n	800dba0 <get_ldnumber+0x76>
			tp = *path;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	60fa      	str	r2, [r7, #12]
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	3b30      	subs	r3, #48	@ 0x30
 800db76:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2b09      	cmp	r3, #9
 800db7c:	d80e      	bhi.n	800db9c <get_ldnumber+0x72>
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	429a      	cmp	r2, r3
 800db84:	d10a      	bne.n	800db9c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d107      	bne.n	800db9c <get_ldnumber+0x72>
					vol = (int)i;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	3301      	adds	r3, #1
 800db94:	617b      	str	r3, [r7, #20]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	e002      	b.n	800dba6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dba0:	2300      	movs	r3, #0
 800dba2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dba4:	693b      	ldr	r3, [r7, #16]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	371c      	adds	r7, #28
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
	...

0800dbb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	70da      	strb	r2, [r3, #3]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbca:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff f8dc 	bl	800cd8c <move_window>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d001      	beq.n	800dbde <check_fs+0x2a>
 800dbda:	2304      	movs	r3, #4
 800dbdc:	e038      	b.n	800dc50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	3330      	adds	r3, #48	@ 0x30
 800dbe2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fe fe20 	bl	800c82c <ld_word>
 800dbec:	4603      	mov	r3, r0
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d001      	beq.n	800dbfc <check_fs+0x48>
 800dbf8:	2303      	movs	r3, #3
 800dbfa:	e029      	b.n	800dc50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc02:	2be9      	cmp	r3, #233	@ 0xe9
 800dc04:	d009      	beq.n	800dc1a <check_fs+0x66>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc0c:	2beb      	cmp	r3, #235	@ 0xeb
 800dc0e:	d11e      	bne.n	800dc4e <check_fs+0x9a>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800dc16:	2b90      	cmp	r3, #144	@ 0x90
 800dc18:	d119      	bne.n	800dc4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	3330      	adds	r3, #48	@ 0x30
 800dc1e:	3336      	adds	r3, #54	@ 0x36
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7fe fe1b 	bl	800c85c <ld_dword>
 800dc26:	4603      	mov	r3, r0
 800dc28:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dc2c:	4a0a      	ldr	r2, [pc, #40]	@ (800dc58 <check_fs+0xa4>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d101      	bne.n	800dc36 <check_fs+0x82>
 800dc32:	2300      	movs	r3, #0
 800dc34:	e00c      	b.n	800dc50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	3330      	adds	r3, #48	@ 0x30
 800dc3a:	3352      	adds	r3, #82	@ 0x52
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7fe fe0d 	bl	800c85c <ld_dword>
 800dc42:	4603      	mov	r3, r0
 800dc44:	4a05      	ldr	r2, [pc, #20]	@ (800dc5c <check_fs+0xa8>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d101      	bne.n	800dc4e <check_fs+0x9a>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	e000      	b.n	800dc50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dc4e:	2302      	movs	r3, #2
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	00544146 	.word	0x00544146
 800dc5c:	33544146 	.word	0x33544146

0800dc60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b096      	sub	sp, #88	@ 0x58
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	2200      	movs	r2, #0
 800dc72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f7ff ff58 	bl	800db2a <get_ldnumber>
 800dc7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	da01      	bge.n	800dc86 <find_volume+0x26>
 800dc82:	230b      	movs	r3, #11
 800dc84:	e22d      	b.n	800e0e2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dc86:	4aa1      	ldr	r2, [pc, #644]	@ (800df0c <find_volume+0x2ac>)
 800dc88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc8e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <find_volume+0x3a>
 800dc96:	230c      	movs	r3, #12
 800dc98:	e223      	b.n	800e0e2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	f023 0301 	bic.w	r3, r3, #1
 800dca6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d01a      	beq.n	800dce6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb2:	785b      	ldrb	r3, [r3, #1]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fe fd19 	bl	800c6ec <disk_status>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dcc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcc4:	f003 0301 	and.w	r3, r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10c      	bne.n	800dce6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dccc:	79fb      	ldrb	r3, [r7, #7]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <find_volume+0x82>
 800dcd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dcd6:	f003 0304 	and.w	r3, r3, #4
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dcde:	230a      	movs	r3, #10
 800dce0:	e1ff      	b.n	800e0e2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800dce2:	2300      	movs	r3, #0
 800dce4:	e1fd      	b.n	800e0e2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce8:	2200      	movs	r2, #0
 800dcea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dcec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf6:	785b      	ldrb	r3, [r3, #1]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe fd11 	bl	800c720 <disk_initialize>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dd04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d001      	beq.n	800dd14 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dd10:	2303      	movs	r3, #3
 800dd12:	e1e6      	b.n	800e0e2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dd14:	79fb      	ldrb	r3, [r7, #7]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d007      	beq.n	800dd2a <find_volume+0xca>
 800dd1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd1e:	f003 0304 	and.w	r3, r3, #4
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dd26:	230a      	movs	r3, #10
 800dd28:	e1db      	b.n	800e0e2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dd2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dd30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd32:	f7ff ff3f 	bl	800dbb4 <check_fs>
 800dd36:	4603      	mov	r3, r0
 800dd38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dd3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d149      	bne.n	800ddd8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd44:	2300      	movs	r3, #0
 800dd46:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd48:	e01e      	b.n	800dd88 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd52:	011b      	lsls	r3, r3, #4
 800dd54:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dd58:	4413      	add	r3, r2
 800dd5a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5e:	3304      	adds	r3, #4
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d006      	beq.n	800dd74 <find_volume+0x114>
 800dd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd68:	3308      	adds	r3, #8
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fe fd76 	bl	800c85c <ld_dword>
 800dd70:	4602      	mov	r2, r0
 800dd72:	e000      	b.n	800dd76 <find_volume+0x116>
 800dd74:	2200      	movs	r2, #0
 800dd76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	3358      	adds	r3, #88	@ 0x58
 800dd7c:	443b      	add	r3, r7
 800dd7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd84:	3301      	adds	r3, #1
 800dd86:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	d9dd      	bls.n	800dd4a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dd8e:	2300      	movs	r3, #0
 800dd90:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dd92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <find_volume+0x13e>
 800dd98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dd9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	3358      	adds	r3, #88	@ 0x58
 800dda4:	443b      	add	r3, r7
 800dda6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ddaa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ddac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d005      	beq.n	800ddbe <find_volume+0x15e>
 800ddb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ddb4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ddb6:	f7ff fefd 	bl	800dbb4 <check_fs>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	e000      	b.n	800ddc0 <find_volume+0x160>
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ddc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d905      	bls.n	800ddd8 <find_volume+0x178>
 800ddcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddce:	3301      	adds	r3, #1
 800ddd0:	643b      	str	r3, [r7, #64]	@ 0x40
 800ddd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddd4:	2b03      	cmp	r3, #3
 800ddd6:	d9e2      	bls.n	800dd9e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ddd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dddc:	2b04      	cmp	r3, #4
 800ddde:	d101      	bne.n	800dde4 <find_volume+0x184>
 800dde0:	2301      	movs	r3, #1
 800dde2:	e17e      	b.n	800e0e2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dde4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d901      	bls.n	800ddf0 <find_volume+0x190>
 800ddec:	230d      	movs	r3, #13
 800ddee:	e178      	b.n	800e0e2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ddf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf2:	3330      	adds	r3, #48	@ 0x30
 800ddf4:	330b      	adds	r3, #11
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fe fd18 	bl	800c82c <ld_word>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de02:	d001      	beq.n	800de08 <find_volume+0x1a8>
 800de04:	230d      	movs	r3, #13
 800de06:	e16c      	b.n	800e0e2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800de08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0a:	3330      	adds	r3, #48	@ 0x30
 800de0c:	3316      	adds	r3, #22
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fd0c 	bl	800c82c <ld_word>
 800de14:	4603      	mov	r3, r0
 800de16:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800de18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d106      	bne.n	800de2c <find_volume+0x1cc>
 800de1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de20:	3330      	adds	r3, #48	@ 0x30
 800de22:	3324      	adds	r3, #36	@ 0x24
 800de24:	4618      	mov	r0, r3
 800de26:	f7fe fd19 	bl	800c85c <ld_dword>
 800de2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800de2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de30:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800de32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de34:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800de38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800de3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3e:	789b      	ldrb	r3, [r3, #2]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d005      	beq.n	800de50 <find_volume+0x1f0>
 800de44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de46:	789b      	ldrb	r3, [r3, #2]
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d001      	beq.n	800de50 <find_volume+0x1f0>
 800de4c:	230d      	movs	r3, #13
 800de4e:	e148      	b.n	800e0e2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800de50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de52:	789b      	ldrb	r3, [r3, #2]
 800de54:	461a      	mov	r2, r3
 800de56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de58:	fb02 f303 	mul.w	r3, r2, r3
 800de5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800de5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de64:	461a      	mov	r2, r3
 800de66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800de6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6c:	895b      	ldrh	r3, [r3, #10]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d008      	beq.n	800de84 <find_volume+0x224>
 800de72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de74:	895b      	ldrh	r3, [r3, #10]
 800de76:	461a      	mov	r2, r3
 800de78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de7a:	895b      	ldrh	r3, [r3, #10]
 800de7c:	3b01      	subs	r3, #1
 800de7e:	4013      	ands	r3, r2
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <find_volume+0x228>
 800de84:	230d      	movs	r3, #13
 800de86:	e12c      	b.n	800e0e2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800de88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8a:	3330      	adds	r3, #48	@ 0x30
 800de8c:	3311      	adds	r3, #17
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fccc 	bl	800c82c <ld_word>
 800de94:	4603      	mov	r3, r0
 800de96:	461a      	mov	r2, r3
 800de98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800de9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de9e:	891b      	ldrh	r3, [r3, #8]
 800dea0:	f003 030f 	and.w	r3, r3, #15
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <find_volume+0x24e>
 800deaa:	230d      	movs	r3, #13
 800deac:	e119      	b.n	800e0e2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800deae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deb0:	3330      	adds	r3, #48	@ 0x30
 800deb2:	3313      	adds	r3, #19
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fe fcb9 	bl	800c82c <ld_word>
 800deba:	4603      	mov	r3, r0
 800debc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800debe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d106      	bne.n	800ded2 <find_volume+0x272>
 800dec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec6:	3330      	adds	r3, #48	@ 0x30
 800dec8:	3320      	adds	r3, #32
 800deca:	4618      	mov	r0, r3
 800decc:	f7fe fcc6 	bl	800c85c <ld_dword>
 800ded0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ded2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded4:	3330      	adds	r3, #48	@ 0x30
 800ded6:	330e      	adds	r3, #14
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fe fca7 	bl	800c82c <ld_word>
 800dede:	4603      	mov	r3, r0
 800dee0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dee2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <find_volume+0x28c>
 800dee8:	230d      	movs	r3, #13
 800deea:	e0fa      	b.n	800e0e2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800deec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800deee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800def0:	4413      	add	r3, r2
 800def2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800def4:	8912      	ldrh	r2, [r2, #8]
 800def6:	0912      	lsrs	r2, r2, #4
 800def8:	b292      	uxth	r2, r2
 800defa:	4413      	add	r3, r2
 800defc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800defe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df02:	429a      	cmp	r2, r3
 800df04:	d204      	bcs.n	800df10 <find_volume+0x2b0>
 800df06:	230d      	movs	r3, #13
 800df08:	e0eb      	b.n	800e0e2 <find_volume+0x482>
 800df0a:	bf00      	nop
 800df0c:	20000410 	.word	0x20000410
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800df10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df18:	8952      	ldrh	r2, [r2, #10]
 800df1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800df1e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800df20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <find_volume+0x2ca>
 800df26:	230d      	movs	r3, #13
 800df28:	e0db      	b.n	800e0e2 <find_volume+0x482>
		fmt = FS_FAT32;
 800df2a:	2303      	movs	r3, #3
 800df2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800df30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df32:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800df36:	4293      	cmp	r3, r2
 800df38:	d802      	bhi.n	800df40 <find_volume+0x2e0>
 800df3a:	2302      	movs	r3, #2
 800df3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800df40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df42:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800df46:	4293      	cmp	r3, r2
 800df48:	d802      	bhi.n	800df50 <find_volume+0x2f0>
 800df4a:	2301      	movs	r3, #1
 800df4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800df50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df52:	1c9a      	adds	r2, r3, #2
 800df54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df56:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800df58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df5c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800df5e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800df60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df62:	441a      	add	r2, r3
 800df64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df66:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800df68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df6c:	441a      	add	r2, r3
 800df6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df70:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800df72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df76:	2b03      	cmp	r3, #3
 800df78:	d11e      	bne.n	800dfb8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800df7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df7c:	3330      	adds	r3, #48	@ 0x30
 800df7e:	332a      	adds	r3, #42	@ 0x2a
 800df80:	4618      	mov	r0, r3
 800df82:	f7fe fc53 	bl	800c82c <ld_word>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <find_volume+0x330>
 800df8c:	230d      	movs	r3, #13
 800df8e:	e0a8      	b.n	800e0e2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800df90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df92:	891b      	ldrh	r3, [r3, #8]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <find_volume+0x33c>
 800df98:	230d      	movs	r3, #13
 800df9a:	e0a2      	b.n	800e0e2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800df9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df9e:	3330      	adds	r3, #48	@ 0x30
 800dfa0:	332c      	adds	r3, #44	@ 0x2c
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe fc5a 	bl	800c85c <ld_dword>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfac:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb0:	695b      	ldr	r3, [r3, #20]
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfb6:	e01f      	b.n	800dff8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfba:	891b      	ldrh	r3, [r3, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d101      	bne.n	800dfc4 <find_volume+0x364>
 800dfc0:	230d      	movs	r3, #13
 800dfc2:	e08e      	b.n	800e0e2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc6:	6a1a      	ldr	r2, [r3, #32]
 800dfc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfca:	441a      	add	r2, r3
 800dfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfce:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dfd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d103      	bne.n	800dfe0 <find_volume+0x380>
 800dfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	e00a      	b.n	800dff6 <find_volume+0x396>
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe2:	695a      	ldr	r2, [r3, #20]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	005b      	lsls	r3, r3, #1
 800dfe8:	4413      	add	r3, r2
 800dfea:	085a      	lsrs	r2, r3, #1
 800dfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfee:	695b      	ldr	r3, [r3, #20]
 800dff0:	f003 0301 	and.w	r3, r3, #1
 800dff4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dff6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffa:	699a      	ldr	r2, [r3, #24]
 800dffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dffe:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e002:	0a5b      	lsrs	r3, r3, #9
 800e004:	429a      	cmp	r2, r3
 800e006:	d201      	bcs.n	800e00c <find_volume+0x3ac>
 800e008:	230d      	movs	r3, #13
 800e00a:	e06a      	b.n	800e0e2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00e:	f04f 32ff 	mov.w	r2, #4294967295
 800e012:	611a      	str	r2, [r3, #16]
 800e014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e016:	691a      	ldr	r2, [r3, #16]
 800e018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01e:	2280      	movs	r2, #128	@ 0x80
 800e020:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e022:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e026:	2b03      	cmp	r3, #3
 800e028:	d149      	bne.n	800e0be <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02c:	3330      	adds	r3, #48	@ 0x30
 800e02e:	3330      	adds	r3, #48	@ 0x30
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe fbfb 	bl	800c82c <ld_word>
 800e036:	4603      	mov	r3, r0
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d140      	bne.n	800e0be <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e03e:	3301      	adds	r3, #1
 800e040:	4619      	mov	r1, r3
 800e042:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e044:	f7fe fea2 	bl	800cd8c <move_window>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d137      	bne.n	800e0be <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e050:	2200      	movs	r2, #0
 800e052:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e056:	3330      	adds	r3, #48	@ 0x30
 800e058:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe fbe5 	bl	800c82c <ld_word>
 800e062:	4603      	mov	r3, r0
 800e064:	461a      	mov	r2, r3
 800e066:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d127      	bne.n	800e0be <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e070:	3330      	adds	r3, #48	@ 0x30
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe fbf2 	bl	800c85c <ld_dword>
 800e078:	4603      	mov	r3, r0
 800e07a:	4a1c      	ldr	r2, [pc, #112]	@ (800e0ec <find_volume+0x48c>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d11e      	bne.n	800e0be <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e082:	3330      	adds	r3, #48	@ 0x30
 800e084:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fe fbe7 	bl	800c85c <ld_dword>
 800e08e:	4603      	mov	r3, r0
 800e090:	4a17      	ldr	r2, [pc, #92]	@ (800e0f0 <find_volume+0x490>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d113      	bne.n	800e0be <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e098:	3330      	adds	r3, #48	@ 0x30
 800e09a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe fbdc 	bl	800c85c <ld_dword>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ac:	3330      	adds	r3, #48	@ 0x30
 800e0ae:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fe fbd2 	bl	800c85c <ld_dword>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0bc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e0c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f4 <find_volume+0x494>)
 800e0c8:	881b      	ldrh	r3, [r3, #0]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	4b09      	ldr	r3, [pc, #36]	@ (800e0f4 <find_volume+0x494>)
 800e0d0:	801a      	strh	r2, [r3, #0]
 800e0d2:	4b08      	ldr	r3, [pc, #32]	@ (800e0f4 <find_volume+0x494>)
 800e0d4:	881a      	ldrh	r2, [r3, #0]
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e0da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e0dc:	f7fe fdee 	bl	800ccbc <clear_lock>
#endif
	return FR_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3758      	adds	r7, #88	@ 0x58
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	41615252 	.word	0x41615252
 800e0f0:	61417272 	.word	0x61417272
 800e0f4:	20000414 	.word	0x20000414

0800e0f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e102:	2309      	movs	r3, #9
 800e104:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d01c      	beq.n	800e146 <validate+0x4e>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d018      	beq.n	800e146 <validate+0x4e>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d013      	beq.n	800e146 <validate+0x4e>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	889a      	ldrh	r2, [r3, #4]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	88db      	ldrh	r3, [r3, #6]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d10c      	bne.n	800e146 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	785b      	ldrb	r3, [r3, #1]
 800e132:	4618      	mov	r0, r3
 800e134:	f7fe fada 	bl	800c6ec <disk_status>
 800e138:	4603      	mov	r3, r0
 800e13a:	f003 0301 	and.w	r3, r3, #1
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <validate+0x4e>
			res = FR_OK;
 800e142:	2300      	movs	r3, #0
 800e144:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d102      	bne.n	800e152 <validate+0x5a>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	e000      	b.n	800e154 <validate+0x5c>
 800e152:	2300      	movs	r3, #0
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	6013      	str	r3, [r2, #0]
	return res;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
	...

0800e164 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e176:	f107 0310 	add.w	r3, r7, #16
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7ff fcd5 	bl	800db2a <get_ldnumber>
 800e180:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	2b00      	cmp	r3, #0
 800e186:	da01      	bge.n	800e18c <f_mount+0x28>
 800e188:	230b      	movs	r3, #11
 800e18a:	e02b      	b.n	800e1e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e18c:	4a17      	ldr	r2, [pc, #92]	@ (800e1ec <f_mount+0x88>)
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e194:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d005      	beq.n	800e1a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e19c:	69b8      	ldr	r0, [r7, #24]
 800e19e:	f7fe fd8d 	bl	800ccbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d002      	beq.n	800e1b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	490d      	ldr	r1, [pc, #52]	@ (800e1ec <f_mount+0x88>)
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <f_mount+0x66>
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d001      	beq.n	800e1ce <f_mount+0x6a>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	e00a      	b.n	800e1e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e1ce:	f107 010c 	add.w	r1, r7, #12
 800e1d2:	f107 0308 	add.w	r3, r7, #8
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff fd41 	bl	800dc60 <find_volume>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3720      	adds	r7, #32
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20000410 	.word	0x20000410

0800e1f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b098      	sub	sp, #96	@ 0x60
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <f_open+0x18>
 800e204:	2309      	movs	r3, #9
 800e206:	e1a9      	b.n	800e55c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e20e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e210:	79fa      	ldrb	r2, [r7, #7]
 800e212:	f107 0110 	add.w	r1, r7, #16
 800e216:	f107 0308 	add.w	r3, r7, #8
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff fd20 	bl	800dc60 <find_volume>
 800e220:	4603      	mov	r3, r0
 800e222:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e226:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f040 818d 	bne.w	800e54a <f_open+0x35a>
		dj.obj.fs = fs;
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	f107 0314 	add.w	r3, r7, #20
 800e23a:	4611      	mov	r1, r2
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7ff fc03 	bl	800da48 <follow_path>
 800e242:	4603      	mov	r3, r0
 800e244:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e248:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d118      	bne.n	800e282 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e250:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e254:	b25b      	sxtb	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	da03      	bge.n	800e262 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e25a:	2306      	movs	r3, #6
 800e25c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e260:	e00f      	b.n	800e282 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	2b01      	cmp	r3, #1
 800e266:	bf8c      	ite	hi
 800e268:	2301      	movhi	r3, #1
 800e26a:	2300      	movls	r3, #0
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	461a      	mov	r2, r3
 800e270:	f107 0314 	add.w	r3, r7, #20
 800e274:	4611      	mov	r1, r2
 800e276:	4618      	mov	r0, r3
 800e278:	f7fe fbd8 	bl	800ca2c <chk_lock>
 800e27c:	4603      	mov	r3, r0
 800e27e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e282:	79fb      	ldrb	r3, [r7, #7]
 800e284:	f003 031c 	and.w	r3, r3, #28
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d07f      	beq.n	800e38c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e28c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e290:	2b00      	cmp	r3, #0
 800e292:	d017      	beq.n	800e2c4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e294:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e298:	2b04      	cmp	r3, #4
 800e29a:	d10e      	bne.n	800e2ba <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e29c:	f7fe fc22 	bl	800cae4 <enq_lock>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d006      	beq.n	800e2b4 <f_open+0xc4>
 800e2a6:	f107 0314 	add.w	r3, r7, #20
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff fb06 	bl	800d8bc <dir_register>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	e000      	b.n	800e2b6 <f_open+0xc6>
 800e2b4:	2312      	movs	r3, #18
 800e2b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	f043 0308 	orr.w	r3, r3, #8
 800e2c0:	71fb      	strb	r3, [r7, #7]
 800e2c2:	e010      	b.n	800e2e6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e2c4:	7ebb      	ldrb	r3, [r7, #26]
 800e2c6:	f003 0311 	and.w	r3, r3, #17
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d003      	beq.n	800e2d6 <f_open+0xe6>
					res = FR_DENIED;
 800e2ce:	2307      	movs	r3, #7
 800e2d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e2d4:	e007      	b.n	800e2e6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e2d6:	79fb      	ldrb	r3, [r7, #7]
 800e2d8:	f003 0304 	and.w	r3, r3, #4
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <f_open+0xf6>
 800e2e0:	2308      	movs	r3, #8
 800e2e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e2e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d168      	bne.n	800e3c0 <f_open+0x1d0>
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	f003 0308 	and.w	r3, r3, #8
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d063      	beq.n	800e3c0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e2f8:	f7fc f9c8 	bl	800a68c <get_fattime>
 800e2fc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e300:	330e      	adds	r3, #14
 800e302:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe fae7 	bl	800c8d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e30a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e30c:	3316      	adds	r3, #22
 800e30e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e310:	4618      	mov	r0, r3
 800e312:	f7fe fae1 	bl	800c8d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e318:	330b      	adds	r3, #11
 800e31a:	2220      	movs	r2, #32
 800e31c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e322:	4611      	mov	r1, r2
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff fa35 	bl	800d794 <ld_clust>
 800e32a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e330:	2200      	movs	r2, #0
 800e332:	4618      	mov	r0, r3
 800e334:	f7ff fa4d 	bl	800d7d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e33a:	331c      	adds	r3, #28
 800e33c:	2100      	movs	r1, #0
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fe faca 	bl	800c8d8 <st_dword>
					fs->wflag = 1;
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	2201      	movs	r2, #1
 800e348:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e34a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d037      	beq.n	800e3c0 <f_open+0x1d0>
						dw = fs->winsect;
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e354:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e356:	f107 0314 	add.w	r3, r7, #20
 800e35a:	2200      	movs	r2, #0
 800e35c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fe ff60 	bl	800d224 <remove_chain>
 800e364:	4603      	mov	r3, r0
 800e366:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e36a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d126      	bne.n	800e3c0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe fd08 	bl	800cd8c <move_window>
 800e37c:	4603      	mov	r3, r0
 800e37e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e386:	3a01      	subs	r2, #1
 800e388:	60da      	str	r2, [r3, #12]
 800e38a:	e019      	b.n	800e3c0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e38c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e390:	2b00      	cmp	r3, #0
 800e392:	d115      	bne.n	800e3c0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e394:	7ebb      	ldrb	r3, [r7, #26]
 800e396:	f003 0310 	and.w	r3, r3, #16
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d003      	beq.n	800e3a6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e39e:	2304      	movs	r3, #4
 800e3a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e3a4:	e00c      	b.n	800e3c0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e3a6:	79fb      	ldrb	r3, [r7, #7]
 800e3a8:	f003 0302 	and.w	r3, r3, #2
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d007      	beq.n	800e3c0 <f_open+0x1d0>
 800e3b0:	7ebb      	ldrb	r3, [r7, #26]
 800e3b2:	f003 0301 	and.w	r3, r3, #1
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d002      	beq.n	800e3c0 <f_open+0x1d0>
						res = FR_DENIED;
 800e3ba:	2307      	movs	r3, #7
 800e3bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e3c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d126      	bne.n	800e416 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e3c8:	79fb      	ldrb	r3, [r7, #7]
 800e3ca:	f003 0308 	and.w	r3, r3, #8
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e3d2:	79fb      	ldrb	r3, [r7, #7]
 800e3d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e3e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3e8:	79fb      	ldrb	r3, [r7, #7]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	bf8c      	ite	hi
 800e3ee:	2301      	movhi	r3, #1
 800e3f0:	2300      	movls	r3, #0
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	f107 0314 	add.w	r3, r7, #20
 800e3fa:	4611      	mov	r1, r2
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fe fb93 	bl	800cb28 <inc_lock>
 800e402:	4602      	mov	r2, r0
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d102      	bne.n	800e416 <f_open+0x226>
 800e410:	2302      	movs	r3, #2
 800e412:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e416:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f040 8095 	bne.w	800e54a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e424:	4611      	mov	r1, r2
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff f9b4 	bl	800d794 <ld_clust>
 800e42c:	4602      	mov	r2, r0
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e434:	331c      	adds	r3, #28
 800e436:	4618      	mov	r0, r3
 800e438:	f7fe fa10 	bl	800c85c <ld_dword>
 800e43c:	4602      	mov	r2, r0
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2200      	movs	r2, #0
 800e446:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	88da      	ldrh	r2, [r3, #6]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	79fa      	ldrb	r2, [r7, #7]
 800e45a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2200      	movs	r2, #0
 800e46c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3330      	adds	r3, #48	@ 0x30
 800e472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e476:	2100      	movs	r1, #0
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fe fa7a 	bl	800c972 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e47e:	79fb      	ldrb	r3, [r7, #7]
 800e480:	f003 0320 	and.w	r3, r3, #32
 800e484:	2b00      	cmp	r3, #0
 800e486:	d060      	beq.n	800e54a <f_open+0x35a>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d05c      	beq.n	800e54a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	68da      	ldr	r2, [r3, #12]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	895b      	ldrh	r3, [r3, #10]
 800e49c:	025b      	lsls	r3, r3, #9
 800e49e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4ac:	e016      	b.n	800e4dc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fe fd25 	bl	800cf02 <get_fat>
 800e4b8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e4ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d802      	bhi.n	800e4c6 <f_open+0x2d6>
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e4c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4cc:	d102      	bne.n	800e4d4 <f_open+0x2e4>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e4d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e4d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d103      	bne.n	800e4ec <f_open+0x2fc>
 800e4e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e4e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d8e0      	bhi.n	800e4ae <f_open+0x2be>
				}
				fp->clust = clst;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e4f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d127      	bne.n	800e54a <f_open+0x35a>
 800e4fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e500:	2b00      	cmp	r3, #0
 800e502:	d022      	beq.n	800e54a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fcdb 	bl	800cec4 <clust2sect>
 800e50e:	6478      	str	r0, [r7, #68]	@ 0x44
 800e510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e512:	2b00      	cmp	r3, #0
 800e514:	d103      	bne.n	800e51e <f_open+0x32e>
						res = FR_INT_ERR;
 800e516:	2302      	movs	r3, #2
 800e518:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e51c:	e015      	b.n	800e54a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e520:	0a5a      	lsrs	r2, r3, #9
 800e522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e524:	441a      	add	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	7858      	ldrb	r0, [r3, #1]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6a1a      	ldr	r2, [r3, #32]
 800e538:	2301      	movs	r3, #1
 800e53a:	f7fe f919 	bl	800c770 <disk_read>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d002      	beq.n	800e54a <f_open+0x35a>
 800e544:	2301      	movs	r3, #1
 800e546:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e54a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d002      	beq.n	800e558 <f_open+0x368>
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2200      	movs	r2, #0
 800e556:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e558:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3760      	adds	r7, #96	@ 0x60
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b08e      	sub	sp, #56	@ 0x38
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
 800e570:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2200      	movs	r2, #0
 800e57a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f107 0214 	add.w	r2, r7, #20
 800e582:	4611      	mov	r1, r2
 800e584:	4618      	mov	r0, r3
 800e586:	f7ff fdb7 	bl	800e0f8 <validate>
 800e58a:	4603      	mov	r3, r0
 800e58c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e590:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e594:	2b00      	cmp	r3, #0
 800e596:	d107      	bne.n	800e5a8 <f_read+0x44>
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	7d5b      	ldrb	r3, [r3, #21]
 800e59c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e5a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d002      	beq.n	800e5ae <f_read+0x4a>
 800e5a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e5ac:	e115      	b.n	800e7da <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	7d1b      	ldrb	r3, [r3, #20]
 800e5b2:	f003 0301 	and.w	r3, r3, #1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <f_read+0x5a>
 800e5ba:	2307      	movs	r3, #7
 800e5bc:	e10d      	b.n	800e7da <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	68da      	ldr	r2, [r3, #12]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	699b      	ldr	r3, [r3, #24]
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	f240 80fe 	bls.w	800e7d0 <f_read+0x26c>
 800e5d4:	6a3b      	ldr	r3, [r7, #32]
 800e5d6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e5d8:	e0fa      	b.n	800e7d0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	699b      	ldr	r3, [r3, #24]
 800e5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f040 80c6 	bne.w	800e774 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	699b      	ldr	r3, [r3, #24]
 800e5ec:	0a5b      	lsrs	r3, r3, #9
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	8952      	ldrh	r2, [r2, #10]
 800e5f2:	3a01      	subs	r2, #1
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d12f      	bne.n	800e65e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	699b      	ldr	r3, [r3, #24]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d103      	bne.n	800e60e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e60c:	e013      	b.n	800e636 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e612:	2b00      	cmp	r3, #0
 800e614:	d007      	beq.n	800e626 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	4619      	mov	r1, r3
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f7fe fefe 	bl	800d41e <clmt_clust>
 800e622:	6338      	str	r0, [r7, #48]	@ 0x30
 800e624:	e007      	b.n	800e636 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	69db      	ldr	r3, [r3, #28]
 800e62c:	4619      	mov	r1, r3
 800e62e:	4610      	mov	r0, r2
 800e630:	f7fe fc67 	bl	800cf02 <get_fat>
 800e634:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d804      	bhi.n	800e646 <f_read+0xe2>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2202      	movs	r2, #2
 800e640:	755a      	strb	r2, [r3, #21]
 800e642:	2302      	movs	r3, #2
 800e644:	e0c9      	b.n	800e7da <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64c:	d104      	bne.n	800e658 <f_read+0xf4>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2201      	movs	r2, #1
 800e652:	755a      	strb	r2, [r3, #21]
 800e654:	2301      	movs	r3, #1
 800e656:	e0c0      	b.n	800e7da <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e65c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e65e:	697a      	ldr	r2, [r7, #20]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	69db      	ldr	r3, [r3, #28]
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f7fe fc2c 	bl	800cec4 <clust2sect>
 800e66c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d104      	bne.n	800e67e <f_read+0x11a>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2202      	movs	r2, #2
 800e678:	755a      	strb	r2, [r3, #21]
 800e67a:	2302      	movs	r3, #2
 800e67c:	e0ad      	b.n	800e7da <f_read+0x276>
			sect += csect;
 800e67e:	69ba      	ldr	r2, [r7, #24]
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	4413      	add	r3, r2
 800e684:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	0a5b      	lsrs	r3, r3, #9
 800e68a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d039      	beq.n	800e706 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e692:	69fa      	ldr	r2, [r7, #28]
 800e694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e696:	4413      	add	r3, r2
 800e698:	697a      	ldr	r2, [r7, #20]
 800e69a:	8952      	ldrh	r2, [r2, #10]
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d905      	bls.n	800e6ac <f_read+0x148>
					cc = fs->csize - csect;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	895b      	ldrh	r3, [r3, #10]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	7858      	ldrb	r0, [r3, #1]
 800e6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b2:	69ba      	ldr	r2, [r7, #24]
 800e6b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e6b6:	f7fe f85b 	bl	800c770 <disk_read>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d004      	beq.n	800e6ca <f_read+0x166>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	755a      	strb	r2, [r3, #21]
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e087      	b.n	800e7da <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	7d1b      	ldrb	r3, [r3, #20]
 800e6ce:	b25b      	sxtb	r3, r3
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	da14      	bge.n	800e6fe <f_read+0x19a>
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6a1a      	ldr	r2, [r3, #32]
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d90d      	bls.n	800e6fe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6a1a      	ldr	r2, [r3, #32]
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	025b      	lsls	r3, r3, #9
 800e6ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6ee:	18d0      	adds	r0, r2, r3
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	3330      	adds	r3, #48	@ 0x30
 800e6f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	f7fe f919 	bl	800c930 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e700:	025b      	lsls	r3, r3, #9
 800e702:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e704:	e050      	b.n	800e7a8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6a1b      	ldr	r3, [r3, #32]
 800e70a:	69ba      	ldr	r2, [r7, #24]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d02e      	beq.n	800e76e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	7d1b      	ldrb	r3, [r3, #20]
 800e714:	b25b      	sxtb	r3, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	da18      	bge.n	800e74c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	7858      	ldrb	r0, [r3, #1]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6a1a      	ldr	r2, [r3, #32]
 800e728:	2301      	movs	r3, #1
 800e72a:	f7fe f841 	bl	800c7b0 <disk_write>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d004      	beq.n	800e73e <f_read+0x1da>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2201      	movs	r2, #1
 800e738:	755a      	strb	r2, [r3, #21]
 800e73a:	2301      	movs	r3, #1
 800e73c:	e04d      	b.n	800e7da <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	7d1b      	ldrb	r3, [r3, #20]
 800e742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e746:	b2da      	uxtb	r2, r3
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	7858      	ldrb	r0, [r3, #1]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e756:	2301      	movs	r3, #1
 800e758:	69ba      	ldr	r2, [r7, #24]
 800e75a:	f7fe f809 	bl	800c770 <disk_read>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d004      	beq.n	800e76e <f_read+0x20a>
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2201      	movs	r2, #1
 800e768:	755a      	strb	r2, [r3, #21]
 800e76a:	2301      	movs	r3, #1
 800e76c:	e035      	b.n	800e7da <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	69ba      	ldr	r2, [r7, #24]
 800e772:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	699b      	ldr	r3, [r3, #24]
 800e778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e77c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e780:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	429a      	cmp	r2, r3
 800e788:	d901      	bls.n	800e78e <f_read+0x22a>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e79c:	4413      	add	r3, r2
 800e79e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e7a4:	f7fe f8c4 	bl	800c930 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e7a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ac:	4413      	add	r3, r2
 800e7ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	699a      	ldr	r2, [r3, #24]
 800e7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b6:	441a      	add	r2, r3
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	619a      	str	r2, [r3, #24]
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7c2:	441a      	add	r2, r3
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	601a      	str	r2, [r3, #0]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f47f af01 	bne.w	800e5da <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3738      	adds	r7, #56	@ 0x38
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b086      	sub	sp, #24
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f107 0208 	add.w	r2, r7, #8
 800e7f0:	4611      	mov	r1, r2
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff fc80 	bl	800e0f8 <validate>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d168      	bne.n	800e8d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	7d1b      	ldrb	r3, [r3, #20]
 800e806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d062      	beq.n	800e8d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	7d1b      	ldrb	r3, [r3, #20]
 800e812:	b25b      	sxtb	r3, r3
 800e814:	2b00      	cmp	r3, #0
 800e816:	da15      	bge.n	800e844 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	7858      	ldrb	r0, [r3, #1]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a1a      	ldr	r2, [r3, #32]
 800e826:	2301      	movs	r3, #1
 800e828:	f7fd ffc2 	bl	800c7b0 <disk_write>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <f_sync+0x54>
 800e832:	2301      	movs	r3, #1
 800e834:	e04f      	b.n	800e8d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	7d1b      	ldrb	r3, [r3, #20]
 800e83a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e844:	f7fb ff22 	bl	800a68c <get_fattime>
 800e848:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e850:	4619      	mov	r1, r3
 800e852:	4610      	mov	r0, r2
 800e854:	f7fe fa9a 	bl	800cd8c <move_window>
 800e858:	4603      	mov	r3, r0
 800e85a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e85c:	7dfb      	ldrb	r3, [r7, #23]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d138      	bne.n	800e8d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e866:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	330b      	adds	r3, #11
 800e86c:	781a      	ldrb	r2, [r3, #0]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	330b      	adds	r3, #11
 800e872:	f042 0220 	orr.w	r2, r2, #32
 800e876:	b2d2      	uxtb	r2, r2
 800e878:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6818      	ldr	r0, [r3, #0]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	461a      	mov	r2, r3
 800e884:	68f9      	ldr	r1, [r7, #12]
 800e886:	f7fe ffa4 	bl	800d7d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f103 021c 	add.w	r2, r3, #28
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	4619      	mov	r1, r3
 800e896:	4610      	mov	r0, r2
 800e898:	f7fe f81e 	bl	800c8d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	3316      	adds	r3, #22
 800e8a0:	6939      	ldr	r1, [r7, #16]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fe f818 	bl	800c8d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3312      	adds	r3, #18
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fd fff7 	bl	800c8a2 <st_word>
					fs->wflag = 1;
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe fa93 	bl	800cde8 <sync_fs>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8ce:	b2da      	uxtb	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3718      	adds	r7, #24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b084      	sub	sp, #16
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7ff ff7b 	bl	800e7e2 <f_sync>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e8f0:	7bfb      	ldrb	r3, [r7, #15]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d118      	bne.n	800e928 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f107 0208 	add.w	r2, r7, #8
 800e8fc:	4611      	mov	r1, r2
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7ff fbfa 	bl	800e0f8 <validate>
 800e904:	4603      	mov	r3, r0
 800e906:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e908:	7bfb      	ldrb	r3, [r7, #15]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10c      	bne.n	800e928 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	691b      	ldr	r3, [r3, #16]
 800e912:	4618      	mov	r0, r3
 800e914:	f7fe f996 	bl	800cc44 <dec_lock>
 800e918:	4603      	mov	r3, r0
 800e91a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d102      	bne.n	800e928 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e928:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
	...

0800e934 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e934:	b480      	push	{r7}
 800e936:	b087      	sub	sp, #28
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	4613      	mov	r3, r2
 800e940:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e942:	2301      	movs	r3, #1
 800e944:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e94a:	4b1f      	ldr	r3, [pc, #124]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e94c:	7a5b      	ldrb	r3, [r3, #9]
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	d131      	bne.n	800e9b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e954:	4b1c      	ldr	r3, [pc, #112]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e956:	7a5b      	ldrb	r3, [r3, #9]
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	461a      	mov	r2, r3
 800e95c:	4b1a      	ldr	r3, [pc, #104]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e95e:	2100      	movs	r1, #0
 800e960:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e962:	4b19      	ldr	r3, [pc, #100]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e964:	7a5b      	ldrb	r3, [r3, #9]
 800e966:	b2db      	uxtb	r3, r3
 800e968:	4a17      	ldr	r2, [pc, #92]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	4413      	add	r3, r2
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e972:	4b15      	ldr	r3, [pc, #84]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e974:	7a5b      	ldrb	r3, [r3, #9]
 800e976:	b2db      	uxtb	r3, r3
 800e978:	461a      	mov	r2, r3
 800e97a:	4b13      	ldr	r3, [pc, #76]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e97c:	4413      	add	r3, r2
 800e97e:	79fa      	ldrb	r2, [r7, #7]
 800e980:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e982:	4b11      	ldr	r3, [pc, #68]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e984:	7a5b      	ldrb	r3, [r3, #9]
 800e986:	b2db      	uxtb	r3, r3
 800e988:	1c5a      	adds	r2, r3, #1
 800e98a:	b2d1      	uxtb	r1, r2
 800e98c:	4a0e      	ldr	r2, [pc, #56]	@ (800e9c8 <FATFS_LinkDriverEx+0x94>)
 800e98e:	7251      	strb	r1, [r2, #9]
 800e990:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e992:	7dbb      	ldrb	r3, [r7, #22]
 800e994:	3330      	adds	r3, #48	@ 0x30
 800e996:	b2da      	uxtb	r2, r3
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	223a      	movs	r2, #58	@ 0x3a
 800e9a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	3302      	adds	r3, #2
 800e9a8:	222f      	movs	r2, #47	@ 0x2f
 800e9aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	3303      	adds	r3, #3
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	371c      	adds	r7, #28
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	20000438 	.word	0x20000438

0800e9cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7ff ffaa 	bl	800e934 <FATFS_LinkDriverEx>
 800e9e0:	4603      	mov	r3, r0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
	...

0800e9ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	4912      	ldr	r1, [pc, #72]	@ (800ea3c <MX_USB_DEVICE_Init+0x50>)
 800e9f4:	4812      	ldr	r0, [pc, #72]	@ (800ea40 <MX_USB_DEVICE_Init+0x54>)
 800e9f6:	f7fc fb77 	bl	800b0e8 <USBD_Init>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d001      	beq.n	800ea04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ea00:	f7f2 fede 	bl	80017c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ea04:	490f      	ldr	r1, [pc, #60]	@ (800ea44 <MX_USB_DEVICE_Init+0x58>)
 800ea06:	480e      	ldr	r0, [pc, #56]	@ (800ea40 <MX_USB_DEVICE_Init+0x54>)
 800ea08:	f7fc fb9e 	bl	800b148 <USBD_RegisterClass>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ea12:	f7f2 fed5 	bl	80017c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ea16:	490c      	ldr	r1, [pc, #48]	@ (800ea48 <MX_USB_DEVICE_Init+0x5c>)
 800ea18:	4809      	ldr	r0, [pc, #36]	@ (800ea40 <MX_USB_DEVICE_Init+0x54>)
 800ea1a:	f7fc fa95 	bl	800af48 <USBD_CDC_RegisterInterface>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d001      	beq.n	800ea28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ea24:	f7f2 fecc 	bl	80017c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ea28:	4805      	ldr	r0, [pc, #20]	@ (800ea40 <MX_USB_DEVICE_Init+0x54>)
 800ea2a:	f7fc fbc3 	bl	800b1b4 <USBD_Start>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ea34:	f7f2 fec4 	bl	80017c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ea38:	bf00      	nop
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	200000e4 	.word	0x200000e4
 800ea40:	20000444 	.word	0x20000444
 800ea44:	20000050 	.word	0x20000050
 800ea48:	200000d0 	.word	0x200000d0

0800ea4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ea50:	2200      	movs	r2, #0
 800ea52:	4905      	ldr	r1, [pc, #20]	@ (800ea68 <CDC_Init_FS+0x1c>)
 800ea54:	4805      	ldr	r0, [pc, #20]	@ (800ea6c <CDC_Init_FS+0x20>)
 800ea56:	f7fc fa91 	bl	800af7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ea5a:	4905      	ldr	r1, [pc, #20]	@ (800ea70 <CDC_Init_FS+0x24>)
 800ea5c:	4803      	ldr	r0, [pc, #12]	@ (800ea6c <CDC_Init_FS+0x20>)
 800ea5e:	f7fc faaf 	bl	800afc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ea62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	20000b20 	.word	0x20000b20
 800ea6c:	20000444 	.word	0x20000444
 800ea70:	20000720 	.word	0x20000720

0800ea74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ea74:	b480      	push	{r7}
 800ea76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ea78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	6039      	str	r1, [r7, #0]
 800ea8e:	71fb      	strb	r3, [r7, #7]
 800ea90:	4613      	mov	r3, r2
 800ea92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	2b23      	cmp	r3, #35	@ 0x23
 800ea98:	d84a      	bhi.n	800eb30 <CDC_Control_FS+0xac>
 800ea9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eaa0 <CDC_Control_FS+0x1c>)
 800ea9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa0:	0800eb31 	.word	0x0800eb31
 800eaa4:	0800eb31 	.word	0x0800eb31
 800eaa8:	0800eb31 	.word	0x0800eb31
 800eaac:	0800eb31 	.word	0x0800eb31
 800eab0:	0800eb31 	.word	0x0800eb31
 800eab4:	0800eb31 	.word	0x0800eb31
 800eab8:	0800eb31 	.word	0x0800eb31
 800eabc:	0800eb31 	.word	0x0800eb31
 800eac0:	0800eb31 	.word	0x0800eb31
 800eac4:	0800eb31 	.word	0x0800eb31
 800eac8:	0800eb31 	.word	0x0800eb31
 800eacc:	0800eb31 	.word	0x0800eb31
 800ead0:	0800eb31 	.word	0x0800eb31
 800ead4:	0800eb31 	.word	0x0800eb31
 800ead8:	0800eb31 	.word	0x0800eb31
 800eadc:	0800eb31 	.word	0x0800eb31
 800eae0:	0800eb31 	.word	0x0800eb31
 800eae4:	0800eb31 	.word	0x0800eb31
 800eae8:	0800eb31 	.word	0x0800eb31
 800eaec:	0800eb31 	.word	0x0800eb31
 800eaf0:	0800eb31 	.word	0x0800eb31
 800eaf4:	0800eb31 	.word	0x0800eb31
 800eaf8:	0800eb31 	.word	0x0800eb31
 800eafc:	0800eb31 	.word	0x0800eb31
 800eb00:	0800eb31 	.word	0x0800eb31
 800eb04:	0800eb31 	.word	0x0800eb31
 800eb08:	0800eb31 	.word	0x0800eb31
 800eb0c:	0800eb31 	.word	0x0800eb31
 800eb10:	0800eb31 	.word	0x0800eb31
 800eb14:	0800eb31 	.word	0x0800eb31
 800eb18:	0800eb31 	.word	0x0800eb31
 800eb1c:	0800eb31 	.word	0x0800eb31
 800eb20:	0800eb31 	.word	0x0800eb31
 800eb24:	0800eb31 	.word	0x0800eb31
 800eb28:	0800eb31 	.word	0x0800eb31
 800eb2c:	0800eb31 	.word	0x0800eb31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb30:	bf00      	nop
  }

  return (USBD_OK);
 800eb32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb4a:	6879      	ldr	r1, [r7, #4]
 800eb4c:	4805      	ldr	r0, [pc, #20]	@ (800eb64 <CDC_Receive_FS+0x24>)
 800eb4e:	f7fc fa37 	bl	800afc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb52:	4804      	ldr	r0, [pc, #16]	@ (800eb64 <CDC_Receive_FS+0x24>)
 800eb54:	f7fc fa92 	bl	800b07c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eb58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	20000444 	.word	0x20000444

0800eb68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	460b      	mov	r3, r1
 800eb72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eb78:	4b0d      	ldr	r3, [pc, #52]	@ (800ebb0 <CDC_Transmit_FS+0x48>)
 800eb7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d001      	beq.n	800eb8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e00b      	b.n	800eba6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eb8e:	887b      	ldrh	r3, [r7, #2]
 800eb90:	461a      	mov	r2, r3
 800eb92:	6879      	ldr	r1, [r7, #4]
 800eb94:	4806      	ldr	r0, [pc, #24]	@ (800ebb0 <CDC_Transmit_FS+0x48>)
 800eb96:	f7fc f9f1 	bl	800af7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eb9a:	4805      	ldr	r0, [pc, #20]	@ (800ebb0 <CDC_Transmit_FS+0x48>)
 800eb9c:	f7fc fa2e 	bl	800affc <USBD_CDC_TransmitPacket>
 800eba0:	4603      	mov	r3, r0
 800eba2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	20000444 	.word	0x20000444

0800ebb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b087      	sub	sp, #28
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ebc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	371c      	adds	r7, #28
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	4603      	mov	r3, r0
 800ebe0:	6039      	str	r1, [r7, #0]
 800ebe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	2212      	movs	r2, #18
 800ebe8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ebea:	4b03      	ldr	r3, [pc, #12]	@ (800ebf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	20000100 	.word	0x20000100

0800ebfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	4603      	mov	r3, r0
 800ec04:	6039      	str	r1, [r7, #0]
 800ec06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2204      	movs	r2, #4
 800ec0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ec0e:	4b03      	ldr	r3, [pc, #12]	@ (800ec1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr
 800ec1c:	20000114 	.word	0x20000114

0800ec20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	4603      	mov	r3, r0
 800ec28:	6039      	str	r1, [r7, #0]
 800ec2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec2c:	79fb      	ldrb	r3, [r7, #7]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d105      	bne.n	800ec3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	4907      	ldr	r1, [pc, #28]	@ (800ec54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ec36:	4808      	ldr	r0, [pc, #32]	@ (800ec58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ec38:	f7fd fc6c 	bl	800c514 <USBD_GetString>
 800ec3c:	e004      	b.n	800ec48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec3e:	683a      	ldr	r2, [r7, #0]
 800ec40:	4904      	ldr	r1, [pc, #16]	@ (800ec54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ec42:	4805      	ldr	r0, [pc, #20]	@ (800ec58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ec44:	f7fd fc66 	bl	800c514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec48:	4b02      	ldr	r3, [pc, #8]	@ (800ec54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20000f20 	.word	0x20000f20
 800ec58:	08010160 	.word	0x08010160

0800ec5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	4603      	mov	r3, r0
 800ec64:	6039      	str	r1, [r7, #0]
 800ec66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec68:	683a      	ldr	r2, [r7, #0]
 800ec6a:	4904      	ldr	r1, [pc, #16]	@ (800ec7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ec6c:	4804      	ldr	r0, [pc, #16]	@ (800ec80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ec6e:	f7fd fc51 	bl	800c514 <USBD_GetString>
  return USBD_StrDesc;
 800ec72:	4b02      	ldr	r3, [pc, #8]	@ (800ec7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	20000f20 	.word	0x20000f20
 800ec80:	08010178 	.word	0x08010178

0800ec84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	6039      	str	r1, [r7, #0]
 800ec8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	221a      	movs	r2, #26
 800ec94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ec96:	f000 f843 	bl	800ed20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ec9a:	4b02      	ldr	r3, [pc, #8]	@ (800eca4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3708      	adds	r7, #8
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	20000118 	.word	0x20000118

0800eca8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	4603      	mov	r3, r0
 800ecb0:	6039      	str	r1, [r7, #0]
 800ecb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d105      	bne.n	800ecc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ecba:	683a      	ldr	r2, [r7, #0]
 800ecbc:	4907      	ldr	r1, [pc, #28]	@ (800ecdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ecbe:	4808      	ldr	r0, [pc, #32]	@ (800ece0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ecc0:	f7fd fc28 	bl	800c514 <USBD_GetString>
 800ecc4:	e004      	b.n	800ecd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ecc6:	683a      	ldr	r2, [r7, #0]
 800ecc8:	4904      	ldr	r1, [pc, #16]	@ (800ecdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ecca:	4805      	ldr	r0, [pc, #20]	@ (800ece0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eccc:	f7fd fc22 	bl	800c514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecd0:	4b02      	ldr	r3, [pc, #8]	@ (800ecdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	20000f20 	.word	0x20000f20
 800ece0:	0801018c 	.word	0x0801018c

0800ece4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	4603      	mov	r3, r0
 800ecec:	6039      	str	r1, [r7, #0]
 800ecee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ecf0:	79fb      	ldrb	r3, [r7, #7]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d105      	bne.n	800ed02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ecf6:	683a      	ldr	r2, [r7, #0]
 800ecf8:	4907      	ldr	r1, [pc, #28]	@ (800ed18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ecfa:	4808      	ldr	r0, [pc, #32]	@ (800ed1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ecfc:	f7fd fc0a 	bl	800c514 <USBD_GetString>
 800ed00:	e004      	b.n	800ed0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed02:	683a      	ldr	r2, [r7, #0]
 800ed04:	4904      	ldr	r1, [pc, #16]	@ (800ed18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed06:	4805      	ldr	r0, [pc, #20]	@ (800ed1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed08:	f7fd fc04 	bl	800c514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed0c:	4b02      	ldr	r3, [pc, #8]	@ (800ed18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	20000f20 	.word	0x20000f20
 800ed1c:	08010198 	.word	0x08010198

0800ed20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ed26:	4b0f      	ldr	r3, [pc, #60]	@ (800ed64 <Get_SerialNum+0x44>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ed68 <Get_SerialNum+0x48>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ed32:	4b0e      	ldr	r3, [pc, #56]	@ (800ed6c <Get_SerialNum+0x4c>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d009      	beq.n	800ed5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed46:	2208      	movs	r2, #8
 800ed48:	4909      	ldr	r1, [pc, #36]	@ (800ed70 <Get_SerialNum+0x50>)
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f000 f814 	bl	800ed78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed50:	2204      	movs	r2, #4
 800ed52:	4908      	ldr	r1, [pc, #32]	@ (800ed74 <Get_SerialNum+0x54>)
 800ed54:	68b8      	ldr	r0, [r7, #8]
 800ed56:	f000 f80f 	bl	800ed78 <IntToUnicode>
  }
}
 800ed5a:	bf00      	nop
 800ed5c:	3710      	adds	r7, #16
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	1fff7a10 	.word	0x1fff7a10
 800ed68:	1fff7a14 	.word	0x1fff7a14
 800ed6c:	1fff7a18 	.word	0x1fff7a18
 800ed70:	2000011a 	.word	0x2000011a
 800ed74:	2000012a 	.word	0x2000012a

0800ed78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b087      	sub	sp, #28
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	4613      	mov	r3, r2
 800ed84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	75fb      	strb	r3, [r7, #23]
 800ed8e:	e027      	b.n	800ede0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	0f1b      	lsrs	r3, r3, #28
 800ed94:	2b09      	cmp	r3, #9
 800ed96:	d80b      	bhi.n	800edb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	0f1b      	lsrs	r3, r3, #28
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
 800eda0:	005b      	lsls	r3, r3, #1
 800eda2:	4619      	mov	r1, r3
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	440b      	add	r3, r1
 800eda8:	3230      	adds	r2, #48	@ 0x30
 800edaa:	b2d2      	uxtb	r2, r2
 800edac:	701a      	strb	r2, [r3, #0]
 800edae:	e00a      	b.n	800edc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	0f1b      	lsrs	r3, r3, #28
 800edb4:	b2da      	uxtb	r2, r3
 800edb6:	7dfb      	ldrb	r3, [r7, #23]
 800edb8:	005b      	lsls	r3, r3, #1
 800edba:	4619      	mov	r1, r3
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	440b      	add	r3, r1
 800edc0:	3237      	adds	r2, #55	@ 0x37
 800edc2:	b2d2      	uxtb	r2, r2
 800edc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	011b      	lsls	r3, r3, #4
 800edca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800edcc:	7dfb      	ldrb	r3, [r7, #23]
 800edce:	005b      	lsls	r3, r3, #1
 800edd0:	3301      	adds	r3, #1
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	4413      	add	r3, r2
 800edd6:	2200      	movs	r2, #0
 800edd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800edda:	7dfb      	ldrb	r3, [r7, #23]
 800eddc:	3301      	adds	r3, #1
 800edde:	75fb      	strb	r3, [r7, #23]
 800ede0:	7dfa      	ldrb	r2, [r7, #23]
 800ede2:	79fb      	ldrb	r3, [r7, #7]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d3d3      	bcc.n	800ed90 <IntToUnicode+0x18>
  }
}
 800ede8:	bf00      	nop
 800edea:	bf00      	nop
 800edec:	371c      	adds	r7, #28
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr
	...

0800edf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b08a      	sub	sp, #40	@ 0x28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee00:	f107 0314 	add.w	r3, r7, #20
 800ee04:	2200      	movs	r2, #0
 800ee06:	601a      	str	r2, [r3, #0]
 800ee08:	605a      	str	r2, [r3, #4]
 800ee0a:	609a      	str	r2, [r3, #8]
 800ee0c:	60da      	str	r2, [r3, #12]
 800ee0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee18:	d13a      	bne.n	800ee90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	613b      	str	r3, [r7, #16]
 800ee1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ee98 <HAL_PCD_MspInit+0xa0>)
 800ee20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee22:	4a1d      	ldr	r2, [pc, #116]	@ (800ee98 <HAL_PCD_MspInit+0xa0>)
 800ee24:	f043 0301 	orr.w	r3, r3, #1
 800ee28:	6313      	str	r3, [r2, #48]	@ 0x30
 800ee2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ee98 <HAL_PCD_MspInit+0xa0>)
 800ee2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee2e:	f003 0301 	and.w	r3, r3, #1
 800ee32:	613b      	str	r3, [r7, #16]
 800ee34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ee36:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ee3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee3c:	2302      	movs	r3, #2
 800ee3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee40:	2300      	movs	r3, #0
 800ee42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee44:	2303      	movs	r3, #3
 800ee46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee48:	230a      	movs	r3, #10
 800ee4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee4c:	f107 0314 	add.w	r3, r7, #20
 800ee50:	4619      	mov	r1, r3
 800ee52:	4812      	ldr	r0, [pc, #72]	@ (800ee9c <HAL_PCD_MspInit+0xa4>)
 800ee54:	f7f6 f89c 	bl	8004f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee58:	4b0f      	ldr	r3, [pc, #60]	@ (800ee98 <HAL_PCD_MspInit+0xa0>)
 800ee5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee5c:	4a0e      	ldr	r2, [pc, #56]	@ (800ee98 <HAL_PCD_MspInit+0xa0>)
 800ee5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee62:	6353      	str	r3, [r2, #52]	@ 0x34
 800ee64:	2300      	movs	r3, #0
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	4b0b      	ldr	r3, [pc, #44]	@ (800ee98 <HAL_PCD_MspInit+0xa0>)
 800ee6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ee98 <HAL_PCD_MspInit+0xa0>)
 800ee6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ee72:	6453      	str	r3, [r2, #68]	@ 0x44
 800ee74:	4b08      	ldr	r3, [pc, #32]	@ (800ee98 <HAL_PCD_MspInit+0xa0>)
 800ee76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee7c:	60fb      	str	r3, [r7, #12]
 800ee7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ee80:	2200      	movs	r2, #0
 800ee82:	2100      	movs	r1, #0
 800ee84:	2043      	movs	r0, #67	@ 0x43
 800ee86:	f7f5 fcba 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee8a:	2043      	movs	r0, #67	@ 0x43
 800ee8c:	f7f5 fcd3 	bl	8004836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ee90:	bf00      	nop
 800ee92:	3728      	adds	r7, #40	@ 0x28
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	40023800 	.word	0x40023800
 800ee9c:	40020000 	.word	0x40020000

0800eea0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	4610      	mov	r0, r2
 800eeb8:	f7fc f9c9 	bl	800b24e <USBD_LL_SetupStage>
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	460b      	mov	r3, r1
 800eece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800eed6:	78fa      	ldrb	r2, [r7, #3]
 800eed8:	6879      	ldr	r1, [r7, #4]
 800eeda:	4613      	mov	r3, r2
 800eedc:	00db      	lsls	r3, r3, #3
 800eede:	4413      	add	r3, r2
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	440b      	add	r3, r1
 800eee4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	78fb      	ldrb	r3, [r7, #3]
 800eeec:	4619      	mov	r1, r3
 800eeee:	f7fc fa03 	bl	800b2f8 <USBD_LL_DataOutStage>
}
 800eef2:	bf00      	nop
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b082      	sub	sp, #8
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
 800ef02:	460b      	mov	r3, r1
 800ef04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ef0c:	78fa      	ldrb	r2, [r7, #3]
 800ef0e:	6879      	ldr	r1, [r7, #4]
 800ef10:	4613      	mov	r3, r2
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	4413      	add	r3, r2
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	440b      	add	r3, r1
 800ef1a:	3320      	adds	r3, #32
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	78fb      	ldrb	r3, [r7, #3]
 800ef20:	4619      	mov	r1, r3
 800ef22:	f7fc fa9c 	bl	800b45e <USBD_LL_DataInStage>
}
 800ef26:	bf00      	nop
 800ef28:	3708      	adds	r7, #8
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b082      	sub	sp, #8
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fc fbd6 	bl	800b6ee <USBD_LL_SOF>
}
 800ef42:	bf00      	nop
 800ef44:	3708      	adds	r7, #8
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b084      	sub	sp, #16
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ef52:	2301      	movs	r3, #1
 800ef54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	79db      	ldrb	r3, [r3, #7]
 800ef5a:	2b02      	cmp	r3, #2
 800ef5c:	d001      	beq.n	800ef62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ef5e:	f7f2 fc2f 	bl	80017c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef68:	7bfa      	ldrb	r2, [r7, #15]
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fc fb7a 	bl	800b666 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fc fb22 	bl	800b5c2 <USBD_LL_Reset>
}
 800ef7e:	bf00      	nop
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
	...

0800ef88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fc fb75 	bl	800b686 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	6812      	ldr	r2, [r2, #0]
 800efaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800efae:	f043 0301 	orr.w	r3, r3, #1
 800efb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	7adb      	ldrb	r3, [r3, #11]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d005      	beq.n	800efc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efbc:	4b04      	ldr	r3, [pc, #16]	@ (800efd0 <HAL_PCD_SuspendCallback+0x48>)
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	4a03      	ldr	r2, [pc, #12]	@ (800efd0 <HAL_PCD_SuspendCallback+0x48>)
 800efc2:	f043 0306 	orr.w	r3, r3, #6
 800efc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	e000ed00 	.word	0xe000ed00

0800efd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fc fb6b 	bl	800b6be <USBD_LL_Resume>
}
 800efe8:	bf00      	nop
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	460b      	mov	r3, r1
 800effa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f002:	78fa      	ldrb	r2, [r7, #3]
 800f004:	4611      	mov	r1, r2
 800f006:	4618      	mov	r0, r3
 800f008:	f7fc fbc3 	bl	800b792 <USBD_LL_IsoOUTIncomplete>
}
 800f00c:	bf00      	nop
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	460b      	mov	r3, r1
 800f01e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f026:	78fa      	ldrb	r2, [r7, #3]
 800f028:	4611      	mov	r1, r2
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fc fb7f 	bl	800b72e <USBD_LL_IsoINIncomplete>
}
 800f030:	bf00      	nop
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f046:	4618      	mov	r0, r3
 800f048:	f7fc fbd5 	bl	800b7f6 <USBD_LL_DevConnected>
}
 800f04c:	bf00      	nop
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f062:	4618      	mov	r0, r3
 800f064:	f7fc fbd2 	bl	800b80c <USBD_LL_DevDisconnected>
}
 800f068:	bf00      	nop
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d13c      	bne.n	800f0fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f080:	4a20      	ldr	r2, [pc, #128]	@ (800f104 <USBD_LL_Init+0x94>)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a1e      	ldr	r2, [pc, #120]	@ (800f104 <USBD_LL_Init+0x94>)
 800f08c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f090:	4b1c      	ldr	r3, [pc, #112]	@ (800f104 <USBD_LL_Init+0x94>)
 800f092:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f096:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f098:	4b1a      	ldr	r3, [pc, #104]	@ (800f104 <USBD_LL_Init+0x94>)
 800f09a:	2204      	movs	r2, #4
 800f09c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f09e:	4b19      	ldr	r3, [pc, #100]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0a0:	2202      	movs	r2, #2
 800f0a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f0a4:	4b17      	ldr	r3, [pc, #92]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f0aa:	4b16      	ldr	r3, [pc, #88]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0ac:	2202      	movs	r2, #2
 800f0ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f0b0:	4b14      	ldr	r3, [pc, #80]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f0b6:	4b13      	ldr	r3, [pc, #76]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f0bc:	4b11      	ldr	r3, [pc, #68]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f0c2:	4b10      	ldr	r3, [pc, #64]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f0ce:	480d      	ldr	r0, [pc, #52]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0d0:	f7f6 f914 	bl	80052fc <HAL_PCD_Init>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d001      	beq.n	800f0de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f0da:	f7f2 fb71 	bl	80017c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f0de:	2180      	movs	r1, #128	@ 0x80
 800f0e0:	4808      	ldr	r0, [pc, #32]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0e2:	f7f7 fb40 	bl	8006766 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f0e6:	2240      	movs	r2, #64	@ 0x40
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	4806      	ldr	r0, [pc, #24]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0ec:	f7f7 faf4 	bl	80066d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f0f0:	2280      	movs	r2, #128	@ 0x80
 800f0f2:	2101      	movs	r1, #1
 800f0f4:	4803      	ldr	r0, [pc, #12]	@ (800f104 <USBD_LL_Init+0x94>)
 800f0f6:	f7f7 faef 	bl	80066d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f0fa:	2300      	movs	r3, #0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	20001120 	.word	0x20001120

0800f108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f114:	2300      	movs	r3, #0
 800f116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f11e:	4618      	mov	r0, r3
 800f120:	f7f6 f9fb 	bl	800551a <HAL_PCD_Start>
 800f124:	4603      	mov	r3, r0
 800f126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f128:	7bfb      	ldrb	r3, [r7, #15]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 f942 	bl	800f3b4 <USBD_Get_USB_Status>
 800f130:	4603      	mov	r3, r0
 800f132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f134:	7bbb      	ldrb	r3, [r7, #14]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b084      	sub	sp, #16
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
 800f146:	4608      	mov	r0, r1
 800f148:	4611      	mov	r1, r2
 800f14a:	461a      	mov	r2, r3
 800f14c:	4603      	mov	r3, r0
 800f14e:	70fb      	strb	r3, [r7, #3]
 800f150:	460b      	mov	r3, r1
 800f152:	70bb      	strb	r3, [r7, #2]
 800f154:	4613      	mov	r3, r2
 800f156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f158:	2300      	movs	r3, #0
 800f15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f15c:	2300      	movs	r3, #0
 800f15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f166:	78bb      	ldrb	r3, [r7, #2]
 800f168:	883a      	ldrh	r2, [r7, #0]
 800f16a:	78f9      	ldrb	r1, [r7, #3]
 800f16c:	f7f6 fecf 	bl	8005f0e <HAL_PCD_EP_Open>
 800f170:	4603      	mov	r3, r0
 800f172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f174:	7bfb      	ldrb	r3, [r7, #15]
 800f176:	4618      	mov	r0, r3
 800f178:	f000 f91c 	bl	800f3b4 <USBD_Get_USB_Status>
 800f17c:	4603      	mov	r3, r0
 800f17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f180:	7bbb      	ldrb	r3, [r7, #14]
}
 800f182:	4618      	mov	r0, r3
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b084      	sub	sp, #16
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	460b      	mov	r3, r1
 800f194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f19a:	2300      	movs	r3, #0
 800f19c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f1a4:	78fa      	ldrb	r2, [r7, #3]
 800f1a6:	4611      	mov	r1, r2
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7f6 ff1a 	bl	8005fe2 <HAL_PCD_EP_Close>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 f8fd 	bl	800f3b4 <USBD_Get_USB_Status>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f1e2:	78fa      	ldrb	r2, [r7, #3]
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7f6 ffd2 	bl	8006190 <HAL_PCD_EP_SetStall>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1f0:	7bfb      	ldrb	r3, [r7, #15]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f8de 	bl	800f3b4 <USBD_Get_USB_Status>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b084      	sub	sp, #16
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	460b      	mov	r3, r1
 800f210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f212:	2300      	movs	r3, #0
 800f214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f216:	2300      	movs	r3, #0
 800f218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f220:	78fa      	ldrb	r2, [r7, #3]
 800f222:	4611      	mov	r1, r2
 800f224:	4618      	mov	r0, r3
 800f226:	f7f7 f816 	bl	8006256 <HAL_PCD_EP_ClrStall>
 800f22a:	4603      	mov	r3, r0
 800f22c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f22e:	7bfb      	ldrb	r3, [r7, #15]
 800f230:	4618      	mov	r0, r3
 800f232:	f000 f8bf 	bl	800f3b4 <USBD_Get_USB_Status>
 800f236:	4603      	mov	r3, r0
 800f238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f23a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3710      	adds	r7, #16
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	460b      	mov	r3, r1
 800f24e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	da0b      	bge.n	800f278 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f260:	78fb      	ldrb	r3, [r7, #3]
 800f262:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f266:	68f9      	ldr	r1, [r7, #12]
 800f268:	4613      	mov	r3, r2
 800f26a:	00db      	lsls	r3, r3, #3
 800f26c:	4413      	add	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	440b      	add	r3, r1
 800f272:	3316      	adds	r3, #22
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	e00b      	b.n	800f290 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f278:	78fb      	ldrb	r3, [r7, #3]
 800f27a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f27e:	68f9      	ldr	r1, [r7, #12]
 800f280:	4613      	mov	r3, r2
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	4413      	add	r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	440b      	add	r3, r1
 800f28a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f28e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f290:	4618      	mov	r0, r3
 800f292:	3714      	adds	r7, #20
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f2b6:	78fa      	ldrb	r2, [r7, #3]
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7f6 fe03 	bl	8005ec6 <HAL_PCD_SetAddress>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2c4:	7bfb      	ldrb	r3, [r7, #15]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 f874 	bl	800f3b4 <USBD_Get_USB_Status>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b086      	sub	sp, #24
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	60f8      	str	r0, [r7, #12]
 800f2e2:	607a      	str	r2, [r7, #4]
 800f2e4:	603b      	str	r3, [r7, #0]
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f2f8:	7af9      	ldrb	r1, [r7, #11]
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	f7f6 ff0d 	bl	800611c <HAL_PCD_EP_Transmit>
 800f302:	4603      	mov	r3, r0
 800f304:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f306:	7dfb      	ldrb	r3, [r7, #23]
 800f308:	4618      	mov	r0, r3
 800f30a:	f000 f853 	bl	800f3b4 <USBD_Get_USB_Status>
 800f30e:	4603      	mov	r3, r0
 800f310:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f312:	7dbb      	ldrb	r3, [r7, #22]
}
 800f314:	4618      	mov	r0, r3
 800f316:	3718      	adds	r7, #24
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b086      	sub	sp, #24
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	607a      	str	r2, [r7, #4]
 800f326:	603b      	str	r3, [r7, #0]
 800f328:	460b      	mov	r3, r1
 800f32a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f32c:	2300      	movs	r3, #0
 800f32e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f330:	2300      	movs	r3, #0
 800f332:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f33a:	7af9      	ldrb	r1, [r7, #11]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	f7f6 fe99 	bl	8006076 <HAL_PCD_EP_Receive>
 800f344:	4603      	mov	r3, r0
 800f346:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f348:	7dfb      	ldrb	r3, [r7, #23]
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 f832 	bl	800f3b4 <USBD_Get_USB_Status>
 800f350:	4603      	mov	r3, r0
 800f352:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f354:	7dbb      	ldrb	r3, [r7, #22]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3718      	adds	r7, #24
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	460b      	mov	r3, r1
 800f368:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f370:	78fa      	ldrb	r2, [r7, #3]
 800f372:	4611      	mov	r1, r2
 800f374:	4618      	mov	r0, r3
 800f376:	f7f6 feb9 	bl	80060ec <HAL_PCD_EP_GetRxCount>
 800f37a:	4603      	mov	r3, r0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f38c:	4b03      	ldr	r3, [pc, #12]	@ (800f39c <USBD_static_malloc+0x18>)
}
 800f38e:	4618      	mov	r0, r3
 800f390:	370c      	adds	r7, #12
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	20001604 	.word	0x20001604

0800f3a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]

}
 800f3a8:	bf00      	nop
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b085      	sub	sp, #20
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f3c2:	79fb      	ldrb	r3, [r7, #7]
 800f3c4:	2b03      	cmp	r3, #3
 800f3c6:	d817      	bhi.n	800f3f8 <USBD_Get_USB_Status+0x44>
 800f3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800f3d0 <USBD_Get_USB_Status+0x1c>)
 800f3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ce:	bf00      	nop
 800f3d0:	0800f3e1 	.word	0x0800f3e1
 800f3d4:	0800f3e7 	.word	0x0800f3e7
 800f3d8:	0800f3ed 	.word	0x0800f3ed
 800f3dc:	0800f3f3 	.word	0x0800f3f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800f3e4:	e00b      	b.n	800f3fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	73fb      	strb	r3, [r7, #15]
    break;
 800f3ea:	e008      	b.n	800f3fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f3f0:	e005      	b.n	800f3fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3f2:	2303      	movs	r3, #3
 800f3f4:	73fb      	strb	r3, [r7, #15]
    break;
 800f3f6:	e002      	b.n	800f3fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800f3fc:	bf00      	nop
  }
  return usb_status;
 800f3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3714      	adds	r7, #20
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <_ZdlPvj>:
 800f40c:	f000 b811 	b.w	800f432 <_ZdlPv>

0800f410 <_Znwj>:
 800f410:	2801      	cmp	r0, #1
 800f412:	bf38      	it	cc
 800f414:	2001      	movcc	r0, #1
 800f416:	b510      	push	{r4, lr}
 800f418:	4604      	mov	r4, r0
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 f836 	bl	800f48c <malloc>
 800f420:	b100      	cbz	r0, 800f424 <_Znwj+0x14>
 800f422:	bd10      	pop	{r4, pc}
 800f424:	f000 f808 	bl	800f438 <_ZSt15get_new_handlerv>
 800f428:	b908      	cbnz	r0, 800f42e <_Znwj+0x1e>
 800f42a:	f000 f80d 	bl	800f448 <abort>
 800f42e:	4780      	blx	r0
 800f430:	e7f3      	b.n	800f41a <_Znwj+0xa>

0800f432 <_ZdlPv>:
 800f432:	f000 b833 	b.w	800f49c <free>
	...

0800f438 <_ZSt15get_new_handlerv>:
 800f438:	4b02      	ldr	r3, [pc, #8]	@ (800f444 <_ZSt15get_new_handlerv+0xc>)
 800f43a:	6818      	ldr	r0, [r3, #0]
 800f43c:	f3bf 8f5b 	dmb	ish
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	20001824 	.word	0x20001824

0800f448 <abort>:
 800f448:	b508      	push	{r3, lr}
 800f44a:	2006      	movs	r0, #6
 800f44c:	f000 f9ae 	bl	800f7ac <raise>
 800f450:	2001      	movs	r0, #1
 800f452:	f7f2 fe3f 	bl	80020d4 <_exit>

0800f456 <__itoa>:
 800f456:	1e93      	subs	r3, r2, #2
 800f458:	2b22      	cmp	r3, #34	@ 0x22
 800f45a:	b510      	push	{r4, lr}
 800f45c:	460c      	mov	r4, r1
 800f45e:	d904      	bls.n	800f46a <__itoa+0x14>
 800f460:	2300      	movs	r3, #0
 800f462:	700b      	strb	r3, [r1, #0]
 800f464:	461c      	mov	r4, r3
 800f466:	4620      	mov	r0, r4
 800f468:	bd10      	pop	{r4, pc}
 800f46a:	2a0a      	cmp	r2, #10
 800f46c:	d109      	bne.n	800f482 <__itoa+0x2c>
 800f46e:	2800      	cmp	r0, #0
 800f470:	da07      	bge.n	800f482 <__itoa+0x2c>
 800f472:	232d      	movs	r3, #45	@ 0x2d
 800f474:	700b      	strb	r3, [r1, #0]
 800f476:	4240      	negs	r0, r0
 800f478:	2101      	movs	r1, #1
 800f47a:	4421      	add	r1, r4
 800f47c:	f000 f8c4 	bl	800f608 <__utoa>
 800f480:	e7f1      	b.n	800f466 <__itoa+0x10>
 800f482:	2100      	movs	r1, #0
 800f484:	e7f9      	b.n	800f47a <__itoa+0x24>

0800f486 <itoa>:
 800f486:	f7ff bfe6 	b.w	800f456 <__itoa>
	...

0800f48c <malloc>:
 800f48c:	4b02      	ldr	r3, [pc, #8]	@ (800f498 <malloc+0xc>)
 800f48e:	4601      	mov	r1, r0
 800f490:	6818      	ldr	r0, [r3, #0]
 800f492:	f000 b82d 	b.w	800f4f0 <_malloc_r>
 800f496:	bf00      	nop
 800f498:	20000134 	.word	0x20000134

0800f49c <free>:
 800f49c:	4b02      	ldr	r3, [pc, #8]	@ (800f4a8 <free+0xc>)
 800f49e:	4601      	mov	r1, r0
 800f4a0:	6818      	ldr	r0, [r3, #0]
 800f4a2:	f000 b9e9 	b.w	800f878 <_free_r>
 800f4a6:	bf00      	nop
 800f4a8:	20000134 	.word	0x20000134

0800f4ac <sbrk_aligned>:
 800f4ac:	b570      	push	{r4, r5, r6, lr}
 800f4ae:	4e0f      	ldr	r6, [pc, #60]	@ (800f4ec <sbrk_aligned+0x40>)
 800f4b0:	460c      	mov	r4, r1
 800f4b2:	6831      	ldr	r1, [r6, #0]
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	b911      	cbnz	r1, 800f4be <sbrk_aligned+0x12>
 800f4b8:	f000 f994 	bl	800f7e4 <_sbrk_r>
 800f4bc:	6030      	str	r0, [r6, #0]
 800f4be:	4621      	mov	r1, r4
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	f000 f98f 	bl	800f7e4 <_sbrk_r>
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	d103      	bne.n	800f4d2 <sbrk_aligned+0x26>
 800f4ca:	f04f 34ff 	mov.w	r4, #4294967295
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	bd70      	pop	{r4, r5, r6, pc}
 800f4d2:	1cc4      	adds	r4, r0, #3
 800f4d4:	f024 0403 	bic.w	r4, r4, #3
 800f4d8:	42a0      	cmp	r0, r4
 800f4da:	d0f8      	beq.n	800f4ce <sbrk_aligned+0x22>
 800f4dc:	1a21      	subs	r1, r4, r0
 800f4de:	4628      	mov	r0, r5
 800f4e0:	f000 f980 	bl	800f7e4 <_sbrk_r>
 800f4e4:	3001      	adds	r0, #1
 800f4e6:	d1f2      	bne.n	800f4ce <sbrk_aligned+0x22>
 800f4e8:	e7ef      	b.n	800f4ca <sbrk_aligned+0x1e>
 800f4ea:	bf00      	nop
 800f4ec:	20001828 	.word	0x20001828

0800f4f0 <_malloc_r>:
 800f4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4f4:	1ccd      	adds	r5, r1, #3
 800f4f6:	f025 0503 	bic.w	r5, r5, #3
 800f4fa:	3508      	adds	r5, #8
 800f4fc:	2d0c      	cmp	r5, #12
 800f4fe:	bf38      	it	cc
 800f500:	250c      	movcc	r5, #12
 800f502:	2d00      	cmp	r5, #0
 800f504:	4606      	mov	r6, r0
 800f506:	db01      	blt.n	800f50c <_malloc_r+0x1c>
 800f508:	42a9      	cmp	r1, r5
 800f50a:	d904      	bls.n	800f516 <_malloc_r+0x26>
 800f50c:	230c      	movs	r3, #12
 800f50e:	6033      	str	r3, [r6, #0]
 800f510:	2000      	movs	r0, #0
 800f512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f5ec <_malloc_r+0xfc>
 800f51a:	f000 f869 	bl	800f5f0 <__malloc_lock>
 800f51e:	f8d8 3000 	ldr.w	r3, [r8]
 800f522:	461c      	mov	r4, r3
 800f524:	bb44      	cbnz	r4, 800f578 <_malloc_r+0x88>
 800f526:	4629      	mov	r1, r5
 800f528:	4630      	mov	r0, r6
 800f52a:	f7ff ffbf 	bl	800f4ac <sbrk_aligned>
 800f52e:	1c43      	adds	r3, r0, #1
 800f530:	4604      	mov	r4, r0
 800f532:	d158      	bne.n	800f5e6 <_malloc_r+0xf6>
 800f534:	f8d8 4000 	ldr.w	r4, [r8]
 800f538:	4627      	mov	r7, r4
 800f53a:	2f00      	cmp	r7, #0
 800f53c:	d143      	bne.n	800f5c6 <_malloc_r+0xd6>
 800f53e:	2c00      	cmp	r4, #0
 800f540:	d04b      	beq.n	800f5da <_malloc_r+0xea>
 800f542:	6823      	ldr	r3, [r4, #0]
 800f544:	4639      	mov	r1, r7
 800f546:	4630      	mov	r0, r6
 800f548:	eb04 0903 	add.w	r9, r4, r3
 800f54c:	f000 f94a 	bl	800f7e4 <_sbrk_r>
 800f550:	4581      	cmp	r9, r0
 800f552:	d142      	bne.n	800f5da <_malloc_r+0xea>
 800f554:	6821      	ldr	r1, [r4, #0]
 800f556:	1a6d      	subs	r5, r5, r1
 800f558:	4629      	mov	r1, r5
 800f55a:	4630      	mov	r0, r6
 800f55c:	f7ff ffa6 	bl	800f4ac <sbrk_aligned>
 800f560:	3001      	adds	r0, #1
 800f562:	d03a      	beq.n	800f5da <_malloc_r+0xea>
 800f564:	6823      	ldr	r3, [r4, #0]
 800f566:	442b      	add	r3, r5
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	f8d8 3000 	ldr.w	r3, [r8]
 800f56e:	685a      	ldr	r2, [r3, #4]
 800f570:	bb62      	cbnz	r2, 800f5cc <_malloc_r+0xdc>
 800f572:	f8c8 7000 	str.w	r7, [r8]
 800f576:	e00f      	b.n	800f598 <_malloc_r+0xa8>
 800f578:	6822      	ldr	r2, [r4, #0]
 800f57a:	1b52      	subs	r2, r2, r5
 800f57c:	d420      	bmi.n	800f5c0 <_malloc_r+0xd0>
 800f57e:	2a0b      	cmp	r2, #11
 800f580:	d917      	bls.n	800f5b2 <_malloc_r+0xc2>
 800f582:	1961      	adds	r1, r4, r5
 800f584:	42a3      	cmp	r3, r4
 800f586:	6025      	str	r5, [r4, #0]
 800f588:	bf18      	it	ne
 800f58a:	6059      	strne	r1, [r3, #4]
 800f58c:	6863      	ldr	r3, [r4, #4]
 800f58e:	bf08      	it	eq
 800f590:	f8c8 1000 	streq.w	r1, [r8]
 800f594:	5162      	str	r2, [r4, r5]
 800f596:	604b      	str	r3, [r1, #4]
 800f598:	4630      	mov	r0, r6
 800f59a:	f000 f82f 	bl	800f5fc <__malloc_unlock>
 800f59e:	f104 000b 	add.w	r0, r4, #11
 800f5a2:	1d23      	adds	r3, r4, #4
 800f5a4:	f020 0007 	bic.w	r0, r0, #7
 800f5a8:	1ac2      	subs	r2, r0, r3
 800f5aa:	bf1c      	itt	ne
 800f5ac:	1a1b      	subne	r3, r3, r0
 800f5ae:	50a3      	strne	r3, [r4, r2]
 800f5b0:	e7af      	b.n	800f512 <_malloc_r+0x22>
 800f5b2:	6862      	ldr	r2, [r4, #4]
 800f5b4:	42a3      	cmp	r3, r4
 800f5b6:	bf0c      	ite	eq
 800f5b8:	f8c8 2000 	streq.w	r2, [r8]
 800f5bc:	605a      	strne	r2, [r3, #4]
 800f5be:	e7eb      	b.n	800f598 <_malloc_r+0xa8>
 800f5c0:	4623      	mov	r3, r4
 800f5c2:	6864      	ldr	r4, [r4, #4]
 800f5c4:	e7ae      	b.n	800f524 <_malloc_r+0x34>
 800f5c6:	463c      	mov	r4, r7
 800f5c8:	687f      	ldr	r7, [r7, #4]
 800f5ca:	e7b6      	b.n	800f53a <_malloc_r+0x4a>
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	42a3      	cmp	r3, r4
 800f5d2:	d1fb      	bne.n	800f5cc <_malloc_r+0xdc>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	6053      	str	r3, [r2, #4]
 800f5d8:	e7de      	b.n	800f598 <_malloc_r+0xa8>
 800f5da:	230c      	movs	r3, #12
 800f5dc:	6033      	str	r3, [r6, #0]
 800f5de:	4630      	mov	r0, r6
 800f5e0:	f000 f80c 	bl	800f5fc <__malloc_unlock>
 800f5e4:	e794      	b.n	800f510 <_malloc_r+0x20>
 800f5e6:	6005      	str	r5, [r0, #0]
 800f5e8:	e7d6      	b.n	800f598 <_malloc_r+0xa8>
 800f5ea:	bf00      	nop
 800f5ec:	2000182c 	.word	0x2000182c

0800f5f0 <__malloc_lock>:
 800f5f0:	4801      	ldr	r0, [pc, #4]	@ (800f5f8 <__malloc_lock+0x8>)
 800f5f2:	f000 b931 	b.w	800f858 <__retarget_lock_acquire_recursive>
 800f5f6:	bf00      	nop
 800f5f8:	2000196c 	.word	0x2000196c

0800f5fc <__malloc_unlock>:
 800f5fc:	4801      	ldr	r0, [pc, #4]	@ (800f604 <__malloc_unlock+0x8>)
 800f5fe:	f000 b92c 	b.w	800f85a <__retarget_lock_release_recursive>
 800f602:	bf00      	nop
 800f604:	2000196c 	.word	0x2000196c

0800f608 <__utoa>:
 800f608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f60a:	4c1f      	ldr	r4, [pc, #124]	@ (800f688 <__utoa+0x80>)
 800f60c:	b08b      	sub	sp, #44	@ 0x2c
 800f60e:	4605      	mov	r5, r0
 800f610:	460b      	mov	r3, r1
 800f612:	466e      	mov	r6, sp
 800f614:	f104 0c20 	add.w	ip, r4, #32
 800f618:	6820      	ldr	r0, [r4, #0]
 800f61a:	6861      	ldr	r1, [r4, #4]
 800f61c:	4637      	mov	r7, r6
 800f61e:	c703      	stmia	r7!, {r0, r1}
 800f620:	3408      	adds	r4, #8
 800f622:	4564      	cmp	r4, ip
 800f624:	463e      	mov	r6, r7
 800f626:	d1f7      	bne.n	800f618 <__utoa+0x10>
 800f628:	7921      	ldrb	r1, [r4, #4]
 800f62a:	7139      	strb	r1, [r7, #4]
 800f62c:	1e91      	subs	r1, r2, #2
 800f62e:	6820      	ldr	r0, [r4, #0]
 800f630:	6038      	str	r0, [r7, #0]
 800f632:	2922      	cmp	r1, #34	@ 0x22
 800f634:	f04f 0100 	mov.w	r1, #0
 800f638:	d904      	bls.n	800f644 <__utoa+0x3c>
 800f63a:	7019      	strb	r1, [r3, #0]
 800f63c:	460b      	mov	r3, r1
 800f63e:	4618      	mov	r0, r3
 800f640:	b00b      	add	sp, #44	@ 0x2c
 800f642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f644:	1e58      	subs	r0, r3, #1
 800f646:	4684      	mov	ip, r0
 800f648:	fbb5 f7f2 	udiv	r7, r5, r2
 800f64c:	fb02 5617 	mls	r6, r2, r7, r5
 800f650:	3628      	adds	r6, #40	@ 0x28
 800f652:	446e      	add	r6, sp
 800f654:	460c      	mov	r4, r1
 800f656:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f65a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f65e:	462e      	mov	r6, r5
 800f660:	42b2      	cmp	r2, r6
 800f662:	f101 0101 	add.w	r1, r1, #1
 800f666:	463d      	mov	r5, r7
 800f668:	d9ee      	bls.n	800f648 <__utoa+0x40>
 800f66a:	2200      	movs	r2, #0
 800f66c:	545a      	strb	r2, [r3, r1]
 800f66e:	1919      	adds	r1, r3, r4
 800f670:	1aa5      	subs	r5, r4, r2
 800f672:	42aa      	cmp	r2, r5
 800f674:	dae3      	bge.n	800f63e <__utoa+0x36>
 800f676:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f67a:	780e      	ldrb	r6, [r1, #0]
 800f67c:	7006      	strb	r6, [r0, #0]
 800f67e:	3201      	adds	r2, #1
 800f680:	f801 5901 	strb.w	r5, [r1], #-1
 800f684:	e7f4      	b.n	800f670 <__utoa+0x68>
 800f686:	bf00      	nop
 800f688:	08017ad8 	.word	0x08017ad8

0800f68c <_vsniprintf_r>:
 800f68c:	b530      	push	{r4, r5, lr}
 800f68e:	4614      	mov	r4, r2
 800f690:	2c00      	cmp	r4, #0
 800f692:	b09b      	sub	sp, #108	@ 0x6c
 800f694:	4605      	mov	r5, r0
 800f696:	461a      	mov	r2, r3
 800f698:	da05      	bge.n	800f6a6 <_vsniprintf_r+0x1a>
 800f69a:	238b      	movs	r3, #139	@ 0x8b
 800f69c:	6003      	str	r3, [r0, #0]
 800f69e:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a2:	b01b      	add	sp, #108	@ 0x6c
 800f6a4:	bd30      	pop	{r4, r5, pc}
 800f6a6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f6aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f6ae:	bf14      	ite	ne
 800f6b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f6b4:	4623      	moveq	r3, r4
 800f6b6:	9302      	str	r3, [sp, #8]
 800f6b8:	9305      	str	r3, [sp, #20]
 800f6ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f6be:	9100      	str	r1, [sp, #0]
 800f6c0:	9104      	str	r1, [sp, #16]
 800f6c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f6c6:	4669      	mov	r1, sp
 800f6c8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f6ca:	f000 f97b 	bl	800f9c4 <_svfiprintf_r>
 800f6ce:	1c43      	adds	r3, r0, #1
 800f6d0:	bfbc      	itt	lt
 800f6d2:	238b      	movlt	r3, #139	@ 0x8b
 800f6d4:	602b      	strlt	r3, [r5, #0]
 800f6d6:	2c00      	cmp	r4, #0
 800f6d8:	d0e3      	beq.n	800f6a2 <_vsniprintf_r+0x16>
 800f6da:	9b00      	ldr	r3, [sp, #0]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	701a      	strb	r2, [r3, #0]
 800f6e0:	e7df      	b.n	800f6a2 <_vsniprintf_r+0x16>
	...

0800f6e4 <vsniprintf>:
 800f6e4:	b507      	push	{r0, r1, r2, lr}
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	4613      	mov	r3, r2
 800f6ea:	460a      	mov	r2, r1
 800f6ec:	4601      	mov	r1, r0
 800f6ee:	4803      	ldr	r0, [pc, #12]	@ (800f6fc <vsniprintf+0x18>)
 800f6f0:	6800      	ldr	r0, [r0, #0]
 800f6f2:	f7ff ffcb 	bl	800f68c <_vsniprintf_r>
 800f6f6:	b003      	add	sp, #12
 800f6f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6fc:	20000134 	.word	0x20000134

0800f700 <memset>:
 800f700:	4402      	add	r2, r0
 800f702:	4603      	mov	r3, r0
 800f704:	4293      	cmp	r3, r2
 800f706:	d100      	bne.n	800f70a <memset+0xa>
 800f708:	4770      	bx	lr
 800f70a:	f803 1b01 	strb.w	r1, [r3], #1
 800f70e:	e7f9      	b.n	800f704 <memset+0x4>

0800f710 <strncat>:
 800f710:	b530      	push	{r4, r5, lr}
 800f712:	4604      	mov	r4, r0
 800f714:	7825      	ldrb	r5, [r4, #0]
 800f716:	4623      	mov	r3, r4
 800f718:	3401      	adds	r4, #1
 800f71a:	2d00      	cmp	r5, #0
 800f71c:	d1fa      	bne.n	800f714 <strncat+0x4>
 800f71e:	3a01      	subs	r2, #1
 800f720:	d304      	bcc.n	800f72c <strncat+0x1c>
 800f722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f726:	f803 4b01 	strb.w	r4, [r3], #1
 800f72a:	b904      	cbnz	r4, 800f72e <strncat+0x1e>
 800f72c:	bd30      	pop	{r4, r5, pc}
 800f72e:	2a00      	cmp	r2, #0
 800f730:	d1f5      	bne.n	800f71e <strncat+0xe>
 800f732:	701a      	strb	r2, [r3, #0]
 800f734:	e7f3      	b.n	800f71e <strncat+0xe>

0800f736 <strncpy>:
 800f736:	b510      	push	{r4, lr}
 800f738:	3901      	subs	r1, #1
 800f73a:	4603      	mov	r3, r0
 800f73c:	b132      	cbz	r2, 800f74c <strncpy+0x16>
 800f73e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f742:	f803 4b01 	strb.w	r4, [r3], #1
 800f746:	3a01      	subs	r2, #1
 800f748:	2c00      	cmp	r4, #0
 800f74a:	d1f7      	bne.n	800f73c <strncpy+0x6>
 800f74c:	441a      	add	r2, r3
 800f74e:	2100      	movs	r1, #0
 800f750:	4293      	cmp	r3, r2
 800f752:	d100      	bne.n	800f756 <strncpy+0x20>
 800f754:	bd10      	pop	{r4, pc}
 800f756:	f803 1b01 	strb.w	r1, [r3], #1
 800f75a:	e7f9      	b.n	800f750 <strncpy+0x1a>

0800f75c <_raise_r>:
 800f75c:	291f      	cmp	r1, #31
 800f75e:	b538      	push	{r3, r4, r5, lr}
 800f760:	4605      	mov	r5, r0
 800f762:	460c      	mov	r4, r1
 800f764:	d904      	bls.n	800f770 <_raise_r+0x14>
 800f766:	2316      	movs	r3, #22
 800f768:	6003      	str	r3, [r0, #0]
 800f76a:	f04f 30ff 	mov.w	r0, #4294967295
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f772:	b112      	cbz	r2, 800f77a <_raise_r+0x1e>
 800f774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f778:	b94b      	cbnz	r3, 800f78e <_raise_r+0x32>
 800f77a:	4628      	mov	r0, r5
 800f77c:	f000 f830 	bl	800f7e0 <_getpid_r>
 800f780:	4622      	mov	r2, r4
 800f782:	4601      	mov	r1, r0
 800f784:	4628      	mov	r0, r5
 800f786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f78a:	f000 b817 	b.w	800f7bc <_kill_r>
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d00a      	beq.n	800f7a8 <_raise_r+0x4c>
 800f792:	1c59      	adds	r1, r3, #1
 800f794:	d103      	bne.n	800f79e <_raise_r+0x42>
 800f796:	2316      	movs	r3, #22
 800f798:	6003      	str	r3, [r0, #0]
 800f79a:	2001      	movs	r0, #1
 800f79c:	e7e7      	b.n	800f76e <_raise_r+0x12>
 800f79e:	2100      	movs	r1, #0
 800f7a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	4798      	blx	r3
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	e7e0      	b.n	800f76e <_raise_r+0x12>

0800f7ac <raise>:
 800f7ac:	4b02      	ldr	r3, [pc, #8]	@ (800f7b8 <raise+0xc>)
 800f7ae:	4601      	mov	r1, r0
 800f7b0:	6818      	ldr	r0, [r3, #0]
 800f7b2:	f7ff bfd3 	b.w	800f75c <_raise_r>
 800f7b6:	bf00      	nop
 800f7b8:	20000134 	.word	0x20000134

0800f7bc <_kill_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d07      	ldr	r5, [pc, #28]	@ (800f7dc <_kill_r+0x20>)
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	4608      	mov	r0, r1
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	602b      	str	r3, [r5, #0]
 800f7ca:	f7f2 fc73 	bl	80020b4 <_kill>
 800f7ce:	1c43      	adds	r3, r0, #1
 800f7d0:	d102      	bne.n	800f7d8 <_kill_r+0x1c>
 800f7d2:	682b      	ldr	r3, [r5, #0]
 800f7d4:	b103      	cbz	r3, 800f7d8 <_kill_r+0x1c>
 800f7d6:	6023      	str	r3, [r4, #0]
 800f7d8:	bd38      	pop	{r3, r4, r5, pc}
 800f7da:	bf00      	nop
 800f7dc:	20001968 	.word	0x20001968

0800f7e0 <_getpid_r>:
 800f7e0:	f7f2 bc60 	b.w	80020a4 <_getpid>

0800f7e4 <_sbrk_r>:
 800f7e4:	b538      	push	{r3, r4, r5, lr}
 800f7e6:	4d06      	ldr	r5, [pc, #24]	@ (800f800 <_sbrk_r+0x1c>)
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	602b      	str	r3, [r5, #0]
 800f7f0:	f7f2 fc7c 	bl	80020ec <_sbrk>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_sbrk_r+0x1a>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_sbrk_r+0x1a>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	20001968 	.word	0x20001968

0800f804 <__errno>:
 800f804:	4b01      	ldr	r3, [pc, #4]	@ (800f80c <__errno+0x8>)
 800f806:	6818      	ldr	r0, [r3, #0]
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	20000134 	.word	0x20000134

0800f810 <__libc_init_array>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	4d0d      	ldr	r5, [pc, #52]	@ (800f848 <__libc_init_array+0x38>)
 800f814:	4c0d      	ldr	r4, [pc, #52]	@ (800f84c <__libc_init_array+0x3c>)
 800f816:	1b64      	subs	r4, r4, r5
 800f818:	10a4      	asrs	r4, r4, #2
 800f81a:	2600      	movs	r6, #0
 800f81c:	42a6      	cmp	r6, r4
 800f81e:	d109      	bne.n	800f834 <__libc_init_array+0x24>
 800f820:	4d0b      	ldr	r5, [pc, #44]	@ (800f850 <__libc_init_array+0x40>)
 800f822:	4c0c      	ldr	r4, [pc, #48]	@ (800f854 <__libc_init_array+0x44>)
 800f824:	f000 fba8 	bl	800ff78 <_init>
 800f828:	1b64      	subs	r4, r4, r5
 800f82a:	10a4      	asrs	r4, r4, #2
 800f82c:	2600      	movs	r6, #0
 800f82e:	42a6      	cmp	r6, r4
 800f830:	d105      	bne.n	800f83e <__libc_init_array+0x2e>
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	f855 3b04 	ldr.w	r3, [r5], #4
 800f838:	4798      	blx	r3
 800f83a:	3601      	adds	r6, #1
 800f83c:	e7ee      	b.n	800f81c <__libc_init_array+0xc>
 800f83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f842:	4798      	blx	r3
 800f844:	3601      	adds	r6, #1
 800f846:	e7f2      	b.n	800f82e <__libc_init_array+0x1e>
 800f848:	08017b38 	.word	0x08017b38
 800f84c:	08017b38 	.word	0x08017b38
 800f850:	08017b38 	.word	0x08017b38
 800f854:	08017b44 	.word	0x08017b44

0800f858 <__retarget_lock_acquire_recursive>:
 800f858:	4770      	bx	lr

0800f85a <__retarget_lock_release_recursive>:
 800f85a:	4770      	bx	lr

0800f85c <memcpy>:
 800f85c:	440a      	add	r2, r1
 800f85e:	4291      	cmp	r1, r2
 800f860:	f100 33ff 	add.w	r3, r0, #4294967295
 800f864:	d100      	bne.n	800f868 <memcpy+0xc>
 800f866:	4770      	bx	lr
 800f868:	b510      	push	{r4, lr}
 800f86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f872:	4291      	cmp	r1, r2
 800f874:	d1f9      	bne.n	800f86a <memcpy+0xe>
 800f876:	bd10      	pop	{r4, pc}

0800f878 <_free_r>:
 800f878:	b538      	push	{r3, r4, r5, lr}
 800f87a:	4605      	mov	r5, r0
 800f87c:	2900      	cmp	r1, #0
 800f87e:	d041      	beq.n	800f904 <_free_r+0x8c>
 800f880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f884:	1f0c      	subs	r4, r1, #4
 800f886:	2b00      	cmp	r3, #0
 800f888:	bfb8      	it	lt
 800f88a:	18e4      	addlt	r4, r4, r3
 800f88c:	f7ff feb0 	bl	800f5f0 <__malloc_lock>
 800f890:	4a1d      	ldr	r2, [pc, #116]	@ (800f908 <_free_r+0x90>)
 800f892:	6813      	ldr	r3, [r2, #0]
 800f894:	b933      	cbnz	r3, 800f8a4 <_free_r+0x2c>
 800f896:	6063      	str	r3, [r4, #4]
 800f898:	6014      	str	r4, [r2, #0]
 800f89a:	4628      	mov	r0, r5
 800f89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8a0:	f7ff beac 	b.w	800f5fc <__malloc_unlock>
 800f8a4:	42a3      	cmp	r3, r4
 800f8a6:	d908      	bls.n	800f8ba <_free_r+0x42>
 800f8a8:	6820      	ldr	r0, [r4, #0]
 800f8aa:	1821      	adds	r1, r4, r0
 800f8ac:	428b      	cmp	r3, r1
 800f8ae:	bf01      	itttt	eq
 800f8b0:	6819      	ldreq	r1, [r3, #0]
 800f8b2:	685b      	ldreq	r3, [r3, #4]
 800f8b4:	1809      	addeq	r1, r1, r0
 800f8b6:	6021      	streq	r1, [r4, #0]
 800f8b8:	e7ed      	b.n	800f896 <_free_r+0x1e>
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	b10b      	cbz	r3, 800f8c4 <_free_r+0x4c>
 800f8c0:	42a3      	cmp	r3, r4
 800f8c2:	d9fa      	bls.n	800f8ba <_free_r+0x42>
 800f8c4:	6811      	ldr	r1, [r2, #0]
 800f8c6:	1850      	adds	r0, r2, r1
 800f8c8:	42a0      	cmp	r0, r4
 800f8ca:	d10b      	bne.n	800f8e4 <_free_r+0x6c>
 800f8cc:	6820      	ldr	r0, [r4, #0]
 800f8ce:	4401      	add	r1, r0
 800f8d0:	1850      	adds	r0, r2, r1
 800f8d2:	4283      	cmp	r3, r0
 800f8d4:	6011      	str	r1, [r2, #0]
 800f8d6:	d1e0      	bne.n	800f89a <_free_r+0x22>
 800f8d8:	6818      	ldr	r0, [r3, #0]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	6053      	str	r3, [r2, #4]
 800f8de:	4408      	add	r0, r1
 800f8e0:	6010      	str	r0, [r2, #0]
 800f8e2:	e7da      	b.n	800f89a <_free_r+0x22>
 800f8e4:	d902      	bls.n	800f8ec <_free_r+0x74>
 800f8e6:	230c      	movs	r3, #12
 800f8e8:	602b      	str	r3, [r5, #0]
 800f8ea:	e7d6      	b.n	800f89a <_free_r+0x22>
 800f8ec:	6820      	ldr	r0, [r4, #0]
 800f8ee:	1821      	adds	r1, r4, r0
 800f8f0:	428b      	cmp	r3, r1
 800f8f2:	bf04      	itt	eq
 800f8f4:	6819      	ldreq	r1, [r3, #0]
 800f8f6:	685b      	ldreq	r3, [r3, #4]
 800f8f8:	6063      	str	r3, [r4, #4]
 800f8fa:	bf04      	itt	eq
 800f8fc:	1809      	addeq	r1, r1, r0
 800f8fe:	6021      	streq	r1, [r4, #0]
 800f900:	6054      	str	r4, [r2, #4]
 800f902:	e7ca      	b.n	800f89a <_free_r+0x22>
 800f904:	bd38      	pop	{r3, r4, r5, pc}
 800f906:	bf00      	nop
 800f908:	2000182c 	.word	0x2000182c

0800f90c <__ssputs_r>:
 800f90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f910:	688e      	ldr	r6, [r1, #8]
 800f912:	461f      	mov	r7, r3
 800f914:	42be      	cmp	r6, r7
 800f916:	680b      	ldr	r3, [r1, #0]
 800f918:	4682      	mov	sl, r0
 800f91a:	460c      	mov	r4, r1
 800f91c:	4690      	mov	r8, r2
 800f91e:	d82d      	bhi.n	800f97c <__ssputs_r+0x70>
 800f920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f924:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f928:	d026      	beq.n	800f978 <__ssputs_r+0x6c>
 800f92a:	6965      	ldr	r5, [r4, #20]
 800f92c:	6909      	ldr	r1, [r1, #16]
 800f92e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f932:	eba3 0901 	sub.w	r9, r3, r1
 800f936:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f93a:	1c7b      	adds	r3, r7, #1
 800f93c:	444b      	add	r3, r9
 800f93e:	106d      	asrs	r5, r5, #1
 800f940:	429d      	cmp	r5, r3
 800f942:	bf38      	it	cc
 800f944:	461d      	movcc	r5, r3
 800f946:	0553      	lsls	r3, r2, #21
 800f948:	d527      	bpl.n	800f99a <__ssputs_r+0x8e>
 800f94a:	4629      	mov	r1, r5
 800f94c:	f7ff fdd0 	bl	800f4f0 <_malloc_r>
 800f950:	4606      	mov	r6, r0
 800f952:	b360      	cbz	r0, 800f9ae <__ssputs_r+0xa2>
 800f954:	6921      	ldr	r1, [r4, #16]
 800f956:	464a      	mov	r2, r9
 800f958:	f7ff ff80 	bl	800f85c <memcpy>
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f966:	81a3      	strh	r3, [r4, #12]
 800f968:	6126      	str	r6, [r4, #16]
 800f96a:	6165      	str	r5, [r4, #20]
 800f96c:	444e      	add	r6, r9
 800f96e:	eba5 0509 	sub.w	r5, r5, r9
 800f972:	6026      	str	r6, [r4, #0]
 800f974:	60a5      	str	r5, [r4, #8]
 800f976:	463e      	mov	r6, r7
 800f978:	42be      	cmp	r6, r7
 800f97a:	d900      	bls.n	800f97e <__ssputs_r+0x72>
 800f97c:	463e      	mov	r6, r7
 800f97e:	6820      	ldr	r0, [r4, #0]
 800f980:	4632      	mov	r2, r6
 800f982:	4641      	mov	r1, r8
 800f984:	f000 faa8 	bl	800fed8 <memmove>
 800f988:	68a3      	ldr	r3, [r4, #8]
 800f98a:	1b9b      	subs	r3, r3, r6
 800f98c:	60a3      	str	r3, [r4, #8]
 800f98e:	6823      	ldr	r3, [r4, #0]
 800f990:	4433      	add	r3, r6
 800f992:	6023      	str	r3, [r4, #0]
 800f994:	2000      	movs	r0, #0
 800f996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99a:	462a      	mov	r2, r5
 800f99c:	f000 fab6 	bl	800ff0c <_realloc_r>
 800f9a0:	4606      	mov	r6, r0
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d1e0      	bne.n	800f968 <__ssputs_r+0x5c>
 800f9a6:	6921      	ldr	r1, [r4, #16]
 800f9a8:	4650      	mov	r0, sl
 800f9aa:	f7ff ff65 	bl	800f878 <_free_r>
 800f9ae:	230c      	movs	r3, #12
 800f9b0:	f8ca 3000 	str.w	r3, [sl]
 800f9b4:	89a3      	ldrh	r3, [r4, #12]
 800f9b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9ba:	81a3      	strh	r3, [r4, #12]
 800f9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c0:	e7e9      	b.n	800f996 <__ssputs_r+0x8a>
	...

0800f9c4 <_svfiprintf_r>:
 800f9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c8:	4698      	mov	r8, r3
 800f9ca:	898b      	ldrh	r3, [r1, #12]
 800f9cc:	061b      	lsls	r3, r3, #24
 800f9ce:	b09d      	sub	sp, #116	@ 0x74
 800f9d0:	4607      	mov	r7, r0
 800f9d2:	460d      	mov	r5, r1
 800f9d4:	4614      	mov	r4, r2
 800f9d6:	d510      	bpl.n	800f9fa <_svfiprintf_r+0x36>
 800f9d8:	690b      	ldr	r3, [r1, #16]
 800f9da:	b973      	cbnz	r3, 800f9fa <_svfiprintf_r+0x36>
 800f9dc:	2140      	movs	r1, #64	@ 0x40
 800f9de:	f7ff fd87 	bl	800f4f0 <_malloc_r>
 800f9e2:	6028      	str	r0, [r5, #0]
 800f9e4:	6128      	str	r0, [r5, #16]
 800f9e6:	b930      	cbnz	r0, 800f9f6 <_svfiprintf_r+0x32>
 800f9e8:	230c      	movs	r3, #12
 800f9ea:	603b      	str	r3, [r7, #0]
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f0:	b01d      	add	sp, #116	@ 0x74
 800f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f6:	2340      	movs	r3, #64	@ 0x40
 800f9f8:	616b      	str	r3, [r5, #20]
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9fe:	2320      	movs	r3, #32
 800fa00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa04:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa08:	2330      	movs	r3, #48	@ 0x30
 800fa0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fba8 <_svfiprintf_r+0x1e4>
 800fa0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa12:	f04f 0901 	mov.w	r9, #1
 800fa16:	4623      	mov	r3, r4
 800fa18:	469a      	mov	sl, r3
 800fa1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa1e:	b10a      	cbz	r2, 800fa24 <_svfiprintf_r+0x60>
 800fa20:	2a25      	cmp	r2, #37	@ 0x25
 800fa22:	d1f9      	bne.n	800fa18 <_svfiprintf_r+0x54>
 800fa24:	ebba 0b04 	subs.w	fp, sl, r4
 800fa28:	d00b      	beq.n	800fa42 <_svfiprintf_r+0x7e>
 800fa2a:	465b      	mov	r3, fp
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4638      	mov	r0, r7
 800fa32:	f7ff ff6b 	bl	800f90c <__ssputs_r>
 800fa36:	3001      	adds	r0, #1
 800fa38:	f000 80a7 	beq.w	800fb8a <_svfiprintf_r+0x1c6>
 800fa3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa3e:	445a      	add	r2, fp
 800fa40:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa42:	f89a 3000 	ldrb.w	r3, [sl]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	f000 809f 	beq.w	800fb8a <_svfiprintf_r+0x1c6>
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa56:	f10a 0a01 	add.w	sl, sl, #1
 800fa5a:	9304      	str	r3, [sp, #16]
 800fa5c:	9307      	str	r3, [sp, #28]
 800fa5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa62:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa64:	4654      	mov	r4, sl
 800fa66:	2205      	movs	r2, #5
 800fa68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa6c:	484e      	ldr	r0, [pc, #312]	@ (800fba8 <_svfiprintf_r+0x1e4>)
 800fa6e:	f7f0 fbbf 	bl	80001f0 <memchr>
 800fa72:	9a04      	ldr	r2, [sp, #16]
 800fa74:	b9d8      	cbnz	r0, 800faae <_svfiprintf_r+0xea>
 800fa76:	06d0      	lsls	r0, r2, #27
 800fa78:	bf44      	itt	mi
 800fa7a:	2320      	movmi	r3, #32
 800fa7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa80:	0711      	lsls	r1, r2, #28
 800fa82:	bf44      	itt	mi
 800fa84:	232b      	movmi	r3, #43	@ 0x2b
 800fa86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa90:	d015      	beq.n	800fabe <_svfiprintf_r+0xfa>
 800fa92:	9a07      	ldr	r2, [sp, #28]
 800fa94:	4654      	mov	r4, sl
 800fa96:	2000      	movs	r0, #0
 800fa98:	f04f 0c0a 	mov.w	ip, #10
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faa2:	3b30      	subs	r3, #48	@ 0x30
 800faa4:	2b09      	cmp	r3, #9
 800faa6:	d94b      	bls.n	800fb40 <_svfiprintf_r+0x17c>
 800faa8:	b1b0      	cbz	r0, 800fad8 <_svfiprintf_r+0x114>
 800faaa:	9207      	str	r2, [sp, #28]
 800faac:	e014      	b.n	800fad8 <_svfiprintf_r+0x114>
 800faae:	eba0 0308 	sub.w	r3, r0, r8
 800fab2:	fa09 f303 	lsl.w	r3, r9, r3
 800fab6:	4313      	orrs	r3, r2
 800fab8:	9304      	str	r3, [sp, #16]
 800faba:	46a2      	mov	sl, r4
 800fabc:	e7d2      	b.n	800fa64 <_svfiprintf_r+0xa0>
 800fabe:	9b03      	ldr	r3, [sp, #12]
 800fac0:	1d19      	adds	r1, r3, #4
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	9103      	str	r1, [sp, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	bfbb      	ittet	lt
 800faca:	425b      	neglt	r3, r3
 800facc:	f042 0202 	orrlt.w	r2, r2, #2
 800fad0:	9307      	strge	r3, [sp, #28]
 800fad2:	9307      	strlt	r3, [sp, #28]
 800fad4:	bfb8      	it	lt
 800fad6:	9204      	strlt	r2, [sp, #16]
 800fad8:	7823      	ldrb	r3, [r4, #0]
 800fada:	2b2e      	cmp	r3, #46	@ 0x2e
 800fadc:	d10a      	bne.n	800faf4 <_svfiprintf_r+0x130>
 800fade:	7863      	ldrb	r3, [r4, #1]
 800fae0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fae2:	d132      	bne.n	800fb4a <_svfiprintf_r+0x186>
 800fae4:	9b03      	ldr	r3, [sp, #12]
 800fae6:	1d1a      	adds	r2, r3, #4
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	9203      	str	r2, [sp, #12]
 800faec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800faf0:	3402      	adds	r4, #2
 800faf2:	9305      	str	r3, [sp, #20]
 800faf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fbb8 <_svfiprintf_r+0x1f4>
 800faf8:	7821      	ldrb	r1, [r4, #0]
 800fafa:	2203      	movs	r2, #3
 800fafc:	4650      	mov	r0, sl
 800fafe:	f7f0 fb77 	bl	80001f0 <memchr>
 800fb02:	b138      	cbz	r0, 800fb14 <_svfiprintf_r+0x150>
 800fb04:	9b04      	ldr	r3, [sp, #16]
 800fb06:	eba0 000a 	sub.w	r0, r0, sl
 800fb0a:	2240      	movs	r2, #64	@ 0x40
 800fb0c:	4082      	lsls	r2, r0
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	3401      	adds	r4, #1
 800fb12:	9304      	str	r3, [sp, #16]
 800fb14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb18:	4824      	ldr	r0, [pc, #144]	@ (800fbac <_svfiprintf_r+0x1e8>)
 800fb1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb1e:	2206      	movs	r2, #6
 800fb20:	f7f0 fb66 	bl	80001f0 <memchr>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d036      	beq.n	800fb96 <_svfiprintf_r+0x1d2>
 800fb28:	4b21      	ldr	r3, [pc, #132]	@ (800fbb0 <_svfiprintf_r+0x1ec>)
 800fb2a:	bb1b      	cbnz	r3, 800fb74 <_svfiprintf_r+0x1b0>
 800fb2c:	9b03      	ldr	r3, [sp, #12]
 800fb2e:	3307      	adds	r3, #7
 800fb30:	f023 0307 	bic.w	r3, r3, #7
 800fb34:	3308      	adds	r3, #8
 800fb36:	9303      	str	r3, [sp, #12]
 800fb38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb3a:	4433      	add	r3, r6
 800fb3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb3e:	e76a      	b.n	800fa16 <_svfiprintf_r+0x52>
 800fb40:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb44:	460c      	mov	r4, r1
 800fb46:	2001      	movs	r0, #1
 800fb48:	e7a8      	b.n	800fa9c <_svfiprintf_r+0xd8>
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	3401      	adds	r4, #1
 800fb4e:	9305      	str	r3, [sp, #20]
 800fb50:	4619      	mov	r1, r3
 800fb52:	f04f 0c0a 	mov.w	ip, #10
 800fb56:	4620      	mov	r0, r4
 800fb58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb5c:	3a30      	subs	r2, #48	@ 0x30
 800fb5e:	2a09      	cmp	r2, #9
 800fb60:	d903      	bls.n	800fb6a <_svfiprintf_r+0x1a6>
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d0c6      	beq.n	800faf4 <_svfiprintf_r+0x130>
 800fb66:	9105      	str	r1, [sp, #20]
 800fb68:	e7c4      	b.n	800faf4 <_svfiprintf_r+0x130>
 800fb6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb6e:	4604      	mov	r4, r0
 800fb70:	2301      	movs	r3, #1
 800fb72:	e7f0      	b.n	800fb56 <_svfiprintf_r+0x192>
 800fb74:	ab03      	add	r3, sp, #12
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	462a      	mov	r2, r5
 800fb7a:	4b0e      	ldr	r3, [pc, #56]	@ (800fbb4 <_svfiprintf_r+0x1f0>)
 800fb7c:	a904      	add	r1, sp, #16
 800fb7e:	4638      	mov	r0, r7
 800fb80:	f3af 8000 	nop.w
 800fb84:	1c42      	adds	r2, r0, #1
 800fb86:	4606      	mov	r6, r0
 800fb88:	d1d6      	bne.n	800fb38 <_svfiprintf_r+0x174>
 800fb8a:	89ab      	ldrh	r3, [r5, #12]
 800fb8c:	065b      	lsls	r3, r3, #25
 800fb8e:	f53f af2d 	bmi.w	800f9ec <_svfiprintf_r+0x28>
 800fb92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb94:	e72c      	b.n	800f9f0 <_svfiprintf_r+0x2c>
 800fb96:	ab03      	add	r3, sp, #12
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	462a      	mov	r2, r5
 800fb9c:	4b05      	ldr	r3, [pc, #20]	@ (800fbb4 <_svfiprintf_r+0x1f0>)
 800fb9e:	a904      	add	r1, sp, #16
 800fba0:	4638      	mov	r0, r7
 800fba2:	f000 f879 	bl	800fc98 <_printf_i>
 800fba6:	e7ed      	b.n	800fb84 <_svfiprintf_r+0x1c0>
 800fba8:	08017afd 	.word	0x08017afd
 800fbac:	08017b07 	.word	0x08017b07
 800fbb0:	00000000 	.word	0x00000000
 800fbb4:	0800f90d 	.word	0x0800f90d
 800fbb8:	08017b03 	.word	0x08017b03

0800fbbc <_printf_common>:
 800fbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc0:	4616      	mov	r6, r2
 800fbc2:	4698      	mov	r8, r3
 800fbc4:	688a      	ldr	r2, [r1, #8]
 800fbc6:	690b      	ldr	r3, [r1, #16]
 800fbc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	bfb8      	it	lt
 800fbd0:	4613      	movlt	r3, r2
 800fbd2:	6033      	str	r3, [r6, #0]
 800fbd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fbd8:	4607      	mov	r7, r0
 800fbda:	460c      	mov	r4, r1
 800fbdc:	b10a      	cbz	r2, 800fbe2 <_printf_common+0x26>
 800fbde:	3301      	adds	r3, #1
 800fbe0:	6033      	str	r3, [r6, #0]
 800fbe2:	6823      	ldr	r3, [r4, #0]
 800fbe4:	0699      	lsls	r1, r3, #26
 800fbe6:	bf42      	ittt	mi
 800fbe8:	6833      	ldrmi	r3, [r6, #0]
 800fbea:	3302      	addmi	r3, #2
 800fbec:	6033      	strmi	r3, [r6, #0]
 800fbee:	6825      	ldr	r5, [r4, #0]
 800fbf0:	f015 0506 	ands.w	r5, r5, #6
 800fbf4:	d106      	bne.n	800fc04 <_printf_common+0x48>
 800fbf6:	f104 0a19 	add.w	sl, r4, #25
 800fbfa:	68e3      	ldr	r3, [r4, #12]
 800fbfc:	6832      	ldr	r2, [r6, #0]
 800fbfe:	1a9b      	subs	r3, r3, r2
 800fc00:	42ab      	cmp	r3, r5
 800fc02:	dc26      	bgt.n	800fc52 <_printf_common+0x96>
 800fc04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fc08:	6822      	ldr	r2, [r4, #0]
 800fc0a:	3b00      	subs	r3, #0
 800fc0c:	bf18      	it	ne
 800fc0e:	2301      	movne	r3, #1
 800fc10:	0692      	lsls	r2, r2, #26
 800fc12:	d42b      	bmi.n	800fc6c <_printf_common+0xb0>
 800fc14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc18:	4641      	mov	r1, r8
 800fc1a:	4638      	mov	r0, r7
 800fc1c:	47c8      	blx	r9
 800fc1e:	3001      	adds	r0, #1
 800fc20:	d01e      	beq.n	800fc60 <_printf_common+0xa4>
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	6922      	ldr	r2, [r4, #16]
 800fc26:	f003 0306 	and.w	r3, r3, #6
 800fc2a:	2b04      	cmp	r3, #4
 800fc2c:	bf02      	ittt	eq
 800fc2e:	68e5      	ldreq	r5, [r4, #12]
 800fc30:	6833      	ldreq	r3, [r6, #0]
 800fc32:	1aed      	subeq	r5, r5, r3
 800fc34:	68a3      	ldr	r3, [r4, #8]
 800fc36:	bf0c      	ite	eq
 800fc38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc3c:	2500      	movne	r5, #0
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	bfc4      	itt	gt
 800fc42:	1a9b      	subgt	r3, r3, r2
 800fc44:	18ed      	addgt	r5, r5, r3
 800fc46:	2600      	movs	r6, #0
 800fc48:	341a      	adds	r4, #26
 800fc4a:	42b5      	cmp	r5, r6
 800fc4c:	d11a      	bne.n	800fc84 <_printf_common+0xc8>
 800fc4e:	2000      	movs	r0, #0
 800fc50:	e008      	b.n	800fc64 <_printf_common+0xa8>
 800fc52:	2301      	movs	r3, #1
 800fc54:	4652      	mov	r2, sl
 800fc56:	4641      	mov	r1, r8
 800fc58:	4638      	mov	r0, r7
 800fc5a:	47c8      	blx	r9
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	d103      	bne.n	800fc68 <_printf_common+0xac>
 800fc60:	f04f 30ff 	mov.w	r0, #4294967295
 800fc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc68:	3501      	adds	r5, #1
 800fc6a:	e7c6      	b.n	800fbfa <_printf_common+0x3e>
 800fc6c:	18e1      	adds	r1, r4, r3
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	2030      	movs	r0, #48	@ 0x30
 800fc72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc76:	4422      	add	r2, r4
 800fc78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc80:	3302      	adds	r3, #2
 800fc82:	e7c7      	b.n	800fc14 <_printf_common+0x58>
 800fc84:	2301      	movs	r3, #1
 800fc86:	4622      	mov	r2, r4
 800fc88:	4641      	mov	r1, r8
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	47c8      	blx	r9
 800fc8e:	3001      	adds	r0, #1
 800fc90:	d0e6      	beq.n	800fc60 <_printf_common+0xa4>
 800fc92:	3601      	adds	r6, #1
 800fc94:	e7d9      	b.n	800fc4a <_printf_common+0x8e>
	...

0800fc98 <_printf_i>:
 800fc98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc9c:	7e0f      	ldrb	r7, [r1, #24]
 800fc9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fca0:	2f78      	cmp	r7, #120	@ 0x78
 800fca2:	4691      	mov	r9, r2
 800fca4:	4680      	mov	r8, r0
 800fca6:	460c      	mov	r4, r1
 800fca8:	469a      	mov	sl, r3
 800fcaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fcae:	d807      	bhi.n	800fcc0 <_printf_i+0x28>
 800fcb0:	2f62      	cmp	r7, #98	@ 0x62
 800fcb2:	d80a      	bhi.n	800fcca <_printf_i+0x32>
 800fcb4:	2f00      	cmp	r7, #0
 800fcb6:	f000 80d2 	beq.w	800fe5e <_printf_i+0x1c6>
 800fcba:	2f58      	cmp	r7, #88	@ 0x58
 800fcbc:	f000 80b9 	beq.w	800fe32 <_printf_i+0x19a>
 800fcc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fcc8:	e03a      	b.n	800fd40 <_printf_i+0xa8>
 800fcca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fcce:	2b15      	cmp	r3, #21
 800fcd0:	d8f6      	bhi.n	800fcc0 <_printf_i+0x28>
 800fcd2:	a101      	add	r1, pc, #4	@ (adr r1, 800fcd8 <_printf_i+0x40>)
 800fcd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fcd8:	0800fd31 	.word	0x0800fd31
 800fcdc:	0800fd45 	.word	0x0800fd45
 800fce0:	0800fcc1 	.word	0x0800fcc1
 800fce4:	0800fcc1 	.word	0x0800fcc1
 800fce8:	0800fcc1 	.word	0x0800fcc1
 800fcec:	0800fcc1 	.word	0x0800fcc1
 800fcf0:	0800fd45 	.word	0x0800fd45
 800fcf4:	0800fcc1 	.word	0x0800fcc1
 800fcf8:	0800fcc1 	.word	0x0800fcc1
 800fcfc:	0800fcc1 	.word	0x0800fcc1
 800fd00:	0800fcc1 	.word	0x0800fcc1
 800fd04:	0800fe45 	.word	0x0800fe45
 800fd08:	0800fd6f 	.word	0x0800fd6f
 800fd0c:	0800fdff 	.word	0x0800fdff
 800fd10:	0800fcc1 	.word	0x0800fcc1
 800fd14:	0800fcc1 	.word	0x0800fcc1
 800fd18:	0800fe67 	.word	0x0800fe67
 800fd1c:	0800fcc1 	.word	0x0800fcc1
 800fd20:	0800fd6f 	.word	0x0800fd6f
 800fd24:	0800fcc1 	.word	0x0800fcc1
 800fd28:	0800fcc1 	.word	0x0800fcc1
 800fd2c:	0800fe07 	.word	0x0800fe07
 800fd30:	6833      	ldr	r3, [r6, #0]
 800fd32:	1d1a      	adds	r2, r3, #4
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	6032      	str	r2, [r6, #0]
 800fd38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd40:	2301      	movs	r3, #1
 800fd42:	e09d      	b.n	800fe80 <_printf_i+0x1e8>
 800fd44:	6833      	ldr	r3, [r6, #0]
 800fd46:	6820      	ldr	r0, [r4, #0]
 800fd48:	1d19      	adds	r1, r3, #4
 800fd4a:	6031      	str	r1, [r6, #0]
 800fd4c:	0606      	lsls	r6, r0, #24
 800fd4e:	d501      	bpl.n	800fd54 <_printf_i+0xbc>
 800fd50:	681d      	ldr	r5, [r3, #0]
 800fd52:	e003      	b.n	800fd5c <_printf_i+0xc4>
 800fd54:	0645      	lsls	r5, r0, #25
 800fd56:	d5fb      	bpl.n	800fd50 <_printf_i+0xb8>
 800fd58:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd5c:	2d00      	cmp	r5, #0
 800fd5e:	da03      	bge.n	800fd68 <_printf_i+0xd0>
 800fd60:	232d      	movs	r3, #45	@ 0x2d
 800fd62:	426d      	negs	r5, r5
 800fd64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd68:	4859      	ldr	r0, [pc, #356]	@ (800fed0 <_printf_i+0x238>)
 800fd6a:	230a      	movs	r3, #10
 800fd6c:	e011      	b.n	800fd92 <_printf_i+0xfa>
 800fd6e:	6821      	ldr	r1, [r4, #0]
 800fd70:	6833      	ldr	r3, [r6, #0]
 800fd72:	0608      	lsls	r0, r1, #24
 800fd74:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd78:	d402      	bmi.n	800fd80 <_printf_i+0xe8>
 800fd7a:	0649      	lsls	r1, r1, #25
 800fd7c:	bf48      	it	mi
 800fd7e:	b2ad      	uxthmi	r5, r5
 800fd80:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd82:	4853      	ldr	r0, [pc, #332]	@ (800fed0 <_printf_i+0x238>)
 800fd84:	6033      	str	r3, [r6, #0]
 800fd86:	bf14      	ite	ne
 800fd88:	230a      	movne	r3, #10
 800fd8a:	2308      	moveq	r3, #8
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd92:	6866      	ldr	r6, [r4, #4]
 800fd94:	60a6      	str	r6, [r4, #8]
 800fd96:	2e00      	cmp	r6, #0
 800fd98:	bfa2      	ittt	ge
 800fd9a:	6821      	ldrge	r1, [r4, #0]
 800fd9c:	f021 0104 	bicge.w	r1, r1, #4
 800fda0:	6021      	strge	r1, [r4, #0]
 800fda2:	b90d      	cbnz	r5, 800fda8 <_printf_i+0x110>
 800fda4:	2e00      	cmp	r6, #0
 800fda6:	d04b      	beq.n	800fe40 <_printf_i+0x1a8>
 800fda8:	4616      	mov	r6, r2
 800fdaa:	fbb5 f1f3 	udiv	r1, r5, r3
 800fdae:	fb03 5711 	mls	r7, r3, r1, r5
 800fdb2:	5dc7      	ldrb	r7, [r0, r7]
 800fdb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fdb8:	462f      	mov	r7, r5
 800fdba:	42bb      	cmp	r3, r7
 800fdbc:	460d      	mov	r5, r1
 800fdbe:	d9f4      	bls.n	800fdaa <_printf_i+0x112>
 800fdc0:	2b08      	cmp	r3, #8
 800fdc2:	d10b      	bne.n	800fddc <_printf_i+0x144>
 800fdc4:	6823      	ldr	r3, [r4, #0]
 800fdc6:	07df      	lsls	r7, r3, #31
 800fdc8:	d508      	bpl.n	800fddc <_printf_i+0x144>
 800fdca:	6923      	ldr	r3, [r4, #16]
 800fdcc:	6861      	ldr	r1, [r4, #4]
 800fdce:	4299      	cmp	r1, r3
 800fdd0:	bfde      	ittt	le
 800fdd2:	2330      	movle	r3, #48	@ 0x30
 800fdd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fdd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fddc:	1b92      	subs	r2, r2, r6
 800fdde:	6122      	str	r2, [r4, #16]
 800fde0:	f8cd a000 	str.w	sl, [sp]
 800fde4:	464b      	mov	r3, r9
 800fde6:	aa03      	add	r2, sp, #12
 800fde8:	4621      	mov	r1, r4
 800fdea:	4640      	mov	r0, r8
 800fdec:	f7ff fee6 	bl	800fbbc <_printf_common>
 800fdf0:	3001      	adds	r0, #1
 800fdf2:	d14a      	bne.n	800fe8a <_printf_i+0x1f2>
 800fdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf8:	b004      	add	sp, #16
 800fdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdfe:	6823      	ldr	r3, [r4, #0]
 800fe00:	f043 0320 	orr.w	r3, r3, #32
 800fe04:	6023      	str	r3, [r4, #0]
 800fe06:	4833      	ldr	r0, [pc, #204]	@ (800fed4 <_printf_i+0x23c>)
 800fe08:	2778      	movs	r7, #120	@ 0x78
 800fe0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe0e:	6823      	ldr	r3, [r4, #0]
 800fe10:	6831      	ldr	r1, [r6, #0]
 800fe12:	061f      	lsls	r7, r3, #24
 800fe14:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe18:	d402      	bmi.n	800fe20 <_printf_i+0x188>
 800fe1a:	065f      	lsls	r7, r3, #25
 800fe1c:	bf48      	it	mi
 800fe1e:	b2ad      	uxthmi	r5, r5
 800fe20:	6031      	str	r1, [r6, #0]
 800fe22:	07d9      	lsls	r1, r3, #31
 800fe24:	bf44      	itt	mi
 800fe26:	f043 0320 	orrmi.w	r3, r3, #32
 800fe2a:	6023      	strmi	r3, [r4, #0]
 800fe2c:	b11d      	cbz	r5, 800fe36 <_printf_i+0x19e>
 800fe2e:	2310      	movs	r3, #16
 800fe30:	e7ac      	b.n	800fd8c <_printf_i+0xf4>
 800fe32:	4827      	ldr	r0, [pc, #156]	@ (800fed0 <_printf_i+0x238>)
 800fe34:	e7e9      	b.n	800fe0a <_printf_i+0x172>
 800fe36:	6823      	ldr	r3, [r4, #0]
 800fe38:	f023 0320 	bic.w	r3, r3, #32
 800fe3c:	6023      	str	r3, [r4, #0]
 800fe3e:	e7f6      	b.n	800fe2e <_printf_i+0x196>
 800fe40:	4616      	mov	r6, r2
 800fe42:	e7bd      	b.n	800fdc0 <_printf_i+0x128>
 800fe44:	6833      	ldr	r3, [r6, #0]
 800fe46:	6825      	ldr	r5, [r4, #0]
 800fe48:	6961      	ldr	r1, [r4, #20]
 800fe4a:	1d18      	adds	r0, r3, #4
 800fe4c:	6030      	str	r0, [r6, #0]
 800fe4e:	062e      	lsls	r6, r5, #24
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	d501      	bpl.n	800fe58 <_printf_i+0x1c0>
 800fe54:	6019      	str	r1, [r3, #0]
 800fe56:	e002      	b.n	800fe5e <_printf_i+0x1c6>
 800fe58:	0668      	lsls	r0, r5, #25
 800fe5a:	d5fb      	bpl.n	800fe54 <_printf_i+0x1bc>
 800fe5c:	8019      	strh	r1, [r3, #0]
 800fe5e:	2300      	movs	r3, #0
 800fe60:	6123      	str	r3, [r4, #16]
 800fe62:	4616      	mov	r6, r2
 800fe64:	e7bc      	b.n	800fde0 <_printf_i+0x148>
 800fe66:	6833      	ldr	r3, [r6, #0]
 800fe68:	1d1a      	adds	r2, r3, #4
 800fe6a:	6032      	str	r2, [r6, #0]
 800fe6c:	681e      	ldr	r6, [r3, #0]
 800fe6e:	6862      	ldr	r2, [r4, #4]
 800fe70:	2100      	movs	r1, #0
 800fe72:	4630      	mov	r0, r6
 800fe74:	f7f0 f9bc 	bl	80001f0 <memchr>
 800fe78:	b108      	cbz	r0, 800fe7e <_printf_i+0x1e6>
 800fe7a:	1b80      	subs	r0, r0, r6
 800fe7c:	6060      	str	r0, [r4, #4]
 800fe7e:	6863      	ldr	r3, [r4, #4]
 800fe80:	6123      	str	r3, [r4, #16]
 800fe82:	2300      	movs	r3, #0
 800fe84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe88:	e7aa      	b.n	800fde0 <_printf_i+0x148>
 800fe8a:	6923      	ldr	r3, [r4, #16]
 800fe8c:	4632      	mov	r2, r6
 800fe8e:	4649      	mov	r1, r9
 800fe90:	4640      	mov	r0, r8
 800fe92:	47d0      	blx	sl
 800fe94:	3001      	adds	r0, #1
 800fe96:	d0ad      	beq.n	800fdf4 <_printf_i+0x15c>
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	079b      	lsls	r3, r3, #30
 800fe9c:	d413      	bmi.n	800fec6 <_printf_i+0x22e>
 800fe9e:	68e0      	ldr	r0, [r4, #12]
 800fea0:	9b03      	ldr	r3, [sp, #12]
 800fea2:	4298      	cmp	r0, r3
 800fea4:	bfb8      	it	lt
 800fea6:	4618      	movlt	r0, r3
 800fea8:	e7a6      	b.n	800fdf8 <_printf_i+0x160>
 800feaa:	2301      	movs	r3, #1
 800feac:	4632      	mov	r2, r6
 800feae:	4649      	mov	r1, r9
 800feb0:	4640      	mov	r0, r8
 800feb2:	47d0      	blx	sl
 800feb4:	3001      	adds	r0, #1
 800feb6:	d09d      	beq.n	800fdf4 <_printf_i+0x15c>
 800feb8:	3501      	adds	r5, #1
 800feba:	68e3      	ldr	r3, [r4, #12]
 800febc:	9903      	ldr	r1, [sp, #12]
 800febe:	1a5b      	subs	r3, r3, r1
 800fec0:	42ab      	cmp	r3, r5
 800fec2:	dcf2      	bgt.n	800feaa <_printf_i+0x212>
 800fec4:	e7eb      	b.n	800fe9e <_printf_i+0x206>
 800fec6:	2500      	movs	r5, #0
 800fec8:	f104 0619 	add.w	r6, r4, #25
 800fecc:	e7f5      	b.n	800feba <_printf_i+0x222>
 800fece:	bf00      	nop
 800fed0:	08017b0e 	.word	0x08017b0e
 800fed4:	08017b1f 	.word	0x08017b1f

0800fed8 <memmove>:
 800fed8:	4288      	cmp	r0, r1
 800feda:	b510      	push	{r4, lr}
 800fedc:	eb01 0402 	add.w	r4, r1, r2
 800fee0:	d902      	bls.n	800fee8 <memmove+0x10>
 800fee2:	4284      	cmp	r4, r0
 800fee4:	4623      	mov	r3, r4
 800fee6:	d807      	bhi.n	800fef8 <memmove+0x20>
 800fee8:	1e43      	subs	r3, r0, #1
 800feea:	42a1      	cmp	r1, r4
 800feec:	d008      	beq.n	800ff00 <memmove+0x28>
 800feee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fef6:	e7f8      	b.n	800feea <memmove+0x12>
 800fef8:	4402      	add	r2, r0
 800fefa:	4601      	mov	r1, r0
 800fefc:	428a      	cmp	r2, r1
 800fefe:	d100      	bne.n	800ff02 <memmove+0x2a>
 800ff00:	bd10      	pop	{r4, pc}
 800ff02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff0a:	e7f7      	b.n	800fefc <memmove+0x24>

0800ff0c <_realloc_r>:
 800ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff10:	4680      	mov	r8, r0
 800ff12:	4615      	mov	r5, r2
 800ff14:	460c      	mov	r4, r1
 800ff16:	b921      	cbnz	r1, 800ff22 <_realloc_r+0x16>
 800ff18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1c:	4611      	mov	r1, r2
 800ff1e:	f7ff bae7 	b.w	800f4f0 <_malloc_r>
 800ff22:	b92a      	cbnz	r2, 800ff30 <_realloc_r+0x24>
 800ff24:	f7ff fca8 	bl	800f878 <_free_r>
 800ff28:	2400      	movs	r4, #0
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff30:	f000 f81a 	bl	800ff68 <_malloc_usable_size_r>
 800ff34:	4285      	cmp	r5, r0
 800ff36:	4606      	mov	r6, r0
 800ff38:	d802      	bhi.n	800ff40 <_realloc_r+0x34>
 800ff3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ff3e:	d8f4      	bhi.n	800ff2a <_realloc_r+0x1e>
 800ff40:	4629      	mov	r1, r5
 800ff42:	4640      	mov	r0, r8
 800ff44:	f7ff fad4 	bl	800f4f0 <_malloc_r>
 800ff48:	4607      	mov	r7, r0
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d0ec      	beq.n	800ff28 <_realloc_r+0x1c>
 800ff4e:	42b5      	cmp	r5, r6
 800ff50:	462a      	mov	r2, r5
 800ff52:	4621      	mov	r1, r4
 800ff54:	bf28      	it	cs
 800ff56:	4632      	movcs	r2, r6
 800ff58:	f7ff fc80 	bl	800f85c <memcpy>
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	4640      	mov	r0, r8
 800ff60:	f7ff fc8a 	bl	800f878 <_free_r>
 800ff64:	463c      	mov	r4, r7
 800ff66:	e7e0      	b.n	800ff2a <_realloc_r+0x1e>

0800ff68 <_malloc_usable_size_r>:
 800ff68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff6c:	1f18      	subs	r0, r3, #4
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	bfbc      	itt	lt
 800ff72:	580b      	ldrlt	r3, [r1, r0]
 800ff74:	18c0      	addlt	r0, r0, r3
 800ff76:	4770      	bx	lr

0800ff78 <_init>:
 800ff78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7a:	bf00      	nop
 800ff7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff7e:	bc08      	pop	{r3}
 800ff80:	469e      	mov	lr, r3
 800ff82:	4770      	bx	lr

0800ff84 <_fini>:
 800ff84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff86:	bf00      	nop
 800ff88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff8a:	bc08      	pop	{r3}
 800ff8c:	469e      	mov	lr, r3
 800ff8e:	4770      	bx	lr
