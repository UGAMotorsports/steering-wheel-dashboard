
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f140  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007ca0  0800f2e0  0800f2e0  000102e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f80  08016f80  0001818c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016f80  08016f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016f88  08016f88  0001818c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08016f88  08016f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016f94  08016f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08016f98  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017fc  2000018c  08017124  0001818c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001988  08017124  00018988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001818c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e4b  00000000  00000000  000181bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006178  00000000  00000000  0003d007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  00043180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001698  00000000  00000000  00044f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209dc  00000000  00000000  000465d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f61  00000000  00000000  00066fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b050  00000000  00000000  0008cf15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127f65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d0  00000000  00000000  00127fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00130178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f2c8 	.word	0x0800f2c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	0800f2c8 	.word	0x0800f2c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_DMA_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <MX_DMA_Init+0x68>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_DMA_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <MX_DMA_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	200b      	movs	r0, #11
 8000600:	f004 fac5 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000604:	200b      	movs	r0, #11
 8000606:	f004 fade 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	203b      	movs	r0, #59	@ 0x3b
 8000610:	f004 fabd 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000614:	203b      	movs	r0, #59	@ 0x3b
 8000616:	f004 fad6 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <SELECT+0x18>)
 8000632:	f004 fff9 	bl	8005628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f004 f9aa 	bl	8004990 <HAL_Delay>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020400 	.word	0x40020400

08000644 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <DESELECT+0x18>)
 800064e:	f004 ffeb 	bl	8005628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f004 f99c 	bl	8004990 <HAL_Delay>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800066a:	bf00      	nop
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <SPI_TxByte+0x30>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	2b02      	cmp	r3, #2
 8000678:	d1f8      	bne.n	800066c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800067a:	1df9      	adds	r1, r7, #7
 800067c:	2364      	movs	r3, #100	@ 0x64
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <SPI_TxByte+0x30>)
 8000682:	f006 ff0e 	bl	80074a2 <HAL_SPI_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000220 	.word	0x20000220

08000694 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006a0:	bf00      	nop
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d1f8      	bne.n	80006a2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	2364      	movs	r3, #100	@ 0x64
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006b8:	f006 fef3 	bl	80074a2 <HAL_SPI_Transmit>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000220 	.word	0x20000220

080006c8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80006ce:	23ff      	movs	r3, #255	@ 0xff
 80006d0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006d2:	bf00      	nop
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <SPI_RxByte+0x34>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d1f8      	bne.n	80006d4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006e2:	1dba      	adds	r2, r7, #6
 80006e4:	1df9      	adds	r1, r7, #7
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <SPI_RxByte+0x34>)
 80006ee:	f007 f935 	bl	800795c <HAL_SPI_TransmitReceive>

	return data;
 80006f2:	79bb      	ldrb	r3, [r7, #6]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000220 	.word	0x20000220

08000700 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000708:	f7ff ffde 	bl	80006c8 <SPI_RxByte>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	701a      	strb	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <SD_ReadyWait+0x30>)
 8000724:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000728:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800072a:	f7ff ffcd 	bl	80006c8 <SPI_RxByte>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2bff      	cmp	r3, #255	@ 0xff
 8000736:	d003      	beq.n	8000740 <SD_ReadyWait+0x24>
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <SD_ReadyWait+0x30>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f4      	bne.n	800072a <SD_ReadyWait+0xe>

	return res;
 8000740:	79fb      	ldrb	r3, [r7, #7]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001aa 	.word	0x200001aa

08000750 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000756:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800075a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800075c:	f7ff ff72 	bl	8000644 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	e005      	b.n	8000772 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000766:	20ff      	movs	r0, #255	@ 0xff
 8000768:	f7ff ff7a 	bl	8000660 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b09      	cmp	r3, #9
 8000776:	ddf6      	ble.n	8000766 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000778:	f7ff ff56 	bl	8000628 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000790:	2395      	movs	r3, #149	@ 0x95
 8000792:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000794:	463b      	mov	r3, r7
 8000796:	2106      	movs	r1, #6
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff7b 	bl	8000694 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800079e:	e002      	b.n	80007a6 <SD_PowerOn+0x56>
	{
		cnt--;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80007a6:	f7ff ff8f 	bl	80006c8 <SPI_RxByte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d002      	beq.n	80007b6 <SD_PowerOn+0x66>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f4      	bne.n	80007a0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80007b6:	f7ff ff45 	bl	8000644 <DESELECT>
	SPI_TxByte(0XFF);
 80007ba:	20ff      	movs	r0, #255	@ 0xff
 80007bc:	f7ff ff50 	bl	8000660 <SPI_TxByte>

	PowerFlag = 1;
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <SD_PowerOn+0x80>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001ad 	.word	0x200001ad

080007d4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <SD_PowerOff+0x14>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200001ad 	.word	0x200001ad

080007ec <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <SD_CheckPower+0x14>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200001ad 	.word	0x200001ad

08000804 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <SD_RxDataBlock+0x58>)
 8000810:	22c8      	movs	r2, #200	@ 0xc8
 8000812:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000814:	f7ff ff58 	bl	80006c8 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2bff      	cmp	r3, #255	@ 0xff
 8000820:	d103      	bne.n	800082a <SD_RxDataBlock+0x26>
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <SD_RxDataBlock+0x58>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f4      	bne.n	8000814 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2bfe      	cmp	r3, #254	@ 0xfe
 800082e:	d001      	beq.n	8000834 <SD_RxDataBlock+0x30>
 8000830:	2300      	movs	r3, #0
 8000832:	e00f      	b.n	8000854 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff60 	bl	8000700 <SPI_RxBytePtr>
	} while(len--);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	603a      	str	r2, [r7, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f4      	bne.n	8000834 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800084a:	f7ff ff3d 	bl	80006c8 <SPI_RxByte>
	SPI_RxByte();
 800084e:	f7ff ff3b 	bl	80006c8 <SPI_RxByte>

	return TRUE;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001a8 	.word	0x200001a8

08000860 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000870:	f7ff ff54 	bl	800071c <SD_ReadyWait>
 8000874:	4603      	mov	r3, r0
 8000876:	2bff      	cmp	r3, #255	@ 0xff
 8000878:	d001      	beq.n	800087e <SD_TxDataBlock+0x1e>
 800087a:	2300      	movs	r3, #0
 800087c:	e02f      	b.n	80008de <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff feed 	bl	8000660 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	2bfd      	cmp	r3, #253	@ 0xfd
 800088a:	d020      	beq.n	80008ce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff feff 	bl	8000694 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000896:	f7ff ff17 	bl	80006c8 <SPI_RxByte>
		SPI_RxByte();
 800089a:	f7ff ff15 	bl	80006c8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800089e:	e00b      	b.n	80008b8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80008a0:	f7ff ff12 	bl	80006c8 <SPI_RxByte>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d006      	beq.n	80008c0 <SD_TxDataBlock+0x60>
			i++;
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b40      	cmp	r3, #64	@ 0x40
 80008bc:	d9f0      	bls.n	80008a0 <SD_TxDataBlock+0x40>
 80008be:	e000      	b.n	80008c2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80008c0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80008c2:	bf00      	nop
 80008c4:	f7ff ff00 	bl	80006c8 <SPI_RxByte>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0fa      	beq.n	80008c4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d101      	bne.n	80008dc <SD_TxDataBlock+0x7c>
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <SD_TxDataBlock+0x7e>

	return FALSE;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	6039      	str	r1, [r7, #0]
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008f2:	f7ff ff13 	bl	800071c <SD_ReadyWait>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2bff      	cmp	r3, #255	@ 0xff
 80008fa:	d001      	beq.n	8000900 <SD_SendCmd+0x1a>
 80008fc:	23ff      	movs	r3, #255	@ 0xff
 80008fe:	e042      	b.n	8000986 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff feac 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fea6 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fea0 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9a 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe95 	bl	8000660 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b40      	cmp	r3, #64	@ 0x40
 800093a:	d102      	bne.n	8000942 <SD_SendCmd+0x5c>
 800093c:	2395      	movs	r3, #149	@ 0x95
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e007      	b.n	8000952 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b48      	cmp	r3, #72	@ 0x48
 8000946:	d102      	bne.n	800094e <SD_SendCmd+0x68>
 8000948:	2387      	movs	r3, #135	@ 0x87
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e001      	b.n	8000952 <SD_SendCmd+0x6c>
	else crc = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe83 	bl	8000660 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b4c      	cmp	r3, #76	@ 0x4c
 800095e:	d101      	bne.n	8000964 <SD_SendCmd+0x7e>
 8000960:	f7ff feb2 	bl	80006c8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000964:	230a      	movs	r3, #10
 8000966:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000968:	f7ff feae 	bl	80006c8 <SPI_RxByte>
 800096c:	4603      	mov	r3, r0
 800096e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000970:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000974:	2b00      	cmp	r3, #0
 8000976:	da05      	bge.n	8000984 <SD_SendCmd+0x9e>
 8000978:	7bbb      	ldrb	r3, [r7, #14]
 800097a:	3b01      	subs	r3, #1
 800097c:	73bb      	strb	r3, [r7, #14]
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f1      	bne.n	8000968 <SD_SendCmd+0x82>

	return res;
 8000984:	7b7b      	ldrb	r3, [r7, #13]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SD_disk_initialize+0x14>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e0d1      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80009a4:	4b6a      	ldr	r3, [pc, #424]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <SD_disk_initialize+0x2a>
 80009b2:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	e0c6      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80009ba:	f7ff fec9 	bl	8000750 <SD_PowerOn>

	/* slave select */
	SELECT();
 80009be:	f7ff fe33 	bl	8000628 <SELECT>

	/* check disk type */
	type = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80009c6:	2100      	movs	r1, #0
 80009c8:	2040      	movs	r0, #64	@ 0x40
 80009ca:	f7ff ff8c 	bl	80008e6 <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	f040 80a1 	bne.w	8000b18 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80009d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 80009d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009dc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009de:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009e2:	2048      	movs	r0, #72	@ 0x48
 80009e4:	f7ff ff7f 	bl	80008e6 <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d155      	bne.n	8000a9a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e00c      	b.n	8000a0e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009f4:	7bfc      	ldrb	r4, [r7, #15]
 80009f6:	f7ff fe67 	bl	80006c8 <SPI_RxByte>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	f104 0310 	add.w	r3, r4, #16
 8000a02:	443b      	add	r3, r7
 8000a04:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d9ef      	bls.n	80009f4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a14:	7abb      	ldrb	r3, [r7, #10]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d17e      	bne.n	8000b18 <SD_disk_initialize+0x188>
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	2baa      	cmp	r3, #170	@ 0xaa
 8000a1e:	d17b      	bne.n	8000b18 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	@ 0x77
 8000a24:	f7ff ff5f 	bl	80008e6 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d807      	bhi.n	8000a3e <SD_disk_initialize+0xae>
 8000a2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a32:	2069      	movs	r0, #105	@ 0x69
 8000a34:	f7ff ff57 	bl	80008e6 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a3e:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ec      	bne.n	8000a20 <SD_disk_initialize+0x90>
 8000a46:	e000      	b.n	8000a4a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a48:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a4a:	4b42      	ldr	r3, [pc, #264]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d062      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000a52:	2100      	movs	r1, #0
 8000a54:	207a      	movs	r0, #122	@ 0x7a
 8000a56:	f7ff ff46 	bl	80008e6 <SD_SendCmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d15b      	bne.n	8000b18 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e00c      	b.n	8000a80 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a66:	7bfc      	ldrb	r4, [r7, #15]
 8000a68:	f7ff fe2e 	bl	80006c8 <SPI_RxByte>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f104 0310 	add.w	r3, r4, #16
 8000a74:	443b      	add	r3, r7
 8000a76:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d9ef      	bls.n	8000a66 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SD_disk_initialize+0x104>
 8000a90:	230c      	movs	r3, #12
 8000a92:	e000      	b.n	8000a96 <SD_disk_initialize+0x106>
 8000a94:	2304      	movs	r3, #4
 8000a96:	73bb      	strb	r3, [r7, #14]
 8000a98:	e03e      	b.n	8000b18 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2077      	movs	r0, #119	@ 0x77
 8000a9e:	f7ff ff22 	bl	80008e6 <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d808      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2069      	movs	r0, #105	@ 0x69
 8000aac:	f7ff ff1b 	bl	80008e6 <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d801      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e000      	b.n	8000abc <SD_disk_initialize+0x12c>
 8000aba:	2301      	movs	r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d10e      	bne.n	8000ae2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2077      	movs	r0, #119	@ 0x77
 8000ac8:	f7ff ff0d 	bl	80008e6 <SD_SendCmd>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d80e      	bhi.n	8000af0 <SD_disk_initialize+0x160>
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2069      	movs	r0, #105	@ 0x69
 8000ad6:	f7ff ff06 	bl	80008e6 <SD_SendCmd>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d107      	bne.n	8000af0 <SD_disk_initialize+0x160>
 8000ae0:	e00c      	b.n	8000afc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2041      	movs	r0, #65	@ 0x41
 8000ae6:	f7ff fefe 	bl	80008e6 <SD_SendCmd>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d004      	beq.n	8000afa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1e2      	bne.n	8000abe <SD_disk_initialize+0x12e>
 8000af8:	e000      	b.n	8000afc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000afa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <SD_disk_initialize+0x184>
 8000b04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b08:	2050      	movs	r0, #80	@ 0x50
 8000b0a:	f7ff feec 	bl	80008e6 <SD_SendCmd>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000b14:	2300      	movs	r3, #0
 8000b16:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <SD_disk_initialize+0x1c8>)
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000b1e:	f7ff fd91 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000b22:	f7ff fdd1 	bl	80006c8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e001      	b.n	8000b42 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b3e:	f7ff fe49 	bl	80007d4 <SD_PowerOff>
	}

	return Stat;
 8000b42:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	200001a8 	.word	0x200001a8
 8000b58:	200001ac 	.word	0x200001ac

08000b5c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SD_disk_status+0x14>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e002      	b.n	8000b76 <SD_disk_status+0x1a>
	return Stat;
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <SD_disk_status+0x28>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000

08000b88 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <SD_disk_read+0x1c>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <SD_disk_read+0x20>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e051      	b.n	8000c4c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <SD_disk_read+0xcc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SD_disk_read+0x32>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e048      	b.n	8000c4c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <SD_disk_read+0xd0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <SD_disk_read+0x44>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bcc:	f7ff fd2c 	bl	8000628 <SELECT>

	if (count == 1)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d111      	bne.n	8000bfa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2051      	movs	r0, #81	@ 0x51
 8000bda:	f7ff fe84 	bl	80008e6 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d129      	bne.n	8000c38 <SD_disk_read+0xb0>
 8000be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f7ff fe0b 	bl	8000804 <SD_RxDataBlock>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d021      	beq.n	8000c38 <SD_disk_read+0xb0>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	e01e      	b.n	8000c38 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	2052      	movs	r0, #82	@ 0x52
 8000bfe:	f7ff fe72 	bl	80008e6 <SD_SendCmd>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d117      	bne.n	8000c38 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fdf9 	bl	8000804 <SD_RxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00a      	beq.n	8000c2e <SD_disk_read+0xa6>
				buff += 512;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c1e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1ed      	bne.n	8000c08 <SD_disk_read+0x80>
 8000c2c:	e000      	b.n	8000c30 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c2e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000c30:	2100      	movs	r1, #0
 8000c32:	204c      	movs	r0, #76	@ 0x4c
 8000c34:	f7ff fe57 	bl	80008e6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000c38:	f7ff fd04 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000c3c:	f7ff fd44 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	200001ac 	.word	0x200001ac

08000c5c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <SD_disk_write+0x1c>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <SD_disk_write+0x20>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e06b      	b.n	8000d54 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c7c:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <SD_disk_write+0x100>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SD_disk_write+0x32>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e062      	b.n	8000d54 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <SD_disk_write+0x100>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SD_disk_write+0x44>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e059      	b.n	8000d54 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <SD_disk_write+0x104>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <SD_disk_write+0x56>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	025b      	lsls	r3, r3, #9
 8000cb0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000cb2:	f7ff fcb9 	bl	8000628 <SELECT>

	if (count == 1)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d110      	bne.n	8000cde <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	2058      	movs	r0, #88	@ 0x58
 8000cc0:	f7ff fe11 	bl	80008e6 <SD_SendCmd>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d13a      	bne.n	8000d40 <SD_disk_write+0xe4>
 8000cca:	21fe      	movs	r1, #254	@ 0xfe
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f7ff fdc7 	bl	8000860 <SD_TxDataBlock>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d033      	beq.n	8000d40 <SD_disk_write+0xe4>
			count = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	e030      	b.n	8000d40 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <SD_disk_write+0x104>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2077      	movs	r0, #119	@ 0x77
 8000cee:	f7ff fdfa 	bl	80008e6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	2057      	movs	r0, #87	@ 0x57
 8000cf6:	f7ff fdf6 	bl	80008e6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2059      	movs	r0, #89	@ 0x59
 8000cfe:	f7ff fdf2 	bl	80008e6 <SD_SendCmd>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d11b      	bne.n	8000d40 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d08:	21fc      	movs	r1, #252	@ 0xfc
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f7ff fda8 	bl	8000860 <SD_TxDataBlock>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00a      	beq.n	8000d2c <SD_disk_write+0xd0>
				buff += 512;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ee      	bne.n	8000d08 <SD_disk_write+0xac>
 8000d2a:	e000      	b.n	8000d2e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d2c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000d2e:	21fd      	movs	r1, #253	@ 0xfd
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fd95 	bl	8000860 <SD_TxDataBlock>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d40:	f7ff fc80 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000d44:	f7ff fcc0 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bf14      	ite	ne
 8000d4e:	2301      	movne	r3, #1
 8000d50:	2300      	moveq	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	200001ac 	.word	0x200001ac

08000d64 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b08b      	sub	sp, #44	@ 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	603a      	str	r2, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	460b      	mov	r3, r1
 8000d72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SD_disk_ioctl+0x1e>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e113      	b.n	8000faa <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d124      	bne.n	8000dd8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d012      	beq.n	8000dbc <SD_disk_ioctl+0x58>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	dc1a      	bgt.n	8000dd0 <SD_disk_ioctl+0x6c>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <SD_disk_ioctl+0x40>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d006      	beq.n	8000db0 <SD_disk_ioctl+0x4c>
 8000da2:	e015      	b.n	8000dd0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000da4:	f7ff fd16 	bl	80007d4 <SD_PowerOff>
			res = RES_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dae:	e0fa      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000db0:	f7ff fcce 	bl	8000750 <SD_PowerOn>
			res = RES_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dba:	e0f4      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	1c5c      	adds	r4, r3, #1
 8000dc0:	f7ff fd14 	bl	80007ec <SD_CheckPower>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dce:	e0ea      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dd6:	e0e6      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dd8:	4b76      	ldr	r3, [pc, #472]	@ (8000fb4 <SD_disk_ioctl+0x250>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SD_disk_ioctl+0x86>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e0df      	b.n	8000faa <SD_disk_ioctl+0x246>

		SELECT();
 8000dea:	f7ff fc1d 	bl	8000628 <SELECT>

		switch (ctrl)
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b0d      	cmp	r3, #13
 8000df2:	f200 80c9 	bhi.w	8000f88 <SD_disk_ioctl+0x224>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <SD_disk_ioctl+0x98>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000ef3 	.word	0x08000ef3
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000ee3 	.word	0x08000ee3
 8000e08:	08000f89 	.word	0x08000f89
 8000e0c:	08000f89 	.word	0x08000f89
 8000e10:	08000f89 	.word	0x08000f89
 8000e14:	08000f89 	.word	0x08000f89
 8000e18:	08000f89 	.word	0x08000f89
 8000e1c:	08000f89 	.word	0x08000f89
 8000e20:	08000f89 	.word	0x08000f89
 8000e24:	08000f89 	.word	0x08000f89
 8000e28:	08000f05 	.word	0x08000f05
 8000e2c:	08000f29 	.word	0x08000f29
 8000e30:	08000f4d 	.word	0x08000f4d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e34:	2100      	movs	r1, #0
 8000e36:	2049      	movs	r0, #73	@ 0x49
 8000e38:	f7ff fd55 	bl	80008e6 <SD_SendCmd>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 80a6 	bne.w	8000f90 <SD_disk_ioctl+0x22c>
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcda 	bl	8000804 <SD_RxDataBlock>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 809c 	beq.w	8000f90 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	099b      	lsrs	r3, r3, #6
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10d      	bne.n	8000e7e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e62:	7d7b      	ldrb	r3, [r7, #21]
 8000e64:	461a      	mov	r2, r3
 8000e66:	7d3b      	ldrb	r3, [r7, #20]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e74:	8bfb      	ldrh	r3, [r7, #30]
 8000e76:	029a      	lsls	r2, r3, #10
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e02d      	b.n	8000eda <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e7e:	7c7b      	ldrb	r3, [r7, #17]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	7dbb      	ldrb	r3, [r7, #22]
 8000e88:	09db      	lsrs	r3, r3, #7
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0306 	and.w	r3, r3, #6
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ea6:	7d3b      	ldrb	r3, [r7, #20]
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	7cbb      	ldrb	r3, [r7, #18]
 8000eba:	029b      	lsls	r3, r3, #10
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ecc:	8bfa      	ldrh	r2, [r7, #30]
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ed2:	3b09      	subs	r3, #9
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ee0:	e056      	b.n	8000f90 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ef0:	e055      	b.n	8000f9e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000ef2:	f7ff fc13 	bl	800071c <SD_ReadyWait>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2bff      	cmp	r3, #255	@ 0xff
 8000efa:	d14b      	bne.n	8000f94 <SD_disk_ioctl+0x230>
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f02:	e047      	b.n	8000f94 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f04:	2100      	movs	r1, #0
 8000f06:	2049      	movs	r0, #73	@ 0x49
 8000f08:	f7ff fced 	bl	80008e6 <SD_SendCmd>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d142      	bne.n	8000f98 <SD_disk_ioctl+0x234>
 8000f12:	2110      	movs	r1, #16
 8000f14:	6a38      	ldr	r0, [r7, #32]
 8000f16:	f7ff fc75 	bl	8000804 <SD_RxDataBlock>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d03b      	beq.n	8000f98 <SD_disk_ioctl+0x234>
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f26:	e037      	b.n	8000f98 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f28:	2100      	movs	r1, #0
 8000f2a:	204a      	movs	r0, #74	@ 0x4a
 8000f2c:	f7ff fcdb 	bl	80008e6 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d132      	bne.n	8000f9c <SD_disk_ioctl+0x238>
 8000f36:	2110      	movs	r1, #16
 8000f38:	6a38      	ldr	r0, [r7, #32]
 8000f3a:	f7ff fc63 	bl	8000804 <SD_RxDataBlock>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02b      	beq.n	8000f9c <SD_disk_ioctl+0x238>
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f4a:	e027      	b.n	8000f9c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	207a      	movs	r0, #122	@ 0x7a
 8000f50:	f7ff fcc9 	bl	80008e6 <SD_SendCmd>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d116      	bne.n	8000f88 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f60:	e00b      	b.n	8000f7a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f62:	6a3c      	ldr	r4, [r7, #32]
 8000f64:	1c63      	adds	r3, r4, #1
 8000f66:	623b      	str	r3, [r7, #32]
 8000f68:	f7ff fbae 	bl	80006c8 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f74:	3301      	adds	r3, #1
 8000f76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d9ef      	bls.n	8000f62 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f8e:	e006      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f90:	bf00      	nop
 8000f92:	e004      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f94:	bf00      	nop
 8000f96:	e002      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f98:	bf00      	nop
 8000f9a:	e000      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f9c:	bf00      	nop
		}

		DESELECT();
 8000f9e:	f7ff fb51 	bl	8000644 <DESELECT>
		SPI_RxByte();
 8000fa2:	f7ff fb91 	bl	80006c8 <SPI_RxByte>
	}

	return res;
 8000fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	372c      	adds	r7, #44	@ 0x2c
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b5a      	ldr	r3, [pc, #360]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b56      	ldr	r3, [pc, #344]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a55      	ldr	r2, [pc, #340]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b53      	ldr	r3, [pc, #332]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <MX_GPIO_Init+0x190>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b4c      	ldr	r3, [pc, #304]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a47      	ldr	r2, [pc, #284]	@ (8001148 <MX_GPIO_Init+0x190>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001044:	4841      	ldr	r0, [pc, #260]	@ (800114c <MX_GPIO_Init+0x194>)
 8001046:	f004 faef 	bl	8005628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4840      	ldr	r0, [pc, #256]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001050:	f004 faea 	bl	8005628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001054:	2200      	movs	r2, #0
 8001056:	213b      	movs	r1, #59	@ 0x3b
 8001058:	483e      	ldr	r0, [pc, #248]	@ (8001154 <MX_GPIO_Init+0x19c>)
 800105a:	f004 fae5 	bl	8005628 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4835      	ldr	r0, [pc, #212]	@ (800114c <MX_GPIO_Init+0x194>)
 8001078:	f004 f952 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 800107c:	2306      	movs	r3, #6
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4830      	ldr	r0, [pc, #192]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001090:	f004 f946 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001094:	2310      	movs	r3, #16
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4829      	ldr	r0, [pc, #164]	@ (8001150 <MX_GPIO_Init+0x198>)
 80010ac:	f004 f938 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 80010b0:	233b      	movs	r3, #59	@ 0x3b
 80010b2:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010c8:	f004 f92a 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010e4:	f004 f91c 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4814      	ldr	r0, [pc, #80]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001100:	f004 f90e 	bl	8005320 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MX_GPIO_Init+0x198>)
 800111c:	f004 f900 	bl	8005320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2017      	movs	r0, #23
 8001126:	f003 fd32 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800112a:	2017      	movs	r0, #23
 800112c:	f003 fd4b 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f003 fd2a 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f003 fd43 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile static int buttonpressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button1INT_Pin) {
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001168:	d103      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0x1a>
		buttonpressed = 1;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == button4INT_Pin) {
		buttonpressed = 4;
	} else {
		USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
	}
}
 8001170:	e01c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
	} else if (GPIO_Pin == button2INT_Pin) {
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001178:	d103      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x2a>
		buttonpressed = 2;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800117c:	2202      	movs	r2, #2
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	e014      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
	} else if (GPIO_Pin == button3INT_Pin ) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001188:	d103      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x3a>
		buttonpressed = 3;
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800118c:	2203      	movs	r2, #3
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	e00c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
	} else if (GPIO_Pin == button4INT_Pin) {
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001198:	d103      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0x4a>
		buttonpressed = 4;
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800119c:	2204      	movs	r2, #4
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
		USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x60>)
 80011a8:	f001 f918 	bl	80023dc <USB_Println>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001b0 	.word	0x200001b0
 80011b8:	0800f2e0 	.word	0x0800f2e0

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	f5ad 6dee 	sub.w	sp, sp, #1904	@ 0x770
 80011c2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f003 fb72 	bl	80048ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 fab8 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f7ff fef4 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d0:	f7ff f9f4 	bl	80005bc <MX_DMA_Init>
  MX_SPI1_Init();
 80011d4:	f000 fdac 	bl	8001d30 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011d8:	f00c fdb0 	bl	800dd3c <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011dc:	f000 fde0 	bl	8001da0 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011e0:	f000 fff8 	bl	80021d4 <MX_TIM4_Init>
  MX_FATFS_Init();
 80011e4:	f009 fc08 	bl	800a9f8 <MX_FATFS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80011e8:	2064      	movs	r0, #100	@ 0x64
 80011ea:	f003 fbd1 	bl	8004990 <HAL_Delay>

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011ee:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80011f2:	2201      	movs	r2, #1
 80011f4:	49b2      	ldr	r1, [pc, #712]	@ (80014c0 <main+0x304>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00c fb16 	bl	800d828 <f_mount>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 375f 	strb.w	r3, [r7, #1887]	@ 0x75f

  initializeMCP2515();
 8001202:	f000 fb0d 	bl	8001820 <initializeMCP2515>
  //setFilters();
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 3000, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 8001206:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800120a:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 800120e:	4aad      	ldr	r2, [pc, #692]	@ (80014c4 <main+0x308>)
 8001210:	461c      	mov	r4, r3
 8001212:	4615      	mov	r5, r2
 8001214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10200};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001224:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001228:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 800122c:	2100      	movs	r1, #0
 800122e:	48a6      	ldr	r0, [pc, #664]	@ (80014c8 <main+0x30c>)
 8001230:	f000 fbbe 	bl	80019b0 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001234:	2300      	movs	r3, #0
 8001236:	9303      	str	r3, [sp, #12]
 8001238:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	489e      	ldr	r0, [pc, #632]	@ (80014c8 <main+0x30c>)
 8001250:	f000 fb32 	bl	80018b8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001254:	2301      	movs	r3, #1
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2300      	movs	r3, #0
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	4896      	ldr	r0, [pc, #600]	@ (80014c8 <main+0x30c>)
 8001270:	f000 fb22 	bl	80018b8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001274:	230e      	movs	r3, #14
 8001276:	9303      	str	r3, [sp, #12]
 8001278:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	2300      	movs	r3, #0
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2300      	movs	r3, #0
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	488e      	ldr	r0, [pc, #568]	@ (80014c8 <main+0x30c>)
 8001290:	f000 fb12 	bl	80018b8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001294:	230f      	movs	r3, #15
 8001296:	9303      	str	r3, [sp, #12]
 8001298:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	4886      	ldr	r0, [pc, #536]	@ (80014c8 <main+0x30c>)
 80012b0:	f000 fb02 	bl	80018b8 <setColor>

  resetScreen();
 80012b4:	f001 fdb2 	bl	8002e1c <resetScreen>
  initializeScreen();
 80012b8:	f001 fdce 	bl	8002e58 <initializeScreen>
  if (fresult != FR_OK) {
 80012bc:	f897 375f 	ldrb.w	r3, [r7, #1887]	@ 0x75f
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <main+0x116>
	  USB_Println("There was an error: %d\n", fresult);
 80012c4:	f897 375f 	ldrb.w	r3, [r7, #1887]	@ 0x75f
 80012c8:	4619      	mov	r1, r3
 80012ca:	4880      	ldr	r0, [pc, #512]	@ (80014cc <main+0x310>)
 80012cc:	f001 f886 	bl	80023dc <USB_Println>
 80012d0:	e004      	b.n	80012dc <main+0x120>
  } else {
	  USB_Println("the sdcard is mounted\n");
 80012d2:	487f      	ldr	r0, [pc, #508]	@ (80014d0 <main+0x314>)
 80012d4:	f001 f882 	bl	80023dc <USB_Println>
	  dosplashscene();
 80012d8:	f002 fb38 	bl	800394c <dosplashscene>
  }
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80012dc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012e0:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 80012e4:	2100      	movs	r1, #0
 80012e6:	4878      	ldr	r0, [pc, #480]	@ (80014c8 <main+0x30c>)
 80012e8:	f000 fcba 	bl	8001c60 <startUp>
  HAL_Delay(200);
 80012ec:	20c8      	movs	r0, #200	@ 0xc8
 80012ee:	f003 fb4f 	bl	8004990 <HAL_Delay>

  char result[20] = "null"; //rpm
 80012f2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80012f6:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80012fa:	4a76      	ldr	r2, [pc, #472]	@ (80014d4 <main+0x318>)
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	3304      	adds	r3, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
  char result2[20] = "null";//temp
 800130a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800130e:	f5a3 63df 	sub.w	r3, r3, #1784	@ 0x6f8
 8001312:	4a70      	ldr	r2, [pc, #448]	@ (80014d4 <main+0x318>)
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	3304      	adds	r3, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  char result3[20] = "8";//gear
 8001322:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001326:	f2a3 730c 	subw	r3, r3, #1804	@ 0x70c
 800132a:	2238      	movs	r2, #56	@ 0x38
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	3304      	adds	r3, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 800133a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800133e:	f5a3 63e4 	sub.w	r3, r3, #1824	@ 0x720
 8001342:	4a64      	ldr	r2, [pc, #400]	@ (80014d4 <main+0x318>)
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  char result5[20] = "null"; //speed
 8001352:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001356:	f2a3 7334 	subw	r3, r3, #1844	@ 0x734
 800135a:	4a5e      	ldr	r2, [pc, #376]	@ (80014d4 <main+0x318>)
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	3304      	adds	r3, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  settempdata(result2);
 800136a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fa2e 	bl	80037d0 <settempdata>
  setgeardata(result3);
 8001374:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fa55 	bl	8003828 <setgeardata>
  setrpmdata(result);
 800137e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001382:	4618      	mov	r0, r3
 8001384:	f002 f9f8 	bl	8003778 <setrpmdata>
  setbattdata(result4);
 8001388:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fa75 	bl	800387c <setbattdata>
  setspeeddata(result5);
 8001392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fa9c 	bl	80038d4 <setspeeddata>
  domainscreen();
 800139c:	f002 fac6 	bl	800392c <domainscreen>

  struct can_frame frame;
  uint8_t gear = 8;
 80013a0:	2308      	movs	r3, #8
 80013a2:	f887 375e 	strb.w	r3, [r7, #1886]	@ 0x75e
  uint8_t isNeutral = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 375d 	strb.w	r3, [r7, #1885]	@ 0x75d
  while (1)
  {

	  if (buttonpressed == 3) {
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <main+0x31c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d114      	bne.n	80013de <main+0x222>
		  frame.can_id = 601;
 80013b4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80013b8:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80013bc:	f240 2259 	movw	r2, #601	@ 0x259
 80013c0:	601a      	str	r2, [r3, #0]
		  sendMessage(&frame);
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fa3c 	bl	8001844 <sendMessage>
		  HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f003 fadf 	bl	8004990 <HAL_Delay>
		  USB_Println("button3 job in while loop done\n");
 80013d2:	4842      	ldr	r0, [pc, #264]	@ (80014dc <main+0x320>)
 80013d4:	f001 f802 	bl	80023dc <USB_Println>
		  buttonpressed = 0;
 80013d8:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <main+0x31c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	  }

	  //for (int i = 0; i < 10; i++) {
		  int canresult = readMessage(&frame);
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fa3e 	bl	8001864 <readMessage>
 80013e8:	f8c7 0758 	str.w	r0, [r7, #1880]	@ 0x758
		  if (canresult == 0) {
 80013ec:	f8d7 3758 	ldr.w	r3, [r7, #1880]	@ 0x758
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1db      	bne.n	80013ac <main+0x1f0>
			  if (frame.can_id == (1520 + 0)) {
 80013f4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80013f8:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 8001402:	d12d      	bne.n	8001460 <main+0x2a4>
				  uint16_t rpm = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 8001404:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001408:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 800140c:	7b9b      	ldrb	r3, [r3, #14]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8001416:	f5a2 62e9 	sub.w	r2, r2, #1864	@ 0x748
 800141a:	7bd2      	ldrb	r2, [r2, #15]
 800141c:	4413      	add	r3, r2
 800141e:	f8a7 3756 	strh.w	r3, [r7, #1878]	@ 0x756
				  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 8001422:	f8b7 3756 	ldrh.w	r3, [r7, #1878]	@ 0x756
 8001426:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 800142a:	f207 41ec 	addw	r1, r7, #1260	@ 0x4ec
 800142e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8001432:	9201      	str	r2, [sp, #4]
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	4603      	mov	r3, r0
 8001438:	460a      	mov	r2, r1
 800143a:	2100      	movs	r1, #0
 800143c:	4822      	ldr	r0, [pc, #136]	@ (80014c8 <main+0x30c>)
 800143e:	f000 fb47 	bl	8001ad0 <UpdateShiftLights>

				  itoa(rpm, (char*)(result), 10);
 8001442:	f8b7 3756 	ldrh.w	r3, [r7, #1878]	@ 0x756
 8001446:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800144a:	220a      	movs	r2, #10
 800144c:	4618      	mov	r0, r3
 800144e:	f00d f9c2 	bl	800e7d6 <itoa>
				  setrpmdata(result);
 8001452:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001456:	4618      	mov	r0, r3
 8001458:	f002 f98e 	bl	8003778 <setrpmdata>
				  domainscreen();
 800145c:	f002 fa66 	bl	800392c <domainscreen>
			  }
			  if (frame.can_id == (1520 + 2)) {
 8001460:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001464:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f240 52f2 	movw	r2, #1522	@ 0x5f2
 800146e:	4293      	cmp	r3, r2
 8001470:	d15b      	bne.n	800152a <main+0x36e>
				  uint16_t temp = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 8001472:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001476:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 800147a:	7b9b      	ldrb	r3, [r3, #14]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8001484:	f5a2 62e9 	sub.w	r2, r2, #1864	@ 0x748
 8001488:	7bd2      	ldrb	r2, [r2, #15]
 800148a:	4413      	add	r3, r2
 800148c:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  if (temp > 2150) {
 8001490:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 8001494:	f640 0266 	movw	r2, #2150	@ 0x866
 8001498:	4293      	cmp	r3, r2
 800149a:	d921      	bls.n	80014e0 <main+0x324>
					setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 800149c:	230f      	movs	r3, #15
 800149e:	9303      	str	r3, [sp, #12]
 80014a0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	23ff      	movs	r3, #255	@ 0xff
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <main+0x30c>)
 80014b8:	f000 f9fe 	bl	80018b8 <setColor>
 80014bc:	e020      	b.n	8001500 <main+0x344>
 80014be:	bf00      	nop
 80014c0:	0800f300 	.word	0x0800f300
 80014c4:	0800f360 	.word	0x0800f360
 80014c8:	200002e0 	.word	0x200002e0
 80014cc:	0800f304 	.word	0x0800f304
 80014d0:	0800f31c 	.word	0x0800f31c
 80014d4:	6c6c756e 	.word	0x6c6c756e
 80014d8:	200001b0 	.word	0x200001b0
 80014dc:	0800f334 	.word	0x0800f334
				  } else {
					setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 80014e0:	230f      	movs	r3, #15
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	2300      	movs	r3, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	488b      	ldr	r0, [pc, #556]	@ (8001728 <main+0x56c>)
 80014fc:	f000 f9dc 	bl	80018b8 <setColor>
				  }
				  temp /= 10;
 8001500:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 8001504:	4a89      	ldr	r2, [pc, #548]	@ (800172c <main+0x570>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  itoa(temp, result2, 10);
 8001510:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 8001514:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001518:	220a      	movs	r2, #10
 800151a:	4618      	mov	r0, r3
 800151c:	f00d f95b 	bl	800e7d6 <itoa>
				  settempdata(result2);
 8001520:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001524:	4618      	mov	r0, r3
 8001526:	f002 f953 	bl	80037d0 <settempdata>
			  }
			  if (frame.can_id == 1520 + 33) {
 800152a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800152e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f240 6211 	movw	r2, #1553	@ 0x611
 8001538:	4293      	cmp	r3, r2
 800153a:	d117      	bne.n	800156c <main+0x3b0>
				  gear = ((uint8_t)frame.data[6]);
 800153c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001540:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001544:	7b9b      	ldrb	r3, [r3, #14]
 8001546:	f887 375e 	strb.w	r3, [r7, #1886]	@ 0x75e
				  if (gear != 0) {
 800154a:	f897 375e 	ldrb.w	r3, [r7, #1886]	@ 0x75e
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <main+0x3b0>
					  //USB_Println("the gear value is %d\n", gear);
					  itoa(gear, result3, 10);
 8001552:	f897 375e 	ldrb.w	r3, [r7, #1886]	@ 0x75e
 8001556:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800155a:	220a      	movs	r2, #10
 800155c:	4618      	mov	r0, r3
 800155e:	f00d f93a 	bl	800e7d6 <itoa>
					  setgeardata(result3);
 8001562:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001566:	4618      	mov	r0, r3
 8001568:	f002 f95e 	bl	8003828 <setgeardata>
				  }
			  }
			  if (frame.can_id == (1520 + 3)) {
 800156c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001570:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f240 52f3 	movw	r2, #1523	@ 0x5f3
 800157a:	4293      	cmp	r3, r2
 800157c:	d155      	bne.n	800162a <main+0x46e>
				  uint8_t battvalue = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 800157e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001582:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001586:	7adb      	ldrb	r3, [r3, #11]
 8001588:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
				  uint8_t batIntPart = battvalue / 10;
 800158c:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 8001590:	4a66      	ldr	r2, [pc, #408]	@ (800172c <main+0x570>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	f887 374e 	strb.w	r3, [r7, #1870]	@ 0x74e
				  uint8_t batDecimalPart = battvalue % 10;
 800159c:	f897 274f 	ldrb.w	r2, [r7, #1871]	@ 0x74f
 80015a0:	4b62      	ldr	r3, [pc, #392]	@ (800172c <main+0x570>)
 80015a2:	fba3 1302 	umull	r1, r3, r3, r2
 80015a6:	08d9      	lsrs	r1, r3, #3
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f887 374d 	strb.w	r3, [r7, #1869]	@ 0x74d
				  char batint[10];
				  char batdec[10];
				  itoa(batIntPart, batint, 10);
 80015b6:	f897 374e 	ldrb.w	r3, [r7, #1870]	@ 0x74e
 80015ba:	f107 010c 	add.w	r1, r7, #12
 80015be:	220a      	movs	r2, #10
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00d f908 	bl	800e7d6 <itoa>
				  itoa(batDecimalPart, batdec, 10);
 80015c6:	f897 374d 	ldrb.w	r3, [r7, #1869]	@ 0x74d
 80015ca:	4639      	mov	r1, r7
 80015cc:	220a      	movs	r2, #10
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00d f901 	bl	800e7d6 <itoa>
				  strncpy(result4, "", 20);
 80015d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015d8:	2214      	movs	r2, #20
 80015da:	4955      	ldr	r1, [pc, #340]	@ (8001730 <main+0x574>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f00d fa54 	bl	800ea8a <strncpy>
				  strncat(result4, batint, 5);
 80015e2:	f107 010c 	add.w	r1, r7, #12
 80015e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ea:	2205      	movs	r2, #5
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00d fa39 	bl	800ea64 <strncat>
				  strncat(result4, ".", 5);
 80015f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fdf2 	bl	80001e0 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001604:	4413      	add	r3, r2
 8001606:	494b      	ldr	r1, [pc, #300]	@ (8001734 <main+0x578>)
 8001608:	461a      	mov	r2, r3
 800160a:	460b      	mov	r3, r1
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	8013      	strh	r3, [r2, #0]
				  strncat(result4, batdec, 1);
 8001610:	4639      	mov	r1, r7
 8001612:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001616:	2201      	movs	r2, #1
 8001618:	4618      	mov	r0, r3
 800161a:	f00d fa23 	bl	800ea64 <strncat>
				  setbattdata(result4);
 800161e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001622:	4618      	mov	r0, r3
 8001624:	f002 f92a 	bl	800387c <setbattdata>
 8001628:	e6c0      	b.n	80013ac <main+0x1f0>
			  } else if (frame.can_id == 504) {
 800162a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800162e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8001638:	d144      	bne.n	80016c4 <main+0x508>
				  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 800163a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800163e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001642:	7b9b      	ldrb	r3, [r3, #14]
 8001644:	b21b      	sxth	r3, r3
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800164e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001652:	7bdb      	ldrb	r3, [r3, #15]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	f8a7 3750 	strh.w	r3, [r7, #1872]	@ 0x750
				  if (neutrallight < 1024) {
 800165e:	f8b7 3750 	ldrh.w	r3, [r7, #1872]	@ 0x750
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001666:	d21c      	bcs.n	80016a2 <main+0x4e6>
					  //isNeutral = 1;
					  setColor(&htim4, TIM_CHANNEL_1, 128, 255, 0, ledcolors, ledbytes, 0);
 8001668:	2300      	movs	r3, #0
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	23ff      	movs	r3, #255	@ 0xff
 800167e:	2280      	movs	r2, #128	@ 0x80
 8001680:	2100      	movs	r1, #0
 8001682:	4829      	ldr	r0, [pc, #164]	@ (8001728 <main+0x56c>)
 8001684:	f000 f918 	bl	80018b8 <setColor>
					  strncpy(result3, "7", 10);
 8001688:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800168c:	220a      	movs	r2, #10
 800168e:	492a      	ldr	r1, [pc, #168]	@ (8001738 <main+0x57c>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00d f9fa 	bl	800ea8a <strncpy>
					  setgeardata(result3);
 8001696:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800169a:	4618      	mov	r0, r3
 800169c:	f002 f8c4 	bl	8003828 <setgeardata>
 80016a0:	e684      	b.n	80013ac <main+0x1f0>
				  } else {
					  //isNeutral = 0;
					  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 80016a2:	2300      	movs	r3, #0
 80016a4:	9303      	str	r3, [sp, #12]
 80016a6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	2300      	movs	r3, #0
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	481a      	ldr	r0, [pc, #104]	@ (8001728 <main+0x56c>)
 80016be:	f000 f8fb 	bl	80018b8 <setColor>
 80016c2:	e673      	b.n	80013ac <main+0x1f0>
					  //strncpy(result3, "8", 10);
					  //setgeardata(result3);
				  }
				  //USB_Println("the neutral light value is %d\n", neutrallight);
			  } else if (frame.can_id == 1520 + 42) {
 80016c4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80016c8:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f240 621a 	movw	r2, #1562	@ 0x61a
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f47f ae6a 	bne.w	80013ac <main+0x1f0>
				  uint16_t speed = (uint16_t)((frame.data[0] << 8) | (frame.data[1]));
 80016d8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80016dc:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80016e0:	7a1b      	ldrb	r3, [r3, #8]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80016ec:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80016f0:	7a5b      	ldrb	r3, [r3, #9]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  speed /= 10;
 80016fc:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 8001700:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <main+0x570>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  itoa(speed, (char*) result5, 10);
 800170c:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 8001710:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001714:	220a      	movs	r2, #10
 8001716:	4618      	mov	r0, r3
 8001718:	f00d f85d 	bl	800e7d6 <itoa>
				  setspeeddata(result5);
 800171c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f8d7 	bl	80038d4 <setspeeddata>
  {
 8001726:	e641      	b.n	80013ac <main+0x1f0>
 8001728:	200002e0 	.word	0x200002e0
 800172c:	cccccccd 	.word	0xcccccccd
 8001730:	0800f354 	.word	0x0800f354
 8001734:	0800f358 	.word	0x0800f358
 8001738:	0800f35c 	.word	0x0800f35c

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	@ 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	@ 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00d f982 	bl	800ea54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <SystemClock_Config+0xd0>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	4a28      	ldr	r2, [pc, #160]	@ (800180c <SystemClock_Config+0xd0>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001770:	4b26      	ldr	r3, [pc, #152]	@ (800180c <SystemClock_Config+0xd0>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <SystemClock_Config+0xd4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001788:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <SystemClock_Config+0xd4>)
 800178a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <SystemClock_Config+0xd4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a6:	2302      	movs	r3, #2
 80017a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017b0:	2319      	movs	r3, #25
 80017b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017ba:	2304      	movs	r3, #4
 80017bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017be:	2307      	movs	r3, #7
 80017c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f107 0320 	add.w	r3, r7, #32
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 f9b2 	bl	8006b30 <HAL_RCC_OscConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017d2:	f000 f81f 	bl	8001814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	230f      	movs	r3, #15
 80017d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2302      	movs	r3, #2
 80017dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2102      	movs	r1, #2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fc14 	bl	8007020 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017fe:	f000 f809 	bl	8001814 <Error_Handler>
  }
}
 8001802:	bf00      	nop
 8001804:	3750      	adds	r7, #80	@ 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <Error_Handler+0x8>

08001820 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	myMCP.reset();
 8001824:	4806      	ldr	r0, [pc, #24]	@ (8001840 <initializeMCP2515+0x20>)
 8001826:	f002 fa39 	bl	8003c9c <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 800182a:	2202      	movs	r2, #2
 800182c:	210e      	movs	r1, #14
 800182e:	4804      	ldr	r0, [pc, #16]	@ (8001840 <initializeMCP2515+0x20>)
 8001830:	f002 fc06 	bl	8004040 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <initializeMCP2515+0x20>)
 8001836:	f002 fbb7 	bl	8003fa8 <_ZN7MCP251513setNormalModeEv>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200001b4 	.word	0x200001b4

08001844 <sendMessage>:

int sendMessage(struct can_frame *frame) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	return myMCP.sendMessage(frame);
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4804      	ldr	r0, [pc, #16]	@ (8001860 <sendMessage+0x1c>)
 8001850:	f002 ff1e 	bl	8004690 <_ZN7MCP251511sendMessageEPK9can_frame>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200001b4 	.word	0x200001b4

08001864 <readMessage>:

int readMessage(struct can_frame *frame) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4804      	ldr	r0, [pc, #16]	@ (8001880 <readMessage+0x1c>)
 8001870:	f002 ffc6 	bl	8004800 <_ZN7MCP251511readMessageEP9can_frame>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200001b4 	.word	0x200001b4

08001884 <_Z41__static_initialization_and_destruction_0v>:
//	myMCP.setFilter(MCP2515::RXF2, false, 1520 + 3);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF3, false, 1520 + 2);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF4, false, 504);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF5, false, 1520 + 42);  // uses MASK1

}
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af02      	add	r7, sp, #8
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 800188a:	2310      	movs	r3, #16
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8001890:	220a      	movs	r2, #10
 8001892:	4904      	ldr	r1, [pc, #16]	@ (80018a4 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8001894:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8001896:	f002 f9a2 	bl	8003bde <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40020000 	.word	0x40020000
 80018a4:	20000220 	.word	0x20000220
 80018a8:	200001b4 	.word	0x200001b4

080018ac <_GLOBAL__sub_I_myMCP>:
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	f7ff ffe8 	bl	8001884 <_Z41__static_initialization_and_destruction_0v>
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	460b      	mov	r3, r1
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	4613      	mov	r3, r2
 80018cc:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 80018ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018dc:	4413      	add	r3, r2
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	3301      	adds	r3, #1
 80018e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e8:	4413      	add	r3, r2
 80018ea:	79ba      	ldrb	r2, [r7, #6]
 80018ec:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3302      	adds	r3, #2
 80018f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f4:	4413      	add	r3, r2
 80018f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018fa:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	e02a      	b.n	8001958 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	e021      	b.n	800194c <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	00da      	lsls	r2, r3, #3
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800192c:	4413      	add	r3, r2
 800192e:	2246      	movs	r2, #70	@ 0x46
 8001930:	801a      	strh	r2, [r3, #0]
 8001932:	e008      	b.n	8001946 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	00da      	lsls	r2, r3, #3
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001940:	4413      	add	r3, r2
 8001942:	2223      	movs	r2, #35	@ 0x23
 8001944:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	3301      	adds	r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b07      	cmp	r3, #7
 8001950:	ddda      	ble.n	8001908 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3301      	adds	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3302      	adds	r3, #2
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	429a      	cmp	r2, r3
 8001960:	ddcf      	ble.n	8001902 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001962:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e008      	b.n	800197c <setColor+0xc4>
    	ledbytes[i] = 0;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001970:	4413      	add	r3, r2
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f240 2215 	movw	r2, #533	@ 0x215
 8001982:	4293      	cmp	r3, r2
 8001984:	ddf1      	ble.n	800196a <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001986:	f240 2316 	movw	r3, #534	@ 0x216
 800198a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f006 fcc0 	bl	8008314 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8001994:	bf00      	nop
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <setColor+0xf4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0fb      	beq.n	8001996 <setColor+0xde>
    datasentflag = 0;
 800199e:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <setColor+0xf4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200001c4 	.word	0x200001c4

080019b0 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e013      	b.n	80019ec <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3302      	adds	r3, #2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	22ff      	movs	r2, #255	@ 0xff
 80019e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3303      	adds	r3, #3
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80019f0:	dde8      	ble.n	80019c4 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	e02a      	b.n	8001a4e <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e021      	b.n	8001a42 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	00da      	lsls	r2, r3, #3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	2246      	movs	r2, #70	@ 0x46
 8001a26:	801a      	strh	r2, [r3, #0]
 8001a28:	e008      	b.n	8001a3c <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	00da      	lsls	r2, r3, #3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	2223      	movs	r2, #35	@ 0x23
 8001a3a:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b07      	cmp	r3, #7
 8001a46:	ddda      	ble.n	80019fe <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a52:	ddd1      	ble.n	80019f8 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e008      	b.n	8001a6e <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	f240 2215 	movw	r2, #533	@ 0x215
 8001a74:	4293      	cmp	r3, r2
 8001a76:	ddf1      	ble.n	8001a5c <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001a78:	f240 2316 	movw	r3, #534	@ 0x216
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f006 fc47 	bl	8008314 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8001a86:	bf00      	nop
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <shiftLightsInit+0xf4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0fb      	beq.n	8001a88 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <shiftLightsInit+0xf4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200001c4 	.word	0x200001c4

08001aa8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001ab4:	f006 fdde 	bl	8008674 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200002e0 	.word	0x200002e0
 8001acc:	200001c4 	.word	0x200001c4

08001ad0 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af04      	add	r7, sp, #16
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	dd06      	ble.n	8001af6 <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f8b6 	bl	8001c60 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001af4:	e02a      	b.n	8001b4c <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001af6:	2302      	movs	r3, #2
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e024      	b.n	8001b46 <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b02:	3b02      	subs	r3, #2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b08:	4413      	add	r3, r2
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	db08      	blt.n	8001b24 <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f819 	bl	8001b54 <lightOn>
 8001b22:	e00d      	b.n	8001b40 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	9303      	str	r3, [sp, #12]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	2200      	movs	r2, #0
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff febc 	bl	80018b8 <setColor>
	for (int i = 2; i < 14; i++) {
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b0d      	cmp	r3, #13
 8001b4a:	ddd7      	ble.n	8001afc <UpdateShiftLights+0x2c>
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af04      	add	r7, sp, #16
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b0d      	cmp	r3, #13
 8001b66:	d140      	bne.n	8001bea <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff ff1e 	bl	80019b0 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001b74:	2300      	movs	r3, #0
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2300      	movs	r3, #0
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4834      	ldr	r0, [pc, #208]	@ (8001c5c <lightOn+0x108>)
 8001b8c:	f7ff fe94 	bl	80018b8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001b90:	2301      	movs	r3, #1
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	482d      	ldr	r0, [pc, #180]	@ (8001c5c <lightOn+0x108>)
 8001ba8:	f7ff fe86 	bl	80018b8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001bac:	230e      	movs	r3, #14
 8001bae:	9303      	str	r3, [sp, #12]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4826      	ldr	r0, [pc, #152]	@ (8001c5c <lightOn+0x108>)
 8001bc4:	f7ff fe78 	bl	80018b8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001bc8:	230f      	movs	r3, #15
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	481f      	ldr	r0, [pc, #124]	@ (8001c5c <lightOn+0x108>)
 8001be0:	f7ff fe6a 	bl	80018b8 <setColor>
		HAL_Delay(5);
 8001be4:	2005      	movs	r0, #5
 8001be6:	f002 fed3 	bl	8004990 <HAL_Delay>
	}
	if (index < 6) {
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	dc0e      	bgt.n	8001c0e <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	9303      	str	r3, [sp, #12]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	22ff      	movs	r2, #255	@ 0xff
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fe56 	bl	80018b8 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001c0c:	e022      	b.n	8001c54 <lightOn+0x100>
	} else if (index < 10) {
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b09      	cmp	r3, #9
 8001c12:	dc0e      	bgt.n	8001c32 <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	9303      	str	r3, [sp, #12]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	23ff      	movs	r3, #255	@ 0xff
 8001c26:	2200      	movs	r2, #0
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7ff fe44 	bl	80018b8 <setColor>
}
 8001c30:	e010      	b.n	8001c54 <lightOn+0x100>
	} else if (index < 14){
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b0d      	cmp	r3, #13
 8001c36:	dc0d      	bgt.n	8001c54 <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	9303      	str	r3, [sp, #12]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	23ff      	movs	r3, #255	@ 0xff
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff fe32 	bl	80018b8 <setColor>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200002e0 	.word	0x200002e0

08001c60 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af04      	add	r7, sp, #16
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001c6e:	2307      	movs	r3, #7
 8001c70:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e026      	b.n	8001cc6 <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	9303      	str	r3, [sp, #12]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	23ff      	movs	r3, #255	@ 0xff
 8001c8e:	2200      	movs	r2, #0
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff fe10 	bl	80018b8 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	9303      	str	r3, [sp, #12]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	23ff      	movs	r3, #255	@ 0xff
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff fdff 	bl	80018b8 <setColor>
		HAL_Delay(20);
 8001cba:	2014      	movs	r0, #20
 8001cbc:	f002 fe68 	bl	8004990 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	ddd5      	ble.n	8001c78 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	e026      	b.n	8001d20 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	9303      	str	r3, [sp, #12]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	9302      	str	r3, [sp, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fde3 	bl	80018b8 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	9303      	str	r3, [sp, #12]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7ff fdd2 	bl	80018b8 <setColor>
		HAL_Delay(20);
 8001d14:	2014      	movs	r0, #20
 8001d16:	f002 fe3b 	bl	8004990 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	ddd5      	ble.n	8001cd2 <startUp+0x72>
	}
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d36:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <MX_SPI1_Init+0x6c>)
 8001d38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d7e:	220a      	movs	r2, #10
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d84:	f005 fb04 	bl	8007390 <HAL_SPI_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d8e:	f7ff fd41 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200001c8 	.word	0x200001c8
 8001d9c:	40013000 	.word	0x40013000

08001da0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001da4:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001da6:	4a18      	ldr	r2, [pc, #96]	@ (8001e08 <MX_SPI2_Init+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001db0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dec:	220a      	movs	r2, #10
 8001dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001df2:	f005 facd 	bl	8007390 <HAL_SPI_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f7ff fd0a 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000220 	.word	0x20000220
 8001e08:	40003800 	.word	0x40003800

08001e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	@ 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a4a      	ldr	r2, [pc, #296]	@ (8001f54 <HAL_SPI_MspInit+0x148>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d15c      	bne.n	8001ee8 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	4b49      	ldr	r3, [pc, #292]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	4a48      	ldr	r2, [pc, #288]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e3e:	4b46      	ldr	r3, [pc, #280]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a41      	ldr	r2, [pc, #260]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e66:	23a0      	movs	r3, #160	@ 0xa0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e76:	2305      	movs	r3, #5
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4836      	ldr	r0, [pc, #216]	@ (8001f5c <HAL_SPI_MspInit+0x150>)
 8001e82:	f003 fa4d 	bl	8005320 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e86:	4b36      	ldr	r3, [pc, #216]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001e88:	4a36      	ldr	r2, [pc, #216]	@ (8001f64 <HAL_SPI_MspInit+0x158>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e8c:	4b34      	ldr	r3, [pc, #208]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001e8e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e94:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001e96:	2240      	movs	r2, #64	@ 0x40
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001eb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ebe:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001eca:	4825      	ldr	r0, [pc, #148]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ecc:	f002 fe96 	bl	8004bfc <HAL_DMA_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001ed6:	f7ff fc9d 	bl	8001814 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a20      	ldr	r2, [pc, #128]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ede:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ee6:	e031      	b.n	8001f4c <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <HAL_SPI_MspInit+0x15c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d12c      	bne.n	8001f4c <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001f2a:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4809      	ldr	r0, [pc, #36]	@ (8001f6c <HAL_SPI_MspInit+0x160>)
 8001f48:	f003 f9ea 	bl	8005320 <HAL_GPIO_Init>
}
 8001f4c:	bf00      	nop
 8001f4e:	3730      	adds	r7, #48	@ 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40013000 	.word	0x40013000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	20000278 	.word	0x20000278
 8001f64:	40026458 	.word	0x40026458
 8001f68:	40003800 	.word	0x40003800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <SDTimer_Handler+0x40>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <SDTimer_Handler+0x1c>
    Timer1--;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <SDTimer_Handler+0x40>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <SDTimer_Handler+0x40>)
 8001fda:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <SDTimer_Handler+0x44>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <SDTimer_Handler+0x34>
    Timer2--;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <SDTimer_Handler+0x44>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <SDTimer_Handler+0x44>)
 8001ff2:	801a      	strh	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	200001a8 	.word	0x200001a8
 8002004:	200001aa 	.word	0x200001aa

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <NMI_Handler+0x4>

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <MemManage_Handler+0x4>

08002020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <UsageFault_Handler+0x4>

08002030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002060:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <SysTick_Handler+0x30>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <SysTick_Handler+0x30>)
 800206c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800206e:	4b07      	ldr	r3, [pc, #28]	@ (800208c <SysTick_Handler+0x30>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b09      	cmp	r3, #9
 8002076:	d904      	bls.n	8002082 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <SysTick_Handler+0x30>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800207e:	f7ff ff9f 	bl	8001fc0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002082:	f002 fc65 	bl	8004950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200002d8 	.word	0x200002d8

08002090 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <DMA1_Stream0_IRQHandler+0x10>)
 8002096:	f002 fed9 	bl	8004e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000328 	.word	0x20000328

080020a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 80020a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020ac:	f003 fad6 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 80020b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020b4:	f003 fad2 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 80020c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80020c4:	f003 faca 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 80020c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020cc:	f003 fac6 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <DMA2_Stream3_IRQHandler+0x10>)
 80020da:	f002 feb7 	bl	8004e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000278 	.word	0x20000278

080020e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <OTG_FS_IRQHandler+0x10>)
 80020ee:	f003 fc11 	bl	8005914 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20001138 	.word	0x20001138

080020fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return 1;
 8002100:	2301      	movs	r3, #1
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_kill>:

int _kill(int pid, int sig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002116:	f00c fd1f 	bl	800eb58 <__errno>
 800211a:	4603      	mov	r3, r0
 800211c:	2216      	movs	r2, #22
 800211e:	601a      	str	r2, [r3, #0]
  return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_exit>:

void _exit (int status)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002134:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ffe7 	bl	800210c <_kill>
  while (1) {}    /* Make sure we hang here */
 800213e:	bf00      	nop
 8002140:	e7fd      	b.n	800213e <_exit+0x12>
	...

08002144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <_sbrk+0x5c>)
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <_sbrk+0x60>)
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <_sbrk+0x64>)
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <_sbrk+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d207      	bcs.n	8002184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002174:	f00c fcf0 	bl	800eb58 <__errno>
 8002178:	4603      	mov	r3, r0
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002182:	e009      	b.n	8002198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <_sbrk+0x64>)
 8002194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20010000 	.word	0x20010000
 80021a4:	00000400 	.word	0x00000400
 80021a8:	200002dc 	.word	0x200002dc
 80021ac:	20001988 	.word	0x20001988

080021b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <SystemInit+0x20>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <SystemInit+0x20>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	@ 0x38
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
 8002200:	615a      	str	r2, [r3, #20]
 8002202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002204:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002206:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <MX_TIM4_Init+0xe8>)
 8002208:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800220a:	4b2b      	ldr	r3, [pc, #172]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b29      	ldr	r3, [pc, #164]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8002216:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002218:	2269      	movs	r2, #105	@ 0x69
 800221a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002228:	4823      	ldr	r0, [pc, #140]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 800222a:	f005 ffcb 	bl	80081c4 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002234:	f7ff faee 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800223c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002242:	4619      	mov	r1, r3
 8002244:	481c      	ldr	r0, [pc, #112]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002246:	f006 fb9d 	bl	8008984 <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002250:	f7ff fae0 	bl	8001814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002254:	4818      	ldr	r0, [pc, #96]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002256:	f006 f804 	bl	8008262 <HAL_TIM_PWM_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002260:	f7ff fad8 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	4619      	mov	r1, r3
 8002272:	4811      	ldr	r0, [pc, #68]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002274:	f007 f80a 	bl	800928c <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800227e:	f7ff fac9 	bl	8001814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	@ 0x60
 8002284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 800229a:	f006 fab1 	bl	8008800 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80022a4:	f7ff fab6 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022a8:	4803      	ldr	r0, [pc, #12]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 80022aa:	f000 f85d 	bl	8002368 <HAL_TIM_MspPostInit>

}
 80022ae:	bf00      	nop
 80022b0:	3738      	adds	r7, #56	@ 0x38
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200002e0 	.word	0x200002e0
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a22      	ldr	r2, [pc, #136]	@ (8002358 <HAL_TIM_Base_MspInit+0x98>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d13d      	bne.n	800234e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_TIM_Base_MspInit+0x9c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a20      	ldr	r2, [pc, #128]	@ (800235c <HAL_TIM_Base_MspInit+0x9c>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e2:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_TIM_Base_MspInit+0x9c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 80022f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002364 <HAL_TIM_Base_MspInit+0xa4>)
 80022f2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 80022f6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022fa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022fc:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 80022fe:	2240      	movs	r2, #64	@ 0x40
 8002300:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002302:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002308:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 800230a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800230e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002316:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 800231a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800231e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002332:	480b      	ldr	r0, [pc, #44]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002334:	f002 fc62 	bl	8004bfc <HAL_DMA_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800233e:	f7ff fa69 	bl	8001814 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a06      	ldr	r2, [pc, #24]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
 8002348:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40000800 	.word	0x40000800
 800235c:	40023800 	.word	0x40023800
 8002360:	20000328 	.word	0x20000328
 8002364:	40026010 	.word	0x40026010

08002368 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <HAL_TIM_MspPostInit+0x68>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11d      	bne.n	80023c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023a6:	2340      	movs	r3, #64	@ 0x40
 80023a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <HAL_TIM_MspPostInit+0x70>)
 80023c2:	f002 ffad 	bl	8005320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40000800 	.word	0x40000800
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020400 	.word	0x40020400

080023dc <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 80023dc:	b40f      	push	{r0, r1, r2, r3}
 80023de:	b580      	push	{r7, lr}
 80023e0:	b0a2      	sub	sp, #136	@ 0x88
 80023e2:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80023e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80023e8:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80023ea:	f107 0008 	add.w	r0, r7, #8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	f00c fb1f 	bl	800ea38 <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd feee 	bl	80001e0 <strlen>
 8002404:	4603      	mov	r3, r0
 8002406:	b29a      	uxth	r2, r3
 8002408:	f107 0308 	add.w	r3, r7, #8
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f00b fd52 	bl	800deb8 <CDC_Transmit_FS>
}
 8002414:	bf00      	nop
 8002416:	3788      	adds	r7, #136	@ 0x88
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800241e:	b004      	add	sp, #16
 8002420:	4770      	bx	lr
	...

08002424 <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <transmitdma+0x28>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	461a      	mov	r2, r3
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f005 fc36 	bl	8007cb0 <HAL_SPI_Transmit_DMA>
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000388 	.word	0x20000388

08002450 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a05      	ldr	r2, [pc, #20]	@ (8002474 <HAL_SPI_TxCpltCallback+0x24>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d102      	bne.n	8002468 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_SPI_TxCpltCallback+0x28>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
	}
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40013000 	.word	0x40013000
 8002478:	20000388 	.word	0x20000388

0800247c <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	461a      	mov	r2, r3
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f805 	bl	80024a0 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	79fa      	ldrb	r2, [r7, #7]
 80024b8:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e014      	b.n	80024f6 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	4413      	add	r3, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f9da 	bl	8002890 <_ZN13DisplayObject11getpriorityEv>
 80024dc:	4603      	mov	r3, r0
 80024de:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	799b      	ldrb	r3, [r3, #6]
 80024e4:	7cfa      	ldrb	r2, [r7, #19]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d902      	bls.n	80024f0 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	7cfa      	ldrb	r2, [r7, #19]
 80024ee:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dbe6      	blt.n	80024cc <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 800250e:	b089      	sub	sp, #36	@ 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002516:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800251a:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 800251c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002520:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	795b      	ldrb	r3, [r3, #5]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 813e 	beq.w	80027aa <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 800252e:	f240 133f 	movw	r3, #319	@ 0x13f
 8002532:	f240 12df 	movw	r2, #479	@ 0x1df
 8002536:	2100      	movs	r1, #0
 8002538:	2000      	movs	r0, #0
 800253a:	f000 fd46 	bl	8002fca <modifySpace>
		startCommand(WRITE_COMMAND);
 800253e:	202c      	movs	r0, #44	@ 0x2c
 8002540:	f000 fc50 	bl	8002de4 <startCommand>
		dataOrRegister(1);
 8002544:	2001      	movs	r0, #1
 8002546:	f000 fc0b 	bl	8002d60 <dataOrRegister>
		uint8_t anychanges = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002550:	f102 021f 	add.w	r2, r2, #31
 8002554:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002556:	2300      	movs	r3, #0
 8002558:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800255c:	f102 0218 	add.w	r2, r2, #24
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e028      	b.n	80025b6 <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 8002564:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002568:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002574:	f103 0318 	add.w	r3, r3, #24
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f9a0 	bl	80028c6 <_ZN13DisplayObject13getChangeFlagEv>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800258e:	f103 031f 	add.w	r3, r3, #31
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4413      	add	r3, r2
 8002596:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800259a:	f102 021f 	add.w	r2, r2, #31
 800259e:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80025a0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025a4:	f103 0318 	add.w	r3, r3, #24
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025b0:	f102 0218 	add.w	r2, r2, #24
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025ba:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	791b      	ldrb	r3, [r3, #4]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025c8:	f103 0318 	add.w	r3, r3, #24
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	dbc8      	blt.n	8002564 <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 80025d2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025d6:	f103 031f 	add.w	r3, r3, #31
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80ec 	beq.w	80027ba <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80025e2:	2300      	movs	r3, #0
 80025e4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025e8:	f102 0214 	add.w	r2, r2, #20
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e0d2      	b.n	8002796 <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 80025f0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025f4:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 80025f8:	4618      	mov	r0, r3
 80025fa:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80025fe:	461a      	mov	r2, r3
 8002600:	2100      	movs	r1, #0
 8002602:	f00c fa27 	bl	800ea54 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 8002606:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800260a:	f103 0314 	add.w	r3, r3, #20
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800261c:	f102 0208 	add.w	r2, r2, #8
 8002620:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 8002622:	2300      	movs	r3, #0
 8002624:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002628:	f102 0210 	add.w	r2, r2, #16
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e084      	b.n	800273a <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 8002630:	2300      	movs	r3, #0
 8002632:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002636:	f102 020c 	add.w	r2, r2, #12
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e064      	b.n	8002708 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 800263e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002642:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800264e:	f103 030c 	add.w	r3, r3, #12
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f918 	bl	8002890 <_ZN13DisplayObject11getpriorityEv>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002668:	f103 0310 	add.w	r3, r3, #16
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4293      	cmp	r3, r2
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d03a      	beq.n	80026f2 <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 800267c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002680:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800268c:	f103 030c 	add.w	r3, r3, #12
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800269c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026a8:	f103 030c 	add.w	r3, r3, #12
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3308      	adds	r3, #8
 80026b8:	681c      	ldr	r4, [r3, #0]
 80026ba:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026be:	f103 0308 	add.w	r3, r3, #8
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f107 0120 	add.w	r1, r7, #32
 80026ca:	3918      	subs	r1, #24
 80026cc:	2250      	movs	r2, #80	@ 0x50
 80026ce:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 80026d0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026d4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026e0:	f103 030c 	add.w	r3, r3, #12
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f87f 	bl	80027f0 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 80026f2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026f6:	f103 030c 	add.w	r3, r3, #12
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002702:	f102 020c 	add.w	r2, r2, #12
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800270c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	791b      	ldrb	r3, [r3, #4]
 8002714:	461a      	mov	r2, r3
 8002716:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800271a:	f103 030c 	add.w	r3, r3, #12
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4293      	cmp	r3, r2
 8002722:	db8c      	blt.n	800263e <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 8002724:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002728:	f103 0310 	add.w	r3, r3, #16
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002734:	f102 0210 	add.w	r2, r2, #16
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800273e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	799b      	ldrb	r3, [r3, #6]
 8002746:	461a      	mov	r2, r3
 8002748:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800274c:	f103 0310 	add.w	r3, r3, #16
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4293      	cmp	r3, r2
 8002754:	f77f af6c 	ble.w	8002630 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	3b18      	subs	r3, #24
 800275e:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002762:	4619      	mov	r1, r3
 8002764:	4818      	ldr	r0, [pc, #96]	@ (80027c8 <_ZN5Scene9drawSceneEv+0x2c0>)
 8002766:	f7ff fe5d 	bl	8002424 <transmitdma>
			while(!spidatasentflag) {}
 800276a:	bf00      	nop
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <_ZN5Scene9drawSceneEv+0x2c4>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f5      	bne.n	800276c <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002780:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002784:	f103 0314 	add.w	r3, r3, #20
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002790:	f102 0214 	add.w	r2, r2, #20
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800279a:	f103 0314 	add.w	r3, r3, #20
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	f77f af25 	ble.w	80025f0 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 80027a6:	f000 fb33 	bl	8002e10 <endCommand>
	}
	this->changed = 0;
 80027aa:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80027ae:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	715a      	strb	r2, [r3, #5]
 80027b8:	e000      	b.n	80027bc <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 80027ba:	bf00      	nop
}
 80027bc:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 80027c0:	3724      	adds	r7, #36	@ 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200001c8 	.word	0x200001c8
 80027cc:	20000388 	.word	0x20000388

080027d0 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <_ZN13DisplayObjectD1Ev+0x1c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	0800f4d8 	.word	0x0800f4d8

080027f0 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	715a      	strb	r2, [r3, #5]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	715a      	strb	r2, [r3, #5]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	return this->xpos;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	88db      	ldrh	r3, [r3, #6]
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	80da      	strh	r2, [r3, #6]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	return this->ypos;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	891b      	ldrh	r3, [r3, #8]
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	887a      	ldrh	r2, [r7, #2]
 8002882:	811a      	strh	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	return this->priority;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	791b      	ldrb	r3, [r3, #4]
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	711a      	strb	r2, [r3, #4]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	return this->changed;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	795b      	ldrb	r3, [r3, #5]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <_ZN13DisplayObjectC1Ev>:

#include <stdint.h>
#include "rpiDisplayShapes.h"
#include "fatfs.h"

class DisplayObject {
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <_ZN13DisplayObjectC1Ev+0x1c>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	0800f4d8 	.word	0x0800f4d8

08002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4603      	mov	r3, r0
 8002910:	817b      	strh	r3, [r7, #10]
 8002912:	460b      	mov	r3, r1
 8002914:	813b      	strh	r3, [r7, #8]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffdf 	bl	80028e0 <_ZN13DisplayObjectC1Ev>
 8002922:	4a15      	ldr	r2, [pc, #84]	@ (8002978 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a3a      	ldr	r2, [r7, #32]
 800292c:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	897a      	ldrh	r2, [r7, #10]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff81 	bl	800283c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	893a      	ldrh	r2, [r7, #8]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff96 	bl	8002872 <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	7f3a      	ldrb	r2, [r7, #28]
 8002950:	751a      	strb	r2, [r3, #20]
	this->font = font;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ffa1 	bl	80028a8 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff4e 	bl	800280a <_ZN13DisplayObject12redrawObjectEv>
}
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	0800f4c4 	.word	0x0800f4c4

0800297c <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002980:	b08a      	sub	sp, #40	@ 0x28
 8002982:	af06      	add	r7, sp, #24
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	4611      	mov	r1, r2
 800298a:	461a      	mov	r2, r3
 800298c:	460b      	mov	r3, r1
 800298e:	80fb      	strh	r3, [r7, #6]
 8002990:	4613      	mov	r3, r2
 8002992:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68dc      	ldr	r4, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691d      	ldr	r5, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	895e      	ldrh	r6, [r3, #10]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff3e 	bl	8002824 <_ZN13DisplayObject7getxposEv>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4698      	mov	r8, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff53 	bl	800285a <_ZN13DisplayObject7getyposEv>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4619      	mov	r1, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	7d1b      	ldrb	r3, [r3, #20]
 80029bc:	88ba      	ldrh	r2, [r7, #4]
 80029be:	9204      	str	r2, [sp, #16]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	9203      	str	r2, [sp, #12]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	9202      	str	r2, [sp, #8]
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	9100      	str	r1, [sp, #0]
 80029cc:	4643      	mov	r3, r8
 80029ce:	4632      	mov	r2, r6
 80029d0:	4629      	mov	r1, r5
 80029d2:	4620      	mov	r0, r4
 80029d4:	f000 fdbd 	bl	8003552 <drawStringIntoFramebuffer>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	460b      	mov	r3, r1
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	79fa      	ldrb	r2, [r7, #7]
 8002a04:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88ba      	ldrh	r2, [r7, #4]
 8002a0a:	815a      	strh	r2, [r3, #10]
	this->font = font;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8bba      	ldrh	r2, [r7, #28]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff0f 	bl	800283c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8c3a      	ldrh	r2, [r7, #32]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff24 	bl	8002872 <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff ff38 	bl	80028a8 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fee5 	bl	800280a <_ZN13DisplayObject12redrawObjectEv>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZN17OutlineRectObjectC1Ettttthh>:

/*
 * the following are all OutlineRectObject definitions
 */

OutlineRectObject::OutlineRectObject(uint16_t xpos, uint16_t ypos, uint16_t length, uint16_t height, uint16_t colorvalue, uint8_t positioning, uint8_t priority) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	4608      	mov	r0, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	813b      	strh	r3, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff3b 	bl	80028e0 <_ZN13DisplayObjectC1Ev>
 8002a6a:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <_ZN17OutlineRectObjectC1Ettttthh+0x7c>)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]
	this->setxpos(xpos);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	897a      	ldrh	r2, [r7, #10]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fee0 	bl	800283c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	893a      	ldrh	r2, [r7, #8]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fef5 	bl	8002872 <_ZN13DisplayObject7setyposEt>
	this->length = length;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	819a      	strh	r2, [r3, #12]
	this->height = height;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8b3a      	ldrh	r2, [r7, #24]
 8002a92:	81da      	strh	r2, [r3, #14]
	this->colorvalue = colorvalue;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8bba      	ldrh	r2, [r7, #28]
 8002a98:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002aa0:	741a      	strb	r2, [r3, #16]
	this->setpriority(priority);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fefc 	bl	80028a8 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fea9 	bl	800280a <_ZN13DisplayObject12redrawObjectEv>
}
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	0800f4b0 	.word	0x0800f4b0

08002ac8 <_ZN17OutlineRectObject19drawIntoFramebufferEPttt>:

uint16_t OutlineRectObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	b08b      	sub	sp, #44	@ 0x2c
 8002acc:	af06      	add	r7, sp, #24
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	80fb      	strh	r3, [r7, #6]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80bb      	strh	r3, [r7, #4]
	drawRectangleOutlineIntoFramebuffer(this->getxpos(), this->getypos(), this->length, this->height, this->colorvalue, this->positioning, framebuffer, framewidth, xstart);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fe9f 	bl	8002824 <_ZN13DisplayObject7getxposEv>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461d      	mov	r5, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff feb4 	bl	800285a <_ZN13DisplayObject7getyposEv>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461e      	mov	r6, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8998      	ldrh	r0, [r3, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	89dc      	ldrh	r4, [r3, #14]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	895b      	ldrh	r3, [r3, #10]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	7c12      	ldrb	r2, [r2, #16]
 8002b06:	88b9      	ldrh	r1, [r7, #4]
 8002b08:	9104      	str	r1, [sp, #16]
 8002b0a:	88f9      	ldrh	r1, [r7, #6]
 8002b0c:	9103      	str	r1, [sp, #12]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	9102      	str	r1, [sp, #8]
 8002b12:	9201      	str	r2, [sp, #4]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	4623      	mov	r3, r4
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 fb30 	bl	8003182 <drawRectangleOutlineIntoFramebuffer>
	return 0;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b2c <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af04      	add	r7, sp, #16
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	80fb      	strh	r3, [r7, #6]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80bb      	strh	r3, [r7, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fecb 	bl	80028e0 <_ZN13DisplayObjectC1Ev>
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <_ZN11ImageObjectC1EPctttthh+0x50>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8002b50:	88b9      	ldrh	r1, [r7, #4]
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	8bbb      	ldrh	r3, [r7, #28]
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	8b3b      	ldrh	r3, [r7, #24]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f844 	bl	8002bfa <_ZN11ImageObject11updateImageEPctttthh>
}
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	0800f49c 	.word	0x0800f49c

08002b80 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b82:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8002b86:	af90      	add	r7, sp, #576	@ 0x240
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	461a      	mov	r2, r3
 8002b90:	460b      	mov	r3, r1
 8002b92:	80fb      	strh	r3, [r7, #6]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->imagefile, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	895d      	ldrh	r5, [r3, #10]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	899e      	ldrh	r6, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fe3e 	bl	8002824 <_ZN13DisplayObject7getxposEv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fe53 	bl	800285a <_ZN13DisplayObject7getyposEv>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	7b9b      	ldrb	r3, [r3, #14]
 8002bbc:	68fc      	ldr	r4, [r7, #12]
 8002bbe:	88ba      	ldrh	r2, [r7, #4]
 8002bc0:	928f      	str	r2, [sp, #572]	@ 0x23c
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	928e      	str	r2, [sp, #568]	@ 0x238
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	928d      	str	r2, [sp, #564]	@ 0x234
 8002bca:	938c      	str	r3, [sp, #560]	@ 0x230
 8002bcc:	918b      	str	r1, [sp, #556]	@ 0x22c
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	938a      	str	r3, [sp, #552]	@ 0x228
 8002bd2:	9689      	str	r6, [sp, #548]	@ 0x224
 8002bd4:	9588      	str	r5, [sp, #544]	@ 0x220
 8002bd6:	4668      	mov	r0, sp
 8002bd8:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 8002bdc:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8002be0:	4619      	mov	r1, r3
 8002be2:	f00b ffe5 	bl	800ebb0 <memcpy>
 8002be6:	f104 0314 	add.w	r3, r4, #20
 8002bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bec:	f000 fd1d 	bl	800362a <drawImageIntoFramebuffer>
	return 0;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bfa <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	4611      	mov	r1, r2
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	80fb      	strh	r3, [r7, #6]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8b3a      	ldrh	r2, [r7, #24]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fe10 	bl	800283c <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8bba      	ldrh	r2, [r7, #28]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe25 	bl	8002872 <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88ba      	ldrh	r2, [r7, #4]
 8002c38:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c40:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fe2c 	bl	80028a8 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fdd9 	bl	800280a <_ZN13DisplayObject12redrawObjectEv>
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <_ZN11ImageObjectD1Ev+0x20>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fdad 	bl	80027d0 <_ZN13DisplayObjectD1Ev>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	0800f49c 	.word	0x0800f49c

08002c84 <_ZN11ImageObjectD0Ev>:
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ffe7 	bl	8002c60 <_ZN11ImageObjectD1Ev>
 8002c92:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f00b fd60 	bl	800e75c <_ZdlPvj>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <_ZN17OutlineRectObjectD1Ev>:
class OutlineRectObject : public DisplayObject {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <_ZN17OutlineRectObjectD1Ev+0x20>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fd89 	bl	80027d0 <_ZN13DisplayObjectD1Ev>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	0800f4b0 	.word	0x0800f4b0

08002ccc <_ZN17OutlineRectObjectD0Ev>:
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffe7 	bl	8002ca8 <_ZN17OutlineRectObjectD1Ev>
 8002cda:	2114      	movs	r1, #20
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f00b fd3d 	bl	800e75c <_ZdlPvj>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4a05      	ldr	r2, [pc, #20]	@ (8002d0c <_ZN12StringObjectD1Ev+0x20>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fd67 	bl	80027d0 <_ZN13DisplayObjectD1Ev>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	0800f4c4 	.word	0x0800f4c4

08002d10 <_ZN12StringObjectD0Ev>:
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ffe7 	bl	8002cec <_ZN12StringObjectD1Ev>
 8002d1e:	2118      	movs	r1, #24
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f00b fd1b 	bl	800e75c <_ZdlPvj>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2108      	movs	r1, #8
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <startTransaction+0x14>)
 8002d3a:	f002 fc75 	bl	8005628 <HAL_GPIO_WritePin>
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40020400 	.word	0x40020400

08002d48 <endTransaction>:

void endTransaction() {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2108      	movs	r1, #8
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <endTransaction+0x14>)
 8002d52:	f002 fc69 	bl	8005628 <HAL_GPIO_WritePin>
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40020400 	.word	0x40020400

08002d60 <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002d70:	2201      	movs	r2, #1
 8002d72:	2110      	movs	r1, #16
 8002d74:	4806      	ldr	r0, [pc, #24]	@ (8002d90 <dataOrRegister+0x30>)
 8002d76:	f002 fc57 	bl	8005628 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002d7a:	e004      	b.n	8002d86 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2110      	movs	r1, #16
 8002d80:	4803      	ldr	r0, [pc, #12]	@ (8002d90 <dataOrRegister+0x30>)
 8002d82:	f002 fc51 	bl	8005628 <HAL_GPIO_WritePin>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40020400 	.word	0x40020400

08002d94 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002da2:	f7ff ffc5 	bl	8002d30 <startTransaction>

	dataOrRegister(0);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7ff ffda 	bl	8002d60 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002dac:	f107 010e 	add.w	r1, r7, #14
 8002db0:	230a      	movs	r3, #10
 8002db2:	2201      	movs	r2, #1
 8002db4:	480a      	ldr	r0, [pc, #40]	@ (8002de0 <commandAndData+0x4c>)
 8002db6:	f004 fb74 	bl	80074a2 <HAL_SPI_Transmit>

	if (size) {
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <commandAndData+0x40>
		dataOrRegister(1);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7ff ffcd 	bl	8002d60 <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	230a      	movs	r3, #10
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	4804      	ldr	r0, [pc, #16]	@ (8002de0 <commandAndData+0x4c>)
 8002dd0:	f004 fb67 	bl	80074a2 <HAL_SPI_Transmit>
	}

	endTransaction();
 8002dd4:	f7ff ffb8 	bl	8002d48 <endTransaction>
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200001c8 	.word	0x200001c8

08002de4 <startCommand>:

void startCommand(uint16_t command) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002dee:	f7ff ff9f 	bl	8002d30 <startTransaction>
	dataOrRegister(0);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7ff ffb4 	bl	8002d60 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002df8:	1db9      	adds	r1, r7, #6
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4803      	ldr	r0, [pc, #12]	@ (8002e0c <startCommand+0x28>)
 8002e00:	f004 fb4f 	bl	80074a2 <HAL_SPI_Transmit>
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200001c8 	.word	0x200001c8

08002e10 <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	endTransaction();
 8002e14:	f7ff ff98 	bl	8002d48 <endTransaction>
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <resetScreen>:

void resetScreen() {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002e20:	2201      	movs	r2, #1
 8002e22:	2120      	movs	r1, #32
 8002e24:	480b      	ldr	r0, [pc, #44]	@ (8002e54 <resetScreen+0x38>)
 8002e26:	f002 fbff 	bl	8005628 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002e2a:	2014      	movs	r0, #20
 8002e2c:	f001 fdb0 	bl	8004990 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2120      	movs	r1, #32
 8002e34:	4807      	ldr	r0, [pc, #28]	@ (8002e54 <resetScreen+0x38>)
 8002e36:	f002 fbf7 	bl	8005628 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002e3a:	2014      	movs	r0, #20
 8002e3c:	f001 fda8 	bl	8004990 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002e40:	2201      	movs	r2, #1
 8002e42:	2120      	movs	r1, #32
 8002e44:	4803      	ldr	r0, [pc, #12]	@ (8002e54 <resetScreen+0x38>)
 8002e46:	f002 fbef 	bl	8005628 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e4a:	2064      	movs	r0, #100	@ 0x64
 8002e4c:	f001 fda0 	bl	8004990 <HAL_Delay>
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40020400 	.word	0x40020400

08002e58 <initializeScreen>:

void initializeScreen() {
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b09c      	sub	sp, #112	@ 0x70
 8002e5c:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7ff ff96 	bl	8002d94 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2011      	movs	r0, #17
 8002e6e:	f7ff ff91 	bl	8002d94 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002e72:	2355      	movs	r3, #85	@ 0x55
 8002e74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002e78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	203a      	movs	r0, #58	@ 0x3a
 8002e82:	f7ff ff87 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002e86:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <initializeScreen+0x14c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002e8c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e90:	2204      	movs	r2, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	20c0      	movs	r0, #192	@ 0xc0
 8002e96:	f7ff ff7d 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002e9a:	2345      	movs	r3, #69	@ 0x45
 8002e9c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002ea6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	20c1      	movs	r0, #193	@ 0xc1
 8002eb0:	f7ff ff70 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002eb4:	2333      	movs	r3, #51	@ 0x33
 8002eb6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002eba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	20c2      	movs	r0, #194	@ 0xc2
 8002ec4:	f7ff ff66 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002ece:	2328      	movs	r3, #40	@ 0x28
 8002ed0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002ed4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ed8:	2204      	movs	r2, #4
 8002eda:	4619      	mov	r1, r3
 8002edc:	20c5      	movs	r0, #197	@ 0xc5
 8002ede:	f7ff ff59 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002ee2:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <initializeScreen+0x150>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002ee8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002eec:	2204      	movs	r2, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	20b1      	movs	r0, #177	@ 0xb1
 8002ef2:	f7ff ff4f 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002efc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f00:	2202      	movs	r2, #2
 8002f02:	4619      	mov	r1, r3
 8002f04:	20b4      	movs	r0, #180	@ 0xb4
 8002f06:	f7ff ff45 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002f0a:	4a28      	ldr	r2, [pc, #160]	@ (8002fac <initializeScreen+0x154>)
 8002f0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f14:	6018      	str	r0, [r3, #0]
 8002f16:	3304      	adds	r3, #4
 8002f18:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002f1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f1e:	2206      	movs	r2, #6
 8002f20:	4619      	mov	r1, r3
 8002f22:	20b6      	movs	r0, #182	@ 0xb6
 8002f24:	f7ff ff36 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002f28:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <initializeScreen+0x158>)
 8002f2a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002f2e:	461d      	mov	r5, r3
 8002f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f38:	c407      	stmia	r4!, {r0, r1, r2}
 8002f3a:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f40:	221e      	movs	r2, #30
 8002f42:	4619      	mov	r1, r3
 8002f44:	20e0      	movs	r0, #224	@ 0xe0
 8002f46:	f7ff ff25 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <initializeScreen+0x15c>)
 8002f4c:	f107 040c 	add.w	r4, r7, #12
 8002f50:	461d      	mov	r5, r3
 8002f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f5a:	c407      	stmia	r4!, {r0, r1, r2}
 8002f5c:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	221e      	movs	r2, #30
 8002f64:	4619      	mov	r1, r3
 8002f66:	20e1      	movs	r0, #225	@ 0xe1
 8002f68:	f7ff ff14 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	813b      	strh	r3, [r7, #8]
 8002f70:	2322      	movs	r3, #34	@ 0x22
 8002f72:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002f74:	f107 0308 	add.w	r3, r7, #8
 8002f78:	2204      	movs	r2, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	20b6      	movs	r0, #182	@ 0xb6
 8002f7e:	f7ff ff09 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002f82:	2308      	movs	r3, #8
 8002f84:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	2036      	movs	r0, #54	@ 0x36
 8002f8e:	f7ff ff01 	bl	8002d94 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 f85a 	bl	800304c <clearScreenfast>
	displayOn();
 8002f98:	f000 f80e 	bl	8002fb8 <displayOn>
}
 8002f9c:	bf00      	nop
 8002f9e:	3770      	adds	r7, #112	@ 0x70
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa4:	0800f390 	.word	0x0800f390
 8002fa8:	0800f394 	.word	0x0800f394
 8002fac:	0800f398 	.word	0x0800f398
 8002fb0:	0800f3a0 	.word	0x0800f3a0
 8002fb4:	0800f3c0 	.word	0x0800f3c0

08002fb8 <displayOn>:

void displayOn() {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	2029      	movs	r0, #41	@ 0x29
 8002fc2:	f7ff fee7 	bl	8002d94 <commandAndData>
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4623      	mov	r3, r4
 8002fda:	80fb      	strh	r3, [r7, #6]
 8002fdc:	4603      	mov	r3, r0
 8002fde:	80bb      	strh	r3, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002fe8:	88bb      	ldrh	r3, [r7, #4]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	823b      	strh	r3, [r7, #16]
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	827b      	strh	r3, [r7, #18]
 8002ff8:	883b      	ldrh	r3, [r7, #0]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	82bb      	strh	r3, [r7, #20]
 8003000:	883b      	ldrh	r3, [r7, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	b29b      	uxth	r3, r3
 8003006:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8003008:	f107 0310 	add.w	r3, r7, #16
 800300c:	2208      	movs	r2, #8
 800300e:	4619      	mov	r1, r3
 8003010:	202a      	movs	r0, #42	@ 0x2a
 8003012:	f7ff febf 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	b29b      	uxth	r3, r3
 800301c:	813b      	strh	r3, [r7, #8]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	b29b      	uxth	r3, r3
 8003024:	817b      	strh	r3, [r7, #10]
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	b29b      	uxth	r3, r3
 800302c:	81bb      	strh	r3, [r7, #12]
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	b29b      	uxth	r3, r3
 8003034:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	2208      	movs	r2, #8
 800303c:	4619      	mov	r1, r3
 800303e:	202b      	movs	r0, #43	@ 0x2b
 8003040:	f7ff fea8 	bl	8002d94 <commandAndData>
	}
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}

0800304c <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 800304c:	b580      	push	{r7, lr}
 800304e:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	4602      	mov	r2, r0
 8003058:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800305c:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8003060:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8003062:	2300      	movs	r3, #0
 8003064:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003068:	f102 020c 	add.w	r2, r2, #12
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e01a      	b.n	80030a6 <clearScreenfast+0x5a>
		buffer1[i] = color;
 8003070:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003074:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8003078:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800307c:	f102 020c 	add.w	r2, r2, #12
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8003086:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 800308a:	8809      	ldrh	r1, [r1, #0]
 800308c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8003090:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003094:	f103 030c 	add.w	r3, r3, #12
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80030a0:	f102 020c 	add.w	r2, r2, #12
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80030aa:	f103 030c 	add.w	r3, r3, #12
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80030b4:	dbdc      	blt.n	8003070 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 80030b6:	f240 133f 	movw	r3, #319	@ 0x13f
 80030ba:	f240 12df 	movw	r2, #479	@ 0x1df
 80030be:	2100      	movs	r1, #0
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7ff ff82 	bl	8002fca <modifySpace>
	startCommand(0x2C);
 80030c6:	202c      	movs	r0, #44	@ 0x2c
 80030c8:	f7ff fe8c 	bl	8002de4 <startCommand>
	dataOrRegister(1);
 80030cc:	2001      	movs	r0, #1
 80030ce:	f7ff fe47 	bl	8002d60 <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80030d8:	f102 0208 	add.w	r2, r2, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e019      	b.n	8003114 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	3b08      	subs	r3, #8
 80030e6:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80030ea:	4619      	mov	r1, r3
 80030ec:	4811      	ldr	r0, [pc, #68]	@ (8003134 <clearScreenfast+0xe8>)
 80030ee:	f7ff f999 	bl	8002424 <transmitdma>
		while (!spidatasentflag) {}
 80030f2:	bf00      	nop
 80030f4:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <clearScreenfast+0xec>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0fa      	beq.n	80030f4 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80030fe:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003102:	f103 0308 	add.w	r3, r3, #8
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800310e:	f102 0208 	add.w	r2, r2, #8
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003118:	f103 0308 	add.w	r3, r3, #8
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b05      	cmp	r3, #5
 8003120:	ddde      	ble.n	80030e0 <clearScreenfast+0x94>
	}
	endCommand();
 8003122:	f7ff fe75 	bl	8002e10 <endCommand>
}
 8003126:	bf00      	nop
 8003128:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200001c8 	.word	0x200001c8
 8003138:	20000388 	.word	0x20000388

0800313c <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	4611      	mov	r1, r2
 8003148:	461a      	mov	r2, r3
 800314a:	460b      	mov	r3, r1
 800314c:	80fb      	strh	r3, [r7, #6]
 800314e:	4613      	mov	r3, r2
 8003150:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	88bb      	ldrh	r3, [r7, #4]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	b29a      	uxth	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	801a      	strh	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <drawRectangleOutlineIntoFramebuffer>:
	drawVLine(x1 + length, y1, height, color);
	drawHLine(x1, y1, length, color);
	drawHLine(x1, y1 + height, length, color);
}

void drawRectangleOutlineIntoFramebuffer(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color, uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003182:	b590      	push	{r4, r7, lr}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	4604      	mov	r4, r0
 800318a:	4608      	mov	r0, r1
 800318c:	4611      	mov	r1, r2
 800318e:	461a      	mov	r2, r3
 8003190:	4623      	mov	r3, r4
 8003192:	80fb      	strh	r3, [r7, #6]
 8003194:	4603      	mov	r3, r0
 8003196:	80bb      	strh	r3, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
 800319c:	4613      	mov	r3, r2
 800319e:	803b      	strh	r3, [r7, #0]
	if (positioning & CENTER_OBJECT) {
 80031a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <drawRectangleOutlineIntoFramebuffer+0x36>
		getRectCenter(&x1, &y1, length, height);
 80031ac:	883b      	ldrh	r3, [r7, #0]
 80031ae:	887a      	ldrh	r2, [r7, #2]
 80031b0:	1d39      	adds	r1, r7, #4
 80031b2:	1db8      	adds	r0, r7, #6
 80031b4:	f7ff ffc2 	bl	800313c <getRectCenter>
	}
	for (int x = x1; x < x1 + length; x++) {
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e09c      	b.n	80032f8 <drawRectangleOutlineIntoFramebuffer+0x176>
		for (int y = y1; y < y1 + height; y++) {
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	e08e      	b.n	80032e2 <drawRectangleOutlineIntoFramebuffer+0x160>
			if ((x >= xstart) & (x < (xstart + framewidth))) {
 80031c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	bfac      	ite	ge
 80031cc:	2301      	movge	r3, #1
 80031ce:	2300      	movlt	r3, #0
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80031d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80031d6:	440b      	add	r3, r1
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	4299      	cmp	r1, r3
 80031dc:	bfb4      	ite	lt
 80031de:	2301      	movlt	r3, #1
 80031e0:	2300      	movge	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4013      	ands	r3, r2
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d077      	beq.n	80032dc <drawRectangleOutlineIntoFramebuffer+0x15a>
				if ((x == x1) | (x == (x1 + length - 1))) {
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4293      	cmp	r3, r2
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	4619      	mov	r1, r3
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	440b      	add	r3, r1
 8003204:	3b01      	subs	r3, #1
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4299      	cmp	r1, r3
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4313      	orrs	r3, r2
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d024      	beq.n	8003264 <drawRectangleOutlineIntoFramebuffer+0xe2>
					if ((y >= y1) & (y < y1 + height)) {
 800321a:	88bb      	ldrh	r3, [r7, #4]
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4293      	cmp	r3, r2
 8003222:	bfac      	ite	ge
 8003224:	2301      	movge	r3, #1
 8003226:	2300      	movlt	r3, #0
 8003228:	b2da      	uxtb	r2, r3
 800322a:	88bb      	ldrh	r3, [r7, #4]
 800322c:	4619      	mov	r1, r3
 800322e:	883b      	ldrh	r3, [r7, #0]
 8003230:	440b      	add	r3, r1
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4299      	cmp	r1, r3
 8003236:	bfb4      	ite	lt
 8003238:	2301      	movlt	r3, #1
 800323a:	2300      	movge	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4013      	ands	r3, r2
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00e      	beq.n	8003264 <drawRectangleOutlineIntoFramebuffer+0xe2>
							framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 8003246:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800325e:	4413      	add	r3, r2
 8003260:	8c3a      	ldrh	r2, [r7, #32]
 8003262:	801a      	strh	r2, [r3, #0]
					}
				}
				if ((y == y1) | (y == (y1 + height - 1))) {
 8003264:	88bb      	ldrh	r3, [r7, #4]
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4293      	cmp	r3, r2
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2da      	uxtb	r2, r3
 8003274:	88bb      	ldrh	r3, [r7, #4]
 8003276:	4619      	mov	r1, r3
 8003278:	883b      	ldrh	r3, [r7, #0]
 800327a:	440b      	add	r3, r1
 800327c:	3b01      	subs	r3, #1
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	4299      	cmp	r1, r3
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d024      	beq.n	80032dc <drawRectangleOutlineIntoFramebuffer+0x15a>
					if ((x >= x1) & (x < (x1 + length))) {
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	461a      	mov	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4293      	cmp	r3, r2
 800329a:	bfac      	ite	ge
 800329c:	2301      	movge	r3, #1
 800329e:	2300      	movlt	r3, #0
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	4619      	mov	r1, r3
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	440b      	add	r3, r1
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	4299      	cmp	r1, r3
 80032ae:	bfb4      	ite	lt
 80032b0:	2301      	movlt	r3, #1
 80032b2:	2300      	movge	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4013      	ands	r3, r2
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00e      	beq.n	80032dc <drawRectangleOutlineIntoFramebuffer+0x15a>
						framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 80032be:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	019b      	lsls	r3, r3, #6
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4413      	add	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d6:	4413      	add	r3, r2
 80032d8:	8c3a      	ldrh	r2, [r7, #32]
 80032da:	801a      	strh	r2, [r3, #0]
		for (int y = y1; y < y1 + height; y++) {
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	88bb      	ldrh	r3, [r7, #4]
 80032e4:	461a      	mov	r2, r3
 80032e6:	883b      	ldrh	r3, [r7, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f6ff af69 	blt.w	80031c4 <drawRectangleOutlineIntoFramebuffer+0x42>
	for (int x = x1; x < x1 + length; x++) {
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	461a      	mov	r2, r3
 80032fc:	887b      	ldrh	r3, [r7, #2]
 80032fe:	4413      	add	r3, r2
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	429a      	cmp	r2, r3
 8003304:	f6ff af5b 	blt.w	80031be <drawRectangleOutlineIntoFramebuffer+0x3c>
					}
				}
			}
		}
	}
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8003312:	b480      	push	{r7}
 8003314:	b089      	sub	sp, #36	@ 0x24
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003328:	e015      	b.n	8003356 <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	460b      	mov	r3, r1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003340:	4413      	add	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	791b      	ldrb	r3, [r3, #4]
 8003348:	461a      	mov	r2, r3
 800334a:	8b7b      	ldrh	r3, [r7, #26]
 800334c:	4413      	add	r3, r2
 800334e:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e5      	bne.n	800332a <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	8b7b      	ldrh	r3, [r7, #26]
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8003370:	bf00      	nop
 8003372:	3724      	adds	r7, #36	@ 0x24
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	@ 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003392:	e015      	b.n	80033c0 <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	460b      	mov	r3, r1
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033aa:	4413      	add	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	791b      	ldrb	r3, [r3, #4]
 80033b2:	461a      	mov	r2, r3
 80033b4:	8b7b      	ldrh	r3, [r7, #26]
 80033b6:	4413      	add	r3, r2
 80033b8:	837b      	strh	r3, [r7, #26]
		currentletter++;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	8b7b      	ldrh	r3, [r7, #26]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 80033d6:	bf00      	nop
 80033d8:	3724      	adds	r7, #36	@ 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <drawCharIntoFramebuffer>:
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
	return toDraw->xAdvance;
}

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80033e2:	b480      	push	{r7}
 80033e4:	b08d      	sub	sp, #52	@ 0x34
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	460b      	mov	r3, r1
 80033f4:	81bb      	strh	r3, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800340c:	440b      	add	r3, r1
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	789b      	ldrb	r3, [r3, #2]
 8003414:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	78db      	ldrb	r3, [r3, #3]
 800341a:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800342a:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	791b      	ldrb	r3, [r3, #4]
 8003430:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 800344a:	2300      	movs	r3, #0
 800344c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800344e:	e071      	b.n	8003534 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 8003450:	2300      	movs	r3, #0
 8003452:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003454:	e062      	b.n	800351c <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 8003456:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 8003468:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 800346e:	461a      	mov	r2, r3
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 800347a:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800347e:	2b00      	cmp	r3, #0
 8003480:	da41      	bge.n	8003506 <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 8003482:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003486:	b29a      	uxth	r2, r3
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	4413      	add	r3, r2
 800348c:	b29a      	uxth	r2, r3
 800348e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003492:	b29b      	uxth	r3, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29a      	uxth	r2, r3
 8003498:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 800349e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80034a0:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 80034b0:	8afa      	ldrh	r2, [r7, #22]
 80034b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80034b6:	429a      	cmp	r2, r3
 80034b8:	bf2c      	ite	cs
 80034ba:	2301      	movcs	r3, #1
 80034bc:	2300      	movcc	r3, #0
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	8af9      	ldrh	r1, [r7, #22]
 80034c2:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80034c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80034ca:	4403      	add	r3, r0
 80034cc:	4299      	cmp	r1, r3
 80034ce:	bfb4      	ite	lt
 80034d0:	2301      	movlt	r3, #1
 80034d2:	2300      	movge	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4013      	ands	r3, r2
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d013      	beq.n	8003506 <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 80034de:	8abb      	ldrh	r3, [r7, #20]
 80034e0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034e4:	d20f      	bcs.n	8003506 <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80034e6:	8afa      	ldrh	r2, [r7, #22]
 80034e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80034ec:	1ad2      	subs	r2, r2, r3
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	461a      	mov	r2, r3
 80034f8:	8abb      	ldrh	r3, [r7, #20]
 80034fa:	4413      	add	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003500:	4413      	add	r3, r2
 8003502:	89ba      	ldrh	r2, [r7, #12]
 8003504:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 8003506:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 8003510:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003514:	b29b      	uxth	r3, r3
 8003516:	3301      	adds	r3, #1
 8003518:	b29b      	uxth	r3, r3
 800351a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800351c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8003520:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003524:	429a      	cmp	r2, r3
 8003526:	db96      	blt.n	8003456 <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 8003528:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3301      	adds	r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003534:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8003538:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800353c:	429a      	cmp	r2, r3
 800353e:	db87      	blt.n	8003450 <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 8003540:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003544:	b29b      	uxth	r3, r3
}
 8003546:	4618      	mov	r0, r3
 8003548:	3734      	adds	r7, #52	@ 0x34
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003552:	b590      	push	{r4, r7, lr}
 8003554:	b08d      	sub	sp, #52	@ 0x34
 8003556:	af06      	add	r7, sp, #24
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	4611      	mov	r1, r2
 800355e:	461a      	mov	r2, r3
 8003560:	460b      	mov	r3, r1
 8003562:	80fb      	strh	r3, [r7, #6]
 8003564:	4613      	mov	r3, r2
 8003566:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8003568:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8003574:	1d38      	adds	r0, r7, #4
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800357e:	f7ff fec8 	bl	8003312 <getStringCenter>
 8003582:	e00c      	b.n	800359e <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 8003584:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 8003590:	1d38      	adds	r0, r7, #4
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800359a:	f7ff feef 	bl	800337c <getStringLeft>
	}
	uint16_t xAdvance = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 80035a6:	bf00      	nop
 80035a8:	8abb      	ldrh	r3, [r7, #20]
 80035aa:	3301      	adds	r3, #1
 80035ac:	82bb      	strh	r3, [r7, #20]
 80035ae:	8abb      	ldrh	r3, [r7, #20]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f6      	bne.n	80035a8 <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 80035ba:	8abb      	ldrh	r3, [r7, #20]
 80035bc:	3b01      	subs	r3, #1
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e028      	b.n	8003614 <drawStringIntoFramebuffer+0xc2>
		if ((stringxpos + xAdvance) > (xstart + framewidth)) {
 80035c2:	88bb      	ldrh	r3, [r7, #4]
 80035c4:	461a      	mov	r2, r3
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	441a      	add	r2, r3
 80035ca:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80035cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80035ce:	440b      	add	r3, r1
 80035d0:	429a      	cmp	r2, r3
 80035d2:	dc23      	bgt.n	800361c <drawStringIntoFramebuffer+0xca>
			//xAdvance += getCharXadv(buffer[i], font);
			break;
		}
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	7818      	ldrb	r0, [r3, #0]
 80035dc:	88ba      	ldrh	r2, [r7, #4]
 80035de:	8afb      	ldrh	r3, [r7, #22]
 80035e0:	4413      	add	r3, r2
 80035e2:	b29c      	uxth	r4, r3
 80035e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035e6:	88f9      	ldrh	r1, [r7, #6]
 80035e8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80035ea:	9204      	str	r2, [sp, #16]
 80035ec:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035ee:	9203      	str	r2, [sp, #12]
 80035f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f2:	9202      	str	r2, [sp, #8]
 80035f4:	2200      	movs	r2, #0
 80035f6:	9201      	str	r2, [sp, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	4623      	mov	r3, r4
 80035fc:	460a      	mov	r2, r1
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	f7ff feef 	bl	80033e2 <drawCharIntoFramebuffer>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	8afb      	ldrh	r3, [r7, #22]
 800360a:	4413      	add	r3, r2
 800360c:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3b01      	subs	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	dad3      	bge.n	80035c2 <drawStringIntoFramebuffer+0x70>
 800361a:	e000      	b.n	800361e <drawStringIntoFramebuffer+0xcc>
			break;
 800361c:	bf00      	nop
	}
	return font->yAdvance;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	7b1b      	ldrb	r3, [r3, #12]
}
 8003622:	4618      	mov	r0, r3
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}

0800362a <drawImageIntoFramebuffer>:
		USB_Println("failure to open %s\n", image);
	}
}

void drawImageIntoFramebuffer(FIL newfile, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800362a:	b084      	sub	sp, #16
 800362c:	b580      	push	{r7, lr}
 800362e:	f5ad 6d01 	sub.w	sp, sp, #2064	@ 0x810
 8003632:	af00      	add	r7, sp, #0
 8003634:	f607 0c18 	addw	ip, r7, #2072	@ 0x818
 8003638:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (positioning & CENTER_OBJECT) {
 800363c:	f897 3a58 	ldrb.w	r3, [r7, #2648]	@ 0xa58
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <drawImageIntoFramebuffer+0x32>
		 getRectCenter(&x, &y, length, height);
 8003648:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	@ 0xa4c
 800364c:	f8b7 2a48 	ldrh.w	r2, [r7, #2632]	@ 0xa48
 8003650:	f607 2154 	addw	r1, r7, #2644	@ 0xa54
 8003654:	f507 6025 	add.w	r0, r7, #2640	@ 0xa50
 8003658:	f7ff fd70 	bl	800313c <getRectCenter>
	}
	uint16_t readbuffer[1024];
	unsigned int br = 0;
 800365c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003660:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
	f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 8003668:	463b      	mov	r3, r7
 800366a:	1d39      	adds	r1, r7, #4
 800366c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003670:	f607 0018 	addw	r0, r7, #2072	@ 0x818
 8003674:	f00a f91e 	bl	800d8b4 <f_read>
	int i = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
	for (int xx = xstart; xx < xstart + framewidth; xx++) {
 800367e:	f8b7 3a64 	ldrh.w	r3, [r7, #2660]	@ 0xa64
 8003682:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8003686:	e062      	b.n	800374e <drawImageIntoFramebuffer+0x124>
		if ((xx >= x) && (xx < (x + length))) {
 8003688:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	@ 0xa50
 800368c:	461a      	mov	r2, r3
 800368e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8003692:	4293      	cmp	r3, r2
 8003694:	db56      	blt.n	8003744 <drawImageIntoFramebuffer+0x11a>
 8003696:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	@ 0xa50
 800369a:	461a      	mov	r2, r3
 800369c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	@ 0xa48
 80036a0:	4413      	add	r3, r2
 80036a2:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80036a6:	429a      	cmp	r2, r3
 80036a8:	da4c      	bge.n	8003744 <drawImageIntoFramebuffer+0x11a>
			for (int yy = 0; yy < SCREEN_HEIGHT; yy++) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 80036b0:	e043      	b.n	800373a <drawImageIntoFramebuffer+0x110>
				if ((yy >= y) && (yy < (y + height))) {
 80036b2:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	@ 0xa54
 80036b6:	461a      	mov	r2, r3
 80036b8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80036bc:	4293      	cmp	r3, r2
 80036be:	db37      	blt.n	8003730 <drawImageIntoFramebuffer+0x106>
 80036c0:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	@ 0xa54
 80036c4:	461a      	mov	r2, r3
 80036c6:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	@ 0xa4c
 80036ca:	4413      	add	r3, r2
 80036cc:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 80036d0:	429a      	cmp	r2, r3
 80036d2:	da2d      	bge.n	8003730 <drawImageIntoFramebuffer+0x106>
					framebuffer[(xx - xstart) * SCREEN_HEIGHT + yy] = readbuffer[i++];
 80036d4:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 80036d8:	1c53      	adds	r3, r2, #1
 80036da:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80036de:	f8b7 3a64 	ldrh.w	r3, [r7, #2660]	@ 0xa64
 80036e2:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80036e6:	1ac9      	subs	r1, r1, r3
 80036e8:	460b      	mov	r3, r1
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	019b      	lsls	r3, r3, #6
 80036f0:	4619      	mov	r1, r3
 80036f2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80036f6:	440b      	add	r3, r1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	f8d7 1a5c 	ldr.w	r1, [r7, #2652]	@ 0xa5c
 80036fe:	440b      	add	r3, r1
 8003700:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8003704:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 8003708:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800370c:	801a      	strh	r2, [r3, #0]
					if (i > br) {
 800370e:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8003712:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003716:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d907      	bls.n	8003730 <drawImageIntoFramebuffer+0x106>
						f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 8003720:	463b      	mov	r3, r7
 8003722:	1d39      	adds	r1, r7, #4
 8003724:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003728:	f607 0018 	addw	r0, r7, #2072	@ 0x818
 800372c:	f00a f8c2 	bl	800d8b4 <f_read>
			for (int yy = 0; yy < SCREEN_HEIGHT; yy++) {
 8003730:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8003734:	3301      	adds	r3, #1
 8003736:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 800373a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800373e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003742:	dbb6      	blt.n	80036b2 <drawImageIntoFramebuffer+0x88>
	for (int xx = xstart; xx < xstart + framewidth; xx++) {
 8003744:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8003748:	3301      	adds	r3, #1
 800374a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 800374e:	f8b7 2a64 	ldrh.w	r2, [r7, #2660]	@ 0xa64
 8003752:	f8b7 3a60 	ldrh.w	r3, [r7, #2656]	@ 0xa60
 8003756:	4413      	add	r3, r2
 8003758:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800375c:	429a      	cmp	r2, r3
 800375e:	db93      	blt.n	8003688 <drawImageIntoFramebuffer+0x5e>
					}
				}
			}
		}
	}
	f_close(&newfile);
 8003760:	f607 0018 	addw	r0, r7, #2072	@ 0x818
 8003764:	f00a fa63 	bl	800dc2e <f_close>
}
 8003768:	bf00      	nop
 800376a:	f507 6701 	add.w	r7, r7, #2064	@ 0x810
 800376e:	46bd      	mov	sp, r7
 8003770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003774:	b004      	add	sp, #16
 8003776:	4770      	bx	lr

08003778 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af04      	add	r7, sp, #16
 800377e:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 8003780:	220a      	movs	r2, #10
 8003782:	490f      	ldr	r1, [pc, #60]	@ (80037c0 <setrpmdata+0x48>)
 8003784:	480f      	ldr	r0, [pc, #60]	@ (80037c4 <setrpmdata+0x4c>)
 8003786:	f00b f980 	bl	800ea8a <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 800378a:	220a      	movs	r2, #10
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	480d      	ldr	r0, [pc, #52]	@ (80037c4 <setrpmdata+0x4c>)
 8003790:	f00b f968 	bl	800ea64 <strncat>
	((StringObject*)otherobjects[0])->updateString(rpmresult, NO_CENTER_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 200, 260, 1);
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <setrpmdata+0x50>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	9303      	str	r3, [sp, #12]
 800379c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80037a0:	9302      	str	r3, [sp, #8]
 80037a2:	23c8      	movs	r3, #200	@ 0xc8
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	4b09      	ldr	r3, [pc, #36]	@ (80037cc <setrpmdata+0x54>)
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037ae:	2200      	movs	r2, #0
 80037b0:	4904      	ldr	r1, [pc, #16]	@ (80037c4 <setrpmdata+0x4c>)
 80037b2:	f7ff f917 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	0800f42c 	.word	0x0800f42c
 80037c4:	2000038c 	.word	0x2000038c
 80037c8:	200003dc 	.word	0x200003dc
 80037cc:	08012734 	.word	0x08012734

080037d0 <settempdata>:

void settempdata(char *tempvalue) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af04      	add	r7, sp, #16
 80037d6:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 80037d8:	220a      	movs	r2, #10
 80037da:	490f      	ldr	r1, [pc, #60]	@ (8003818 <settempdata+0x48>)
 80037dc:	480f      	ldr	r0, [pc, #60]	@ (800381c <settempdata+0x4c>)
 80037de:	f00b f954 	bl	800ea8a <strncpy>
	strncat(tempresult, tempvalue, 10);
 80037e2:	220a      	movs	r2, #10
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	480d      	ldr	r0, [pc, #52]	@ (800381c <settempdata+0x4c>)
 80037e8:	f00b f93c 	bl	800ea64 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <settempdata+0x50>)
 80037ee:	6858      	ldr	r0, [r3, #4]
 80037f0:	2303      	movs	r3, #3
 80037f2:	9303      	str	r3, [sp, #12]
 80037f4:	2364      	movs	r3, #100	@ 0x64
 80037f6:	9302      	str	r3, [sp, #8]
 80037f8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <settempdata+0x54>)
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003806:	2202      	movs	r2, #2
 8003808:	4904      	ldr	r1, [pc, #16]	@ (800381c <settempdata+0x4c>)
 800380a:	f7ff f8eb 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	0800f42c 	.word	0x0800f42c
 800381c:	200003a0 	.word	0x200003a0
 8003820:	200003dc 	.word	0x200003dc
 8003824:	080108dc 	.word	0x080108dc

08003828 <setgeardata>:

void setgeardata(char *gearvalue) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af04      	add	r7, sp, #16
 800382e:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 8003830:	220a      	movs	r2, #10
 8003832:	490e      	ldr	r1, [pc, #56]	@ (800386c <setgeardata+0x44>)
 8003834:	480e      	ldr	r0, [pc, #56]	@ (8003870 <setgeardata+0x48>)
 8003836:	f00b f928 	bl	800ea8a <strncpy>
	strncat(gearresult, gearvalue, 10);
 800383a:	220a      	movs	r2, #10
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	480c      	ldr	r0, [pc, #48]	@ (8003870 <setgeardata+0x48>)
 8003840:	f00b f910 	bl	800ea64 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <setgeardata+0x4c>)
 8003846:	68d8      	ldr	r0, [r3, #12]
 8003848:	2302      	movs	r3, #2
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	23f0      	movs	r3, #240	@ 0xf0
 800384e:	9302      	str	r3, [sp, #8]
 8003850:	2364      	movs	r3, #100	@ 0x64
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <setgeardata+0x50>)
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800385c:	2202      	movs	r2, #2
 800385e:	4904      	ldr	r1, [pc, #16]	@ (8003870 <setgeardata+0x48>)
 8003860:	f7ff f8c0 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	0800f42c 	.word	0x0800f42c
 8003870:	20000008 	.word	0x20000008
 8003874:	200003dc 	.word	0x200003dc
 8003878:	08016b40 	.word	0x08016b40

0800387c <setbattdata>:

void setbattdata(char *battvalue) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af04      	add	r7, sp, #16
 8003882:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 8003884:	220a      	movs	r2, #10
 8003886:	490f      	ldr	r1, [pc, #60]	@ (80038c4 <setbattdata+0x48>)
 8003888:	480f      	ldr	r0, [pc, #60]	@ (80038c8 <setbattdata+0x4c>)
 800388a:	f00b f8fe 	bl	800ea8a <strncpy>
	strncat(battresult, battvalue, 10);
 800388e:	220a      	movs	r2, #10
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <setbattdata+0x4c>)
 8003894:	f00b f8e6 	bl	800ea64 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 8003898:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <setbattdata+0x50>)
 800389a:	6898      	ldr	r0, [r3, #8]
 800389c:	2306      	movs	r3, #6
 800389e:	9303      	str	r3, [sp, #12]
 80038a0:	233c      	movs	r3, #60	@ 0x3c
 80038a2:	9302      	str	r3, [sp, #8]
 80038a4:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <setbattdata+0x54>)
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038b2:	2202      	movs	r2, #2
 80038b4:	4904      	ldr	r1, [pc, #16]	@ (80038c8 <setbattdata+0x4c>)
 80038b6:	f7ff f895 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	0800f42c 	.word	0x0800f42c
 80038c8:	200003c8 	.word	0x200003c8
 80038cc:	200003dc 	.word	0x200003dc
 80038d0:	080108dc 	.word	0x080108dc

080038d4 <setspeeddata>:

void setspeeddata(char *speedvalue) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af04      	add	r7, sp, #16
 80038da:	6078      	str	r0, [r7, #4]
	strncpy(speedresult, "", 10);
 80038dc:	220a      	movs	r2, #10
 80038de:	490f      	ldr	r1, [pc, #60]	@ (800391c <setspeeddata+0x48>)
 80038e0:	480f      	ldr	r0, [pc, #60]	@ (8003920 <setspeeddata+0x4c>)
 80038e2:	f00b f8d2 	bl	800ea8a <strncpy>
	strncat(speedresult, speedvalue, 10);
 80038e6:	220a      	movs	r2, #10
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	480d      	ldr	r0, [pc, #52]	@ (8003920 <setspeeddata+0x4c>)
 80038ec:	f00b f8ba 	bl	800ea64 <strncat>
	((StringObject*)otherobjects[6])->updateString(speedresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 375, 185, 7);
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <setspeeddata+0x50>)
 80038f2:	6998      	ldr	r0, [r3, #24]
 80038f4:	2307      	movs	r3, #7
 80038f6:	9303      	str	r3, [sp, #12]
 80038f8:	23b9      	movs	r3, #185	@ 0xb9
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	f240 1377 	movw	r3, #375	@ 0x177
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	4b09      	ldr	r3, [pc, #36]	@ (8003928 <setspeeddata+0x54>)
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800390a:	2201      	movs	r2, #1
 800390c:	4904      	ldr	r1, [pc, #16]	@ (8003920 <setspeeddata+0x4c>)
 800390e:	f7ff f869 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	0800f42c 	.word	0x0800f42c
 8003920:	200003b4 	.word	0x200003b4
 8003924:	200003dc 	.word	0x200003dc
 8003928:	080108dc 	.word	0x080108dc

0800392c <domainscreen>:

void domainscreen() {
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 8003930:	4804      	ldr	r0, [pc, #16]	@ (8003944 <domainscreen+0x18>)
 8003932:	f7fe fde9 	bl	8002508 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 10);
 8003936:	220a      	movs	r2, #10
 8003938:	4903      	ldr	r1, [pc, #12]	@ (8003948 <domainscreen+0x1c>)
 800393a:	4802      	ldr	r0, [pc, #8]	@ (8003944 <domainscreen+0x18>)
 800393c:	f7fe fdb0 	bl	80024a0 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000404 	.word	0x20000404
 8003948:	200003dc 	.word	0x200003dc

0800394c <dosplashscene>:

void dosplashscene() {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
	splashScene.drawScene();
 8003950:	4804      	ldr	r0, [pc, #16]	@ (8003964 <dosplashscene+0x18>)
 8003952:	f7fe fdd9 	bl	8002508 <_ZN5Scene9drawSceneEv>
	splashScene.setScene(splashobjects, 1);
 8003956:	2201      	movs	r2, #1
 8003958:	4903      	ldr	r1, [pc, #12]	@ (8003968 <dosplashscene+0x1c>)
 800395a:	4802      	ldr	r0, [pc, #8]	@ (8003964 <dosplashscene+0x18>)
 800395c:	f7fe fda0 	bl	80024a0 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000410 	.word	0x20000410
 8003968:	2000040c 	.word	0x2000040c

0800396c <_Z41__static_initialization_and_destruction_0v>:
 800396c:	b590      	push	{r4, r7, lr}
 800396e:	b085      	sub	sp, #20
 8003970:	af04      	add	r7, sp, #16
		new StringObject(200, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, NO_CENTER_OBJECT, rpmresult, 1),
 8003972:	2018      	movs	r0, #24
 8003974:	f00a fef4 	bl	800e760 <_Znwj>
 8003978:	4603      	mov	r3, r0
 800397a:	461c      	mov	r4, r3
 800397c:	2301      	movs	r3, #1
 800397e:	9303      	str	r3, [sp, #12]
 8003980:	4b82      	ldr	r3, [pc, #520]	@ (8003b8c <_Z41__static_initialization_and_destruction_0v+0x220>)
 8003982:	9302      	str	r3, [sp, #8]
 8003984:	2300      	movs	r3, #0
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	4b81      	ldr	r3, [pc, #516]	@ (8003b90 <_Z41__static_initialization_and_destruction_0v+0x224>)
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003990:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003994:	21c8      	movs	r1, #200	@ 0xc8
 8003996:	4620      	mov	r0, r4
 8003998:	f7fe ffb2 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800399c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 800399e:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 80039a0:	2018      	movs	r0, #24
 80039a2:	f00a fedd 	bl	800e760 <_Znwj>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461c      	mov	r4, r3
 80039aa:	2303      	movs	r3, #3
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003b98 <_Z41__static_initialization_and_destruction_0v+0x22c>)
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	2302      	movs	r3, #2
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	4b79      	ldr	r3, [pc, #484]	@ (8003b9c <_Z41__static_initialization_and_destruction_0v+0x230>)
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039be:	2264      	movs	r2, #100	@ 0x64
 80039c0:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7fe ff9b 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80039ca:	4b72      	ldr	r3, [pc, #456]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 80039cc:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 80039ce:	2018      	movs	r0, #24
 80039d0:	f00a fec6 	bl	800e760 <_Znwj>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461c      	mov	r4, r3
 80039d8:	2306      	movs	r3, #6
 80039da:	9303      	str	r3, [sp, #12]
 80039dc:	4b70      	ldr	r3, [pc, #448]	@ (8003ba0 <_Z41__static_initialization_and_destruction_0v+0x234>)
 80039de:	9302      	str	r3, [sp, #8]
 80039e0:	2302      	movs	r3, #2
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	4b6d      	ldr	r3, [pc, #436]	@ (8003b9c <_Z41__static_initialization_and_destruction_0v+0x230>)
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039ec:	223c      	movs	r2, #60	@ 0x3c
 80039ee:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80039f2:	4620      	mov	r0, r4
 80039f4:	f7fe ff84 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80039f8:	4b66      	ldr	r3, [pc, #408]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 80039fa:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 80039fc:	2018      	movs	r0, #24
 80039fe:	f00a feaf 	bl	800e760 <_Znwj>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461c      	mov	r4, r3
 8003a06:	2302      	movs	r3, #2
 8003a08:	9303      	str	r3, [sp, #12]
 8003a0a:	4b66      	ldr	r3, [pc, #408]	@ (8003ba4 <_Z41__static_initialization_and_destruction_0v+0x238>)
 8003a0c:	9302      	str	r3, [sp, #8]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	4b65      	ldr	r3, [pc, #404]	@ (8003ba8 <_Z41__static_initialization_and_destruction_0v+0x23c>)
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a1a:	22f0      	movs	r2, #240	@ 0xf0
 8003a1c:	2164      	movs	r1, #100	@ 0x64
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7fe ff6e 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003a24:	4b5b      	ldr	r3, [pc, #364]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003a26:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 8003a28:	2018      	movs	r0, #24
 8003a2a:	f00a fe99 	bl	800e760 <_Znwj>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	461c      	mov	r4, r3
 8003a32:	2304      	movs	r3, #4
 8003a34:	9303      	str	r3, [sp, #12]
 8003a36:	4b5d      	ldr	r3, [pc, #372]	@ (8003bac <_Z41__static_initialization_and_destruction_0v+0x240>)
 8003a38:	9302      	str	r3, [sp, #8]
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8003bb0 <_Z41__static_initialization_and_destruction_0v+0x244>)
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a46:	2282      	movs	r2, #130	@ 0x82
 8003a48:	f240 118b 	movw	r1, #395	@ 0x18b
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f7fe ff57 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003a52:	4b50      	ldr	r3, [pc, #320]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003a54:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5),
 8003a56:	2018      	movs	r0, #24
 8003a58:	f00a fe82 	bl	800e760 <_Znwj>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461c      	mov	r4, r3
 8003a60:	2305      	movs	r3, #5
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	4b53      	ldr	r3, [pc, #332]	@ (8003bb4 <_Z41__static_initialization_and_destruction_0v+0x248>)
 8003a66:	9302      	str	r3, [sp, #8]
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	4b50      	ldr	r3, [pc, #320]	@ (8003bb0 <_Z41__static_initialization_and_destruction_0v+0x244>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a74:	225a      	movs	r2, #90	@ 0x5a
 8003a76:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7fe ff40 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003a80:	4b44      	ldr	r3, [pc, #272]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003a82:	615c      	str	r4, [r3, #20]
		new StringObject(375, 185, 0xFFFF, FREE_SANS_18PT7B, LEFTDRAW_OBJECT, speedresult, 7),
 8003a84:	2018      	movs	r0, #24
 8003a86:	f00a fe6b 	bl	800e760 <_Znwj>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461c      	mov	r4, r3
 8003a8e:	2307      	movs	r3, #7
 8003a90:	9303      	str	r3, [sp, #12]
 8003a92:	4b49      	ldr	r3, [pc, #292]	@ (8003bb8 <_Z41__static_initialization_and_destruction_0v+0x24c>)
 8003a94:	9302      	str	r3, [sp, #8]
 8003a96:	2301      	movs	r3, #1
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	4b40      	ldr	r3, [pc, #256]	@ (8003b9c <_Z41__static_initialization_and_destruction_0v+0x230>)
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aa2:	22b9      	movs	r2, #185	@ 0xb9
 8003aa4:	f240 1177 	movw	r1, #375	@ 0x177
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7fe ff29 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003aae:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003ab0:	619c      	str	r4, [r3, #24]
		new StringObject(440, 288, 0xFFFF, ICONFONT, LEFTDRAW_OBJECT, rpmicon, 8),
 8003ab2:	2018      	movs	r0, #24
 8003ab4:	f00a fe54 	bl	800e760 <_Znwj>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461c      	mov	r4, r3
 8003abc:	2308      	movs	r3, #8
 8003abe:	9303      	str	r3, [sp, #12]
 8003ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8003bbc <_Z41__static_initialization_and_destruction_0v+0x250>)
 8003ac2:	9302      	str	r3, [sp, #8]
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <_Z41__static_initialization_and_destruction_0v+0x244>)
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ad0:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8003ad4:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7fe ff11 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003ade:	4b2d      	ldr	r3, [pc, #180]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003ae0:	61dc      	str	r4, [r3, #28]
		new OutlineRectObject(190, 250, 260, 55, 0xFFFF, NO_CENTER_OBJECT, 9),
 8003ae2:	2014      	movs	r0, #20
 8003ae4:	f00a fe3c 	bl	800e760 <_Znwj>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461c      	mov	r4, r3
 8003aec:	2309      	movs	r3, #9
 8003aee:	9303      	str	r3, [sp, #12]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9302      	str	r3, [sp, #8]
 8003af4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	2337      	movs	r3, #55	@ 0x37
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003b02:	22fa      	movs	r2, #250	@ 0xfa
 8003b04:	21be      	movs	r1, #190	@ 0xbe
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7fe ff9e 	bl	8002a48 <_ZN17OutlineRectObjectC1Ettttthh>
};
 8003b0c:	4b21      	ldr	r3, [pc, #132]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003b0e:	621c      	str	r4, [r3, #32]
		new StringObject(405, 210, 0xFFFF, ICONFONT, CENTER_OBJECT, speedicon, 10)
 8003b10:	2018      	movs	r0, #24
 8003b12:	f00a fe25 	bl	800e760 <_Znwj>
 8003b16:	4603      	mov	r3, r0
 8003b18:	461c      	mov	r4, r3
 8003b1a:	230a      	movs	r3, #10
 8003b1c:	9303      	str	r3, [sp, #12]
 8003b1e:	4b28      	ldr	r3, [pc, #160]	@ (8003bc0 <_Z41__static_initialization_and_destruction_0v+0x254>)
 8003b20:	9302      	str	r3, [sp, #8]
 8003b22:	2302      	movs	r3, #2
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <_Z41__static_initialization_and_destruction_0v+0x244>)
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b2e:	22d2      	movs	r2, #210	@ 0xd2
 8003b30:	f240 1195 	movw	r1, #405	@ 0x195
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7fe fee3 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b3a:	4b16      	ldr	r3, [pc, #88]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003b3c:	625c      	str	r4, [r3, #36]	@ 0x24
Scene myScene2(otherobjects, 6);
 8003b3e:	2206      	movs	r2, #6
 8003b40:	4914      	ldr	r1, [pc, #80]	@ (8003b94 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003b42:	4820      	ldr	r0, [pc, #128]	@ (8003bc4 <_Z41__static_initialization_and_destruction_0v+0x258>)
 8003b44:	f7fe fc9a 	bl	800247c <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003b48:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8003b4c:	f00a fe08 	bl	800e760 <_Znwj>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461c      	mov	r4, r3
 8003b54:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc8 <_Z41__static_initialization_and_destruction_0v+0x25c>)
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	2302      	movs	r3, #2
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	23a0      	movs	r3, #160	@ 0xa0
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	23f0      	movs	r3, #240	@ 0xf0
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	23d7      	movs	r3, #215	@ 0xd7
 8003b6a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7fe ffdc 	bl	8002b2c <_ZN11ImageObjectC1EPctttthh>
};
 8003b74:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <_Z41__static_initialization_and_destruction_0v+0x260>)
 8003b76:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 8003b78:	2201      	movs	r2, #1
 8003b7a:	4914      	ldr	r1, [pc, #80]	@ (8003bcc <_Z41__static_initialization_and_destruction_0v+0x260>)
 8003b7c:	4814      	ldr	r0, [pc, #80]	@ (8003bd0 <_Z41__static_initialization_and_destruction_0v+0x264>)
 8003b7e:	f7fe fc7d 	bl	800247c <_ZN5SceneC1EPP13DisplayObjecth>
}
 8003b82:	bf00      	nop
 8003b84:	3704      	adds	r7, #4
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000038c 	.word	0x2000038c
 8003b90:	08012734 	.word	0x08012734
 8003b94:	200003dc 	.word	0x200003dc
 8003b98:	200003a0 	.word	0x200003a0
 8003b9c:	080108dc 	.word	0x080108dc
 8003ba0:	200003c8 	.word	0x200003c8
 8003ba4:	20000008 	.word	0x20000008
 8003ba8:	08016b40 	.word	0x08016b40
 8003bac:	2000001c 	.word	0x2000001c
 8003bb0:	08016efc 	.word	0x08016efc
 8003bb4:	20000020 	.word	0x20000020
 8003bb8:	200003b4 	.word	0x200003b4
 8003bbc:	20000024 	.word	0x20000024
 8003bc0:	20000028 	.word	0x20000028
 8003bc4:	20000404 	.word	0x20000404
 8003bc8:	2000002c 	.word	0x2000002c
 8003bcc:	2000040c 	.word	0x2000040c
 8003bd0:	20000410 	.word	0x20000410

08003bd4 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	f7ff fec8 	bl	800396c <_Z41__static_initialization_and_destruction_0v>
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	7e3a      	ldrb	r2, [r7, #24]
 8003bf6:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	605a      	str	r2, [r3, #4]
    endSPI();
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f839 	bl	8003c7c <_ZN7MCP25156endSPIEv>
}
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	1cf9      	adds	r1, r7, #3
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f003 fc39 	bl	80074a2 <HAL_SPI_Transmit>
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f107 010f 	add.w	r1, r7, #15
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f003 fd6c 	bl	800772a <HAL_SPI_Receive>
	return retVal;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6898      	ldr	r0, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7b1b      	ldrb	r3, [r3, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f001 fcda 	bl	8005628 <HAL_GPIO_WritePin>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6898      	ldr	r0, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7b1b      	ldrb	r3, [r3, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f001 fcca 	bl	8005628 <HAL_GPIO_WritePin>
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	@ 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	startSPI();
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ffd9 	bl	8003c5c <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8003caa:	21c0      	movs	r1, #192	@ 0xc0
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ffb1 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ffe2 	bl	8003c7c <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	220e      	movs	r2, #14
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f00a fec7 	bl	800ea54 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8003cc6:	f107 0214 	add.w	r2, r7, #20
 8003cca:	230e      	movs	r3, #14
 8003ccc:	2130      	movs	r1, #48	@ 0x30
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8ec 	bl	8003eac <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8003cd4:	f107 0214 	add.w	r2, r7, #20
 8003cd8:	230e      	movs	r3, #14
 8003cda:	2140      	movs	r1, #64	@ 0x40
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8e5 	bl	8003eac <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8003ce2:	f107 0214 	add.w	r2, r7, #20
 8003ce6:	230e      	movs	r3, #14
 8003ce8:	2150      	movs	r1, #80	@ 0x50
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f8de 	bl	8003eac <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2160      	movs	r1, #96	@ 0x60
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8b9 	bl	8003e6c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2170      	movs	r1, #112	@ 0x70
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8b4 	bl	8003e6c <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8003d04:	22a3      	movs	r2, #163	@ 0xa3
 8003d06:	212b      	movs	r1, #43	@ 0x2b
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f8af 	bl	8003e6c <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8003d0e:	2304      	movs	r3, #4
 8003d10:	2267      	movs	r2, #103	@ 0x67
 8003d12:	2160      	movs	r1, #96	@ 0x60
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8f8 	bl	8003f0a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	2267      	movs	r2, #103	@ 0x67
 8003d1e:	2170      	movs	r1, #112	@ 0x70
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f8f2 	bl	8003f0a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003d26:	4a29      	ldr	r2, [pc, #164]	@ (8003dcc <_ZN7MCP25155resetEv+0x130>)
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d30:	6018      	str	r0, [r3, #0]
 8003d32:	3304      	adds	r3, #4
 8003d34:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003d36:	2300      	movs	r3, #0
 8003d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d3a:	e01e      	b.n	8003d7a <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003d4a:	f107 020c 	add.w	r2, r7, #12
 8003d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d50:	4413      	add	r3, r2
 8003d52:	7819      	ldrb	r1, [r3, #0]
 8003d54:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003d58:	2300      	movs	r3, #0
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fbce 	bl	80044fc <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003d66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003d6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d72:	e027      	b.n	8003dc4 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d76:	3301      	adds	r3, #1
 8003d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	dddd      	ble.n	8003d3c <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003d80:	2300      	movs	r3, #0
 8003d82:	723b      	strb	r3, [r7, #8]
 8003d84:	2301      	movs	r3, #1
 8003d86:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d8c:	e016      	b.n	8003dbc <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003d8e:	f107 0208 	add.w	r2, r7, #8
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	4413      	add	r3, r2
 8003d96:	7819      	ldrb	r1, [r3, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fb79 	bl	8004494 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003db4:	e006      	b.n	8003dc4 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	3301      	adds	r3, #1
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	dde5      	ble.n	8003d8e <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3730      	adds	r7, #48	@ 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	0800f430 	.word	0x0800f430

08003dd0 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ff3d 	bl	8003c5c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003de2:	2103      	movs	r1, #3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff15 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff10 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff1f 	bl	8003c38 <_ZN7MCP25156SPI_RxEv>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ff3c 	bl	8003c7c <_ZN7MCP25156endSPIEv>

    return ret;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003e0e:	b590      	push	{r4, r7, lr}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	72fb      	strb	r3, [r7, #11]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff ff1a 	bl	8003c5c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003e28:	2103      	movs	r1, #3
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fef2 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003e30:	7afb      	ldrb	r3, [r7, #11]
 8003e32:	4619      	mov	r1, r3
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff feed 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]
 8003e3e:	e00a      	b.n	8003e56 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	18d4      	adds	r4, r2, r3
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fef6 	bl	8003c38 <_ZN7MCP25156SPI_RxEv>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	3301      	adds	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
 8003e56:	7dfa      	ldrb	r2, [r7, #23]
 8003e58:	7abb      	ldrb	r3, [r7, #10]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3f0      	bcc.n	8003e40 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff ff0c 	bl	8003c7c <_ZN7MCP25156endSPIEv>
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}

08003e6c <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff feed 	bl	8003c5c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003e82:	2102      	movs	r1, #2
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fec5 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fec0 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003e94:	78bb      	ldrb	r3, [r7, #2]
 8003e96:	4619      	mov	r1, r3
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff febb 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff feec 	bl	8003c7c <_ZN7MCP25156endSPIEv>
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	460b      	mov	r3, r1
 8003eba:	72fb      	strb	r3, [r7, #11]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fecb 	bl	8003c5c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff fea3 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003ece:	7afb      	ldrb	r3, [r7, #11]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fe9e 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75fb      	strb	r3, [r7, #23]
 8003edc:	e00a      	b.n	8003ef4 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff fe93 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
 8003ef4:	7dfa      	ldrb	r2, [r7, #23]
 8003ef6:	7abb      	ldrb	r3, [r7, #10]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d3f0      	bcc.n	8003ede <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff febd 	bl	8003c7c <_ZN7MCP25156endSPIEv>
}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	4608      	mov	r0, r1
 8003f14:	4611      	mov	r1, r2
 8003f16:	461a      	mov	r2, r3
 8003f18:	4603      	mov	r3, r0
 8003f1a:	70fb      	strb	r3, [r7, #3]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70bb      	strb	r3, [r7, #2]
 8003f20:	4613      	mov	r3, r2
 8003f22:	707b      	strb	r3, [r7, #1]
    startSPI();
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff fe99 	bl	8003c5c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8003f2a:	2105      	movs	r1, #5
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fe71 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fe6c 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8003f3c:	78bb      	ldrb	r3, [r7, #2]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fe67 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8003f46:	787b      	ldrb	r3, [r7, #1]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fe62 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff fe93 	bl	8003c7c <_ZN7MCP25156endSPIEv>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
    startSPI();
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fe78 	bl	8003c5c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8003f6c:	21a0      	movs	r1, #160	@ 0xa0
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fe50 	bl	8003c14 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fe5f 	bl	8003c38 <_ZN7MCP25156SPI_RxEv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fe7c 	bl	8003c7c <_ZN7MCP25156endSPIEv>

    return i;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8003f96:	2180      	movs	r1, #128	@ 0x80
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f812 	bl	8003fc2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003f9e:	4603      	mov	r3, r0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f805 	bl	8003fc2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	22e0      	movs	r2, #224	@ 0xe0
 8003fd2:	210f      	movs	r1, #15
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff98 	bl	8003f0a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8003fda:	f000 fccd 	bl	8004978 <HAL_GetTick>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	330a      	adds	r3, #10
 8003fe2:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8003fe8:	e013      	b.n	8004012 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8003fea:	210e      	movs	r1, #14
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff feef 	bl	8003dd0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	f023 031f 	bic.w	r3, r3, #31
 8003ffc:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8004012:	f000 fcb1 	bl	8004978 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4293      	cmp	r3, r2
 800401c:	bf8c      	ite	hi
 800401e:	2301      	movhi	r3, #1
 8004020:	2300      	movls	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e0      	bne.n	8003fea <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8004028:	e000      	b.n	800402c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 800402a:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8004036:	2301      	movs	r3, #1

}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
 800404c:	4613      	mov	r3, r2
 800404e:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff9c 	bl	8003f8e <_ZN7MCP251513setConfigModeEv>
 8004056:	4603      	mov	r3, r0
 8004058:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 800405a:	7afb      	ldrb	r3, [r7, #11]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8004060:	7afb      	ldrb	r3, [r7, #11]
 8004062:	e1b5      	b.n	80043d0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8004068:	78bb      	ldrb	r3, [r7, #2]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d009      	beq.n	8004082 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 800406e:	2b02      	cmp	r3, #2
 8004070:	f300 8193 	bgt.w	800439a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 811f 	beq.w	80042b8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 800407a:	2b01      	cmp	r3, #1
 800407c:	f000 808e 	beq.w	800419c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8004080:	e18b      	b.n	800439a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	2b0f      	cmp	r3, #15
 8004086:	f200 8085 	bhi.w	8004194 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 800408a:	a201      	add	r2, pc, #4	@ (adr r2, 8004090 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040d1 	.word	0x080040d1
 8004094:	080040df 	.word	0x080040df
 8004098:	080040ed 	.word	0x080040ed
 800409c:	080040fb 	.word	0x080040fb
 80040a0:	08004109 	.word	0x08004109
 80040a4:	08004117 	.word	0x08004117
 80040a8:	08004125 	.word	0x08004125
 80040ac:	08004133 	.word	0x08004133
 80040b0:	08004195 	.word	0x08004195
 80040b4:	08004195 	.word	0x08004195
 80040b8:	08004141 	.word	0x08004141
 80040bc:	0800414f 	.word	0x0800414f
 80040c0:	0800415d 	.word	0x0800415d
 80040c4:	0800416b 	.word	0x0800416b
 80040c8:	08004179 	.word	0x08004179
 80040cc:	08004187 	.word	0x08004187
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 80040d0:	231f      	movs	r3, #31
 80040d2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 80040d4:	23bf      	movs	r3, #191	@ 0xbf
 80040d6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 80040d8:	2387      	movs	r3, #135	@ 0x87
 80040da:	733b      	strb	r3, [r7, #12]
            break;
 80040dc:	e05d      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 80040de:	230f      	movs	r3, #15
 80040e0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 80040e2:	23bf      	movs	r3, #191	@ 0xbf
 80040e4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 80040e6:	2387      	movs	r3, #135	@ 0x87
 80040e8:	733b      	strb	r3, [r7, #12]
            break;
 80040ea:	e056      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 80040ec:	2307      	movs	r3, #7
 80040ee:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 80040f0:	23bf      	movs	r3, #191	@ 0xbf
 80040f2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 80040f4:	2387      	movs	r3, #135	@ 0x87
 80040f6:	733b      	strb	r3, [r7, #12]
            break;
 80040f8:	e04f      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 80040fa:	2307      	movs	r3, #7
 80040fc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 80040fe:	23a4      	movs	r3, #164	@ 0xa4
 8004100:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8004102:	2384      	movs	r3, #132	@ 0x84
 8004104:	733b      	strb	r3, [r7, #12]
            break;
 8004106:	e048      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8004108:	2347      	movs	r3, #71	@ 0x47
 800410a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 800410c:	23e2      	movs	r3, #226	@ 0xe2
 800410e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8004110:	2385      	movs	r3, #133	@ 0x85
 8004112:	733b      	strb	r3, [r7, #12]
            break;
 8004114:	e041      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8004116:	2303      	movs	r3, #3
 8004118:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 800411a:	23bf      	movs	r3, #191	@ 0xbf
 800411c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 800411e:	2387      	movs	r3, #135	@ 0x87
 8004120:	733b      	strb	r3, [r7, #12]
            break;
 8004122:	e03a      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8004124:	2303      	movs	r3, #3
 8004126:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8004128:	23b4      	movs	r3, #180	@ 0xb4
 800412a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 800412c:	2386      	movs	r3, #134	@ 0x86
 800412e:	733b      	strb	r3, [r7, #12]
            break;
 8004130:	e033      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8004132:	2301      	movs	r3, #1
 8004134:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8004136:	23bf      	movs	r3, #191	@ 0xbf
 8004138:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 800413a:	2387      	movs	r3, #135	@ 0x87
 800413c:	733b      	strb	r3, [r7, #12]
            break;
 800413e:	e02c      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8004140:	2301      	movs	r3, #1
 8004142:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8004144:	23b4      	movs	r3, #180	@ 0xb4
 8004146:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8004148:	2386      	movs	r3, #134	@ 0x86
 800414a:	733b      	strb	r3, [r7, #12]
            break;
 800414c:	e025      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 800414e:	2301      	movs	r3, #1
 8004150:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8004152:	23b1      	movs	r3, #177	@ 0xb1
 8004154:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8004156:	2385      	movs	r3, #133	@ 0x85
 8004158:	733b      	strb	r3, [r7, #12]
            break;
 800415a:	e01e      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 800415c:	2300      	movs	r3, #0
 800415e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8004160:	23b4      	movs	r3, #180	@ 0xb4
 8004162:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8004164:	2386      	movs	r3, #134	@ 0x86
 8004166:	733b      	strb	r3, [r7, #12]
            break;
 8004168:	e017      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 800416a:	2300      	movs	r3, #0
 800416c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 800416e:	23b1      	movs	r3, #177	@ 0xb1
 8004170:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8004172:	2385      	movs	r3, #133	@ 0x85
 8004174:	733b      	strb	r3, [r7, #12]
            break;
 8004176:	e010      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8004178:	2300      	movs	r3, #0
 800417a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 800417c:	2390      	movs	r3, #144	@ 0x90
 800417e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8004180:	2382      	movs	r3, #130	@ 0x82
 8004182:	733b      	strb	r3, [r7, #12]
            break;
 8004184:	e009      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8004186:	2300      	movs	r3, #0
 8004188:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 800418a:	2380      	movs	r3, #128	@ 0x80
 800418c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	733b      	strb	r3, [r7, #12]
            break;
 8004192:	e002      	b.n	800419a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	73fb      	strb	r3, [r7, #15]
            break;
 8004198:	bf00      	nop
        }
        break;
 800419a:	e101      	b.n	80043a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	f200 8086 	bhi.w	80042b0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 80041a4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041ed 	.word	0x080041ed
 80041b0:	080041fb 	.word	0x080041fb
 80041b4:	08004209 	.word	0x08004209
 80041b8:	080042b1 	.word	0x080042b1
 80041bc:	08004217 	.word	0x08004217
 80041c0:	08004225 	.word	0x08004225
 80041c4:	08004233 	.word	0x08004233
 80041c8:	08004241 	.word	0x08004241
 80041cc:	0800424f 	.word	0x0800424f
 80041d0:	080042b1 	.word	0x080042b1
 80041d4:	0800425d 	.word	0x0800425d
 80041d8:	0800426b 	.word	0x0800426b
 80041dc:	08004279 	.word	0x08004279
 80041e0:	08004287 	.word	0x08004287
 80041e4:	08004295 	.word	0x08004295
 80041e8:	080042a3 	.word	0x080042a3
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 80041ec:	233f      	movs	r3, #63	@ 0x3f
 80041ee:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 80041f0:	23ff      	movs	r3, #255	@ 0xff
 80041f2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 80041f4:	2387      	movs	r3, #135	@ 0x87
 80041f6:	733b      	strb	r3, [r7, #12]
            break;
 80041f8:	e05d      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 80041fa:	231f      	movs	r3, #31
 80041fc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 80041fe:	23ff      	movs	r3, #255	@ 0xff
 8004200:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8004202:	2387      	movs	r3, #135	@ 0x87
 8004204:	733b      	strb	r3, [r7, #12]
            break;
 8004206:	e056      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8004208:	230f      	movs	r3, #15
 800420a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 800420c:	23ff      	movs	r3, #255	@ 0xff
 800420e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8004210:	2387      	movs	r3, #135	@ 0x87
 8004212:	733b      	strb	r3, [r7, #12]
            break;
 8004214:	e04f      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8004216:	234e      	movs	r3, #78	@ 0x4e
 8004218:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 800421a:	23f1      	movs	r3, #241	@ 0xf1
 800421c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 800421e:	2385      	movs	r3, #133	@ 0x85
 8004220:	733b      	strb	r3, [r7, #12]
            break;
 8004222:	e048      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8004224:	2307      	movs	r3, #7
 8004226:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8004228:	23ff      	movs	r3, #255	@ 0xff
 800422a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 800422c:	2387      	movs	r3, #135	@ 0x87
 800422e:	733b      	strb	r3, [r7, #12]
            break;
 8004230:	e041      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8004232:	2307      	movs	r3, #7
 8004234:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8004236:	23fa      	movs	r3, #250	@ 0xfa
 8004238:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 800423a:	2387      	movs	r3, #135	@ 0x87
 800423c:	733b      	strb	r3, [r7, #12]
            break;
 800423e:	e03a      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8004240:	2303      	movs	r3, #3
 8004242:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8004244:	23ff      	movs	r3, #255	@ 0xff
 8004246:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8004248:	2387      	movs	r3, #135	@ 0x87
 800424a:	733b      	strb	r3, [r7, #12]
            break;
 800424c:	e033      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 800424e:	2303      	movs	r3, #3
 8004250:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8004252:	23be      	movs	r3, #190	@ 0xbe
 8004254:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8004256:	2307      	movs	r3, #7
 8004258:	733b      	strb	r3, [r7, #12]
            break;
 800425a:	e02c      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 800425c:	2303      	movs	r3, #3
 800425e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8004260:	23fa      	movs	r3, #250	@ 0xfa
 8004262:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8004264:	2387      	movs	r3, #135	@ 0x87
 8004266:	733b      	strb	r3, [r7, #12]
            break;
 8004268:	e025      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 800426a:	2303      	movs	r3, #3
 800426c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 800426e:	23f0      	movs	r3, #240	@ 0xf0
 8004270:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8004272:	2386      	movs	r3, #134	@ 0x86
 8004274:	733b      	strb	r3, [r7, #12]
            break;
 8004276:	e01e      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8004278:	2301      	movs	r3, #1
 800427a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 800427c:	23fa      	movs	r3, #250	@ 0xfa
 800427e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8004280:	2387      	movs	r3, #135	@ 0x87
 8004282:	733b      	strb	r3, [r7, #12]
            break;
 8004284:	e017      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 8004286:	2341      	movs	r3, #65	@ 0x41
 8004288:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 800428a:	23f1      	movs	r3, #241	@ 0xf1
 800428c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 800428e:	2385      	movs	r3, #133	@ 0x85
 8004290:	733b      	strb	r3, [r7, #12]
            break;
 8004292:	e010      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8004294:	2300      	movs	r3, #0
 8004296:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8004298:	23f0      	movs	r3, #240	@ 0xf0
 800429a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 800429c:	2386      	movs	r3, #134	@ 0x86
 800429e:	733b      	strb	r3, [r7, #12]
            break;
 80042a0:	e009      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 80042a6:	23d0      	movs	r3, #208	@ 0xd0
 80042a8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 80042aa:	2382      	movs	r3, #130	@ 0x82
 80042ac:	733b      	strb	r3, [r7, #12]
            break;
 80042ae:	e002      	b.n	80042b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
            break;
 80042b4:	bf00      	nop
        }
        break;
 80042b6:	e073      	b.n	80043a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	3b04      	subs	r3, #4
 80042bc:	2b0b      	cmp	r3, #11
 80042be:	d868      	bhi.n	8004392 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 80042c0:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042f9 	.word	0x080042f9
 80042cc:	08004307 	.word	0x08004307
 80042d0:	08004315 	.word	0x08004315
 80042d4:	08004323 	.word	0x08004323
 80042d8:	08004331 	.word	0x08004331
 80042dc:	08004393 	.word	0x08004393
 80042e0:	0800433f 	.word	0x0800433f
 80042e4:	0800434d 	.word	0x0800434d
 80042e8:	0800435b 	.word	0x0800435b
 80042ec:	08004369 	.word	0x08004369
 80042f0:	08004377 	.word	0x08004377
 80042f4:	08004385 	.word	0x08004385
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 80042f8:	230b      	movs	r3, #11
 80042fa:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 80042fc:	23ff      	movs	r3, #255	@ 0xff
 80042fe:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8004300:	2387      	movs	r3, #135	@ 0x87
 8004302:	733b      	strb	r3, [r7, #12]
	    break;
 8004304:	e048      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8004306:	2309      	movs	r3, #9
 8004308:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 800430a:	23ff      	movs	r3, #255	@ 0xff
 800430c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 800430e:	2387      	movs	r3, #135	@ 0x87
 8004310:	733b      	strb	r3, [r7, #12]
            break;
 8004312:	e041      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8004314:	2309      	movs	r3, #9
 8004316:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8004318:	23fa      	movs	r3, #250	@ 0xfa
 800431a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 800431c:	2387      	movs	r3, #135	@ 0x87
 800431e:	733b      	strb	r3, [r7, #12]
            break;
 8004320:	e03a      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8004322:	2304      	movs	r3, #4
 8004324:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8004326:	23ff      	movs	r3, #255	@ 0xff
 8004328:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 800432a:	2387      	movs	r3, #135	@ 0x87
 800432c:	733b      	strb	r3, [r7, #12]
            break;
 800432e:	e033      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8004330:	2304      	movs	r3, #4
 8004332:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8004334:	23fe      	movs	r3, #254	@ 0xfe
 8004336:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8004338:	2387      	movs	r3, #135	@ 0x87
 800433a:	733b      	strb	r3, [r7, #12]
	    break;
 800433c:	e02c      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 800433e:	2304      	movs	r3, #4
 8004340:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8004342:	23fa      	movs	r3, #250	@ 0xfa
 8004344:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8004346:	2387      	movs	r3, #135	@ 0x87
 8004348:	733b      	strb	r3, [r7, #12]
            break;
 800434a:	e025      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 800434c:	2303      	movs	r3, #3
 800434e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8004350:	23fa      	movs	r3, #250	@ 0xfa
 8004352:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8004354:	2387      	movs	r3, #135	@ 0x87
 8004356:	733b      	strb	r3, [r7, #12]
            break;
 8004358:	e01e      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 800435a:	2301      	movs	r3, #1
 800435c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 800435e:	23ff      	movs	r3, #255	@ 0xff
 8004360:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8004362:	2387      	movs	r3, #135	@ 0x87
 8004364:	733b      	strb	r3, [r7, #12]
            break;
 8004366:	e017      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8004368:	2341      	movs	r3, #65	@ 0x41
 800436a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 800436c:	23fb      	movs	r3, #251	@ 0xfb
 800436e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8004370:	2386      	movs	r3, #134	@ 0x86
 8004372:	733b      	strb	r3, [r7, #12]
            break;
 8004374:	e010      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 8004376:	2300      	movs	r3, #0
 8004378:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 800437a:	23fa      	movs	r3, #250	@ 0xfa
 800437c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 800437e:	2387      	movs	r3, #135	@ 0x87
 8004380:	733b      	strb	r3, [r7, #12]
            break;
 8004382:	e009      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8004384:	2300      	movs	r3, #0
 8004386:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8004388:	23d9      	movs	r3, #217	@ 0xd9
 800438a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 800438c:	2382      	movs	r3, #130	@ 0x82
 800438e:	733b      	strb	r3, [r7, #12]
            break;
 8004390:	e002      	b.n	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
            break;
 8004396:	bf00      	nop
        }
        break;
 8004398:	e002      	b.n	80043a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
        break;
 800439e:	bf00      	nop
    }

    if (set) {
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d013      	beq.n	80043ce <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 80043a6:	7bbb      	ldrb	r3, [r7, #14]
 80043a8:	461a      	mov	r2, r3
 80043aa:	212a      	movs	r1, #42	@ 0x2a
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fd5d 	bl	8003e6c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 80043b2:	7b7b      	ldrb	r3, [r7, #13]
 80043b4:	461a      	mov	r2, r3
 80043b6:	2129      	movs	r1, #41	@ 0x29
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fd57 	bl	8003e6c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 80043be:	7b3b      	ldrb	r3, [r7, #12]
 80043c0:	461a      	mov	r2, r3
 80043c2:	2128      	movs	r1, #40	@ 0x28
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fd51 	bl	8003e6c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 80043ce:	2301      	movs	r3, #1
    }
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d035      	beq.n	800445e <_ZN7MCP25159prepareIdEPhbm+0x86>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3303      	adds	r3, #3
 80043f6:	8afa      	ldrh	r2, [r7, #22]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 80043fc:	8afb      	ldrh	r3, [r7, #22]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b29a      	uxth	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3302      	adds	r3, #2
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8004410:	8afb      	ldrh	r3, [r7, #22]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	3301      	adds	r3, #1
 8004418:	f002 0203 	and.w	r2, r2, #3
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	3301      	adds	r3, #1
 8004424:	7819      	ldrb	r1, [r3, #0]
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f023 031f 	bic.w	r3, r3, #31
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3301      	adds	r3, #1
 8004438:	440a      	add	r2, r1
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3301      	adds	r3, #1
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3301      	adds	r3, #1
 8004448:	f042 0208 	orr.w	r2, r2, #8
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8004450:	8afb      	ldrh	r3, [r7, #22]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	b29b      	uxth	r3, r3
 8004456:	b2da      	uxtb	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 800445c:	e014      	b.n	8004488 <_ZN7MCP25159prepareIdEPhbm+0xb0>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 800445e:	8afb      	ldrh	r3, [r7, #22]
 8004460:	08db      	lsrs	r3, r3, #3
 8004462:	b29b      	uxth	r3, r3
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 800446a:	8afb      	ldrh	r3, [r7, #22]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3301      	adds	r3, #1
 8004472:	0152      	lsls	r2, r2, #5
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	3303      	adds	r3, #3
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	3302      	adds	r3, #2
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	72fb      	strb	r3, [r7, #11]
 80044a2:	4613      	mov	r3, r2
 80044a4:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff fd71 	bl	8003f8e <_ZN7MCP251513setConfigModeEv>
 80044ac:	4603      	mov	r3, r0
 80044ae:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80044b0:	7dbb      	ldrb	r3, [r7, #22]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 80044b6:	7dbb      	ldrb	r3, [r7, #22]
 80044b8:	e01c      	b.n	80044f4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80044ba:	7aba      	ldrb	r2, [r7, #10]
 80044bc:	f107 0110 	add.w	r1, r7, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff ff88 	bl	80043d8 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 80044c8:	7afb      	ldrb	r3, [r7, #11]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d003      	beq.n	80044da <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 80044d2:	e005      	b.n	80044e0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 80044d4:	2320      	movs	r3, #32
 80044d6:	75fb      	strb	r3, [r7, #23]
 80044d8:	e004      	b.n	80044e4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 80044da:	2324      	movs	r3, #36	@ 0x24
 80044dc:	75fb      	strb	r3, [r7, #23]
 80044de:	e001      	b.n	80044e4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e007      	b.n	80044f4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 80044e4:	f107 0210 	add.w	r2, r7, #16
 80044e8:	7df9      	ldrb	r1, [r7, #23]
 80044ea:	2304      	movs	r3, #4
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7ff fcdd 	bl	8003eac <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	72fb      	strb	r3, [r7, #11]
 800450a:	4613      	mov	r3, r2
 800450c:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff fd3d 	bl	8003f8e <_ZN7MCP251513setConfigModeEv>
 8004514:	4603      	mov	r3, r0
 8004516:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004518:	7dbb      	ldrb	r3, [r7, #22]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 800451e:	7dbb      	ldrb	r3, [r7, #22]
 8004520:	e035      	b.n	800458e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d821      	bhi.n	800456c <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8004528:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004549 	.word	0x08004549
 8004534:	0800454f 	.word	0x0800454f
 8004538:	08004555 	.word	0x08004555
 800453c:	0800455b 	.word	0x0800455b
 8004540:	08004561 	.word	0x08004561
 8004544:	08004567 	.word	0x08004567
        case RXF0: reg = MCP_RXF0SIDH; break;
 8004548:	2300      	movs	r3, #0
 800454a:	75fb      	strb	r3, [r7, #23]
 800454c:	e010      	b.n	8004570 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 800454e:	2304      	movs	r3, #4
 8004550:	75fb      	strb	r3, [r7, #23]
 8004552:	e00d      	b.n	8004570 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8004554:	2308      	movs	r3, #8
 8004556:	75fb      	strb	r3, [r7, #23]
 8004558:	e00a      	b.n	8004570 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 800455a:	2310      	movs	r3, #16
 800455c:	75fb      	strb	r3, [r7, #23]
 800455e:	e007      	b.n	8004570 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8004560:	2314      	movs	r3, #20
 8004562:	75fb      	strb	r3, [r7, #23]
 8004564:	e004      	b.n	8004570 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 8004566:	2318      	movs	r3, #24
 8004568:	75fb      	strb	r3, [r7, #23]
 800456a:	e001      	b.n	8004570 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 800456c:	2301      	movs	r3, #1
 800456e:	e00e      	b.n	800458e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8004570:	7aba      	ldrb	r2, [r7, #10]
 8004572:	f107 0110 	add.w	r1, r7, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff ff2d 	bl	80043d8 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 800457e:	f107 0210 	add.w	r2, r7, #16
 8004582:	7df9      	ldrb	r1, [r7, #23]
 8004584:	2304      	movs	r3, #4
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff fc90 	bl	8003eac <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop

08004598 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	@ 0x30
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	460b      	mov	r3, r1
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	72fb      	strb	r3, [r7, #11]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	791b      	ldrb	r3, [r3, #4]
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d901      	bls.n	80045b2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x1a>
        return ERROR_FAILTX;
 80045ae:	2304      	movs	r3, #4
 80045b0:	e067      	b.n	8004682 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
 80045b2:	7afa      	ldrb	r2, [r7, #11]
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	4a34      	ldr	r2, [pc, #208]	@ (800468c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xf4>)
 80045bc:	4413      	add	r3, r2
 80045be:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	0fdb      	lsrs	r3, r3, #31
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80045e6:	2a00      	cmp	r2, #0
 80045e8:	d002      	beq.n	80045f0 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x58>
 80045ea:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80045ee:	e001      	b.n	80045f4 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x5c>
 80045f0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80045f4:	4013      	ands	r3, r2
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24

    prepareId(data, ext, id);
 80045f8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80045fc:	f107 0114 	add.w	r1, r7, #20
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff fee8 	bl	80043d8 <_ZN7MCP25159prepareIdEPhbm>

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
 8004608:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x84>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	791b      	ldrb	r3, [r3, #4]
 8004614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e001      	b.n	8004620 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x88>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	791b      	ldrb	r3, [r3, #4]
 8004620:	763b      	strb	r3, [r7, #24]

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f103 0108 	add.w	r1, r3, #8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	791b      	ldrb	r3, [r3, #4]
 800462c:	461a      	mov	r2, r3
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	3305      	adds	r3, #5
 8004634:	4618      	mov	r0, r3
 8004636:	f00a fabb 	bl	800ebb0 <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	7859      	ldrb	r1, [r3, #1]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	791b      	ldrb	r3, [r3, #4]
 8004642:	3305      	adds	r3, #5
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f107 0214 	add.w	r2, r7, #20
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fc2e 	bl	8003eac <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
 8004650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004652:	7819      	ldrb	r1, [r3, #0]
 8004654:	2308      	movs	r3, #8
 8004656:	2208      	movs	r2, #8
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff fc56 	bl	8003f0a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    uint8_t ctrl = readRegister(txbuf->CTRL);
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fbb3 	bl	8003dd0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 800466a:	4603      	mov	r3, r0
 800466c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
 8004670:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004674:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
        return ERROR_FAILTX;
 800467c:	2304      	movs	r3, #4
 800467e:	e000      	b.n	8004682 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    }
    return ERROR_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3730      	adds	r7, #48	@ 0x30
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	08016f0c 	.word	0x08016f0c

08004690 <_ZN7MCP251511sendMessageEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	791b      	ldrb	r3, [r3, #4]
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d901      	bls.n	80046a6 <_ZN7MCP251511sendMessageEPK9can_frame+0x16>
        return ERROR_FAILTX;
 80046a2:	2304      	movs	r3, #4
 80046a4:	e037      	b.n	8004716 <_ZN7MCP251511sendMessageEPK9can_frame+0x86>
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
 80046a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004720 <_ZN7MCP251511sendMessageEPK9can_frame+0x90>)
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4611      	mov	r1, r2
 80046b0:	8019      	strh	r1, [r3, #0]
 80046b2:	3302      	adds	r3, #2
 80046b4:	0c12      	lsrs	r2, r2, #16
 80046b6:	701a      	strb	r2, [r3, #0]

    for (int i=0; i<N_TXBUFFERS; i++) {
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e027      	b.n	800470e <_ZN7MCP251511sendMessageEPK9can_frame+0x7e>
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
 80046be:	f107 020c 	add.w	r2, r7, #12
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	4a14      	ldr	r2, [pc, #80]	@ (8004724 <_ZN7MCP251511sendMessageEPK9can_frame+0x94>)
 80046d2:	4413      	add	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        uint8_t ctrlval = readRegister(txbuf->CTRL);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fb77 	bl	8003dd0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80046e2:	4603      	mov	r3, r0
 80046e4:	73fb      	strb	r3, [r7, #15]
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <_ZN7MCP251511sendMessageEPK9can_frame+0x78>
            return sendMessage(txBuffers[i], frame);
 80046f0:	f107 020c 	add.w	r2, r7, #12
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4413      	add	r3, r2
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ff4a 	bl	8004598 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
 8004704:	4603      	mov	r3, r0
 8004706:	e006      	b.n	8004716 <_ZN7MCP251511sendMessageEPK9can_frame+0x86>
    for (int i=0; i<N_TXBUFFERS; i++) {
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3301      	adds	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b02      	cmp	r3, #2
 8004712:	ddd4      	ble.n	80046be <_ZN7MCP251511sendMessageEPK9can_frame+0x2e>
        }
    }

    return ERROR_ALLTXBUSY;
 8004714:	2302      	movs	r3, #2
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	0800f438 	.word	0x0800f438
 8004724:	08016f0c 	.word	0x08016f0c

08004728 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	460b      	mov	r3, r1
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 8004736:	7afb      	ldrb	r3, [r7, #11]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4a30      	ldr	r2, [pc, #192]	@ (80047fc <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 800473c:	4413      	add	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	7859      	ldrb	r1, [r3, #1]
 8004744:	f107 0210 	add.w	r2, r7, #16
 8004748:	2305      	movs	r3, #5
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fb5f 	bl	8003e0e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 8004750:	7c3b      	ldrb	r3, [r7, #16]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	7c7a      	ldrb	r2, [r7, #17]
 8004756:	0952      	lsrs	r2, r2, #5
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	4413      	add	r3, r2
 800475c:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 800475e:	7c7b      	ldrb	r3, [r7, #17]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d014      	beq.n	8004792 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	009a      	lsls	r2, r3, #2
 800476c:	7c7b      	ldrb	r3, [r7, #17]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	7cba      	ldrb	r2, [r7, #18]
 800477c:	4413      	add	r3, r2
 800477e:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	7cfa      	ldrb	r2, [r7, #19]
 8004786:	4413      	add	r3, r2
 8004788:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004790:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 8004792:	7d3b      	ldrb	r3, [r7, #20]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d901      	bls.n	80047a4 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e027      	b.n	80047f4 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	4619      	mov	r1, r3
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff fb10 	bl	8003dd0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 80047b4:	7dbb      	ldrb	r3, [r7, #22]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047c4:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	7dfa      	ldrb	r2, [r7, #23]
 80047d0:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	7899      	ldrb	r1, [r3, #2]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f103 0208 	add.w	r2, r3, #8
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff fb15 	bl	8003e0e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	78da      	ldrb	r2, [r3, #3]
 80047e8:	2300      	movs	r3, #0
 80047ea:	212c      	movs	r1, #44	@ 0x2c
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fb8c 	bl	8003f0a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	08016f18 	.word	0x08016f18

08004800 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fba7 	bl	8003f5e <_ZN7MCP25159getStatusEv>
 8004810:	4603      	mov	r3, r0
 8004812:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8004814:	7bbb      	ldrb	r3, [r7, #14]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	2100      	movs	r1, #0
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ff80 	bl	8004728 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e00e      	b.n	800484c <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 800482e:	7bbb      	ldrb	r3, [r7, #14]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	2101      	movs	r1, #1
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ff73 	bl	8004728 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004842:	4603      	mov	r3, r0
 8004844:	73fb      	strb	r3, [r7, #15]
 8004846:	e001      	b.n	800484c <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 8004848:	2305      	movs	r3, #5
 800484a:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004890 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800485c:	f7fd fca8 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004860:	480c      	ldr	r0, [pc, #48]	@ (8004894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004862:	490d      	ldr	r1, [pc, #52]	@ (8004898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004864:	4a0d      	ldr	r2, [pc, #52]	@ (800489c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004868:	e002      	b.n	8004870 <LoopCopyDataInit>

0800486a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800486a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800486c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800486e:	3304      	adds	r3, #4

08004870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004874:	d3f9      	bcc.n	800486a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004876:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004878:	4c0a      	ldr	r4, [pc, #40]	@ (80048a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800487a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800487c:	e001      	b.n	8004882 <LoopFillZerobss>

0800487e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800487e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004880:	3204      	adds	r2, #4

08004882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004884:	d3fb      	bcc.n	800487e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004886:	f00a f96d 	bl	800eb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800488a:	f7fc fc97 	bl	80011bc <main>
  bx  lr    
 800488e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004890:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004898:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800489c:	08016f98 	.word	0x08016f98
  ldr r2, =_sbss
 80048a0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80048a4:	20001988 	.word	0x20001988

080048a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048a8:	e7fe      	b.n	80048a8 <ADC_IRQHandler>
	...

080048ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048b0:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <HAL_Init+0x40>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0d      	ldr	r2, [pc, #52]	@ (80048ec <HAL_Init+0x40>)
 80048b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048bc:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <HAL_Init+0x40>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	@ (80048ec <HAL_Init+0x40>)
 80048c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048c8:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <HAL_Init+0x40>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a07      	ldr	r2, [pc, #28]	@ (80048ec <HAL_Init+0x40>)
 80048ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048d4:	2003      	movs	r0, #3
 80048d6:	f000 f94f 	bl	8004b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048da:	200f      	movs	r0, #15
 80048dc:	f000 f808 	bl	80048f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048e0:	f7fd fb46 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023c00 	.word	0x40023c00

080048f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048f8:	4b12      	ldr	r3, [pc, #72]	@ (8004944 <HAL_InitTick+0x54>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <HAL_InitTick+0x58>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004906:	fbb3 f3f1 	udiv	r3, r3, r1
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f967 	bl	8004be2 <HAL_SYSTICK_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e00e      	b.n	800493c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d80a      	bhi.n	800493a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004924:	2200      	movs	r2, #0
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800492c:	f000 f92f 	bl	8004b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004930:	4a06      	ldr	r2, [pc, #24]	@ (800494c <HAL_InitTick+0x5c>)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e000      	b.n	800493c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000004 	.word	0x20000004
 8004948:	20000034 	.word	0x20000034
 800494c:	20000030 	.word	0x20000030

08004950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <HAL_IncTick+0x20>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <HAL_IncTick+0x24>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4413      	add	r3, r2
 8004960:	4a04      	ldr	r2, [pc, #16]	@ (8004974 <HAL_IncTick+0x24>)
 8004962:	6013      	str	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000034 	.word	0x20000034
 8004974:	20000418 	.word	0x20000418

08004978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return uwTick;
 800497c:	4b03      	ldr	r3, [pc, #12]	@ (800498c <HAL_GetTick+0x14>)
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000418 	.word	0x20000418

08004990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004998:	f7ff ffee 	bl	8004978 <HAL_GetTick>
 800499c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049a8:	d005      	beq.n	80049b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049aa:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <HAL_Delay+0x44>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049b6:	bf00      	nop
 80049b8:	f7ff ffde 	bl	8004978 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d8f7      	bhi.n	80049b8 <HAL_Delay+0x28>
  {
  }
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000034 	.word	0x20000034

080049d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049e8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a1c <__NVIC_SetPriorityGrouping+0x44>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049f4:	4013      	ands	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a0a:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <__NVIC_SetPriorityGrouping+0x44>)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	60d3      	str	r3, [r2, #12]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a24:	4b04      	ldr	r3, [pc, #16]	@ (8004a38 <__NVIC_GetPriorityGrouping+0x18>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	f003 0307 	and.w	r3, r3, #7
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	db0b      	blt.n	8004a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	f003 021f 	and.w	r2, r3, #31
 8004a54:	4907      	ldr	r1, [pc, #28]	@ (8004a74 <__NVIC_EnableIRQ+0x38>)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	e000e100 	.word	0xe000e100

08004a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	db0a      	blt.n	8004aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	490c      	ldr	r1, [pc, #48]	@ (8004ac4 <__NVIC_SetPriority+0x4c>)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	0112      	lsls	r2, r2, #4
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aa0:	e00a      	b.n	8004ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	4908      	ldr	r1, [pc, #32]	@ (8004ac8 <__NVIC_SetPriority+0x50>)
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	0112      	lsls	r2, r2, #4
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	761a      	strb	r2, [r3, #24]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000e100 	.word	0xe000e100
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	@ 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	bf28      	it	cs
 8004aea:	2304      	movcs	r3, #4
 8004aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d902      	bls.n	8004afc <NVIC_EncodePriority+0x30>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3b03      	subs	r3, #3
 8004afa:	e000      	b.n	8004afe <NVIC_EncodePriority+0x32>
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	401a      	ands	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	43d9      	mvns	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b24:	4313      	orrs	r3, r2
         );
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3724      	adds	r7, #36	@ 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b44:	d301      	bcc.n	8004b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b46:	2301      	movs	r3, #1
 8004b48:	e00f      	b.n	8004b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b74 <SysTick_Config+0x40>)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b52:	210f      	movs	r1, #15
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b58:	f7ff ff8e 	bl	8004a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <SysTick_Config+0x40>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b62:	4b04      	ldr	r3, [pc, #16]	@ (8004b74 <SysTick_Config+0x40>)
 8004b64:	2207      	movs	r2, #7
 8004b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	e000e010 	.word	0xe000e010

08004b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff29 	bl	80049d8 <__NVIC_SetPriorityGrouping>
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ba0:	f7ff ff3e 	bl	8004a20 <__NVIC_GetPriorityGrouping>
 8004ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7ff ff8e 	bl	8004acc <NVIC_EncodePriority>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff5d 	bl	8004a78 <__NVIC_SetPriority>
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4603      	mov	r3, r0
 8004bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff31 	bl	8004a3c <__NVIC_EnableIRQ>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff ffa2 	bl	8004b34 <SysTick_Config>
 8004bf0:	4603      	mov	r3, r0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c08:	f7ff feb6 	bl	8004978 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e099      	b.n	8004d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c38:	e00f      	b.n	8004c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c3a:	f7ff fe9d 	bl	8004978 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d908      	bls.n	8004c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2203      	movs	r2, #3
 8004c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e078      	b.n	8004d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e8      	bne.n	8004c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4b38      	ldr	r3, [pc, #224]	@ (8004d54 <HAL_DMA_Init+0x158>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d107      	bne.n	8004cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d117      	bne.n	8004d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa91 	bl	8005228 <DMA_CheckFifoParam>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2240      	movs	r2, #64	@ 0x40
 8004d10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e016      	b.n	8004d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa48 	bl	80051bc <DMA_CalcBaseAndBitshift>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	223f      	movs	r2, #63	@ 0x3f
 8004d36:	409a      	lsls	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	f010803f 	.word	0xf010803f

08004d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_DMA_Start_IT+0x26>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e040      	b.n	8004e00 <HAL_DMA_Start_IT+0xa8>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d12f      	bne.n	8004df2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f9da 	bl	8005160 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db0:	223f      	movs	r2, #63	@ 0x3f
 8004db2:	409a      	lsls	r2, r3
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0216 	orr.w	r2, r2, #22
 8004dc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0208 	orr.w	r2, r2, #8
 8004dde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e005      	b.n	8004dfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d004      	beq.n	8004e26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2280      	movs	r2, #128	@ 0x80
 8004e20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e00c      	b.n	8004e40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2205      	movs	r2, #5
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0201 	bic.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e58:	4b8e      	ldr	r3, [pc, #568]	@ (8005094 <HAL_DMA_IRQHandler+0x248>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a8e      	ldr	r2, [pc, #568]	@ (8005098 <HAL_DMA_IRQHandler+0x24c>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	0a9b      	lsrs	r3, r3, #10
 8004e64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	2208      	movs	r2, #8
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01a      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d012      	beq.n	8004eee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eda:	2201      	movs	r2, #1
 8004edc:	409a      	lsls	r2, r3
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee6:	f043 0202 	orr.w	r2, r3, #2
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d012      	beq.n	8004f24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	2204      	movs	r2, #4
 8004f12:	409a      	lsls	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1c:	f043 0204 	orr.w	r2, r3, #4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f28:	2210      	movs	r2, #16
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d043      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d03c      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	2210      	movs	r2, #16
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d018      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d108      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d024      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
 8004f7a:	e01f      	b.n	8004fbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
 8004f8c:	e016      	b.n	8004fbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d107      	bne.n	8004fac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0208 	bic.w	r2, r2, #8
 8004faa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 808f 	beq.w	80050ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8087 	beq.w	80050ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d136      	bne.n	8005064 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0216 	bic.w	r2, r2, #22
 8005004:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005014:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <HAL_DMA_IRQHandler+0x1da>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0208 	bic.w	r2, r2, #8
 8005034:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503a:	223f      	movs	r2, #63	@ 0x3f
 800503c:	409a      	lsls	r2, r3
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005056:	2b00      	cmp	r3, #0
 8005058:	d07e      	beq.n	8005158 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	4798      	blx	r3
        }
        return;
 8005062:	e079      	b.n	8005158 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01d      	beq.n	80050ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10d      	bne.n	800509c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005084:	2b00      	cmp	r3, #0
 8005086:	d031      	beq.n	80050ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4798      	blx	r3
 8005090:	e02c      	b.n	80050ec <HAL_DMA_IRQHandler+0x2a0>
 8005092:	bf00      	nop
 8005094:	20000004 	.word	0x20000004
 8005098:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d023      	beq.n	80050ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4798      	blx	r3
 80050ac:	e01e      	b.n	80050ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10f      	bne.n	80050dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0210 	bic.w	r2, r2, #16
 80050ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d032      	beq.n	800515a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d022      	beq.n	8005146 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2205      	movs	r2, #5
 8005104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	3301      	adds	r3, #1
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	429a      	cmp	r2, r3
 8005122:	d307      	bcc.n	8005134 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f2      	bne.n	8005118 <HAL_DMA_IRQHandler+0x2cc>
 8005132:	e000      	b.n	8005136 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005134:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	4798      	blx	r3
 8005156:	e000      	b.n	800515a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005158:	bf00      	nop
    }
  }
}
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800517c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b40      	cmp	r3, #64	@ 0x40
 800518c:	d108      	bne.n	80051a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800519e:	e007      	b.n	80051b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	3b10      	subs	r3, #16
 80051cc:	4a14      	ldr	r2, [pc, #80]	@ (8005220 <DMA_CalcBaseAndBitshift+0x64>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051d6:	4a13      	ldr	r2, [pc, #76]	@ (8005224 <DMA_CalcBaseAndBitshift+0x68>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d909      	bls.n	80051fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	1d1a      	adds	r2, r3, #4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80051fc:	e007      	b.n	800520e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	aaaaaaab 	.word	0xaaaaaaab
 8005224:	08016f20 	.word	0x08016f20

08005228 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11f      	bne.n	8005282 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d856      	bhi.n	80052f6 <DMA_CheckFifoParam+0xce>
 8005248:	a201      	add	r2, pc, #4	@ (adr r2, 8005250 <DMA_CheckFifoParam+0x28>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005261 	.word	0x08005261
 8005254:	08005273 	.word	0x08005273
 8005258:	08005261 	.word	0x08005261
 800525c:	080052f7 	.word	0x080052f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d046      	beq.n	80052fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005270:	e043      	b.n	80052fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800527a:	d140      	bne.n	80052fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005280:	e03d      	b.n	80052fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800528a:	d121      	bne.n	80052d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d837      	bhi.n	8005302 <DMA_CheckFifoParam+0xda>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <DMA_CheckFifoParam+0x70>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052af 	.word	0x080052af
 80052a0:	080052a9 	.word	0x080052a9
 80052a4:	080052c1 	.word	0x080052c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
      break;
 80052ac:	e030      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d025      	beq.n	8005306 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052be:	e022      	b.n	8005306 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052c8:	d11f      	bne.n	800530a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052ce:	e01c      	b.n	800530a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d903      	bls.n	80052de <DMA_CheckFifoParam+0xb6>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d003      	beq.n	80052e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052dc:	e018      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
      break;
 80052e2:	e015      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00e      	beq.n	800530e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
      break;
 80052f4:	e00b      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      break;
 80052f6:	bf00      	nop
 80052f8:	e00a      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
      break;
 80052fa:	bf00      	nop
 80052fc:	e008      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
      break;
 80052fe:	bf00      	nop
 8005300:	e006      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
      break;
 8005302:	bf00      	nop
 8005304:	e004      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
      break;
 8005306:	bf00      	nop
 8005308:	e002      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
      break;   
 800530a:	bf00      	nop
 800530c:	e000      	b.n	8005310 <DMA_CheckFifoParam+0xe8>
      break;
 800530e:	bf00      	nop
    }
  } 
  
  return status; 
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop

08005320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	@ 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005332:	2300      	movs	r3, #0
 8005334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e159      	b.n	80055f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800533c:	2201      	movs	r2, #1
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	429a      	cmp	r2, r3
 8005356:	f040 8148 	bne.w	80055ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d005      	beq.n	8005372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800536e:	2b02      	cmp	r3, #2
 8005370:	d130      	bne.n	80053d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	2203      	movs	r2, #3
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43db      	mvns	r3, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4013      	ands	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053a8:	2201      	movs	r2, #1
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f003 0201 	and.w	r2, r3, #1
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d017      	beq.n	8005410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	2203      	movs	r2, #3
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d123      	bne.n	8005464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	08da      	lsrs	r2, r3, #3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3208      	adds	r2, #8
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	220f      	movs	r2, #15
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	08da      	lsrs	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3208      	adds	r2, #8
 800545e:	69b9      	ldr	r1, [r7, #24]
 8005460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	2203      	movs	r2, #3
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	43db      	mvns	r3, r3
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	4013      	ands	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 0203 	and.w	r2, r3, #3
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4313      	orrs	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80a2 	beq.w	80055ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	4b57      	ldr	r3, [pc, #348]	@ (8005608 <HAL_GPIO_Init+0x2e8>)
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	4a56      	ldr	r2, [pc, #344]	@ (8005608 <HAL_GPIO_Init+0x2e8>)
 80054b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80054b6:	4b54      	ldr	r3, [pc, #336]	@ (8005608 <HAL_GPIO_Init+0x2e8>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054c2:	4a52      	ldr	r2, [pc, #328]	@ (800560c <HAL_GPIO_Init+0x2ec>)
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	3302      	adds	r3, #2
 80054ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	220f      	movs	r2, #15
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a49      	ldr	r2, [pc, #292]	@ (8005610 <HAL_GPIO_Init+0x2f0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d019      	beq.n	8005522 <HAL_GPIO_Init+0x202>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a48      	ldr	r2, [pc, #288]	@ (8005614 <HAL_GPIO_Init+0x2f4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <HAL_GPIO_Init+0x1fe>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a47      	ldr	r2, [pc, #284]	@ (8005618 <HAL_GPIO_Init+0x2f8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00d      	beq.n	800551a <HAL_GPIO_Init+0x1fa>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a46      	ldr	r2, [pc, #280]	@ (800561c <HAL_GPIO_Init+0x2fc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d007      	beq.n	8005516 <HAL_GPIO_Init+0x1f6>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a45      	ldr	r2, [pc, #276]	@ (8005620 <HAL_GPIO_Init+0x300>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d101      	bne.n	8005512 <HAL_GPIO_Init+0x1f2>
 800550e:	2304      	movs	r3, #4
 8005510:	e008      	b.n	8005524 <HAL_GPIO_Init+0x204>
 8005512:	2307      	movs	r3, #7
 8005514:	e006      	b.n	8005524 <HAL_GPIO_Init+0x204>
 8005516:	2303      	movs	r3, #3
 8005518:	e004      	b.n	8005524 <HAL_GPIO_Init+0x204>
 800551a:	2302      	movs	r3, #2
 800551c:	e002      	b.n	8005524 <HAL_GPIO_Init+0x204>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_GPIO_Init+0x204>
 8005522:	2300      	movs	r3, #0
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	f002 0203 	and.w	r2, r2, #3
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	4093      	lsls	r3, r2
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005534:	4935      	ldr	r1, [pc, #212]	@ (800560c <HAL_GPIO_Init+0x2ec>)
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	089b      	lsrs	r3, r3, #2
 800553a:	3302      	adds	r3, #2
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005542:	4b38      	ldr	r3, [pc, #224]	@ (8005624 <HAL_GPIO_Init+0x304>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	43db      	mvns	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4013      	ands	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005566:	4a2f      	ldr	r2, [pc, #188]	@ (8005624 <HAL_GPIO_Init+0x304>)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800556c:	4b2d      	ldr	r3, [pc, #180]	@ (8005624 <HAL_GPIO_Init+0x304>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	43db      	mvns	r3, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4013      	ands	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005590:	4a24      	ldr	r2, [pc, #144]	@ (8005624 <HAL_GPIO_Init+0x304>)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005596:	4b23      	ldr	r3, [pc, #140]	@ (8005624 <HAL_GPIO_Init+0x304>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	43db      	mvns	r3, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4013      	ands	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005624 <HAL_GPIO_Init+0x304>)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055c0:	4b18      	ldr	r3, [pc, #96]	@ (8005624 <HAL_GPIO_Init+0x304>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4013      	ands	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005624 <HAL_GPIO_Init+0x304>)
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3301      	adds	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b0f      	cmp	r3, #15
 80055f4:	f67f aea2 	bls.w	800533c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	3724      	adds	r7, #36	@ 0x24
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	40013800 	.word	0x40013800
 8005610:	40020000 	.word	0x40020000
 8005614:	40020400 	.word	0x40020400
 8005618:	40020800 	.word	0x40020800
 800561c:	40020c00 	.word	0x40020c00
 8005620:	40021000 	.word	0x40021000
 8005624:	40013c00 	.word	0x40013c00

08005628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	807b      	strh	r3, [r7, #2]
 8005634:	4613      	mov	r3, r2
 8005636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005638:	787b      	ldrb	r3, [r7, #1]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800563e:	887a      	ldrh	r2, [r7, #2]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005644:	e003      	b.n	800564e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005646:	887b      	ldrh	r3, [r7, #2]
 8005648:	041a      	lsls	r2, r3, #16
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	619a      	str	r2, [r3, #24]
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005666:	4b08      	ldr	r3, [pc, #32]	@ (8005688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005672:	4a05      	ldr	r2, [pc, #20]	@ (8005688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fb fd6c 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40013c00 	.word	0x40013c00

0800568c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e101      	b.n	80058a2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f008 fd45 	bl	800e148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2203      	movs	r2, #3
 80056c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056cc:	d102      	bne.n	80056d4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f003 ff5c 	bl	8009596 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7c1a      	ldrb	r2, [r3, #16]
 80056e6:	f88d 2000 	strb.w	r2, [sp]
 80056ea:	3304      	adds	r3, #4
 80056ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ee:	f003 fe3b 	bl	8009368 <USB_CoreInit>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0ce      	b.n	80058a2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2100      	movs	r1, #0
 800570a:	4618      	mov	r0, r3
 800570c:	f003 ff54 	bl	80095b8 <USB_SetCurrentMode>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e0bf      	b.n	80058a2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]
 8005726:	e04a      	b.n	80057be <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005728:	7bfa      	ldrb	r2, [r7, #15]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	3315      	adds	r3, #21
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	3314      	adds	r3, #20
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005750:	7bfa      	ldrb	r2, [r7, #15]
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	b298      	uxth	r0, r3
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	332e      	adds	r3, #46	@ 0x2e
 8005764:	4602      	mov	r2, r0
 8005766:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	3318      	adds	r3, #24
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800577c:	7bfa      	ldrb	r2, [r7, #15]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	331c      	adds	r3, #28
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	3320      	adds	r3, #32
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057a4:	7bfa      	ldrb	r2, [r7, #15]
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	3324      	adds	r3, #36	@ 0x24
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	3301      	adds	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	791b      	ldrb	r3, [r3, #4]
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d3af      	bcc.n	8005728 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c8:	2300      	movs	r3, #0
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e044      	b.n	8005858 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057ce:	7bfa      	ldrb	r2, [r7, #15]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057e4:	7bfa      	ldrb	r2, [r7, #15]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80057f6:	7bfa      	ldrb	r2, [r7, #15]
 80057f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057fa:	7bfa      	ldrb	r2, [r7, #15]
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005810:	7bfa      	ldrb	r2, [r7, #15]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005826:	7bfa      	ldrb	r2, [r7, #15]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800583c:	7bfa      	ldrb	r2, [r7, #15]
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	3301      	adds	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	791b      	ldrb	r3, [r3, #4]
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	429a      	cmp	r2, r3
 8005860:	d3b5      	bcc.n	80057ce <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	7c1a      	ldrb	r2, [r3, #16]
 800586a:	f88d 2000 	strb.w	r2, [sp]
 800586e:	3304      	adds	r3, #4
 8005870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005872:	f003 feed 	bl	8009650 <USB_DevInit>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e00c      	b.n	80058a2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f004 ff37 	bl	800a70e <USB_DevDisconnect>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_PCD_Start+0x1c>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e022      	b.n	800590c <HAL_PCD_Start+0x62>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f003 fe3e 	bl	8009574 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f004 fee5 	bl	800a6cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b08d      	sub	sp, #52	@ 0x34
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f004 ffa3 	bl	800a876 <USB_GetMode>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 848c 	bne.w	8006250 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f004 ff07 	bl	800a750 <USB_ReadInterrupts>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8482 	beq.w	800624e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f004 fef4 	bl	800a750 <USB_ReadInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	d107      	bne.n	8005982 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f002 0202 	and.w	r2, r2, #2
 8005980:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f004 fee2 	bl	800a750 <USB_ReadInterrupts>
 800598c:	4603      	mov	r3, r0
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b10      	cmp	r3, #16
 8005994:	d161      	bne.n	8005a5a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0210 	bic.w	r2, r2, #16
 80059a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f003 020f 	and.w	r2, r3, #15
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	3304      	adds	r3, #4
 80059c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80059cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059d0:	d124      	bne.n	8005a1c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d035      	beq.n	8005a4a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	6a38      	ldr	r0, [r7, #32]
 80059f2:	f004 fd19 	bl	800a428 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a02:	441a      	add	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a14:	441a      	add	r2, r3
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	615a      	str	r2, [r3, #20]
 8005a1a:	e016      	b.n	8005a4a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005a22:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a26:	d110      	bne.n	8005a4a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a2e:	2208      	movs	r2, #8
 8005a30:	4619      	mov	r1, r3
 8005a32:	6a38      	ldr	r0, [r7, #32]
 8005a34:	f004 fcf8 	bl	800a428 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	695a      	ldr	r2, [r3, #20]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a44:	441a      	add	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0210 	orr.w	r2, r2, #16
 8005a58:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f004 fe76 	bl	800a750 <USB_ReadInterrupts>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a6a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a6e:	f040 80a7 	bne.w	8005bc0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f004 fe7b 	bl	800a776 <USB_ReadDevAllOutEpInterrupt>
 8005a80:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005a82:	e099      	b.n	8005bb8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 808e 	beq.w	8005bac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f004 fe9f 	bl	800a7de <USB_ReadDevOutEPInterrupt>
 8005aa0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2301      	movs	r3, #1
 8005abc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005abe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fea3 	bl	800680c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005adc:	461a      	mov	r2, r3
 8005ade:	2308      	movs	r3, #8
 8005ae0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ae2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 ff79 	bl	80069dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b00:	461a      	mov	r2, r3
 8005b02:	2310      	movs	r3, #16
 8005b04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d030      	beq.n	8005b72 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b18:	2b80      	cmp	r3, #128	@ 0x80
 8005b1a:	d109      	bne.n	8005b30 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b2e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b32:	4613      	mov	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4413      	add	r3, r2
 8005b42:	3304      	adds	r3, #4
 8005b44:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	78db      	ldrb	r3, [r3, #3]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d108      	bne.n	8005b60 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2200      	movs	r2, #0
 8005b52:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f008 fbf0 	bl	800e340 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2302      	movs	r3, #2
 8005b70:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2320      	movs	r3, #32
 8005b8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005baa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	3301      	adds	r3, #1
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f47f af62 	bne.w	8005a84 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f004 fdc3 	bl	800a750 <USB_ReadInterrupts>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bd4:	f040 80db 	bne.w	8005d8e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f004 fde4 	bl	800a7aa <USB_ReadDevAllInEpInterrupt>
 8005be2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005be8:	e0cd      	b.n	8005d86 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80c2 	beq.w	8005d7a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f004 fe0a 	bl	800a81a <USB_ReadDevInEPInterrupt>
 8005c06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d057      	beq.n	8005cc2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	2201      	movs	r2, #1
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69f9      	ldr	r1, [r7, #28]
 8005c2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c32:	4013      	ands	r3, r2
 8005c34:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	2301      	movs	r3, #1
 8005c46:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	799b      	ldrb	r3, [r3, #6]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d132      	bne.n	8005cb6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c54:	4613      	mov	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3320      	adds	r3, #32
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4403      	add	r3, r0
 8005c70:	331c      	adds	r3, #28
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4419      	add	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4403      	add	r3, r0
 8005c84:	3320      	adds	r3, #32
 8005c86:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d113      	bne.n	8005cb6 <HAL_PCD_IRQHandler+0x3a2>
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c92:	4613      	mov	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	3324      	adds	r3, #36	@ 0x24
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d108      	bne.n	8005cb6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cae:	461a      	mov	r2, r3
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	f004 fe11 	bl	800a8d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f008 fac4 	bl	800e24a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2308      	movs	r3, #8
 8005cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	2310      	movs	r3, #16
 8005cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d10:	461a      	mov	r2, r3
 8005d12:	2340      	movs	r3, #64	@ 0x40
 8005d14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d023      	beq.n	8005d68 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d22:	6a38      	ldr	r0, [r7, #32]
 8005d24:	f003 fdf8 	bl	8009918 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	3310      	adds	r3, #16
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	4413      	add	r3, r2
 8005d38:	3304      	adds	r3, #4
 8005d3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d108      	bne.n	8005d56 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2200      	movs	r2, #0
 8005d48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f008 fb07 	bl	800e364 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d62:	461a      	mov	r2, r3
 8005d64:	2302      	movs	r3, #2
 8005d66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fcbd 	bl	80066f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	085b      	lsrs	r3, r3, #1
 8005d84:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f47f af2e 	bne.w	8005bea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f004 fcdc 	bl	800a750 <USB_ReadInterrupts>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da2:	d122      	bne.n	8005dea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d108      	bne.n	8005dd4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005dca:	2100      	movs	r1, #0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fea3 	bl	8006b18 <HAL_PCDEx_LPM_Callback>
 8005dd2:	e002      	b.n	8005dda <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f008 faa5 	bl	800e324 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f004 fcae 	bl	800a750 <USB_ReadInterrupts>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dfe:	d112      	bne.n	8005e26 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d102      	bne.n	8005e16 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f008 fa61 	bl	800e2d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005e24:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f004 fc90 	bl	800a750 <USB_ReadInterrupts>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3a:	f040 80b7 	bne.w	8005fac <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2110      	movs	r1, #16
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f003 fd5d 	bl	8009918 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e5e:	2300      	movs	r3, #0
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e62:	e046      	b.n	8005ef2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e70:	461a      	mov	r2, r3
 8005e72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005eaa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005eca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005eea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eee:	3301      	adds	r3, #1
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	791b      	ldrb	r3, [r3, #4]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d3b2      	bcc.n	8005e64 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f0c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005f10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7bdb      	ldrb	r3, [r3, #15]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d016      	beq.n	8005f48 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f2a:	f043 030b 	orr.w	r3, r3, #11
 8005f2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f40:	f043 030b 	orr.w	r3, r3, #11
 8005f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f46:	e015      	b.n	8005f74 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f5a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005f5e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f6e:	f043 030b 	orr.w	r3, r3, #11
 8005f72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f82:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f96:	461a      	mov	r2, r3
 8005f98:	f004 fc9e 	bl	800a8d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f004 fbcd 	bl	800a750 <USB_ReadInterrupts>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc0:	d123      	bne.n	800600a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f004 fc63 	bl	800a892 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f003 fd1a 	bl	8009a0a <USB_GetDevSpeed>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	461a      	mov	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681c      	ldr	r4, [r3, #0]
 8005fe2:	f001 f9c9 	bl	8007378 <HAL_RCC_GetHCLKFreq>
 8005fe6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fec:	461a      	mov	r2, r3
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f003 fa1e 	bl	8009430 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f008 f950 	bl	800e29a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006008:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f004 fb9e 	bl	800a750 <USB_ReadInterrupts>
 8006014:	4603      	mov	r3, r0
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b08      	cmp	r3, #8
 800601c:	d10a      	bne.n	8006034 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f008 f92d 	bl	800e27e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f002 0208 	and.w	r2, r2, #8
 8006032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4618      	mov	r0, r3
 800603a:	f004 fb89 	bl	800a750 <USB_ReadInterrupts>
 800603e:	4603      	mov	r3, r0
 8006040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006044:	2b80      	cmp	r3, #128	@ 0x80
 8006046:	d123      	bne.n	8006090 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006054:	2301      	movs	r3, #1
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
 8006058:	e014      	b.n	8006084 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605e:	4613      	mov	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	b2db      	uxtb	r3, r3
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fb0a 	bl	8006692 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	3301      	adds	r3, #1
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	791b      	ldrb	r3, [r3, #4]
 8006088:	461a      	mov	r2, r3
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	4293      	cmp	r3, r2
 800608e:	d3e4      	bcc.n	800605a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f004 fb5b 	bl	800a750 <USB_ReadInterrupts>
 800609a:	4603      	mov	r3, r0
 800609c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060a4:	d13c      	bne.n	8006120 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060a6:	2301      	movs	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060aa:	e02b      	b.n	8006104 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	3318      	adds	r3, #24
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d115      	bne.n	80060fe <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80060d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da12      	bge.n	80060fe <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	3317      	adds	r3, #23
 80060e8:	2201      	movs	r2, #1
 80060ea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 faca 	bl	8006692 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	3301      	adds	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	791b      	ldrb	r3, [r3, #4]
 8006108:	461a      	mov	r2, r3
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	4293      	cmp	r3, r2
 800610e:	d3cd      	bcc.n	80060ac <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800611e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f004 fb13 	bl	800a750 <USB_ReadInterrupts>
 800612a:	4603      	mov	r3, r0
 800612c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006134:	d156      	bne.n	80061e4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006136:	2301      	movs	r3, #1
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
 800613a:	e045      	b.n	80061c8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006150:	4613      	mov	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d12e      	bne.n	80061c2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006164:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006166:	2b00      	cmp	r3, #0
 8006168:	da2b      	bge.n	80061c2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006176:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800617a:	429a      	cmp	r2, r3
 800617c:	d121      	bne.n	80061c2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006182:	4613      	mov	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006190:	2201      	movs	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061be:	6053      	str	r3, [r2, #4]
            break;
 80061c0:	e008      	b.n	80061d4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	3301      	adds	r3, #1
 80061c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	791b      	ldrb	r3, [r3, #4]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d3b3      	bcc.n	800613c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80061e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f004 fab1 	bl	800a750 <USB_ReadInterrupts>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f8:	d10a      	bne.n	8006210 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f008 f8c4 	bl	800e388 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800620e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f004 fa9b 	bl	800a750 <USB_ReadInterrupts>
 800621a:	4603      	mov	r3, r0
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b04      	cmp	r3, #4
 8006222:	d115      	bne.n	8006250 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f008 f8b4 	bl	800e3a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6859      	ldr	r1, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
 800624c:	e000      	b.n	8006250 <HAL_PCD_IRQHandler+0x93c>
      return;
 800624e:	bf00      	nop
    }
  }
}
 8006250:	3734      	adds	r7, #52	@ 0x34
 8006252:	46bd      	mov	sp, r7
 8006254:	bd90      	pop	{r4, r7, pc}

08006256 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_PCD_SetAddress+0x1a>
 800626c:	2302      	movs	r3, #2
 800626e:	e012      	b.n	8006296 <HAL_PCD_SetAddress+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	78fa      	ldrb	r2, [r7, #3]
 800627c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f004 f9fa 	bl	800a680 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	4608      	mov	r0, r1
 80062a8:	4611      	mov	r1, r2
 80062aa:	461a      	mov	r2, r3
 80062ac:	4603      	mov	r3, r0
 80062ae:	70fb      	strb	r3, [r7, #3]
 80062b0:	460b      	mov	r3, r1
 80062b2:	803b      	strh	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da0f      	bge.n	80062e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	f003 020f 	and.w	r2, r3, #15
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	3310      	adds	r3, #16
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	3304      	adds	r3, #4
 80062da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	705a      	strb	r2, [r3, #1]
 80062e2:	e00f      	b.n	8006304 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	f003 020f 	and.w	r2, r3, #15
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4413      	add	r3, r2
 80062fa:	3304      	adds	r3, #4
 80062fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	b2da      	uxtb	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006310:	883b      	ldrh	r3, [r7, #0]
 8006312:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	78ba      	ldrb	r2, [r7, #2]
 800631e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006332:	78bb      	ldrb	r3, [r7, #2]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d102      	bne.n	800633e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_PCD_EP_Open+0xae>
 8006348:	2302      	movs	r3, #2
 800634a:	e00e      	b.n	800636a <HAL_PCD_EP_Open+0xcc>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68f9      	ldr	r1, [r7, #12]
 800635a:	4618      	mov	r0, r3
 800635c:	f003 fb7a 	bl	8009a54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006368:	7afb      	ldrb	r3, [r7, #11]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800637e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006382:	2b00      	cmp	r3, #0
 8006384:	da0f      	bge.n	80063a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006386:	78fb      	ldrb	r3, [r7, #3]
 8006388:	f003 020f 	and.w	r2, r3, #15
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	3310      	adds	r3, #16
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4413      	add	r3, r2
 800639a:	3304      	adds	r3, #4
 800639c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	705a      	strb	r2, [r3, #1]
 80063a4:	e00f      	b.n	80063c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	f003 020f 	and.w	r2, r3, #15
 80063ac:	4613      	mov	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4413      	add	r3, r2
 80063bc:	3304      	adds	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_PCD_EP_Close+0x6e>
 80063dc:	2302      	movs	r3, #2
 80063de:	e00e      	b.n	80063fe <HAL_PCD_EP_Close+0x8c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68f9      	ldr	r1, [r7, #12]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f003 fbb8 	bl	8009b64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b086      	sub	sp, #24
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	460b      	mov	r3, r1
 8006414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006416:	7afb      	ldrb	r3, [r7, #11]
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	3304      	adds	r3, #4
 800642e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2200      	movs	r2, #0
 8006440:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2200      	movs	r2, #0
 8006446:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006448:	7afb      	ldrb	r3, [r7, #11]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	b2da      	uxtb	r2, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	799b      	ldrb	r3, [r3, #6]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d102      	bne.n	8006462 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	799b      	ldrb	r3, [r3, #6]
 800646a:	461a      	mov	r2, r3
 800646c:	6979      	ldr	r1, [r7, #20]
 800646e:	f003 fc55 	bl	8009d1c <USB_EPStartXfer>

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	f003 020f 	and.w	r2, r3, #15
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800649e:	681b      	ldr	r3, [r3, #0]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	460b      	mov	r3, r1
 80064ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064bc:	7afb      	ldrb	r3, [r7, #11]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	4613      	mov	r3, r2
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	3310      	adds	r3, #16
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	3304      	adds	r3, #4
 80064d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2200      	movs	r2, #0
 80064e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2201      	movs	r2, #1
 80064ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ec:	7afb      	ldrb	r3, [r7, #11]
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	799b      	ldrb	r3, [r3, #6]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d102      	bne.n	8006506 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	799b      	ldrb	r3, [r3, #6]
 800650e:	461a      	mov	r2, r3
 8006510:	6979      	ldr	r1, [r7, #20]
 8006512:	f003 fc03 	bl	8009d1c <USB_EPStartXfer>

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	7912      	ldrb	r2, [r2, #4]
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e04f      	b.n	80065de <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800653e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006542:	2b00      	cmp	r3, #0
 8006544:	da0f      	bge.n	8006566 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	f003 020f 	and.w	r2, r3, #15
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	3310      	adds	r3, #16
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	4413      	add	r3, r2
 800655a:	3304      	adds	r3, #4
 800655c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	705a      	strb	r2, [r3, #1]
 8006564:	e00d      	b.n	8006582 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	4613      	mov	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	4413      	add	r3, r2
 8006578:	3304      	adds	r3, #4
 800657a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	b2da      	uxtb	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_PCD_EP_SetStall+0x82>
 800659e:	2302      	movs	r3, #2
 80065a0:	e01d      	b.n	80065de <HAL_PCD_EP_SetStall+0xbe>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68f9      	ldr	r1, [r7, #12]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f003 ff91 	bl	800a4d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	7999      	ldrb	r1, [r3, #6]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065ce:	461a      	mov	r2, r3
 80065d0:	f004 f982 	bl	800a8d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7912      	ldrb	r2, [r2, #4]
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e042      	b.n	800668a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006608:	2b00      	cmp	r3, #0
 800660a:	da0f      	bge.n	800662c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	f003 020f 	and.w	r2, r3, #15
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	3310      	adds	r3, #16
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4413      	add	r3, r2
 8006620:	3304      	adds	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	705a      	strb	r2, [r3, #1]
 800662a:	e00f      	b.n	800664c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	f003 020f 	and.w	r2, r3, #15
 8006632:	4613      	mov	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	3304      	adds	r3, #4
 8006644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	b2da      	uxtb	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_PCD_EP_ClrStall+0x86>
 8006668:	2302      	movs	r3, #2
 800666a:	e00e      	b.n	800668a <HAL_PCD_EP_ClrStall+0xa4>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68f9      	ldr	r1, [r7, #12]
 800667a:	4618      	mov	r0, r3
 800667c:	f003 ff9a 	bl	800a5b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800669e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	da0c      	bge.n	80066c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	f003 020f 	and.w	r2, r3, #15
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	3310      	adds	r3, #16
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4413      	add	r3, r2
 80066ba:	3304      	adds	r3, #4
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e00c      	b.n	80066da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	f003 020f 	and.w	r2, r3, #15
 80066c6:	4613      	mov	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4413      	add	r3, r2
 80066d6:	3304      	adds	r3, #4
 80066d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f003 fdb9 	bl	800a258 <USB_EPStopXfer>
 80066e6:	4603      	mov	r3, r0
 80066e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066ea:	7afb      	ldrb	r3, [r7, #11]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	@ 0x28
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	4613      	mov	r3, r2
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	3310      	adds	r3, #16
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4413      	add	r3, r2
 8006718:	3304      	adds	r3, #4
 800671a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d901      	bls.n	800672c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e06b      	b.n	8006804 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	429a      	cmp	r2, r3
 8006740:	d902      	bls.n	8006748 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	3303      	adds	r3, #3
 800674c:	089b      	lsrs	r3, r3, #2
 800674e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006750:	e02a      	b.n	80067a8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	429a      	cmp	r2, r3
 8006766:	d902      	bls.n	800676e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	3303      	adds	r3, #3
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68d9      	ldr	r1, [r3, #12]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	4603      	mov	r3, r0
 800678a:	6978      	ldr	r0, [r7, #20]
 800678c:	f003 fe0e 	bl	800a3ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	441a      	add	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	695a      	ldr	r2, [r3, #20]
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	441a      	add	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d809      	bhi.n	80067d2 <PCD_WriteEmptyTxFifo+0xde>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d203      	bcs.n	80067d2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1bf      	bne.n	8006752 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d811      	bhi.n	8006802 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	2201      	movs	r2, #1
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	43db      	mvns	r3, r3
 80067f8:	6939      	ldr	r1, [r7, #16]
 80067fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067fe:	4013      	ands	r3, r2
 8006800:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	333c      	adds	r3, #60	@ 0x3c
 8006824:	3304      	adds	r3, #4
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	799b      	ldrb	r3, [r3, #6]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d17b      	bne.n	800693a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d015      	beq.n	8006878 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4a61      	ldr	r2, [pc, #388]	@ (80069d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	f240 80b9 	bls.w	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80b3 	beq.w	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686e:	461a      	mov	r2, r3
 8006870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006874:	6093      	str	r3, [r2, #8]
 8006876:	e0a7      	b.n	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688e:	461a      	mov	r2, r3
 8006890:	2320      	movs	r3, #32
 8006892:	6093      	str	r3, [r2, #8]
 8006894:	e098      	b.n	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 8093 	bne.w	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4a4b      	ldr	r2, [pc, #300]	@ (80069d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d90f      	bls.n	80068ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c0:	461a      	mov	r2, r3
 80068c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c6:	6093      	str	r3, [r2, #8]
 80068c8:	e07e      	b.n	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	4413      	add	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4413      	add	r3, r2
 80068dc:	3304      	adds	r3, #4
 80068de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a1a      	ldr	r2, [r3, #32]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	0159      	lsls	r1, r3, #5
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	440b      	add	r3, r1
 80068ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d114      	bne.n	800692c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006914:	461a      	mov	r2, r3
 8006916:	2101      	movs	r1, #1
 8006918:	f003 ffde 	bl	800a8d8 <USB_EP0_OutStart>
 800691c:	e006      	b.n	800692c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	441a      	add	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f007 fc6e 	bl	800e214 <HAL_PCD_DataOutStageCallback>
 8006938:	e046      	b.n	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4a26      	ldr	r2, [pc, #152]	@ (80069d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d124      	bne.n	800698c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006958:	461a      	mov	r2, r3
 800695a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800695e:	6093      	str	r3, [r2, #8]
 8006960:	e032      	b.n	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d008      	beq.n	800697e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006978:	461a      	mov	r2, r3
 800697a:	2320      	movs	r3, #32
 800697c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f007 fc45 	bl	800e214 <HAL_PCD_DataOutStageCallback>
 800698a:	e01d      	b.n	80069c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d114      	bne.n	80069bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	4613      	mov	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d108      	bne.n	80069bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069b4:	461a      	mov	r2, r3
 80069b6:	2100      	movs	r1, #0
 80069b8:	f003 ff8e 	bl	800a8d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f007 fc26 	bl	800e214 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	4f54300a 	.word	0x4f54300a
 80069d8:	4f54310a 	.word	0x4f54310a

080069dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	333c      	adds	r3, #60	@ 0x3c
 80069f4:	3304      	adds	r3, #4
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	@ (8006a64 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d90e      	bls.n	8006a30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f007 fbdd 	bl	800e1f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4a0a      	ldr	r2, [pc, #40]	@ (8006a64 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d90c      	bls.n	8006a58 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	799b      	ldrb	r3, [r3, #6]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d108      	bne.n	8006a58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a50:	461a      	mov	r2, r3
 8006a52:	2101      	movs	r1, #1
 8006a54:	f003 ff40 	bl	800a8d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	4f54300a 	.word	0x4f54300a

08006a68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
 8006a74:	4613      	mov	r3, r2
 8006a76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d107      	bne.n	8006a96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a86:	883b      	ldrh	r3, [r7, #0]
 8006a88:	0419      	lsls	r1, r3, #16
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a94:	e028      	b.n	8006ae8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73fb      	strb	r3, [r7, #15]
 8006aa8:	e00d      	b.n	8006ac6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	3340      	adds	r3, #64	@ 0x40
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	73fb      	strb	r3, [r7, #15]
 8006ac6:	7bfa      	ldrb	r2, [r7, #15]
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d3ec      	bcc.n	8006aaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ad0:	883b      	ldrh	r3, [r7, #0]
 8006ad2:	0418      	lsls	r0, r3, #16
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6819      	ldr	r1, [r3, #0]
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	4302      	orrs	r2, r0
 8006ae0:	3340      	adds	r3, #64	@ 0x40
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	887a      	ldrh	r2, [r7, #2]
 8006b08:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e267      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d075      	beq.n	8006c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b4e:	4b88      	ldr	r3, [pc, #544]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 030c 	and.w	r3, r3, #12
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d00c      	beq.n	8006b74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b5a:	4b85      	ldr	r3, [pc, #532]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b62:	2b08      	cmp	r3, #8
 8006b64:	d112      	bne.n	8006b8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b66:	4b82      	ldr	r3, [pc, #520]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b72:	d10b      	bne.n	8006b8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b74:	4b7e      	ldr	r3, [pc, #504]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d05b      	beq.n	8006c38 <HAL_RCC_OscConfig+0x108>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d157      	bne.n	8006c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e242      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b94:	d106      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x74>
 8006b96:	4b76      	ldr	r3, [pc, #472]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a75      	ldr	r2, [pc, #468]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	e01d      	b.n	8006be0 <HAL_RCC_OscConfig+0xb0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bac:	d10c      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x98>
 8006bae:	4b70      	ldr	r3, [pc, #448]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4b6d      	ldr	r3, [pc, #436]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	e00b      	b.n	8006be0 <HAL_RCC_OscConfig+0xb0>
 8006bc8:	4b69      	ldr	r3, [pc, #420]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a68      	ldr	r2, [pc, #416]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	4b66      	ldr	r3, [pc, #408]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a65      	ldr	r2, [pc, #404]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d013      	beq.n	8006c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be8:	f7fd fec6 	bl	8004978 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bf0:	f7fd fec2 	bl	8004978 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b64      	cmp	r3, #100	@ 0x64
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e207      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c02:	4b5b      	ldr	r3, [pc, #364]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0xc0>
 8006c0e:	e014      	b.n	8006c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c10:	f7fd feb2 	bl	8004978 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c18:	f7fd feae 	bl	8004978 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b64      	cmp	r3, #100	@ 0x64
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e1f3      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c2a:	4b51      	ldr	r3, [pc, #324]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0xe8>
 8006c36:	e000      	b.n	8006c3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d063      	beq.n	8006d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c46:	4b4a      	ldr	r3, [pc, #296]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 030c 	and.w	r3, r3, #12
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c52:	4b47      	ldr	r3, [pc, #284]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d11c      	bne.n	8006c98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c5e:	4b44      	ldr	r3, [pc, #272]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d116      	bne.n	8006c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c6a:	4b41      	ldr	r3, [pc, #260]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_RCC_OscConfig+0x152>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d001      	beq.n	8006c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e1c7      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c82:	4b3b      	ldr	r3, [pc, #236]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	4937      	ldr	r1, [pc, #220]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c96:	e03a      	b.n	8006d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca0:	4b34      	ldr	r3, [pc, #208]	@ (8006d74 <HAL_RCC_OscConfig+0x244>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca6:	f7fd fe67 	bl	8004978 <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cae:	f7fd fe63 	bl	8004978 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e1a8      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ccc:	4b28      	ldr	r3, [pc, #160]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	4925      	ldr	r1, [pc, #148]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	600b      	str	r3, [r1, #0]
 8006ce0:	e015      	b.n	8006d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ce2:	4b24      	ldr	r3, [pc, #144]	@ (8006d74 <HAL_RCC_OscConfig+0x244>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fd fe46 	bl	8004978 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf0:	f7fd fe42 	bl	8004978 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e187      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d02:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d036      	beq.n	8006d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d016      	beq.n	8006d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d22:	4b15      	ldr	r3, [pc, #84]	@ (8006d78 <HAL_RCC_OscConfig+0x248>)
 8006d24:	2201      	movs	r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d28:	f7fd fe26 	bl	8004978 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d30:	f7fd fe22 	bl	8004978 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e167      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d42:	4b0b      	ldr	r3, [pc, #44]	@ (8006d70 <HAL_RCC_OscConfig+0x240>)
 8006d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0x200>
 8006d4e:	e01b      	b.n	8006d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d50:	4b09      	ldr	r3, [pc, #36]	@ (8006d78 <HAL_RCC_OscConfig+0x248>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d56:	f7fd fe0f 	bl	8004978 <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d5c:	e00e      	b.n	8006d7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d5e:	f7fd fe0b 	bl	8004978 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d907      	bls.n	8006d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e150      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
 8006d70:	40023800 	.word	0x40023800
 8006d74:	42470000 	.word	0x42470000
 8006d78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d7c:	4b88      	ldr	r3, [pc, #544]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ea      	bne.n	8006d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8097 	beq.w	8006ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d9a:	4b81      	ldr	r3, [pc, #516]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10f      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	4b7d      	ldr	r3, [pc, #500]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dae:	4a7c      	ldr	r2, [pc, #496]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006db6:	4b7a      	ldr	r3, [pc, #488]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc6:	4b77      	ldr	r3, [pc, #476]	@ (8006fa4 <HAL_RCC_OscConfig+0x474>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d118      	bne.n	8006e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dd2:	4b74      	ldr	r3, [pc, #464]	@ (8006fa4 <HAL_RCC_OscConfig+0x474>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a73      	ldr	r2, [pc, #460]	@ (8006fa4 <HAL_RCC_OscConfig+0x474>)
 8006dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dde:	f7fd fdcb 	bl	8004978 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de4:	e008      	b.n	8006df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006de6:	f7fd fdc7 	bl	8004978 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e10c      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df8:	4b6a      	ldr	r3, [pc, #424]	@ (8006fa4 <HAL_RCC_OscConfig+0x474>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0f0      	beq.n	8006de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d106      	bne.n	8006e1a <HAL_RCC_OscConfig+0x2ea>
 8006e0c:	4b64      	ldr	r3, [pc, #400]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e10:	4a63      	ldr	r2, [pc, #396]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e18:	e01c      	b.n	8006e54 <HAL_RCC_OscConfig+0x324>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b05      	cmp	r3, #5
 8006e20:	d10c      	bne.n	8006e3c <HAL_RCC_OscConfig+0x30c>
 8006e22:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e26:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e28:	f043 0304 	orr.w	r3, r3, #4
 8006e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e32:	4a5b      	ldr	r2, [pc, #364]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e3a:	e00b      	b.n	8006e54 <HAL_RCC_OscConfig+0x324>
 8006e3c:	4b58      	ldr	r3, [pc, #352]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e40:	4a57      	ldr	r2, [pc, #348]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e42:	f023 0301 	bic.w	r3, r3, #1
 8006e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e48:	4b55      	ldr	r3, [pc, #340]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4c:	4a54      	ldr	r2, [pc, #336]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e4e:	f023 0304 	bic.w	r3, r3, #4
 8006e52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d015      	beq.n	8006e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5c:	f7fd fd8c 	bl	8004978 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e62:	e00a      	b.n	8006e7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e64:	f7fd fd88 	bl	8004978 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e0cb      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e7a:	4b49      	ldr	r3, [pc, #292]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0ee      	beq.n	8006e64 <HAL_RCC_OscConfig+0x334>
 8006e86:	e014      	b.n	8006eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e88:	f7fd fd76 	bl	8004978 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e8e:	e00a      	b.n	8006ea6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e90:	f7fd fd72 	bl	8004978 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e0b5      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1ee      	bne.n	8006e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d105      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb8:	4b39      	ldr	r3, [pc, #228]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	4a38      	ldr	r2, [pc, #224]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ec2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80a1 	beq.w	8007010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ece:	4b34      	ldr	r3, [pc, #208]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d05c      	beq.n	8006f94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d141      	bne.n	8006f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee2:	4b31      	ldr	r3, [pc, #196]	@ (8006fa8 <HAL_RCC_OscConfig+0x478>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee8:	f7fd fd46 	bl	8004978 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fd fd42 	bl	8004978 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e087      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f02:	4b27      	ldr	r3, [pc, #156]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1c:	019b      	lsls	r3, r3, #6
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	3b01      	subs	r3, #1
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	491b      	ldr	r1, [pc, #108]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f38:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa8 <HAL_RCC_OscConfig+0x478>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3e:	f7fd fd1b 	bl	8004978 <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f46:	f7fd fd17 	bl	8004978 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e05c      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f58:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0f0      	beq.n	8006f46 <HAL_RCC_OscConfig+0x416>
 8006f64:	e054      	b.n	8007010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f66:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <HAL_RCC_OscConfig+0x478>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f6c:	f7fd fd04 	bl	8004978 <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f74:	f7fd fd00 	bl	8004978 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e045      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f86:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <HAL_RCC_OscConfig+0x470>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f0      	bne.n	8006f74 <HAL_RCC_OscConfig+0x444>
 8006f92:	e03d      	b.n	8007010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d107      	bne.n	8006fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e038      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	40007000 	.word	0x40007000
 8006fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fac:	4b1b      	ldr	r3, [pc, #108]	@ (800701c <HAL_RCC_OscConfig+0x4ec>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d028      	beq.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d121      	bne.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d11a      	bne.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d111      	bne.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d107      	bne.n	800700c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d001      	beq.n	8007010 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	40023800 	.word	0x40023800

08007020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e0cc      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007034:	4b68      	ldr	r3, [pc, #416]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d90c      	bls.n	800705c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007042:	4b65      	ldr	r3, [pc, #404]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704a:	4b63      	ldr	r3, [pc, #396]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d001      	beq.n	800705c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0b8      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d020      	beq.n	80070aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007074:	4b59      	ldr	r3, [pc, #356]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	4a58      	ldr	r2, [pc, #352]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800707e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800708c:	4b53      	ldr	r3, [pc, #332]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4a52      	ldr	r2, [pc, #328]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007098:	4b50      	ldr	r3, [pc, #320]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	494d      	ldr	r1, [pc, #308]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d044      	beq.n	8007140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d107      	bne.n	80070ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070be:	4b47      	ldr	r3, [pc, #284]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d119      	bne.n	80070fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e07f      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d003      	beq.n	80070de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d107      	bne.n	80070ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070de:	4b3f      	ldr	r3, [pc, #252]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e06f      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ee:	4b3b      	ldr	r3, [pc, #236]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e067      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070fe:	4b37      	ldr	r3, [pc, #220]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f023 0203 	bic.w	r2, r3, #3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4934      	ldr	r1, [pc, #208]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	4313      	orrs	r3, r2
 800710e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007110:	f7fd fc32 	bl	8004978 <HAL_GetTick>
 8007114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007116:	e00a      	b.n	800712e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007118:	f7fd fc2e 	bl	8004978 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007126:	4293      	cmp	r3, r2
 8007128:	d901      	bls.n	800712e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e04f      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712e:	4b2b      	ldr	r3, [pc, #172]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 020c 	and.w	r2, r3, #12
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	429a      	cmp	r2, r3
 800713e:	d1eb      	bne.n	8007118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007140:	4b25      	ldr	r3, [pc, #148]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d20c      	bcs.n	8007168 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714e:	4b22      	ldr	r3, [pc, #136]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007156:	4b20      	ldr	r3, [pc, #128]	@ (80071d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d001      	beq.n	8007168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e032      	b.n	80071ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007174:	4b19      	ldr	r3, [pc, #100]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4916      	ldr	r1, [pc, #88]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007182:	4313      	orrs	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007192:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	490e      	ldr	r1, [pc, #56]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071a6:	f000 f821 	bl	80071ec <HAL_RCC_GetSysClockFreq>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4b0b      	ldr	r3, [pc, #44]	@ (80071dc <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	490a      	ldr	r1, [pc, #40]	@ (80071e0 <HAL_RCC_ClockConfig+0x1c0>)
 80071b8:	5ccb      	ldrb	r3, [r1, r3]
 80071ba:	fa22 f303 	lsr.w	r3, r2, r3
 80071be:	4a09      	ldr	r2, [pc, #36]	@ (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 80071c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80071c2:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fd fb92 	bl	80048f0 <HAL_InitTick>

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40023c00 	.word	0x40023c00
 80071dc:	40023800 	.word	0x40023800
 80071e0:	0800f484 	.word	0x0800f484
 80071e4:	20000004 	.word	0x20000004
 80071e8:	20000030 	.word	0x20000030

080071ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f0:	b090      	sub	sp, #64	@ 0x40
 80071f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007204:	4b59      	ldr	r3, [pc, #356]	@ (800736c <HAL_RCC_GetSysClockFreq+0x180>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 030c 	and.w	r3, r3, #12
 800720c:	2b08      	cmp	r3, #8
 800720e:	d00d      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x40>
 8007210:	2b08      	cmp	r3, #8
 8007212:	f200 80a1 	bhi.w	8007358 <HAL_RCC_GetSysClockFreq+0x16c>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_RCC_GetSysClockFreq+0x34>
 800721a:	2b04      	cmp	r3, #4
 800721c:	d003      	beq.n	8007226 <HAL_RCC_GetSysClockFreq+0x3a>
 800721e:	e09b      	b.n	8007358 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007220:	4b53      	ldr	r3, [pc, #332]	@ (8007370 <HAL_RCC_GetSysClockFreq+0x184>)
 8007222:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007224:	e09b      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007226:	4b53      	ldr	r3, [pc, #332]	@ (8007374 <HAL_RCC_GetSysClockFreq+0x188>)
 8007228:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800722a:	e098      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800722c:	4b4f      	ldr	r3, [pc, #316]	@ (800736c <HAL_RCC_GetSysClockFreq+0x180>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007236:	4b4d      	ldr	r3, [pc, #308]	@ (800736c <HAL_RCC_GetSysClockFreq+0x180>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d028      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007242:	4b4a      	ldr	r3, [pc, #296]	@ (800736c <HAL_RCC_GetSysClockFreq+0x180>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	099b      	lsrs	r3, r3, #6
 8007248:	2200      	movs	r2, #0
 800724a:	623b      	str	r3, [r7, #32]
 800724c:	627a      	str	r2, [r7, #36]	@ 0x24
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007254:	2100      	movs	r1, #0
 8007256:	4b47      	ldr	r3, [pc, #284]	@ (8007374 <HAL_RCC_GetSysClockFreq+0x188>)
 8007258:	fb03 f201 	mul.w	r2, r3, r1
 800725c:	2300      	movs	r3, #0
 800725e:	fb00 f303 	mul.w	r3, r0, r3
 8007262:	4413      	add	r3, r2
 8007264:	4a43      	ldr	r2, [pc, #268]	@ (8007374 <HAL_RCC_GetSysClockFreq+0x188>)
 8007266:	fba0 1202 	umull	r1, r2, r0, r2
 800726a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800726c:	460a      	mov	r2, r1
 800726e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007272:	4413      	add	r3, r2
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007278:	2200      	movs	r2, #0
 800727a:	61bb      	str	r3, [r7, #24]
 800727c:	61fa      	str	r2, [r7, #28]
 800727e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007286:	f7f9 f803 	bl	8000290 <__aeabi_uldivmod>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4613      	mov	r3, r2
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007292:	e053      	b.n	800733c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007294:	4b35      	ldr	r3, [pc, #212]	@ (800736c <HAL_RCC_GetSysClockFreq+0x180>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	099b      	lsrs	r3, r3, #6
 800729a:	2200      	movs	r2, #0
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	617a      	str	r2, [r7, #20]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80072a6:	f04f 0b00 	mov.w	fp, #0
 80072aa:	4652      	mov	r2, sl
 80072ac:	465b      	mov	r3, fp
 80072ae:	f04f 0000 	mov.w	r0, #0
 80072b2:	f04f 0100 	mov.w	r1, #0
 80072b6:	0159      	lsls	r1, r3, #5
 80072b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072bc:	0150      	lsls	r0, r2, #5
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	ebb2 080a 	subs.w	r8, r2, sl
 80072c6:	eb63 090b 	sbc.w	r9, r3, fp
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80072d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80072da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80072de:	ebb2 0408 	subs.w	r4, r2, r8
 80072e2:	eb63 0509 	sbc.w	r5, r3, r9
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	00eb      	lsls	r3, r5, #3
 80072f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072f4:	00e2      	lsls	r2, r4, #3
 80072f6:	4614      	mov	r4, r2
 80072f8:	461d      	mov	r5, r3
 80072fa:	eb14 030a 	adds.w	r3, r4, sl
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	eb45 030b 	adc.w	r3, r5, fp
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007312:	4629      	mov	r1, r5
 8007314:	028b      	lsls	r3, r1, #10
 8007316:	4621      	mov	r1, r4
 8007318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800731c:	4621      	mov	r1, r4
 800731e:	028a      	lsls	r2, r1, #10
 8007320:	4610      	mov	r0, r2
 8007322:	4619      	mov	r1, r3
 8007324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007326:	2200      	movs	r2, #0
 8007328:	60bb      	str	r3, [r7, #8]
 800732a:	60fa      	str	r2, [r7, #12]
 800732c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007330:	f7f8 ffae 	bl	8000290 <__aeabi_uldivmod>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4613      	mov	r3, r2
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800733c:	4b0b      	ldr	r3, [pc, #44]	@ (800736c <HAL_RCC_GetSysClockFreq+0x180>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	0c1b      	lsrs	r3, r3, #16
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	3301      	adds	r3, #1
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800734c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007356:	e002      	b.n	800735e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007358:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <HAL_RCC_GetSysClockFreq+0x184>)
 800735a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800735c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007360:	4618      	mov	r0, r3
 8007362:	3740      	adds	r7, #64	@ 0x40
 8007364:	46bd      	mov	sp, r7
 8007366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800736a:	bf00      	nop
 800736c:	40023800 	.word	0x40023800
 8007370:	00f42400 	.word	0x00f42400
 8007374:	017d7840 	.word	0x017d7840

08007378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800737c:	4b03      	ldr	r3, [pc, #12]	@ (800738c <HAL_RCC_GetHCLKFreq+0x14>)
 800737e:	681b      	ldr	r3, [r3, #0]
}
 8007380:	4618      	mov	r0, r3
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000004 	.word	0x20000004

08007390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e07b      	b.n	800749a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d108      	bne.n	80073bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b2:	d009      	beq.n	80073c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	61da      	str	r2, [r3, #28]
 80073ba:	e005      	b.n	80073c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fa fd12 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007438:	431a      	orrs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744c:	ea42 0103 	orr.w	r1, r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007454:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	f003 0104 	and.w	r1, r3, #4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746e:	f003 0210 	and.w	r2, r3, #16
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b088      	sub	sp, #32
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	603b      	str	r3, [r7, #0]
 80074ae:	4613      	mov	r3, r2
 80074b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074b2:	f7fd fa61 	bl	8004978 <HAL_GetTick>
 80074b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80074b8:	88fb      	ldrh	r3, [r7, #6]
 80074ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d001      	beq.n	80074cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074c8:	2302      	movs	r3, #2
 80074ca:	e12a      	b.n	8007722 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <HAL_SPI_Transmit+0x36>
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e122      	b.n	8007722 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d101      	bne.n	80074ea <HAL_SPI_Transmit+0x48>
 80074e6:	2302      	movs	r3, #2
 80074e8:	e11b      	b.n	8007722 <HAL_SPI_Transmit+0x280>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2203      	movs	r2, #3
 80074f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	88fa      	ldrh	r2, [r7, #6]
 800750a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	88fa      	ldrh	r2, [r7, #6]
 8007510:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007538:	d10f      	bne.n	800755a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007548:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007558:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007564:	2b40      	cmp	r3, #64	@ 0x40
 8007566:	d007      	beq.n	8007578 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007580:	d152      	bne.n	8007628 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_SPI_Transmit+0xee>
 800758a:	8b7b      	ldrh	r3, [r7, #26]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d145      	bne.n	800761c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a0:	1c9a      	adds	r2, r3, #2
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075b4:	e032      	b.n	800761c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d112      	bne.n	80075ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	881a      	ldrh	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d4:	1c9a      	adds	r2, r3, #2
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075e8:	e018      	b.n	800761c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ea:	f7fd f9c5 	bl	8004978 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d803      	bhi.n	8007602 <HAL_SPI_Transmit+0x160>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007600:	d102      	bne.n	8007608 <HAL_SPI_Transmit+0x166>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e082      	b.n	8007722 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1c7      	bne.n	80075b6 <HAL_SPI_Transmit+0x114>
 8007626:	e053      	b.n	80076d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <HAL_SPI_Transmit+0x194>
 8007630:	8b7b      	ldrh	r3, [r7, #26]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d147      	bne.n	80076c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	7812      	ldrb	r2, [r2, #0]
 8007642:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800765c:	e033      	b.n	80076c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b02      	cmp	r3, #2
 800766a:	d113      	bne.n	8007694 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007692:	e018      	b.n	80076c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007694:	f7fd f970 	bl	8004978 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d803      	bhi.n	80076ac <HAL_SPI_Transmit+0x20a>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076aa:	d102      	bne.n	80076b2 <HAL_SPI_Transmit+0x210>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e02d      	b.n	8007722 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1c6      	bne.n	800765e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fd21 	bl	800811c <SPI_EndRxTxTransaction>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007720:	2300      	movs	r3, #0
  }
}
 8007722:	4618      	mov	r0, r3
 8007724:	3720      	adds	r7, #32
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b088      	sub	sp, #32
 800772e:	af02      	add	r7, sp, #8
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	603b      	str	r3, [r7, #0]
 8007736:	4613      	mov	r3, r2
 8007738:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b01      	cmp	r3, #1
 8007744:	d001      	beq.n	800774a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007746:	2302      	movs	r3, #2
 8007748:	e104      	b.n	8007954 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007752:	d112      	bne.n	800777a <HAL_SPI_Receive+0x50>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10e      	bne.n	800777a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2204      	movs	r2, #4
 8007760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	4613      	mov	r3, r2
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	68b9      	ldr	r1, [r7, #8]
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f8f3 	bl	800795c <HAL_SPI_TransmitReceive>
 8007776:	4603      	mov	r3, r0
 8007778:	e0ec      	b.n	8007954 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800777a:	f7fd f8fd 	bl	8004978 <HAL_GetTick>
 800777e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_SPI_Receive+0x62>
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0e1      	b.n	8007954 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007796:	2b01      	cmp	r3, #1
 8007798:	d101      	bne.n	800779e <HAL_SPI_Receive+0x74>
 800779a:	2302      	movs	r3, #2
 800779c:	e0da      	b.n	8007954 <HAL_SPI_Receive+0x22a>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2204      	movs	r2, #4
 80077aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	88fa      	ldrh	r2, [r7, #6]
 80077be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ec:	d10f      	bne.n	800780e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800780c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007818:	2b40      	cmp	r3, #64	@ 0x40
 800781a:	d007      	beq.n	800782c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800782a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d170      	bne.n	8007916 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007834:	e035      	b.n	80078a2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d115      	bne.n	8007870 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f103 020c 	add.w	r2, r3, #12
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800786e:	e018      	b.n	80078a2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007870:	f7fd f882 	bl	8004978 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d803      	bhi.n	8007888 <HAL_SPI_Receive+0x15e>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007886:	d102      	bne.n	800788e <HAL_SPI_Receive+0x164>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e058      	b.n	8007954 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1c4      	bne.n	8007836 <HAL_SPI_Receive+0x10c>
 80078ac:	e038      	b.n	8007920 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d113      	bne.n	80078e4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c6:	b292      	uxth	r2, r2
 80078c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ce:	1c9a      	adds	r2, r3, #2
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078e2:	e018      	b.n	8007916 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078e4:	f7fd f848 	bl	8004978 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d803      	bhi.n	80078fc <HAL_SPI_Receive+0x1d2>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078fa:	d102      	bne.n	8007902 <HAL_SPI_Receive+0x1d8>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e01e      	b.n	8007954 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1c6      	bne.n	80078ae <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 fb93 	bl	8008050 <SPI_EndRxTransaction>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007952:	2300      	movs	r3, #0
  }
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08a      	sub	sp, #40	@ 0x28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800796a:	2301      	movs	r3, #1
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800796e:	f7fd f803 	bl	8004978 <HAL_GetTick>
 8007972:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800797a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007982:	887b      	ldrh	r3, [r7, #2]
 8007984:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007986:	7ffb      	ldrb	r3, [r7, #31]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d00c      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x4a>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007992:	d106      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x46>
 800799c:	7ffb      	ldrb	r3, [r7, #31]
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d001      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80079a2:	2302      	movs	r3, #2
 80079a4:	e17f      	b.n	8007ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_SPI_TransmitReceive+0x5c>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_SPI_TransmitReceive+0x5c>
 80079b2:	887b      	ldrh	r3, [r7, #2]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e174      	b.n	8007ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_SPI_TransmitReceive+0x6e>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e16d      	b.n	8007ca6 <HAL_SPI_TransmitReceive+0x34a>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d003      	beq.n	80079e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2205      	movs	r2, #5
 80079e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	887a      	ldrh	r2, [r7, #2]
 80079f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	887a      	ldrh	r2, [r7, #2]
 80079fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	887a      	ldrh	r2, [r7, #2]
 8007a08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	887a      	ldrh	r2, [r7, #2]
 8007a0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a26:	2b40      	cmp	r3, #64	@ 0x40
 8007a28:	d007      	beq.n	8007a3a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a42:	d17e      	bne.n	8007b42 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_SPI_TransmitReceive+0xf6>
 8007a4c:	8afb      	ldrh	r3, [r7, #22]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d16c      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a56:	881a      	ldrh	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a62:	1c9a      	adds	r2, r3, #2
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a76:	e059      	b.n	8007b2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d11b      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x162>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d016      	beq.n	8007abe <HAL_SPI_TransmitReceive+0x162>
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d113      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9a:	881a      	ldrh	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa6:	1c9a      	adds	r2, r3, #2
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d119      	bne.n	8007b00 <HAL_SPI_TransmitReceive+0x1a4>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d014      	beq.n	8007b00 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68da      	ldr	r2, [r3, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae0:	b292      	uxth	r2, r2
 8007ae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae8:	1c9a      	adds	r2, r3, #2
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007afc:	2301      	movs	r3, #1
 8007afe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b00:	f7fc ff3a 	bl	8004978 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d80d      	bhi.n	8007b2c <HAL_SPI_TransmitReceive+0x1d0>
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b16:	d009      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e0bc      	b.n	8007ca6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1a0      	bne.n	8007a78 <HAL_SPI_TransmitReceive+0x11c>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d19b      	bne.n	8007a78 <HAL_SPI_TransmitReceive+0x11c>
 8007b40:	e082      	b.n	8007c48 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_SPI_TransmitReceive+0x1f4>
 8007b4a:	8afb      	ldrh	r3, [r7, #22]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d171      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b76:	e05d      	b.n	8007c34 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d11c      	bne.n	8007bc0 <HAL_SPI_TransmitReceive+0x264>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d017      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x264>
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d114      	bne.n	8007bc0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	330c      	adds	r3, #12
 8007ba0:	7812      	ldrb	r2, [r2, #0]
 8007ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d119      	bne.n	8007c02 <HAL_SPI_TransmitReceive+0x2a6>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d014      	beq.n	8007c02 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be2:	b2d2      	uxtb	r2, r2
 8007be4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c02:	f7fc feb9 	bl	8004978 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d803      	bhi.n	8007c1a <HAL_SPI_TransmitReceive+0x2be>
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c18:	d102      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x2c4>
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e038      	b.n	8007ca6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d19c      	bne.n	8007b78 <HAL_SPI_TransmitReceive+0x21c>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d197      	bne.n	8007b78 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c48:	6a3a      	ldr	r2, [r7, #32]
 8007c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fa65 	bl	800811c <SPI_EndRxTxTransaction>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d008      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e01d      	b.n	8007ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c72:	2300      	movs	r3, #0
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
  }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3728      	adds	r7, #40	@ 0x28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d001      	beq.n	8007cce <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e097      	b.n	8007dfe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <HAL_SPI_Transmit_DMA+0x2a>
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e08f      	b.n	8007dfe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_SPI_Transmit_DMA+0x3c>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e088      	b.n	8007dfe <HAL_SPI_Transmit_DMA+0x14e>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	88fa      	ldrh	r2, [r7, #6]
 8007d0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	88fa      	ldrh	r2, [r7, #6]
 8007d12:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d3a:	d10f      	bne.n	8007d5c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d60:	4a29      	ldr	r2, [pc, #164]	@ (8007e08 <HAL_SPI_Transmit_DMA+0x158>)
 8007d62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d68:	4a28      	ldr	r2, [pc, #160]	@ (8007e0c <HAL_SPI_Transmit_DMA+0x15c>)
 8007d6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d70:	4a27      	ldr	r2, [pc, #156]	@ (8007e10 <HAL_SPI_Transmit_DMA+0x160>)
 8007d72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d78:	2200      	movs	r2, #0
 8007d7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d84:	4619      	mov	r1, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d92:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d94:	f7fc ffe0 	bl	8004d58 <HAL_DMA_Start_IT>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da2:	f043 0210 	orr.w	r2, r3, #16
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e023      	b.n	8007dfe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc0:	2b40      	cmp	r3, #64	@ 0x40
 8007dc2:	d007      	beq.n	8007dd4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dd2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0220 	orr.w	r2, r2, #32
 8007dea:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0202 	orr.w	r2, r2, #2
 8007dfa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	08007ee5 	.word	0x08007ee5
 8007e0c:	08007e3d 	.word	0x08007e3d
 8007e10:	08007f01 	.word	0x08007f01

08007e14 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e48:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e4a:	f7fc fd95 	bl	8004978 <HAL_GetTick>
 8007e4e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e5e:	d03b      	beq.n	8007ed8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0220 	bic.w	r2, r2, #32
 8007e6e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 0202 	bic.w	r2, r2, #2
 8007e7e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	2164      	movs	r1, #100	@ 0x64
 8007e84:	6978      	ldr	r0, [r7, #20]
 8007e86:	f000 f949 	bl	800811c <SPI_EndRxTxTransaction>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d005      	beq.n	8007e9c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e94:	f043 0220 	orr.w	r2, r3, #32
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ed0:	6978      	ldr	r0, [r7, #20]
 8007ed2:	f7ff ffa9 	bl	8007e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ed6:	e002      	b.n	8007ede <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007ed8:	6978      	ldr	r0, [r7, #20]
 8007eda:	f7fa fab9 	bl	8002450 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff ff8e 	bl	8007e14 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ef8:	bf00      	nop
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0203 	bic.w	r2, r2, #3
 8007f1c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f22:	f043 0210 	orr.w	r2, r3, #16
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff ff78 	bl	8007e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f50:	f7fc fd12 	bl	8004978 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f60:	f7fc fd0a 	bl	8004978 <HAL_GetTick>
 8007f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f66:	4b39      	ldr	r3, [pc, #228]	@ (800804c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	015b      	lsls	r3, r3, #5
 8007f6c:	0d1b      	lsrs	r3, r3, #20
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f76:	e054      	b.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f7e:	d050      	beq.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f80:	f7fc fcfa 	bl	8004978 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d902      	bls.n	8007f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d13d      	bne.n	8008012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fae:	d111      	bne.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fb8:	d004      	beq.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc2:	d107      	bne.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fdc:	d10f      	bne.n	8007ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e017      	b.n	8008042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3b01      	subs	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4013      	ands	r3, r2
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	bf0c      	ite	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	2300      	movne	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	461a      	mov	r2, r3
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	429a      	cmp	r2, r3
 800803e:	d19b      	bne.n	8007f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000004 	.word	0x20000004

08008050 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008064:	d111      	bne.n	800808a <SPI_EndRxTransaction+0x3a>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800806e:	d004      	beq.n	800807a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008078:	d107      	bne.n	800808a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008088:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008092:	d12a      	bne.n	80080ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800809c:	d012      	beq.n	80080c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2200      	movs	r2, #0
 80080a6:	2180      	movs	r1, #128	@ 0x80
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff ff49 	bl	8007f40 <SPI_WaitFlagStateUntilTimeout>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d02d      	beq.n	8008110 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b8:	f043 0220 	orr.w	r2, r3, #32
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e026      	b.n	8008112 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2200      	movs	r2, #0
 80080cc:	2101      	movs	r1, #1
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7ff ff36 	bl	8007f40 <SPI_WaitFlagStateUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01a      	beq.n	8008110 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080de:	f043 0220 	orr.w	r2, r3, #32
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e013      	b.n	8008112 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2200      	movs	r2, #0
 80080f2:	2101      	movs	r1, #1
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff ff23 	bl	8007f40 <SPI_WaitFlagStateUntilTimeout>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d007      	beq.n	8008110 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008104:	f043 0220 	orr.w	r2, r3, #32
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e000      	b.n	8008112 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af02      	add	r7, sp, #8
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2201      	movs	r2, #1
 8008130:	2102      	movs	r1, #2
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff ff04 	bl	8007f40 <SPI_WaitFlagStateUntilTimeout>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d007      	beq.n	800814e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008142:	f043 0220 	orr.w	r2, r3, #32
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e032      	b.n	80081b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800814e:	4b1b      	ldr	r3, [pc, #108]	@ (80081bc <SPI_EndRxTxTransaction+0xa0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1b      	ldr	r2, [pc, #108]	@ (80081c0 <SPI_EndRxTxTransaction+0xa4>)
 8008154:	fba2 2303 	umull	r2, r3, r2, r3
 8008158:	0d5b      	lsrs	r3, r3, #21
 800815a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800815e:	fb02 f303 	mul.w	r3, r2, r3
 8008162:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800816c:	d112      	bne.n	8008194 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	2180      	movs	r1, #128	@ 0x80
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f7ff fee1 	bl	8007f40 <SPI_WaitFlagStateUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d016      	beq.n	80081b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008188:	f043 0220 	orr.w	r2, r3, #32
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e00f      	b.n	80081b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	3b01      	subs	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081aa:	2b80      	cmp	r3, #128	@ 0x80
 80081ac:	d0f2      	beq.n	8008194 <SPI_EndRxTxTransaction+0x78>
 80081ae:	e000      	b.n	80081b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80081b0:	bf00      	nop
  }

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000004 	.word	0x20000004
 80081c0:	165e9f81 	.word	0x165e9f81

080081c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e041      	b.n	800825a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fa f868 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f000 fd6a 	bl	8008cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e041      	b.n	80082f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f839 	bl	8008300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3304      	adds	r3, #4
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f000 fd1b 	bl	8008cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d109      	bne.n	8008340 <HAL_TIM_PWM_Start_DMA+0x2c>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b02      	cmp	r3, #2
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	e022      	b.n	8008386 <HAL_TIM_PWM_Start_DMA+0x72>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b04      	cmp	r3, #4
 8008344:	d109      	bne.n	800835a <HAL_TIM_PWM_Start_DMA+0x46>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	bf0c      	ite	eq
 8008352:	2301      	moveq	r3, #1
 8008354:	2300      	movne	r3, #0
 8008356:	b2db      	uxtb	r3, r3
 8008358:	e015      	b.n	8008386 <HAL_TIM_PWM_Start_DMA+0x72>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b08      	cmp	r3, #8
 800835e:	d109      	bne.n	8008374 <HAL_TIM_PWM_Start_DMA+0x60>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	bf0c      	ite	eq
 800836c:	2301      	moveq	r3, #1
 800836e:	2300      	movne	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	e008      	b.n	8008386 <HAL_TIM_PWM_Start_DMA+0x72>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	bf0c      	ite	eq
 8008380:	2301      	moveq	r3, #1
 8008382:	2300      	movne	r3, #0
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800838a:	2302      	movs	r3, #2
 800838c:	e15d      	b.n	800864a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b01      	cmp	r3, #1
 800839e:	bf0c      	ite	eq
 80083a0:	2301      	moveq	r3, #1
 80083a2:	2300      	movne	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	e022      	b.n	80083ee <HAL_TIM_PWM_Start_DMA+0xda>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d109      	bne.n	80083c2 <HAL_TIM_PWM_Start_DMA+0xae>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	e015      	b.n	80083ee <HAL_TIM_PWM_Start_DMA+0xda>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d109      	bne.n	80083dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	bf0c      	ite	eq
 80083d4:	2301      	moveq	r3, #1
 80083d6:	2300      	movne	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	e008      	b.n	80083ee <HAL_TIM_PWM_Start_DMA+0xda>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	bf0c      	ite	eq
 80083e8:	2301      	moveq	r3, #1
 80083ea:	2300      	movne	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d024      	beq.n	800843c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <HAL_TIM_PWM_Start_DMA+0xea>
 80083f8:	887b      	ldrh	r3, [r7, #2]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e123      	b.n	800864a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008410:	e016      	b.n	8008440 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b04      	cmp	r3, #4
 8008416:	d104      	bne.n	8008422 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008420:	e00e      	b.n	8008440 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b08      	cmp	r3, #8
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008430:	e006      	b.n	8008440 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800843a:	e001      	b.n	8008440 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e104      	b.n	800864a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b0c      	cmp	r3, #12
 8008444:	f200 80ae 	bhi.w	80085a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8008448:	a201      	add	r2, pc, #4	@ (adr r2, 8008450 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	08008485 	.word	0x08008485
 8008454:	080085a5 	.word	0x080085a5
 8008458:	080085a5 	.word	0x080085a5
 800845c:	080085a5 	.word	0x080085a5
 8008460:	080084cd 	.word	0x080084cd
 8008464:	080085a5 	.word	0x080085a5
 8008468:	080085a5 	.word	0x080085a5
 800846c:	080085a5 	.word	0x080085a5
 8008470:	08008515 	.word	0x08008515
 8008474:	080085a5 	.word	0x080085a5
 8008478:	080085a5 	.word	0x080085a5
 800847c:	080085a5 	.word	0x080085a5
 8008480:	0800855d 	.word	0x0800855d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	4a72      	ldr	r2, [pc, #456]	@ (8008654 <HAL_TIM_PWM_Start_DMA+0x340>)
 800848a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008490:	4a71      	ldr	r2, [pc, #452]	@ (8008658 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008492:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	4a70      	ldr	r2, [pc, #448]	@ (800865c <HAL_TIM_PWM_Start_DMA+0x348>)
 800849a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3334      	adds	r3, #52	@ 0x34
 80084a8:	461a      	mov	r2, r3
 80084aa:	887b      	ldrh	r3, [r7, #2]
 80084ac:	f7fc fc54 	bl	8004d58 <HAL_DMA_Start_IT>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e0c7      	b.n	800864a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084c8:	60da      	str	r2, [r3, #12]
      break;
 80084ca:	e06e      	b.n	80085aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d0:	4a60      	ldr	r2, [pc, #384]	@ (8008654 <HAL_TIM_PWM_Start_DMA+0x340>)
 80084d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d8:	4a5f      	ldr	r2, [pc, #380]	@ (8008658 <HAL_TIM_PWM_Start_DMA+0x344>)
 80084da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e0:	4a5e      	ldr	r2, [pc, #376]	@ (800865c <HAL_TIM_PWM_Start_DMA+0x348>)
 80084e2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3338      	adds	r3, #56	@ 0x38
 80084f0:	461a      	mov	r2, r3
 80084f2:	887b      	ldrh	r3, [r7, #2]
 80084f4:	f7fc fc30 	bl	8004d58 <HAL_DMA_Start_IT>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e0a3      	b.n	800864a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008510:	60da      	str	r2, [r3, #12]
      break;
 8008512:	e04a      	b.n	80085aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008518:	4a4e      	ldr	r2, [pc, #312]	@ (8008654 <HAL_TIM_PWM_Start_DMA+0x340>)
 800851a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	4a4d      	ldr	r2, [pc, #308]	@ (8008658 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008522:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	4a4c      	ldr	r2, [pc, #304]	@ (800865c <HAL_TIM_PWM_Start_DMA+0x348>)
 800852a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	333c      	adds	r3, #60	@ 0x3c
 8008538:	461a      	mov	r2, r3
 800853a:	887b      	ldrh	r3, [r7, #2]
 800853c:	f7fc fc0c 	bl	8004d58 <HAL_DMA_Start_IT>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e07f      	b.n	800864a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008558:	60da      	str	r2, [r3, #12]
      break;
 800855a:	e026      	b.n	80085aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008560:	4a3c      	ldr	r2, [pc, #240]	@ (8008654 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008562:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008568:	4a3b      	ldr	r2, [pc, #236]	@ (8008658 <HAL_TIM_PWM_Start_DMA+0x344>)
 800856a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008570:	4a3a      	ldr	r2, [pc, #232]	@ (800865c <HAL_TIM_PWM_Start_DMA+0x348>)
 8008572:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3340      	adds	r3, #64	@ 0x40
 8008580:	461a      	mov	r2, r3
 8008582:	887b      	ldrh	r3, [r7, #2]
 8008584:	f7fc fbe8 	bl	8004d58 <HAL_DMA_Start_IT>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e05b      	b.n	800864a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80085a0:	60da      	str	r2, [r3, #12]
      break;
 80085a2:	e002      	b.n	80085aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	75fb      	strb	r3, [r7, #23]
      break;
 80085a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d14b      	bne.n	8008648 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2201      	movs	r2, #1
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fe41 	bl	8009240 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a27      	ldr	r2, [pc, #156]	@ (8008660 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d107      	bne.n	80085d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80085d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a20      	ldr	r2, [pc, #128]	@ (8008660 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d018      	beq.n	8008614 <HAL_TIM_PWM_Start_DMA+0x300>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ea:	d013      	beq.n	8008614 <HAL_TIM_PWM_Start_DMA+0x300>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008664 <HAL_TIM_PWM_Start_DMA+0x350>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00e      	beq.n	8008614 <HAL_TIM_PWM_Start_DMA+0x300>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008668 <HAL_TIM_PWM_Start_DMA+0x354>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_TIM_PWM_Start_DMA+0x300>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a19      	ldr	r2, [pc, #100]	@ (800866c <HAL_TIM_PWM_Start_DMA+0x358>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_TIM_PWM_Start_DMA+0x300>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a18      	ldr	r2, [pc, #96]	@ (8008670 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d111      	bne.n	8008638 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	2b06      	cmp	r3, #6
 8008624:	d010      	beq.n	8008648 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f042 0201 	orr.w	r2, r2, #1
 8008634:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008636:	e007      	b.n	8008648 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f042 0201 	orr.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	08008bcd 	.word	0x08008bcd
 8008658:	08008c75 	.word	0x08008c75
 800865c:	08008b3b 	.word	0x08008b3b
 8008660:	40010000 	.word	0x40010000
 8008664:	40000400 	.word	0x40000400
 8008668:	40000800 	.word	0x40000800
 800866c:	40000c00 	.word	0x40000c00
 8008670:	40014000 	.word	0x40014000

08008674 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b0c      	cmp	r3, #12
 8008686:	d855      	bhi.n	8008734 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008688:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868e:	bf00      	nop
 8008690:	080086c5 	.word	0x080086c5
 8008694:	08008735 	.word	0x08008735
 8008698:	08008735 	.word	0x08008735
 800869c:	08008735 	.word	0x08008735
 80086a0:	080086e1 	.word	0x080086e1
 80086a4:	08008735 	.word	0x08008735
 80086a8:	08008735 	.word	0x08008735
 80086ac:	08008735 	.word	0x08008735
 80086b0:	080086fd 	.word	0x080086fd
 80086b4:	08008735 	.word	0x08008735
 80086b8:	08008735 	.word	0x08008735
 80086bc:	08008735 	.word	0x08008735
 80086c0:	08008719 	.word	0x08008719
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80086d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fc fb95 	bl	8004e08 <HAL_DMA_Abort_IT>
      break;
 80086de:	e02c      	b.n	800873a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fc fb87 	bl	8004e08 <HAL_DMA_Abort_IT>
      break;
 80086fa:	e01e      	b.n	800873a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800870a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008710:	4618      	mov	r0, r3
 8008712:	f7fc fb79 	bl	8004e08 <HAL_DMA_Abort_IT>
      break;
 8008716:	e010      	b.n	800873a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008726:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872c:	4618      	mov	r0, r3
 800872e:	f7fc fb6b 	bl	8004e08 <HAL_DMA_Abort_IT>
      break;
 8008732:	e002      	b.n	800873a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
      break;
 8008738:	bf00      	nop
  }

  if (status == HAL_OK)
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d157      	bne.n	80087f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2200      	movs	r2, #0
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fd79 	bl	8009240 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a2a      	ldr	r2, [pc, #168]	@ (80087fc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d117      	bne.n	8008788 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6a1a      	ldr	r2, [r3, #32]
 800875e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008762:	4013      	ands	r3, r2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10f      	bne.n	8008788 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6a1a      	ldr	r2, [r3, #32]
 800876e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008772:	4013      	ands	r3, r2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d107      	bne.n	8008788 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008786:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6a1a      	ldr	r2, [r3, #32]
 800878e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008792:	4013      	ands	r3, r2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10f      	bne.n	80087b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	f240 4344 	movw	r3, #1092	@ 0x444
 80087a2:	4013      	ands	r3, r2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d107      	bne.n	80087b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0201 	bic.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d104      	bne.n	80087c8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087c6:	e013      	b.n	80087f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	d104      	bne.n	80087d8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087d6:	e00b      	b.n	80087f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b08      	cmp	r3, #8
 80087dc:	d104      	bne.n	80087e8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087e6:	e003      	b.n	80087f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	40010000 	.word	0x40010000

08008800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800881a:	2302      	movs	r3, #2
 800881c:	e0ae      	b.n	800897c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b0c      	cmp	r3, #12
 800882a:	f200 809f 	bhi.w	800896c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800882e:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	08008869 	.word	0x08008869
 8008838:	0800896d 	.word	0x0800896d
 800883c:	0800896d 	.word	0x0800896d
 8008840:	0800896d 	.word	0x0800896d
 8008844:	080088a9 	.word	0x080088a9
 8008848:	0800896d 	.word	0x0800896d
 800884c:	0800896d 	.word	0x0800896d
 8008850:	0800896d 	.word	0x0800896d
 8008854:	080088eb 	.word	0x080088eb
 8008858:	0800896d 	.word	0x0800896d
 800885c:	0800896d 	.word	0x0800896d
 8008860:	0800896d 	.word	0x0800896d
 8008864:	0800892b 	.word	0x0800892b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fac0 	bl	8008df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0208 	orr.w	r2, r2, #8
 8008882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0204 	bic.w	r2, r2, #4
 8008892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6999      	ldr	r1, [r3, #24]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	691a      	ldr	r2, [r3, #16]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	619a      	str	r2, [r3, #24]
      break;
 80088a6:	e064      	b.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68b9      	ldr	r1, [r7, #8]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fb06 	bl	8008ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6999      	ldr	r1, [r3, #24]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	021a      	lsls	r2, r3, #8
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	619a      	str	r2, [r3, #24]
      break;
 80088e8:	e043      	b.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fb51 	bl	8008f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0208 	orr.w	r2, r2, #8
 8008904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0204 	bic.w	r2, r2, #4
 8008914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69d9      	ldr	r1, [r3, #28]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	61da      	str	r2, [r3, #28]
      break;
 8008928:	e023      	b.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fb9b 	bl	800906c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69da      	ldr	r2, [r3, #28]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69da      	ldr	r2, [r3, #28]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69d9      	ldr	r1, [r3, #28]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	021a      	lsls	r2, r3, #8
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	61da      	str	r2, [r3, #28]
      break;
 800896a:	e002      	b.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	75fb      	strb	r3, [r7, #23]
      break;
 8008970:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_TIM_ConfigClockSource+0x1c>
 800899c:	2302      	movs	r3, #2
 800899e:	e0b4      	b.n	8008b0a <HAL_TIM_ConfigClockSource+0x186>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80089be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d8:	d03e      	beq.n	8008a58 <HAL_TIM_ConfigClockSource+0xd4>
 80089da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089de:	f200 8087 	bhi.w	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
 80089e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089e6:	f000 8086 	beq.w	8008af6 <HAL_TIM_ConfigClockSource+0x172>
 80089ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ee:	d87f      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
 80089f0:	2b70      	cmp	r3, #112	@ 0x70
 80089f2:	d01a      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0xa6>
 80089f4:	2b70      	cmp	r3, #112	@ 0x70
 80089f6:	d87b      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
 80089f8:	2b60      	cmp	r3, #96	@ 0x60
 80089fa:	d050      	beq.n	8008a9e <HAL_TIM_ConfigClockSource+0x11a>
 80089fc:	2b60      	cmp	r3, #96	@ 0x60
 80089fe:	d877      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
 8008a00:	2b50      	cmp	r3, #80	@ 0x50
 8008a02:	d03c      	beq.n	8008a7e <HAL_TIM_ConfigClockSource+0xfa>
 8008a04:	2b50      	cmp	r3, #80	@ 0x50
 8008a06:	d873      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
 8008a08:	2b40      	cmp	r3, #64	@ 0x40
 8008a0a:	d058      	beq.n	8008abe <HAL_TIM_ConfigClockSource+0x13a>
 8008a0c:	2b40      	cmp	r3, #64	@ 0x40
 8008a0e:	d86f      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
 8008a10:	2b30      	cmp	r3, #48	@ 0x30
 8008a12:	d064      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x15a>
 8008a14:	2b30      	cmp	r3, #48	@ 0x30
 8008a16:	d86b      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	d060      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x15a>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d867      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d05c      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x15a>
 8008a24:	2b10      	cmp	r3, #16
 8008a26:	d05a      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x15a>
 8008a28:	e062      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a3a:	f000 fbe1 	bl	8009200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	609a      	str	r2, [r3, #8]
      break;
 8008a56:	e04f      	b.n	8008af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a68:	f000 fbca 	bl	8009200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a7a:	609a      	str	r2, [r3, #8]
      break;
 8008a7c:	e03c      	b.n	8008af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f000 fb3e 	bl	800910c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2150      	movs	r1, #80	@ 0x50
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fb97 	bl	80091ca <TIM_ITRx_SetConfig>
      break;
 8008a9c:	e02c      	b.n	8008af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f000 fb5d 	bl	800916a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2160      	movs	r1, #96	@ 0x60
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fb87 	bl	80091ca <TIM_ITRx_SetConfig>
      break;
 8008abc:	e01c      	b.n	8008af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aca:	461a      	mov	r2, r3
 8008acc:	f000 fb1e 	bl	800910c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2140      	movs	r1, #64	@ 0x40
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fb77 	bl	80091ca <TIM_ITRx_SetConfig>
      break;
 8008adc:	e00c      	b.n	8008af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f000 fb6e 	bl	80091ca <TIM_ITRx_SetConfig>
      break;
 8008aee:	e003      	b.n	8008af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
      break;
 8008af4:	e000      	b.n	8008af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b46:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d107      	bne.n	8008b62 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b60:	e02a      	b.n	8008bb8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d107      	bne.n	8008b7c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b7a:	e01d      	b.n	8008bb8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d107      	bne.n	8008b96 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2204      	movs	r2, #4
 8008b8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b94:	e010      	b.n	8008bb8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d107      	bne.n	8008bb0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2208      	movs	r2, #8
 8008ba4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bae:	e003      	b.n	8008bb8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7ff ffb4 	bl	8008b26 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	771a      	strb	r2, [r3, #28]
}
 8008bc4:	bf00      	nop
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d10b      	bne.n	8008bfc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d136      	bne.n	8008c60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bfa:	e031      	b.n	8008c60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d10b      	bne.n	8008c1e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d125      	bne.n	8008c60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c1c:	e020      	b.n	8008c60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d10b      	bne.n	8008c40 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d114      	bne.n	8008c60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c3e:	e00f      	b.n	8008c60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d10a      	bne.n	8008c60 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f7f8 ff21 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d103      	bne.n	8008c94 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	771a      	strb	r2, [r3, #28]
 8008c92:	e019      	b.n	8008cc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d103      	bne.n	8008ca6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	771a      	strb	r2, [r3, #28]
 8008ca4:	e010      	b.n	8008cc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d103      	bne.n	8008cb8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	771a      	strb	r2, [r3, #28]
 8008cb6:	e007      	b.n	8008cc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d102      	bne.n	8008cc8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2208      	movs	r2, #8
 8008cc6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7ff ff22 	bl	8008b12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	771a      	strb	r2, [r3, #28]
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a3a      	ldr	r2, [pc, #232]	@ (8008dd8 <TIM_Base_SetConfig+0xfc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00f      	beq.n	8008d14 <TIM_Base_SetConfig+0x38>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cfa:	d00b      	beq.n	8008d14 <TIM_Base_SetConfig+0x38>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a37      	ldr	r2, [pc, #220]	@ (8008ddc <TIM_Base_SetConfig+0x100>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d007      	beq.n	8008d14 <TIM_Base_SetConfig+0x38>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a36      	ldr	r2, [pc, #216]	@ (8008de0 <TIM_Base_SetConfig+0x104>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_Base_SetConfig+0x38>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a35      	ldr	r2, [pc, #212]	@ (8008de4 <TIM_Base_SetConfig+0x108>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d108      	bne.n	8008d26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a2b      	ldr	r2, [pc, #172]	@ (8008dd8 <TIM_Base_SetConfig+0xfc>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d01b      	beq.n	8008d66 <TIM_Base_SetConfig+0x8a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d34:	d017      	beq.n	8008d66 <TIM_Base_SetConfig+0x8a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a28      	ldr	r2, [pc, #160]	@ (8008ddc <TIM_Base_SetConfig+0x100>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <TIM_Base_SetConfig+0x8a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a27      	ldr	r2, [pc, #156]	@ (8008de0 <TIM_Base_SetConfig+0x104>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00f      	beq.n	8008d66 <TIM_Base_SetConfig+0x8a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a26      	ldr	r2, [pc, #152]	@ (8008de4 <TIM_Base_SetConfig+0x108>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00b      	beq.n	8008d66 <TIM_Base_SetConfig+0x8a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a25      	ldr	r2, [pc, #148]	@ (8008de8 <TIM_Base_SetConfig+0x10c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d007      	beq.n	8008d66 <TIM_Base_SetConfig+0x8a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a24      	ldr	r2, [pc, #144]	@ (8008dec <TIM_Base_SetConfig+0x110>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <TIM_Base_SetConfig+0x8a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a23      	ldr	r2, [pc, #140]	@ (8008df0 <TIM_Base_SetConfig+0x114>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d108      	bne.n	8008d78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd8 <TIM_Base_SetConfig+0xfc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d103      	bne.n	8008dac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d105      	bne.n	8008dca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f023 0201 	bic.w	r2, r3, #1
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	611a      	str	r2, [r3, #16]
  }
}
 8008dca:	bf00      	nop
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40010000 	.word	0x40010000
 8008ddc:	40000400 	.word	0x40000400
 8008de0:	40000800 	.word	0x40000800
 8008de4:	40000c00 	.word	0x40000c00
 8008de8:	40014000 	.word	0x40014000
 8008dec:	40014400 	.word	0x40014400
 8008df0:	40014800 	.word	0x40014800

08008df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	f023 0201 	bic.w	r2, r3, #1
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 0303 	bic.w	r3, r3, #3
 8008e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f023 0302 	bic.w	r3, r3, #2
 8008e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ebc <TIM_OC1_SetConfig+0xc8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d10c      	bne.n	8008e6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f023 0308 	bic.w	r3, r3, #8
 8008e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f023 0304 	bic.w	r3, r3, #4
 8008e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a13      	ldr	r2, [pc, #76]	@ (8008ebc <TIM_OC1_SetConfig+0xc8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d111      	bne.n	8008e96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	621a      	str	r2, [r3, #32]
}
 8008eb0:	bf00      	nop
 8008eb2:	371c      	adds	r7, #28
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	40010000 	.word	0x40010000

08008ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	f023 0210 	bic.w	r2, r3, #16
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	021b      	lsls	r3, r3, #8
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f023 0320 	bic.w	r3, r3, #32
 8008f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f94 <TIM_OC2_SetConfig+0xd4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d10d      	bne.n	8008f3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a15      	ldr	r2, [pc, #84]	@ (8008f94 <TIM_OC2_SetConfig+0xd4>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d113      	bne.n	8008f6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	621a      	str	r2, [r3, #32]
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	40010000 	.word	0x40010000

08008f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 0303 	bic.w	r3, r3, #3
 8008fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8009068 <TIM_OC3_SetConfig+0xd0>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d10d      	bne.n	8009012 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a14      	ldr	r2, [pc, #80]	@ (8009068 <TIM_OC3_SetConfig+0xd0>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d113      	bne.n	8009042 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4313      	orrs	r3, r2
 8009034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	621a      	str	r2, [r3, #32]
}
 800905c:	bf00      	nop
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	40010000 	.word	0x40010000

0800906c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800909a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	031b      	lsls	r3, r3, #12
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a10      	ldr	r2, [pc, #64]	@ (8009108 <TIM_OC4_SetConfig+0x9c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d109      	bne.n	80090e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	019b      	lsls	r3, r3, #6
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	4313      	orrs	r3, r2
 80090de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	621a      	str	r2, [r3, #32]
}
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	40010000 	.word	0x40010000

0800910c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	f023 0201 	bic.w	r2, r3, #1
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4313      	orrs	r3, r2
 8009140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f023 030a 	bic.w	r3, r3, #10
 8009148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4313      	orrs	r3, r2
 8009150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	621a      	str	r2, [r3, #32]
}
 800915e:	bf00      	nop
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800916a:	b480      	push	{r7}
 800916c:	b087      	sub	sp, #28
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	f023 0210 	bic.w	r2, r3, #16
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	031b      	lsls	r3, r3, #12
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	4313      	orrs	r3, r2
 800919e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80091a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	621a      	str	r2, [r3, #32]
}
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f043 0307 	orr.w	r3, r3, #7
 80091ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	609a      	str	r2, [r3, #8]
}
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800921a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	021a      	lsls	r2, r3, #8
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	431a      	orrs	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	4313      	orrs	r3, r2
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	609a      	str	r2, [r3, #8]
}
 8009234:	bf00      	nop
 8009236:	371c      	adds	r7, #28
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009240:	b480      	push	{r7}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f003 031f 	and.w	r3, r3, #31
 8009252:	2201      	movs	r2, #1
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a1a      	ldr	r2, [r3, #32]
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	43db      	mvns	r3, r3
 8009262:	401a      	ands	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a1a      	ldr	r2, [r3, #32]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	fa01 f303 	lsl.w	r3, r1, r3
 8009278:	431a      	orrs	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e050      	b.n	8009346 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d018      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092f0:	d013      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a18      	ldr	r2, [pc, #96]	@ (8009358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00e      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a16      	ldr	r2, [pc, #88]	@ (800935c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d009      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a15      	ldr	r2, [pc, #84]	@ (8009360 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d004      	beq.n	800931a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a13      	ldr	r2, [pc, #76]	@ (8009364 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d10c      	bne.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	4313      	orrs	r3, r2
 800932a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	40010000 	.word	0x40010000
 8009358:	40000400 	.word	0x40000400
 800935c:	40000800 	.word	0x40000800
 8009360:	40000c00 	.word	0x40000c00
 8009364:	40014000 	.word	0x40014000

08009368 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009368:	b084      	sub	sp, #16
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	f107 001c 	add.w	r0, r7, #28
 8009376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800937a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800937e:	2b01      	cmp	r3, #1
 8009380:	d123      	bne.n	80093ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009386:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d105      	bne.n	80093be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 fae8 	bl	800a994 <USB_CoreReset>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73fb      	strb	r3, [r7, #15]
 80093c8:	e01b      	b.n	8009402 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fadc 	bl	800a994 <USB_CoreReset>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d106      	bne.n	80093f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80093f4:	e005      	b.n	8009402 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009402:	7fbb      	ldrb	r3, [r7, #30]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d10b      	bne.n	8009420 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f043 0206 	orr.w	r2, r3, #6
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f043 0220 	orr.w	r2, r3, #32
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009420:	7bfb      	ldrb	r3, [r7, #15]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800942c:	b004      	add	sp, #16
 800942e:	4770      	bx	lr

08009430 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	4613      	mov	r3, r2
 800943c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d165      	bne.n	8009510 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	4a41      	ldr	r2, [pc, #260]	@ (800954c <USB_SetTurnaroundTime+0x11c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d906      	bls.n	800945a <USB_SetTurnaroundTime+0x2a>
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4a40      	ldr	r2, [pc, #256]	@ (8009550 <USB_SetTurnaroundTime+0x120>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d202      	bcs.n	800945a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009454:	230f      	movs	r3, #15
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e062      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	4a3c      	ldr	r2, [pc, #240]	@ (8009550 <USB_SetTurnaroundTime+0x120>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d306      	bcc.n	8009470 <USB_SetTurnaroundTime+0x40>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	4a3b      	ldr	r2, [pc, #236]	@ (8009554 <USB_SetTurnaroundTime+0x124>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d202      	bcs.n	8009470 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800946a:	230e      	movs	r3, #14
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	e057      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	4a38      	ldr	r2, [pc, #224]	@ (8009554 <USB_SetTurnaroundTime+0x124>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d306      	bcc.n	8009486 <USB_SetTurnaroundTime+0x56>
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	4a37      	ldr	r2, [pc, #220]	@ (8009558 <USB_SetTurnaroundTime+0x128>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d202      	bcs.n	8009486 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009480:	230d      	movs	r3, #13
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	e04c      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	4a33      	ldr	r2, [pc, #204]	@ (8009558 <USB_SetTurnaroundTime+0x128>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d306      	bcc.n	800949c <USB_SetTurnaroundTime+0x6c>
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	4a32      	ldr	r2, [pc, #200]	@ (800955c <USB_SetTurnaroundTime+0x12c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d802      	bhi.n	800949c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009496:	230c      	movs	r3, #12
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	e041      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	4a2f      	ldr	r2, [pc, #188]	@ (800955c <USB_SetTurnaroundTime+0x12c>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d906      	bls.n	80094b2 <USB_SetTurnaroundTime+0x82>
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	4a2e      	ldr	r2, [pc, #184]	@ (8009560 <USB_SetTurnaroundTime+0x130>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d802      	bhi.n	80094b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80094ac:	230b      	movs	r3, #11
 80094ae:	617b      	str	r3, [r7, #20]
 80094b0:	e036      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	4a2a      	ldr	r2, [pc, #168]	@ (8009560 <USB_SetTurnaroundTime+0x130>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d906      	bls.n	80094c8 <USB_SetTurnaroundTime+0x98>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	4a29      	ldr	r2, [pc, #164]	@ (8009564 <USB_SetTurnaroundTime+0x134>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d802      	bhi.n	80094c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80094c2:	230a      	movs	r3, #10
 80094c4:	617b      	str	r3, [r7, #20]
 80094c6:	e02b      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	4a26      	ldr	r2, [pc, #152]	@ (8009564 <USB_SetTurnaroundTime+0x134>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d906      	bls.n	80094de <USB_SetTurnaroundTime+0xae>
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4a25      	ldr	r2, [pc, #148]	@ (8009568 <USB_SetTurnaroundTime+0x138>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d202      	bcs.n	80094de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80094d8:	2309      	movs	r3, #9
 80094da:	617b      	str	r3, [r7, #20]
 80094dc:	e020      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	4a21      	ldr	r2, [pc, #132]	@ (8009568 <USB_SetTurnaroundTime+0x138>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d306      	bcc.n	80094f4 <USB_SetTurnaroundTime+0xc4>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	4a20      	ldr	r2, [pc, #128]	@ (800956c <USB_SetTurnaroundTime+0x13c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d802      	bhi.n	80094f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80094ee:	2308      	movs	r3, #8
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	e015      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	4a1d      	ldr	r2, [pc, #116]	@ (800956c <USB_SetTurnaroundTime+0x13c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d906      	bls.n	800950a <USB_SetTurnaroundTime+0xda>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009570 <USB_SetTurnaroundTime+0x140>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d202      	bcs.n	800950a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009504:	2307      	movs	r3, #7
 8009506:	617b      	str	r3, [r7, #20]
 8009508:	e00a      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800950a:	2306      	movs	r3, #6
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	e007      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d102      	bne.n	800951c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009516:	2309      	movs	r3, #9
 8009518:	617b      	str	r3, [r7, #20]
 800951a:	e001      	b.n	8009520 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800951c:	2309      	movs	r3, #9
 800951e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	029b      	lsls	r3, r3, #10
 8009534:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009538:	431a      	orrs	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	371c      	adds	r7, #28
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	00d8acbf 	.word	0x00d8acbf
 8009550:	00e4e1c0 	.word	0x00e4e1c0
 8009554:	00f42400 	.word	0x00f42400
 8009558:	01067380 	.word	0x01067380
 800955c:	011a499f 	.word	0x011a499f
 8009560:	01312cff 	.word	0x01312cff
 8009564:	014ca43f 	.word	0x014ca43f
 8009568:	016e3600 	.word	0x016e3600
 800956c:	01a6ab1f 	.word	0x01a6ab1f
 8009570:	01e84800 	.word	0x01e84800

08009574 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f043 0201 	orr.w	r2, r3, #1
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f023 0201 	bic.w	r2, r3, #1
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d115      	bne.n	8009606 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80095e6:	200a      	movs	r0, #10
 80095e8:	f7fb f9d2 	bl	8004990 <HAL_Delay>
      ms += 10U;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	330a      	adds	r3, #10
 80095f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 f93f 	bl	800a876 <USB_GetMode>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d01e      	beq.n	800963c <USB_SetCurrentMode+0x84>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2bc7      	cmp	r3, #199	@ 0xc7
 8009602:	d9f0      	bls.n	80095e6 <USB_SetCurrentMode+0x2e>
 8009604:	e01a      	b.n	800963c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d115      	bne.n	8009638 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009618:	200a      	movs	r0, #10
 800961a:	f7fb f9b9 	bl	8004990 <HAL_Delay>
      ms += 10U;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	330a      	adds	r3, #10
 8009622:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 f926 	bl	800a876 <USB_GetMode>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <USB_SetCurrentMode+0x84>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2bc7      	cmp	r3, #199	@ 0xc7
 8009634:	d9f0      	bls.n	8009618 <USB_SetCurrentMode+0x60>
 8009636:	e001      	b.n	800963c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e005      	b.n	8009648 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009640:	d101      	bne.n	8009646 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e000      	b.n	8009648 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009650:	b084      	sub	sp, #16
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800965e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800966a:	2300      	movs	r3, #0
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	e009      	b.n	8009684 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	3340      	adds	r3, #64	@ 0x40
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	2200      	movs	r2, #0
 800967c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	3301      	adds	r3, #1
 8009682:	613b      	str	r3, [r7, #16]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2b0e      	cmp	r3, #14
 8009688:	d9f2      	bls.n	8009670 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800968a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800968e:	2b00      	cmp	r3, #0
 8009690:	d11c      	bne.n	80096cc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096a0:	f043 0302 	orr.w	r3, r3, #2
 80096a4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80096ca:	e00b      	b.n	80096e4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096ea:	461a      	mov	r2, r3
 80096ec:	2300      	movs	r3, #0
 80096ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d10d      	bne.n	8009714 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009700:	2100      	movs	r1, #0
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f968 	bl	80099d8 <USB_SetDevSpeed>
 8009708:	e008      	b.n	800971c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800970a:	2101      	movs	r1, #1
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f963 	bl	80099d8 <USB_SetDevSpeed>
 8009712:	e003      	b.n	800971c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009714:	2103      	movs	r1, #3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f95e 	bl	80099d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800971c:	2110      	movs	r1, #16
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f8fa 	bl	8009918 <USB_FlushTxFifo>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f924 	bl	800997c <USB_FlushRxFifo>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009744:	461a      	mov	r2, r3
 8009746:	2300      	movs	r3, #0
 8009748:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009750:	461a      	mov	r2, r3
 8009752:	2300      	movs	r3, #0
 8009754:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975c:	461a      	mov	r2, r3
 800975e:	2300      	movs	r3, #0
 8009760:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009762:	2300      	movs	r3, #0
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	e043      	b.n	80097f0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800977a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800977e:	d118      	bne.n	80097b2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009792:	461a      	mov	r2, r3
 8009794:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	e013      	b.n	80097c4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a8:	461a      	mov	r2, r3
 80097aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	e008      	b.n	80097c4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097be:	461a      	mov	r2, r3
 80097c0:	2300      	movs	r3, #0
 80097c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d0:	461a      	mov	r2, r3
 80097d2:	2300      	movs	r3, #0
 80097d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e2:	461a      	mov	r2, r3
 80097e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80097e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	3301      	adds	r3, #1
 80097ee:	613b      	str	r3, [r7, #16]
 80097f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097f4:	461a      	mov	r2, r3
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d3b5      	bcc.n	8009768 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097fc:	2300      	movs	r3, #0
 80097fe:	613b      	str	r3, [r7, #16]
 8009800:	e043      	b.n	800988a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009818:	d118      	bne.n	800984c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800982c:	461a      	mov	r2, r3
 800982e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	e013      	b.n	800985e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009842:	461a      	mov	r2, r3
 8009844:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	e008      	b.n	800985e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009858:	461a      	mov	r2, r3
 800985a:	2300      	movs	r3, #0
 800985c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986a:	461a      	mov	r2, r3
 800986c:	2300      	movs	r3, #0
 800986e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800987c:	461a      	mov	r2, r3
 800987e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009882:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	3301      	adds	r3, #1
 8009888:	613b      	str	r3, [r7, #16]
 800988a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800988e:	461a      	mov	r2, r3
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	4293      	cmp	r3, r2
 8009894:	d3b5      	bcc.n	8009802 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80098b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80098b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d105      	bne.n	80098cc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f043 0210 	orr.w	r2, r3, #16
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699a      	ldr	r2, [r3, #24]
 80098d0:	4b10      	ldr	r3, [pc, #64]	@ (8009914 <USB_DevInit+0x2c4>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d005      	beq.n	80098ec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f043 0208 	orr.w	r2, r3, #8
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80098ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d107      	bne.n	8009904 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098fc:	f043 0304 	orr.w	r3, r3, #4
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009910:	b004      	add	sp, #16
 8009912:	4770      	bx	lr
 8009914:	803c3800 	.word	0x803c3800

08009918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009932:	d901      	bls.n	8009938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e01b      	b.n	8009970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	daf2      	bge.n	8009926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009940:	2300      	movs	r3, #0
 8009942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	019b      	lsls	r3, r3, #6
 8009948:	f043 0220 	orr.w	r2, r3, #32
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3301      	adds	r3, #1
 8009954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800995c:	d901      	bls.n	8009962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e006      	b.n	8009970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	f003 0320 	and.w	r3, r3, #32
 800996a:	2b20      	cmp	r3, #32
 800996c:	d0f0      	beq.n	8009950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3301      	adds	r3, #1
 800998c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009994:	d901      	bls.n	800999a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e018      	b.n	80099cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	daf2      	bge.n	8009988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2210      	movs	r2, #16
 80099aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099b8:	d901      	bls.n	80099be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e006      	b.n	80099cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f003 0310 	and.w	r3, r3, #16
 80099c6:	2b10      	cmp	r3, #16
 80099c8:	d0f0      	beq.n	80099ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	68f9      	ldr	r1, [r7, #12]
 80099f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099f8:	4313      	orrs	r3, r2
 80099fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b087      	sub	sp, #28
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f003 0306 	and.w	r3, r3, #6
 8009a22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d102      	bne.n	8009a30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	75fb      	strb	r3, [r7, #23]
 8009a2e:	e00a      	b.n	8009a46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d002      	beq.n	8009a3c <USB_GetDevSpeed+0x32>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2b06      	cmp	r3, #6
 8009a3a:	d102      	bne.n	8009a42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	75fb      	strb	r3, [r7, #23]
 8009a40:	e001      	b.n	8009a46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009a42:	230f      	movs	r3, #15
 8009a44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d13a      	bne.n	8009ae6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	2101      	movs	r1, #1
 8009a82:	fa01 f303 	lsl.w	r3, r1, r3
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	68f9      	ldr	r1, [r7, #12]
 8009a8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d155      	bne.n	8009b54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	791b      	ldrb	r3, [r3, #4]
 8009ac2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ac4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	059b      	lsls	r3, r3, #22
 8009aca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009acc:	4313      	orrs	r3, r2
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	0151      	lsls	r1, r2, #5
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	440a      	add	r2, r1
 8009ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	e036      	b.n	8009b54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aec:	69da      	ldr	r2, [r3, #28]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	f003 030f 	and.w	r3, r3, #15
 8009af6:	2101      	movs	r1, #1
 8009af8:	fa01 f303 	lsl.w	r3, r1, r3
 8009afc:	041b      	lsls	r3, r3, #16
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b04:	4313      	orrs	r3, r2
 8009b06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d11a      	bne.n	8009b54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	791b      	ldrb	r3, [r3, #4]
 8009b38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b3a:	430b      	orrs	r3, r1
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	0151      	lsls	r1, r2, #5
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	440a      	add	r2, r1
 8009b46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
	...

08009b64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	785b      	ldrb	r3, [r3, #1]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d161      	bne.n	8009c44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b96:	d11f      	bne.n	8009bd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	0151      	lsls	r1, r2, #5
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	440a      	add	r2, r1
 8009bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009bb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 030f 	and.w	r3, r3, #15
 8009be8:	2101      	movs	r1, #1
 8009bea:	fa01 f303 	lsl.w	r3, r1, r3
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	43db      	mvns	r3, r3
 8009bf2:	68f9      	ldr	r1, [r7, #12]
 8009bf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c02:	69da      	ldr	r2, [r3, #28]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f003 030f 	and.w	r3, r3, #15
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	43db      	mvns	r3, r3
 8009c16:	68f9      	ldr	r1, [r7, #12]
 8009c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	0159      	lsls	r1, r3, #5
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	440b      	add	r3, r1
 8009c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4b35      	ldr	r3, [pc, #212]	@ (8009d14 <USB_DeactivateEndpoint+0x1b0>)
 8009c3e:	4013      	ands	r3, r2
 8009c40:	600b      	str	r3, [r1, #0]
 8009c42:	e060      	b.n	8009d06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c5a:	d11f      	bne.n	8009c9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	0151      	lsls	r1, r2, #5
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	440a      	add	r2, r1
 8009c72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	0151      	lsls	r1, r2, #5
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	440a      	add	r2, r1
 8009c92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	f003 030f 	and.w	r3, r3, #15
 8009cac:	2101      	movs	r1, #1
 8009cae:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb2:	041b      	lsls	r3, r3, #16
 8009cb4:	43db      	mvns	r3, r3
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cc6:	69da      	ldr	r2, [r3, #28]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd6:	041b      	lsls	r3, r3, #16
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	0159      	lsls	r1, r3, #5
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	440b      	add	r3, r1
 8009cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cfe:	4619      	mov	r1, r3
 8009d00:	4b05      	ldr	r3, [pc, #20]	@ (8009d18 <USB_DeactivateEndpoint+0x1b4>)
 8009d02:	4013      	ands	r3, r2
 8009d04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	ec337800 	.word	0xec337800
 8009d18:	eff37800 	.word	0xeff37800

08009d1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	@ 0x28
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	4613      	mov	r3, r2
 8009d28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	f040 817f 	bne.w	800a03c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d132      	bne.n	8009dac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	0151      	lsls	r1, r2, #5
 8009d58:	69fa      	ldr	r2, [r7, #28]
 8009d5a:	440a      	add	r2, r1
 8009d5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009d64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	69ba      	ldr	r2, [r7, #24]
 8009d7a:	0151      	lsls	r1, r2, #5
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	440a      	add	r2, r1
 8009d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	0151      	lsls	r1, r2, #5
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	440a      	add	r2, r1
 8009da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da4:	0cdb      	lsrs	r3, r3, #19
 8009da6:	04db      	lsls	r3, r3, #19
 8009da8:	6113      	str	r3, [r2, #16]
 8009daa:	e097      	b.n	8009edc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	0151      	lsls	r1, r2, #5
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dc6:	0cdb      	lsrs	r3, r3, #19
 8009dc8:	04db      	lsls	r3, r3, #19
 8009dca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009de6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009dea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009dee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d11a      	bne.n	8009e2c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	691a      	ldr	r2, [r3, #16]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d903      	bls.n	8009e0a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	689a      	ldr	r2, [r3, #8]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	0151      	lsls	r1, r2, #5
 8009e1c:	69fa      	ldr	r2, [r7, #28]
 8009e1e:	440a      	add	r2, r1
 8009e20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e28:	6113      	str	r3, [r2, #16]
 8009e2a:	e044      	b.n	8009eb6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	691a      	ldr	r2, [r3, #16]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	4413      	add	r3, r2
 8009e36:	1e5a      	subs	r2, r3, #1
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e40:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	8afb      	ldrh	r3, [r7, #22]
 8009e52:	04d9      	lsls	r1, r3, #19
 8009e54:	4ba4      	ldr	r3, [pc, #656]	@ (800a0e8 <USB_EPStartXfer+0x3cc>)
 8009e56:	400b      	ands	r3, r1
 8009e58:	69b9      	ldr	r1, [r7, #24]
 8009e5a:	0148      	lsls	r0, r1, #5
 8009e5c:	69f9      	ldr	r1, [r7, #28]
 8009e5e:	4401      	add	r1, r0
 8009e60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009e64:	4313      	orrs	r3, r2
 8009e66:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	791b      	ldrb	r3, [r3, #4]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d122      	bne.n	8009eb6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	0151      	lsls	r1, r2, #5
 8009e82:	69fa      	ldr	r2, [r7, #28]
 8009e84:	440a      	add	r2, r1
 8009e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009e8e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	8afb      	ldrh	r3, [r7, #22]
 8009ea0:	075b      	lsls	r3, r3, #29
 8009ea2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009ea6:	69b9      	ldr	r1, [r7, #24]
 8009ea8:	0148      	lsls	r0, r1, #5
 8009eaa:	69f9      	ldr	r1, [r7, #28]
 8009eac:	4401      	add	r1, r0
 8009eae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec2:	691a      	ldr	r2, [r3, #16]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ecc:	69b9      	ldr	r1, [r7, #24]
 8009ece:	0148      	lsls	r0, r1, #5
 8009ed0:	69f9      	ldr	r1, [r7, #28]
 8009ed2:	4401      	add	r1, r0
 8009ed4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d14b      	bne.n	8009f7a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d009      	beq.n	8009efe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	791b      	ldrb	r3, [r3, #4]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d128      	bne.n	8009f58 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d110      	bne.n	8009f38 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	69fa      	ldr	r2, [r7, #28]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	e00f      	b.n	8009f58 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	69ba      	ldr	r2, [r7, #24]
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	69fa      	ldr	r2, [r7, #28]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f56:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	e166      	b.n	800a248 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	0151      	lsls	r1, r2, #5
 8009f8c:	69fa      	ldr	r2, [r7, #28]
 8009f8e:	440a      	add	r2, r1
 8009f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009f98:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	791b      	ldrb	r3, [r3, #4]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d015      	beq.n	8009fce <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 814e 	beq.w	800a248 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc2:	69f9      	ldr	r1, [r7, #28]
 8009fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	634b      	str	r3, [r1, #52]	@ 0x34
 8009fcc:	e13c      	b.n	800a248 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d110      	bne.n	800a000 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	0151      	lsls	r1, r2, #5
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ff8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	e00f      	b.n	800a020 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	015a      	lsls	r2, r3, #5
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	4413      	add	r3, r2
 800a008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69ba      	ldr	r2, [r7, #24]
 800a010:	0151      	lsls	r1, r2, #5
 800a012:	69fa      	ldr	r2, [r7, #28]
 800a014:	440a      	add	r2, r1
 800a016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a01a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a01e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	68d9      	ldr	r1, [r3, #12]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	b298      	uxth	r0, r3
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	9300      	str	r3, [sp, #0]
 800a032:	4603      	mov	r3, r0
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 f9b9 	bl	800a3ac <USB_WritePacket>
 800a03a:	e105      	b.n	800a248 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	0151      	lsls	r1, r2, #5
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	440a      	add	r2, r1
 800a052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a056:	0cdb      	lsrs	r3, r3, #19
 800a058:	04db      	lsls	r3, r3, #19
 800a05a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	69ba      	ldr	r2, [r7, #24]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	440a      	add	r2, r1
 800a072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a076:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a07a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a07e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d132      	bne.n	800a0ec <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	689a      	ldr	r2, [r3, #8]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0b4:	69b9      	ldr	r1, [r7, #24]
 800a0b6:	0148      	lsls	r0, r1, #5
 800a0b8:	69f9      	ldr	r1, [r7, #28]
 800a0ba:	4401      	add	r1, r0
 800a0bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	0151      	lsls	r1, r2, #5
 800a0d6:	69fa      	ldr	r2, [r7, #28]
 800a0d8:	440a      	add	r2, r1
 800a0da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0e2:	6113      	str	r3, [r2, #16]
 800a0e4:	e062      	b.n	800a1ac <USB_EPStartXfer+0x490>
 800a0e6:	bf00      	nop
 800a0e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d123      	bne.n	800a13c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a100:	691a      	ldr	r2, [r3, #16]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a10a:	69b9      	ldr	r1, [r7, #24]
 800a10c:	0148      	lsls	r0, r1, #5
 800a10e:	69f9      	ldr	r1, [r7, #28]
 800a110:	4401      	add	r1, r0
 800a112:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a116:	4313      	orrs	r3, r2
 800a118:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	015a      	lsls	r2, r3, #5
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	4413      	add	r3, r2
 800a122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	69ba      	ldr	r2, [r7, #24]
 800a12a:	0151      	lsls	r1, r2, #5
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	440a      	add	r2, r1
 800a130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a134:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a138:	6113      	str	r3, [r2, #16]
 800a13a:	e037      	b.n	800a1ac <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	691a      	ldr	r2, [r3, #16]
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	4413      	add	r3, r2
 800a146:	1e5a      	subs	r2, r3, #1
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a150:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	8afa      	ldrh	r2, [r7, #22]
 800a158:	fb03 f202 	mul.w	r2, r3, r2
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16c:	691a      	ldr	r2, [r3, #16]
 800a16e:	8afb      	ldrh	r3, [r7, #22]
 800a170:	04d9      	lsls	r1, r3, #19
 800a172:	4b38      	ldr	r3, [pc, #224]	@ (800a254 <USB_EPStartXfer+0x538>)
 800a174:	400b      	ands	r3, r1
 800a176:	69b9      	ldr	r1, [r7, #24]
 800a178:	0148      	lsls	r0, r1, #5
 800a17a:	69f9      	ldr	r1, [r7, #28]
 800a17c:	4401      	add	r1, r0
 800a17e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a182:	4313      	orrs	r3, r2
 800a184:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	6a1b      	ldr	r3, [r3, #32]
 800a198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a19c:	69b9      	ldr	r1, [r7, #24]
 800a19e:	0148      	lsls	r0, r1, #5
 800a1a0:	69f9      	ldr	r1, [r7, #28]
 800a1a2:	4401      	add	r1, r0
 800a1a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d10d      	bne.n	800a1ce <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d009      	beq.n	800a1ce <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	68d9      	ldr	r1, [r3, #12]
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ca:	460a      	mov	r2, r1
 800a1cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	791b      	ldrb	r3, [r3, #4]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d128      	bne.n	800a228 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d110      	bne.n	800a208 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	0151      	lsls	r1, r2, #5
 800a1f8:	69fa      	ldr	r2, [r7, #28]
 800a1fa:	440a      	add	r2, r1
 800a1fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a200:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	e00f      	b.n	800a228 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	0151      	lsls	r1, r2, #5
 800a21a:	69fa      	ldr	r2, [r7, #28]
 800a21c:	440a      	add	r2, r1
 800a21e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a226:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	0151      	lsls	r1, r2, #5
 800a23a:	69fa      	ldr	r2, [r7, #28]
 800a23c:	440a      	add	r2, r1
 800a23e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a242:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	1ff80000 	.word	0x1ff80000

0800a258 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d14a      	bne.n	800a30c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a28a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a28e:	f040 8086 	bne.w	800a39e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	7812      	ldrb	r2, [r2, #0]
 800a2a6:	0151      	lsls	r1, r2, #5
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	440a      	add	r2, r1
 800a2ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a2b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	7812      	ldrb	r2, [r2, #0]
 800a2ca:	0151      	lsls	r1, r2, #5
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	440a      	add	r2, r1
 800a2d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d902      	bls.n	800a2f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ee:	e056      	b.n	800a39e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a308:	d0e7      	beq.n	800a2da <USB_EPStopXfer+0x82>
 800a30a:	e048      	b.n	800a39e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a324:	d13b      	bne.n	800a39e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	7812      	ldrb	r2, [r2, #0]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a344:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a348:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	7812      	ldrb	r2, [r2, #0]
 800a35e:	0151      	lsls	r1, r2, #5
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	440a      	add	r2, r1
 800a364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a368:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a36c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3301      	adds	r3, #1
 800a372:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d902      	bls.n	800a384 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	75fb      	strb	r3, [r7, #23]
          break;
 800a382:	e00c      	b.n	800a39e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a39c:	d0e7      	beq.n	800a36e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	371c      	adds	r7, #28
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b089      	sub	sp, #36	@ 0x24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	71fb      	strb	r3, [r7, #7]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a3ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d123      	bne.n	800a41a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a3d2:	88bb      	ldrh	r3, [r7, #4]
 800a3d4:	3303      	adds	r3, #3
 800a3d6:	089b      	lsrs	r3, r3, #2
 800a3d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	e018      	b.n	800a412 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a3e0:	79fb      	ldrb	r3, [r7, #7]
 800a3e2:	031a      	lsls	r2, r3, #12
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	3301      	adds	r3, #1
 800a404:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3301      	adds	r3, #1
 800a40a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	3301      	adds	r3, #1
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	429a      	cmp	r2, r3
 800a418:	d3e2      	bcc.n	800a3e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3724      	adds	r7, #36	@ 0x24
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a428:	b480      	push	{r7}
 800a42a:	b08b      	sub	sp, #44	@ 0x2c
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a43e:	88fb      	ldrh	r3, [r7, #6]
 800a440:	089b      	lsrs	r3, r3, #2
 800a442:	b29b      	uxth	r3, r3
 800a444:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a446:	88fb      	ldrh	r3, [r7, #6]
 800a448:	f003 0303 	and.w	r3, r3, #3
 800a44c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a44e:	2300      	movs	r3, #0
 800a450:	623b      	str	r3, [r7, #32]
 800a452:	e014      	b.n	800a47e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	3301      	adds	r3, #1
 800a464:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a468:	3301      	adds	r3, #1
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46e:	3301      	adds	r3, #1
 800a470:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	3301      	adds	r3, #1
 800a476:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	3301      	adds	r3, #1
 800a47c:	623b      	str	r3, [r7, #32]
 800a47e:	6a3a      	ldr	r2, [r7, #32]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	429a      	cmp	r2, r3
 800a484:	d3e6      	bcc.n	800a454 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a486:	8bfb      	ldrh	r3, [r7, #30]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01e      	beq.n	800a4ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a496:	461a      	mov	r2, r3
 800a498:	f107 0310 	add.w	r3, r7, #16
 800a49c:	6812      	ldr	r2, [r2, #0]
 800a49e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	701a      	strb	r2, [r3, #0]
      i++;
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a4be:	8bfb      	ldrh	r3, [r7, #30]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a4c4:	8bfb      	ldrh	r3, [r7, #30]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1ea      	bne.n	800a4a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	372c      	adds	r7, #44	@ 0x2c
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	785b      	ldrb	r3, [r3, #1]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d12c      	bne.n	800a54e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	db12      	blt.n	800a52c <USB_EPSetStall+0x54>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00f      	beq.n	800a52c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	0151      	lsls	r1, r2, #5
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	440a      	add	r2, r1
 800a522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a526:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a52a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	0151      	lsls	r1, r2, #5
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	440a      	add	r2, r1
 800a542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a546:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	e02b      	b.n	800a5a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	db12      	blt.n	800a586 <USB_EPSetStall+0xae>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00f      	beq.n	800a586 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	0151      	lsls	r1, r2, #5
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	440a      	add	r2, r1
 800a57c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a580:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a584:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	015a      	lsls	r2, r3, #5
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	0151      	lsls	r1, r2, #5
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	440a      	add	r2, r1
 800a59c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d128      	bne.n	800a622 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	0151      	lsls	r1, r2, #5
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	440a      	add	r2, r1
 800a5e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a5ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	791b      	ldrb	r3, [r3, #4]
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d003      	beq.n	800a600 <USB_EPClearStall+0x4c>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	791b      	ldrb	r3, [r3, #4]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d138      	bne.n	800a672 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	440a      	add	r2, r1
 800a616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a61a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	e027      	b.n	800a672 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	0151      	lsls	r1, r2, #5
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	440a      	add	r2, r1
 800a638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a63c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a640:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	791b      	ldrb	r3, [r3, #4]
 800a646:	2b03      	cmp	r3, #3
 800a648:	d003      	beq.n	800a652 <USB_EPClearStall+0x9e>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	791b      	ldrb	r3, [r3, #4]
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d10f      	bne.n	800a672 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	0151      	lsls	r1, r2, #5
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	440a      	add	r2, r1
 800a668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a66c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a670:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a69e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a6a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	011b      	lsls	r3, r3, #4
 800a6b0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a6b4:	68f9      	ldr	r1, [r7, #12]
 800a6b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a6e6:	f023 0303 	bic.w	r3, r3, #3
 800a6ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6fa:	f023 0302 	bic.w	r3, r3, #2
 800a6fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a73c:	f043 0302 	orr.w	r3, r3, #2
 800a740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4013      	ands	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a768:	68fb      	ldr	r3, [r7, #12]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a776:	b480      	push	{r7}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	4013      	ands	r3, r2
 800a798:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	0c1b      	lsrs	r3, r3, #16
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	b29b      	uxth	r3, r3
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b085      	sub	sp, #20
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	4013      	ands	r3, r2
 800a80a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a80c:	68bb      	ldr	r3, [r7, #8]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b087      	sub	sp, #28
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a83a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a83c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a83e:	78fb      	ldrb	r3, [r7, #3]
 800a840:	f003 030f 	and.w	r3, r3, #15
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	fa22 f303 	lsr.w	r3, r2, r3
 800a84a:	01db      	lsls	r3, r3, #7
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	4313      	orrs	r3, r2
 800a852:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	4013      	ands	r3, r2
 800a866:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a868:	68bb      	ldr	r3, [r7, #8]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	371c      	adds	r7, #28
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	f003 0301 	and.w	r3, r3, #1
}
 800a886:	4618      	mov	r0, r3
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a892:	b480      	push	{r7}
 800a894:	b085      	sub	sp, #20
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a8b0:	f023 0307 	bic.w	r3, r3, #7
 800a8b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	333c      	adds	r3, #60	@ 0x3c
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	4a26      	ldr	r2, [pc, #152]	@ (800a990 <USB_EP0_OutStart+0xb8>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d90a      	bls.n	800a912 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a90c:	d101      	bne.n	800a912 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	e037      	b.n	800a982 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a918:	461a      	mov	r2, r3
 800a91a:	2300      	movs	r3, #0
 800a91c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a92c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a940:	f043 0318 	orr.w	r3, r3, #24
 800a944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a954:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a958:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a95a:	7afb      	ldrb	r3, [r7, #11]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10f      	bne.n	800a980 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a966:	461a      	mov	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a97a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a97e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	4f54300a 	.word	0x4f54300a

0800a994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9ac:	d901      	bls.n	800a9b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e01b      	b.n	800a9ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	daf2      	bge.n	800a9a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	f043 0201 	orr.w	r2, r3, #1
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9d6:	d901      	bls.n	800a9dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	e006      	b.n	800a9ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d0f0      	beq.n	800a9ca <USB_CoreReset+0x36>

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3714      	adds	r7, #20
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
	...

0800a9f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a9fc:	4904      	ldr	r1, [pc, #16]	@ (800aa10 <MX_FATFS_Init+0x18>)
 800a9fe:	4805      	ldr	r0, [pc, #20]	@ (800aa14 <MX_FATFS_Init+0x1c>)
 800aa00:	f003 f98c 	bl	800dd1c <FATFS_LinkDriver>
 800aa04:	4603      	mov	r3, r0
 800aa06:	461a      	mov	r2, r3
 800aa08:	4b03      	ldr	r3, [pc, #12]	@ (800aa18 <MX_FATFS_Init+0x20>)
 800aa0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa0c:	bf00      	nop
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20000420 	.word	0x20000420
 800aa14:	20000038 	.word	0x20000038
 800aa18:	2000041c 	.word	0x2000041c

0800aa1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7f5 ffa9 	bl	8000990 <SD_disk_initialize>
 800aa3e:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f6 f881 	bl	8000b5c <SD_disk_status>
 800aa5a:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800aa74:	7bf8      	ldrb	r0, [r7, #15]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	68b9      	ldr	r1, [r7, #8]
 800aa7c:	f7f6 f884 	bl	8000b88 <SD_disk_read>
 800aa80:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
 800aa96:	4603      	mov	r3, r0
 800aa98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800aa9a:	7bf8      	ldrb	r0, [r7, #15]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	68b9      	ldr	r1, [r7, #8]
 800aaa2:	f7f6 f8db 	bl	8000c5c <SD_disk_write>
 800aaa6:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	603a      	str	r2, [r7, #0]
 800aaba:	71fb      	strb	r3, [r7, #7]
 800aabc:	460b      	mov	r3, r1
 800aabe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800aac0:	79b9      	ldrb	r1, [r7, #6]
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7f6 f94c 	bl	8000d64 <SD_disk_ioctl>
 800aacc:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aae4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aae8:	f003 fdf4 	bl	800e6d4 <USBD_static_malloc>
 800aaec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d109      	bne.n	800ab08 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	32b0      	adds	r2, #176	@ 0xb0
 800aafe:	2100      	movs	r1, #0
 800ab00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ab04:	2302      	movs	r3, #2
 800ab06:	e0d4      	b.n	800acb2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ab08:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f003 ffa0 	bl	800ea54 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	32b0      	adds	r2, #176	@ 0xb0
 800ab1e:	68f9      	ldr	r1, [r7, #12]
 800ab20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	32b0      	adds	r2, #176	@ 0xb0
 800ab2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7c1b      	ldrb	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d138      	bne.n	800abb2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab40:	4b5e      	ldr	r3, [pc, #376]	@ (800acbc <USBD_CDC_Init+0x1e4>)
 800ab42:	7819      	ldrb	r1, [r3, #0]
 800ab44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab48:	2202      	movs	r2, #2
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f003 fc9f 	bl	800e48e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab50:	4b5a      	ldr	r3, [pc, #360]	@ (800acbc <USBD_CDC_Init+0x1e4>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	f003 020f 	and.w	r2, r3, #15
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	3324      	adds	r3, #36	@ 0x24
 800ab66:	2201      	movs	r2, #1
 800ab68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab6a:	4b55      	ldr	r3, [pc, #340]	@ (800acc0 <USBD_CDC_Init+0x1e8>)
 800ab6c:	7819      	ldrb	r1, [r3, #0]
 800ab6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab72:	2202      	movs	r2, #2
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f003 fc8a 	bl	800e48e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab7a:	4b51      	ldr	r3, [pc, #324]	@ (800acc0 <USBD_CDC_Init+0x1e8>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	f003 020f 	and.w	r2, r3, #15
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	440b      	add	r3, r1
 800ab8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab92:	2201      	movs	r2, #1
 800ab94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab96:	4b4b      	ldr	r3, [pc, #300]	@ (800acc4 <USBD_CDC_Init+0x1ec>)
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	f003 020f 	and.w	r2, r3, #15
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	440b      	add	r3, r1
 800abaa:	3326      	adds	r3, #38	@ 0x26
 800abac:	2210      	movs	r2, #16
 800abae:	801a      	strh	r2, [r3, #0]
 800abb0:	e035      	b.n	800ac1e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abb2:	4b42      	ldr	r3, [pc, #264]	@ (800acbc <USBD_CDC_Init+0x1e4>)
 800abb4:	7819      	ldrb	r1, [r3, #0]
 800abb6:	2340      	movs	r3, #64	@ 0x40
 800abb8:	2202      	movs	r2, #2
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f003 fc67 	bl	800e48e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abc0:	4b3e      	ldr	r3, [pc, #248]	@ (800acbc <USBD_CDC_Init+0x1e4>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	f003 020f 	and.w	r2, r3, #15
 800abc8:	6879      	ldr	r1, [r7, #4]
 800abca:	4613      	mov	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4413      	add	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	440b      	add	r3, r1
 800abd4:	3324      	adds	r3, #36	@ 0x24
 800abd6:	2201      	movs	r2, #1
 800abd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800abda:	4b39      	ldr	r3, [pc, #228]	@ (800acc0 <USBD_CDC_Init+0x1e8>)
 800abdc:	7819      	ldrb	r1, [r3, #0]
 800abde:	2340      	movs	r3, #64	@ 0x40
 800abe0:	2202      	movs	r2, #2
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f003 fc53 	bl	800e48e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abe8:	4b35      	ldr	r3, [pc, #212]	@ (800acc0 <USBD_CDC_Init+0x1e8>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 020f 	and.w	r2, r3, #15
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	440b      	add	r3, r1
 800abfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac00:	2201      	movs	r2, #1
 800ac02:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac04:	4b2f      	ldr	r3, [pc, #188]	@ (800acc4 <USBD_CDC_Init+0x1ec>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	f003 020f 	and.w	r2, r3, #15
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	440b      	add	r3, r1
 800ac18:	3326      	adds	r3, #38	@ 0x26
 800ac1a:	2210      	movs	r2, #16
 800ac1c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac1e:	4b29      	ldr	r3, [pc, #164]	@ (800acc4 <USBD_CDC_Init+0x1ec>)
 800ac20:	7819      	ldrb	r1, [r3, #0]
 800ac22:	2308      	movs	r3, #8
 800ac24:	2203      	movs	r2, #3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f003 fc31 	bl	800e48e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ac2c:	4b25      	ldr	r3, [pc, #148]	@ (800acc4 <USBD_CDC_Init+0x1ec>)
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	f003 020f 	and.w	r2, r3, #15
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	4613      	mov	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	440b      	add	r3, r1
 800ac40:	3324      	adds	r3, #36	@ 0x24
 800ac42:	2201      	movs	r2, #1
 800ac44:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	33b0      	adds	r3, #176	@ 0xb0
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e018      	b.n	800acb2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	7c1b      	ldrb	r3, [r3, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac88:	4b0d      	ldr	r3, [pc, #52]	@ (800acc0 <USBD_CDC_Init+0x1e8>)
 800ac8a:	7819      	ldrb	r1, [r3, #0]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f003 fce8 	bl	800e66c <USBD_LL_PrepareReceive>
 800ac9c:	e008      	b.n	800acb0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac9e:	4b08      	ldr	r3, [pc, #32]	@ (800acc0 <USBD_CDC_Init+0x1e8>)
 800aca0:	7819      	ldrb	r1, [r3, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aca8:	2340      	movs	r3, #64	@ 0x40
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f003 fcde 	bl	800e66c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	200000d3 	.word	0x200000d3
 800acc0:	200000d4 	.word	0x200000d4
 800acc4:	200000d5 	.word	0x200000d5

0800acc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800acd4:	4b3a      	ldr	r3, [pc, #232]	@ (800adc0 <USBD_CDC_DeInit+0xf8>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f003 fbfd 	bl	800e4da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ace0:	4b37      	ldr	r3, [pc, #220]	@ (800adc0 <USBD_CDC_DeInit+0xf8>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f003 020f 	and.w	r2, r3, #15
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	440b      	add	r3, r1
 800acf4:	3324      	adds	r3, #36	@ 0x24
 800acf6:	2200      	movs	r2, #0
 800acf8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800acfa:	4b32      	ldr	r3, [pc, #200]	@ (800adc4 <USBD_CDC_DeInit+0xfc>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f003 fbea 	bl	800e4da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ad06:	4b2f      	ldr	r3, [pc, #188]	@ (800adc4 <USBD_CDC_DeInit+0xfc>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	f003 020f 	and.w	r2, r3, #15
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	440b      	add	r3, r1
 800ad1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad1e:	2200      	movs	r2, #0
 800ad20:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad22:	4b29      	ldr	r3, [pc, #164]	@ (800adc8 <USBD_CDC_DeInit+0x100>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f003 fbd6 	bl	800e4da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ad2e:	4b26      	ldr	r3, [pc, #152]	@ (800adc8 <USBD_CDC_DeInit+0x100>)
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	f003 020f 	and.w	r2, r3, #15
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	440b      	add	r3, r1
 800ad42:	3324      	adds	r3, #36	@ 0x24
 800ad44:	2200      	movs	r2, #0
 800ad46:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ad48:	4b1f      	ldr	r3, [pc, #124]	@ (800adc8 <USBD_CDC_DeInit+0x100>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	f003 020f 	and.w	r2, r3, #15
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	440b      	add	r3, r1
 800ad5c:	3326      	adds	r3, #38	@ 0x26
 800ad5e:	2200      	movs	r2, #0
 800ad60:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	32b0      	adds	r2, #176	@ 0xb0
 800ad6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d01f      	beq.n	800adb4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	33b0      	adds	r3, #176	@ 0xb0
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	32b0      	adds	r2, #176	@ 0xb0
 800ad92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f003 fcaa 	bl	800e6f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	32b0      	adds	r2, #176	@ 0xb0
 800ada6:	2100      	movs	r1, #0
 800ada8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	200000d3 	.word	0x200000d3
 800adc4:	200000d4 	.word	0x200000d4
 800adc8:	200000d5 	.word	0x200000d5

0800adcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	32b0      	adds	r2, #176	@ 0xb0
 800ade0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800adea:	2300      	movs	r3, #0
 800adec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e0bf      	b.n	800af7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d050      	beq.n	800aeaa <USBD_CDC_Setup+0xde>
 800ae08:	2b20      	cmp	r3, #32
 800ae0a:	f040 80af 	bne.w	800af6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	88db      	ldrh	r3, [r3, #6]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d03a      	beq.n	800ae8c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	b25b      	sxtb	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	da1b      	bge.n	800ae58 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	33b0      	adds	r3, #176	@ 0xb0
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ae36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	88d2      	ldrh	r2, [r2, #6]
 800ae3c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	88db      	ldrh	r3, [r3, #6]
 800ae42:	2b07      	cmp	r3, #7
 800ae44:	bf28      	it	cs
 800ae46:	2307      	movcs	r3, #7
 800ae48:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	89fa      	ldrh	r2, [r7, #14]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f001 fd93 	bl	800c97c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ae56:	e090      	b.n	800af7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	785a      	ldrb	r2, [r3, #1]
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	88db      	ldrh	r3, [r3, #6]
 800ae66:	2b3f      	cmp	r3, #63	@ 0x3f
 800ae68:	d803      	bhi.n	800ae72 <USBD_CDC_Setup+0xa6>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	88db      	ldrh	r3, [r3, #6]
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	e000      	b.n	800ae74 <USBD_CDC_Setup+0xa8>
 800ae72:	2240      	movs	r2, #64	@ 0x40
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ae7a:	6939      	ldr	r1, [r7, #16]
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ae82:	461a      	mov	r2, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 fda5 	bl	800c9d4 <USBD_CtlPrepareRx>
      break;
 800ae8a:	e076      	b.n	800af7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	33b0      	adds	r3, #176	@ 0xb0
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	7850      	ldrb	r0, [r2, #1]
 800aea2:	2200      	movs	r2, #0
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	4798      	blx	r3
      break;
 800aea8:	e067      	b.n	800af7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	2b0b      	cmp	r3, #11
 800aeb0:	d851      	bhi.n	800af56 <USBD_CDC_Setup+0x18a>
 800aeb2:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb8 <USBD_CDC_Setup+0xec>)
 800aeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb8:	0800aee9 	.word	0x0800aee9
 800aebc:	0800af65 	.word	0x0800af65
 800aec0:	0800af57 	.word	0x0800af57
 800aec4:	0800af57 	.word	0x0800af57
 800aec8:	0800af57 	.word	0x0800af57
 800aecc:	0800af57 	.word	0x0800af57
 800aed0:	0800af57 	.word	0x0800af57
 800aed4:	0800af57 	.word	0x0800af57
 800aed8:	0800af57 	.word	0x0800af57
 800aedc:	0800af57 	.word	0x0800af57
 800aee0:	0800af13 	.word	0x0800af13
 800aee4:	0800af3d 	.word	0x0800af3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d107      	bne.n	800af04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aef4:	f107 030a 	add.w	r3, r7, #10
 800aef8:	2202      	movs	r2, #2
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 fd3d 	bl	800c97c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af02:	e032      	b.n	800af6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f001 fcbb 	bl	800c882 <USBD_CtlError>
            ret = USBD_FAIL;
 800af0c:	2303      	movs	r3, #3
 800af0e:	75fb      	strb	r3, [r7, #23]
          break;
 800af10:	e02b      	b.n	800af6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d107      	bne.n	800af2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af1e:	f107 030d 	add.w	r3, r7, #13
 800af22:	2201      	movs	r2, #1
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 fd28 	bl	800c97c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af2c:	e01d      	b.n	800af6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 fca6 	bl	800c882 <USBD_CtlError>
            ret = USBD_FAIL;
 800af36:	2303      	movs	r3, #3
 800af38:	75fb      	strb	r3, [r7, #23]
          break;
 800af3a:	e016      	b.n	800af6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b03      	cmp	r3, #3
 800af46:	d00f      	beq.n	800af68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f001 fc99 	bl	800c882 <USBD_CtlError>
            ret = USBD_FAIL;
 800af50:	2303      	movs	r3, #3
 800af52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af54:	e008      	b.n	800af68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 fc92 	bl	800c882 <USBD_CtlError>
          ret = USBD_FAIL;
 800af5e:	2303      	movs	r3, #3
 800af60:	75fb      	strb	r3, [r7, #23]
          break;
 800af62:	e002      	b.n	800af6a <USBD_CDC_Setup+0x19e>
          break;
 800af64:	bf00      	nop
 800af66:	e008      	b.n	800af7a <USBD_CDC_Setup+0x1ae>
          break;
 800af68:	bf00      	nop
      }
      break;
 800af6a:	e006      	b.n	800af7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f001 fc87 	bl	800c882 <USBD_CtlError>
      ret = USBD_FAIL;
 800af74:	2303      	movs	r3, #3
 800af76:	75fb      	strb	r3, [r7, #23]
      break;
 800af78:	bf00      	nop
  }

  return (uint8_t)ret;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	32b0      	adds	r2, #176	@ 0xb0
 800afa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800afaa:	2303      	movs	r3, #3
 800afac:	e065      	b.n	800b07a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	32b0      	adds	r2, #176	@ 0xb0
 800afb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800afbe:	78fb      	ldrb	r3, [r7, #3]
 800afc0:	f003 020f 	and.w	r2, r3, #15
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	440b      	add	r3, r1
 800afd0:	3318      	adds	r3, #24
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d02f      	beq.n	800b038 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800afd8:	78fb      	ldrb	r3, [r7, #3]
 800afda:	f003 020f 	and.w	r2, r3, #15
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	440b      	add	r3, r1
 800afea:	3318      	adds	r3, #24
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	78fb      	ldrb	r3, [r7, #3]
 800aff0:	f003 010f 	and.w	r1, r3, #15
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	460b      	mov	r3, r1
 800aff8:	00db      	lsls	r3, r3, #3
 800affa:	440b      	add	r3, r1
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4403      	add	r3, r0
 800b000:	331c      	adds	r3, #28
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	fbb2 f1f3 	udiv	r1, r2, r3
 800b008:	fb01 f303 	mul.w	r3, r1, r3
 800b00c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d112      	bne.n	800b038 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b012:	78fb      	ldrb	r3, [r7, #3]
 800b014:	f003 020f 	and.w	r2, r3, #15
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	440b      	add	r3, r1
 800b024:	3318      	adds	r3, #24
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b02a:	78f9      	ldrb	r1, [r7, #3]
 800b02c:	2300      	movs	r3, #0
 800b02e:	2200      	movs	r2, #0
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f003 fafa 	bl	800e62a <USBD_LL_Transmit>
 800b036:	e01f      	b.n	800b078 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	33b0      	adds	r3, #176	@ 0xb0
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d010      	beq.n	800b078 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	33b0      	adds	r3, #176	@ 0xb0
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b074:	78fa      	ldrb	r2, [r7, #3]
 800b076:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	460b      	mov	r3, r1
 800b08c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	32b0      	adds	r2, #176	@ 0xb0
 800b098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	32b0      	adds	r2, #176	@ 0xb0
 800b0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e01a      	b.n	800b0ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f003 faf8 	bl	800e6ae <USBD_LL_GetRxDataSize>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	33b0      	adds	r3, #176	@ 0xb0
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	32b0      	adds	r2, #176	@ 0xb0
 800b104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b108:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b110:	2303      	movs	r3, #3
 800b112:	e024      	b.n	800b15e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	33b0      	adds	r3, #176	@ 0xb0
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d019      	beq.n	800b15c <USBD_CDC_EP0_RxReady+0x6a>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b12e:	2bff      	cmp	r3, #255	@ 0xff
 800b130:	d014      	beq.n	800b15c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	33b0      	adds	r3, #176	@ 0xb0
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b14a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b152:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	22ff      	movs	r2, #255	@ 0xff
 800b158:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b170:	2182      	movs	r1, #130	@ 0x82
 800b172:	4818      	ldr	r0, [pc, #96]	@ (800b1d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b174:	f000 fd4f 	bl	800bc16 <USBD_GetEpDesc>
 800b178:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b17a:	2101      	movs	r1, #1
 800b17c:	4815      	ldr	r0, [pc, #84]	@ (800b1d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b17e:	f000 fd4a 	bl	800bc16 <USBD_GetEpDesc>
 800b182:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b184:	2181      	movs	r1, #129	@ 0x81
 800b186:	4813      	ldr	r0, [pc, #76]	@ (800b1d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b188:	f000 fd45 	bl	800bc16 <USBD_GetEpDesc>
 800b18c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	2210      	movs	r2, #16
 800b198:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d006      	beq.n	800b1ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1a8:	711a      	strb	r2, [r3, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d006      	beq.n	800b1c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1bc:	711a      	strb	r2, [r3, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2243      	movs	r2, #67	@ 0x43
 800b1c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1c8:	4b02      	ldr	r3, [pc, #8]	@ (800b1d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20000090 	.word	0x20000090

0800b1d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1e0:	2182      	movs	r1, #130	@ 0x82
 800b1e2:	4818      	ldr	r0, [pc, #96]	@ (800b244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1e4:	f000 fd17 	bl	800bc16 <USBD_GetEpDesc>
 800b1e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	4815      	ldr	r0, [pc, #84]	@ (800b244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1ee:	f000 fd12 	bl	800bc16 <USBD_GetEpDesc>
 800b1f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1f4:	2181      	movs	r1, #129	@ 0x81
 800b1f6:	4813      	ldr	r0, [pc, #76]	@ (800b244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1f8:	f000 fd0d 	bl	800bc16 <USBD_GetEpDesc>
 800b1fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2210      	movs	r2, #16
 800b208:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d006      	beq.n	800b21e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	2200      	movs	r2, #0
 800b214:	711a      	strb	r2, [r3, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f042 0202 	orr.w	r2, r2, #2
 800b21c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d006      	beq.n	800b232 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	711a      	strb	r2, [r3, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f042 0202 	orr.w	r2, r2, #2
 800b230:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2243      	movs	r2, #67	@ 0x43
 800b236:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b238:	4b02      	ldr	r3, [pc, #8]	@ (800b244 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20000090 	.word	0x20000090

0800b248 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b250:	2182      	movs	r1, #130	@ 0x82
 800b252:	4818      	ldr	r0, [pc, #96]	@ (800b2b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b254:	f000 fcdf 	bl	800bc16 <USBD_GetEpDesc>
 800b258:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b25a:	2101      	movs	r1, #1
 800b25c:	4815      	ldr	r0, [pc, #84]	@ (800b2b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b25e:	f000 fcda 	bl	800bc16 <USBD_GetEpDesc>
 800b262:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b264:	2181      	movs	r1, #129	@ 0x81
 800b266:	4813      	ldr	r0, [pc, #76]	@ (800b2b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b268:	f000 fcd5 	bl	800bc16 <USBD_GetEpDesc>
 800b26c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2210      	movs	r2, #16
 800b278:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2200      	movs	r2, #0
 800b284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b288:	711a      	strb	r2, [r3, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b29c:	711a      	strb	r2, [r3, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2243      	movs	r2, #67	@ 0x43
 800b2a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2a8:	4b02      	ldr	r3, [pc, #8]	@ (800b2b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000090 	.word	0x20000090

0800b2b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	220a      	movs	r2, #10
 800b2c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2c6:	4b03      	ldr	r3, [pc, #12]	@ (800b2d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	2000004c 	.word	0x2000004c

0800b2d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e009      	b.n	800b300 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	33b0      	adds	r3, #176	@ 0xb0
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	32b0      	adds	r2, #176	@ 0xb0
 800b322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b326:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b32e:	2303      	movs	r3, #3
 800b330:	e008      	b.n	800b344 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	371c      	adds	r7, #28
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	32b0      	adds	r2, #176	@ 0xb0
 800b364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b368:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b370:	2303      	movs	r3, #3
 800b372:	e004      	b.n	800b37e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
	...

0800b38c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	32b0      	adds	r2, #176	@ 0xb0
 800b39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	e025      	b.n	800b3fe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d11f      	bne.n	800b3fc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b3c4:	4b10      	ldr	r3, [pc, #64]	@ (800b408 <USBD_CDC_TransmitPacket+0x7c>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	f003 020f 	and.w	r2, r3, #15
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4403      	add	r3, r0
 800b3de:	3318      	adds	r3, #24
 800b3e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b3e2:	4b09      	ldr	r3, [pc, #36]	@ (800b408 <USBD_CDC_TransmitPacket+0x7c>)
 800b3e4:	7819      	ldrb	r1, [r3, #0]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f003 f919 	bl	800e62a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	200000d3 	.word	0x200000d3

0800b40c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	32b0      	adds	r2, #176	@ 0xb0
 800b41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b422:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	32b0      	adds	r2, #176	@ 0xb0
 800b42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b436:	2303      	movs	r3, #3
 800b438:	e018      	b.n	800b46c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	7c1b      	ldrb	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b442:	4b0c      	ldr	r3, [pc, #48]	@ (800b474 <USBD_CDC_ReceivePacket+0x68>)
 800b444:	7819      	ldrb	r1, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b44c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f003 f90b 	bl	800e66c <USBD_LL_PrepareReceive>
 800b456:	e008      	b.n	800b46a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b458:	4b06      	ldr	r3, [pc, #24]	@ (800b474 <USBD_CDC_ReceivePacket+0x68>)
 800b45a:	7819      	ldrb	r1, [r3, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b462:	2340      	movs	r3, #64	@ 0x40
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f003 f901 	bl	800e66c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	200000d4 	.word	0x200000d4

0800b478 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	4613      	mov	r3, r2
 800b484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e01f      	b.n	800b4d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	79fa      	ldrb	r2, [r7, #7]
 800b4c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f002 ff7b 	bl	800e3c0 <USBD_LL_Init>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3718      	adds	r7, #24
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e025      	b.n	800b53c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	32ae      	adds	r2, #174	@ 0xae
 800b502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00f      	beq.n	800b52c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	32ae      	adds	r2, #174	@ 0xae
 800b516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51c:	f107 020e 	add.w	r2, r7, #14
 800b520:	4610      	mov	r0, r2
 800b522:	4798      	blx	r3
 800b524:	4602      	mov	r2, r0
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f002 ff83 	bl	800e458 <USBD_LL_Start>
 800b552:	4603      	mov	r3, r0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b564:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b566:	4618      	mov	r0, r3
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b084      	sub	sp, #16
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	460b      	mov	r3, r1
 800b57c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d009      	beq.n	800b5a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	78fa      	ldrb	r2, [r7, #3]
 800b596:	4611      	mov	r1, r2
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	4798      	blx	r3
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	78fa      	ldrb	r2, [r7, #3]
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	4798      	blx	r3
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f001 f90c 	bl	800c80e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b604:	461a      	mov	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b612:	f003 031f 	and.w	r3, r3, #31
 800b616:	2b02      	cmp	r3, #2
 800b618:	d01a      	beq.n	800b650 <USBD_LL_SetupStage+0x72>
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d822      	bhi.n	800b664 <USBD_LL_SetupStage+0x86>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <USBD_LL_SetupStage+0x4a>
 800b622:	2b01      	cmp	r3, #1
 800b624:	d00a      	beq.n	800b63c <USBD_LL_SetupStage+0x5e>
 800b626:	e01d      	b.n	800b664 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fb63 	bl	800bcfc <USBD_StdDevReq>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]
      break;
 800b63a:	e020      	b.n	800b67e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fbcb 	bl	800bde0 <USBD_StdItfReq>
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
      break;
 800b64e:	e016      	b.n	800b67e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fc2d 	bl	800beb8 <USBD_StdEPReq>
 800b65e:	4603      	mov	r3, r0
 800b660:	73fb      	strb	r3, [r7, #15]
      break;
 800b662:	e00c      	b.n	800b67e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b66a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f002 ff50 	bl	800e518 <USBD_LL_StallEP>
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]
      break;
 800b67c:	bf00      	nop
  }

  return ret;
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	460b      	mov	r3, r1
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b69a:	7afb      	ldrb	r3, [r7, #11]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d16e      	bne.n	800b77e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b6a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	f040 8098 	bne.w	800b7e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	689a      	ldr	r2, [r3, #8]
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d913      	bls.n	800b6e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	1ad2      	subs	r2, r2, r3
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	68da      	ldr	r2, [r3, #12]
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	bf28      	it	cs
 800b6da:	4613      	movcs	r3, r2
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6879      	ldr	r1, [r7, #4]
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f001 f994 	bl	800ca0e <USBD_CtlContinueRx>
 800b6e6:	e07d      	b.n	800b7e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6ee:	f003 031f 	and.w	r3, r3, #31
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d014      	beq.n	800b720 <USBD_LL_DataOutStage+0x98>
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d81d      	bhi.n	800b736 <USBD_LL_DataOutStage+0xae>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <USBD_LL_DataOutStage+0x7c>
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d003      	beq.n	800b70a <USBD_LL_DataOutStage+0x82>
 800b702:	e018      	b.n	800b736 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	75bb      	strb	r3, [r7, #22]
            break;
 800b708:	e018      	b.n	800b73c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b710:	b2db      	uxtb	r3, r3
 800b712:	4619      	mov	r1, r3
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 fa64 	bl	800bbe2 <USBD_CoreFindIF>
 800b71a:	4603      	mov	r3, r0
 800b71c:	75bb      	strb	r3, [r7, #22]
            break;
 800b71e:	e00d      	b.n	800b73c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b726:	b2db      	uxtb	r3, r3
 800b728:	4619      	mov	r1, r3
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 fa66 	bl	800bbfc <USBD_CoreFindEP>
 800b730:	4603      	mov	r3, r0
 800b732:	75bb      	strb	r3, [r7, #22]
            break;
 800b734:	e002      	b.n	800b73c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	75bb      	strb	r3, [r7, #22]
            break;
 800b73a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b73c:	7dbb      	ldrb	r3, [r7, #22]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d119      	bne.n	800b776 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	2b03      	cmp	r3, #3
 800b74c:	d113      	bne.n	800b776 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b74e:	7dba      	ldrb	r2, [r7, #22]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	32ae      	adds	r2, #174	@ 0xae
 800b754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00b      	beq.n	800b776 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b75e:	7dba      	ldrb	r2, [r7, #22]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b766:	7dba      	ldrb	r2, [r7, #22]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	32ae      	adds	r2, #174	@ 0xae
 800b76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f001 f95a 	bl	800ca30 <USBD_CtlSendStatus>
 800b77c:	e032      	b.n	800b7e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b77e:	7afb      	ldrb	r3, [r7, #11]
 800b780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b784:	b2db      	uxtb	r3, r3
 800b786:	4619      	mov	r1, r3
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 fa37 	bl	800bbfc <USBD_CoreFindEP>
 800b78e:	4603      	mov	r3, r0
 800b790:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b792:	7dbb      	ldrb	r3, [r7, #22]
 800b794:	2bff      	cmp	r3, #255	@ 0xff
 800b796:	d025      	beq.n	800b7e4 <USBD_LL_DataOutStage+0x15c>
 800b798:	7dbb      	ldrb	r3, [r7, #22]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d122      	bne.n	800b7e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d117      	bne.n	800b7da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b7aa:	7dba      	ldrb	r2, [r7, #22]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	32ae      	adds	r2, #174	@ 0xae
 800b7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00f      	beq.n	800b7da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b7ba:	7dba      	ldrb	r2, [r7, #22]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b7c2:	7dba      	ldrb	r2, [r7, #22]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	32ae      	adds	r2, #174	@ 0xae
 800b7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	7afa      	ldrb	r2, [r7, #11]
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	4798      	blx	r3
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	e000      	b.n	800b7e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b086      	sub	sp, #24
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d16f      	bne.n	800b8e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3314      	adds	r3, #20
 800b806:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d15a      	bne.n	800b8c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	689a      	ldr	r2, [r3, #8]
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d914      	bls.n	800b848 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	689a      	ldr	r2, [r3, #8]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	1ad2      	subs	r2, r2, r3
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	461a      	mov	r2, r3
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f001 f8bc 	bl	800c9b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b83a:	2300      	movs	r3, #0
 800b83c:	2200      	movs	r2, #0
 800b83e:	2100      	movs	r1, #0
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f002 ff13 	bl	800e66c <USBD_LL_PrepareReceive>
 800b846:	e03f      	b.n	800b8c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	68da      	ldr	r2, [r3, #12]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	429a      	cmp	r2, r3
 800b852:	d11c      	bne.n	800b88e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	685a      	ldr	r2, [r3, #4]
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d316      	bcc.n	800b88e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	685a      	ldr	r2, [r3, #4]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d20f      	bcs.n	800b88e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b86e:	2200      	movs	r2, #0
 800b870:	2100      	movs	r1, #0
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f001 f89d 	bl	800c9b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b880:	2300      	movs	r3, #0
 800b882:	2200      	movs	r2, #0
 800b884:	2100      	movs	r1, #0
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f002 fef0 	bl	800e66c <USBD_LL_PrepareReceive>
 800b88c:	e01c      	b.n	800b8c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b03      	cmp	r3, #3
 800b898:	d10f      	bne.n	800b8ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d009      	beq.n	800b8ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8ba:	2180      	movs	r1, #128	@ 0x80
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f002 fe2b 	bl	800e518 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f001 f8c7 	bl	800ca56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d03a      	beq.n	800b948 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f7ff fe42 	bl	800b55c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b8e0:	e032      	b.n	800b948 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b8e2:	7afb      	ldrb	r3, [r7, #11]
 800b8e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f000 f985 	bl	800bbfc <USBD_CoreFindEP>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	2bff      	cmp	r3, #255	@ 0xff
 800b8fa:	d025      	beq.n	800b948 <USBD_LL_DataInStage+0x15a>
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d122      	bne.n	800b948 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b03      	cmp	r3, #3
 800b90c:	d11c      	bne.n	800b948 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b90e:	7dfa      	ldrb	r2, [r7, #23]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	32ae      	adds	r2, #174	@ 0xae
 800b914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d014      	beq.n	800b948 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b91e:	7dfa      	ldrb	r2, [r7, #23]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b926:	7dfa      	ldrb	r2, [r7, #23]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	32ae      	adds	r2, #174	@ 0xae
 800b92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	7afa      	ldrb	r2, [r7, #11]
 800b934:	4611      	mov	r1, r2
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	4798      	blx	r3
 800b93a:	4603      	mov	r3, r0
 800b93c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b93e:	7dbb      	ldrb	r3, [r7, #22]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b944:	7dbb      	ldrb	r3, [r7, #22]
 800b946:	e000      	b.n	800b94a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d014      	beq.n	800b9b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00e      	beq.n	800b9b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	6852      	ldr	r2, [r2, #4]
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	4798      	blx	r3
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9b8:	2340      	movs	r3, #64	@ 0x40
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2100      	movs	r1, #0
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f002 fd65 	bl	800e48e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2240      	movs	r2, #64	@ 0x40
 800b9d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9d4:	2340      	movs	r3, #64	@ 0x40
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	2180      	movs	r1, #128	@ 0x80
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f002 fd57 	bl	800e48e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2240      	movs	r2, #64	@ 0x40
 800b9ea:	621a      	str	r2, [r3, #32]

  return ret;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b083      	sub	sp, #12
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	78fa      	ldrb	r2, [r7, #3]
 800ba06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b083      	sub	sp, #12
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b04      	cmp	r3, #4
 800ba28:	d006      	beq.n	800ba38 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2204      	movs	r2, #4
 800ba3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b04      	cmp	r3, #4
 800ba60:	d106      	bne.n	800ba70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b082      	sub	sp, #8
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	d110      	bne.n	800bab4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00b      	beq.n	800bab4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baa2:	69db      	ldr	r3, [r3, #28]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d005      	beq.n	800bab4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baae:	69db      	ldr	r3, [r3, #28]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	32ae      	adds	r2, #174	@ 0xae
 800bad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d101      	bne.n	800bae0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800badc:	2303      	movs	r3, #3
 800bade:	e01c      	b.n	800bb1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d115      	bne.n	800bb18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	32ae      	adds	r2, #174	@ 0xae
 800baf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00b      	beq.n	800bb18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	32ae      	adds	r2, #174	@ 0xae
 800bb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	78fa      	ldrb	r2, [r7, #3]
 800bb12:	4611      	mov	r1, r2
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b082      	sub	sp, #8
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	32ae      	adds	r2, #174	@ 0xae
 800bb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d101      	bne.n	800bb44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb40:	2303      	movs	r3, #3
 800bb42:	e01c      	b.n	800bb7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d115      	bne.n	800bb7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	32ae      	adds	r2, #174	@ 0xae
 800bb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00b      	beq.n	800bb7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	32ae      	adds	r2, #174	@ 0xae
 800bb6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb74:	78fa      	ldrb	r2, [r7, #3]
 800bb76:	4611      	mov	r1, r2
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bb86:	b480      	push	{r7}
 800bb88:	b083      	sub	sp, #12
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00e      	beq.n	800bbd8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6852      	ldr	r2, [r2, #4]
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	4611      	mov	r1, r2
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	4798      	blx	r3
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	460b      	mov	r3, r1
 800bc06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b086      	sub	sp, #24
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	460b      	mov	r3, r1
 800bc20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	885b      	ldrh	r3, [r3, #2]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	7812      	ldrb	r2, [r2, #0]
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d91f      	bls.n	800bc7c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bc42:	e013      	b.n	800bc6c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bc44:	f107 030a 	add.w	r3, r7, #10
 800bc48:	4619      	mov	r1, r3
 800bc4a:	6978      	ldr	r0, [r7, #20]
 800bc4c:	f000 f81b 	bl	800bc86 <USBD_GetNextDesc>
 800bc50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	785b      	ldrb	r3, [r3, #1]
 800bc56:	2b05      	cmp	r3, #5
 800bc58:	d108      	bne.n	800bc6c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	789b      	ldrb	r3, [r3, #2]
 800bc62:	78fa      	ldrb	r2, [r7, #3]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d008      	beq.n	800bc7a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	885b      	ldrh	r3, [r3, #2]
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	897b      	ldrh	r3, [r7, #10]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d8e5      	bhi.n	800bc44 <USBD_GetEpDesc+0x2e>
 800bc78:	e000      	b.n	800bc7c <USBD_GetEpDesc+0x66>
          break;
 800bc7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bc7c:	693b      	ldr	r3, [r7, #16]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3718      	adds	r7, #24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b085      	sub	sp, #20
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	7812      	ldrb	r2, [r2, #0]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4413      	add	r3, r2
 800bcae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b087      	sub	sp, #28
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bcdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bce0:	021b      	lsls	r3, r3, #8
 800bce2:	b21a      	sxth	r2, r3
 800bce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	b21b      	sxth	r3, r3
 800bcec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bcee:	89fb      	ldrh	r3, [r7, #14]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	371c      	adds	r7, #28
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd12:	2b40      	cmp	r3, #64	@ 0x40
 800bd14:	d005      	beq.n	800bd22 <USBD_StdDevReq+0x26>
 800bd16:	2b40      	cmp	r3, #64	@ 0x40
 800bd18:	d857      	bhi.n	800bdca <USBD_StdDevReq+0xce>
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00f      	beq.n	800bd3e <USBD_StdDevReq+0x42>
 800bd1e:	2b20      	cmp	r3, #32
 800bd20:	d153      	bne.n	800bdca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	32ae      	adds	r2, #174	@ 0xae
 800bd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	4798      	blx	r3
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd3c:	e04a      	b.n	800bdd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	785b      	ldrb	r3, [r3, #1]
 800bd42:	2b09      	cmp	r3, #9
 800bd44:	d83b      	bhi.n	800bdbe <USBD_StdDevReq+0xc2>
 800bd46:	a201      	add	r2, pc, #4	@ (adr r2, 800bd4c <USBD_StdDevReq+0x50>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bda1 	.word	0x0800bda1
 800bd50:	0800bdb5 	.word	0x0800bdb5
 800bd54:	0800bdbf 	.word	0x0800bdbf
 800bd58:	0800bdab 	.word	0x0800bdab
 800bd5c:	0800bdbf 	.word	0x0800bdbf
 800bd60:	0800bd7f 	.word	0x0800bd7f
 800bd64:	0800bd75 	.word	0x0800bd75
 800bd68:	0800bdbf 	.word	0x0800bdbf
 800bd6c:	0800bd97 	.word	0x0800bd97
 800bd70:	0800bd89 	.word	0x0800bd89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fa3c 	bl	800c1f4 <USBD_GetDescriptor>
          break;
 800bd7c:	e024      	b.n	800bdc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fba1 	bl	800c4c8 <USBD_SetAddress>
          break;
 800bd86:	e01f      	b.n	800bdc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fbe0 	bl	800c550 <USBD_SetConfig>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]
          break;
 800bd94:	e018      	b.n	800bdc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fc83 	bl	800c6a4 <USBD_GetConfig>
          break;
 800bd9e:	e013      	b.n	800bdc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fcb4 	bl	800c710 <USBD_GetStatus>
          break;
 800bda8:	e00e      	b.n	800bdc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fce3 	bl	800c778 <USBD_SetFeature>
          break;
 800bdb2:	e009      	b.n	800bdc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fd07 	bl	800c7ca <USBD_ClrFeature>
          break;
 800bdbc:	e004      	b.n	800bdc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fd5e 	bl	800c882 <USBD_CtlError>
          break;
 800bdc6:	bf00      	nop
      }
      break;
 800bdc8:	e004      	b.n	800bdd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fd58 	bl	800c882 <USBD_CtlError>
      break;
 800bdd2:	bf00      	nop
  }

  return ret;
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop

0800bde0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdf6:	2b40      	cmp	r3, #64	@ 0x40
 800bdf8:	d005      	beq.n	800be06 <USBD_StdItfReq+0x26>
 800bdfa:	2b40      	cmp	r3, #64	@ 0x40
 800bdfc:	d852      	bhi.n	800bea4 <USBD_StdItfReq+0xc4>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <USBD_StdItfReq+0x26>
 800be02:	2b20      	cmp	r3, #32
 800be04:	d14e      	bne.n	800bea4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	3b01      	subs	r3, #1
 800be10:	2b02      	cmp	r3, #2
 800be12:	d840      	bhi.n	800be96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	889b      	ldrh	r3, [r3, #4]
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d836      	bhi.n	800be8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	889b      	ldrh	r3, [r3, #4]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	4619      	mov	r1, r3
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f7ff fedb 	bl	800bbe2 <USBD_CoreFindIF>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be30:	7bbb      	ldrb	r3, [r7, #14]
 800be32:	2bff      	cmp	r3, #255	@ 0xff
 800be34:	d01d      	beq.n	800be72 <USBD_StdItfReq+0x92>
 800be36:	7bbb      	ldrb	r3, [r7, #14]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d11a      	bne.n	800be72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800be3c:	7bba      	ldrb	r2, [r7, #14]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	32ae      	adds	r2, #174	@ 0xae
 800be42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00f      	beq.n	800be6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800be4c:	7bba      	ldrb	r2, [r7, #14]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be54:	7bba      	ldrb	r2, [r7, #14]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	32ae      	adds	r2, #174	@ 0xae
 800be5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	4798      	blx	r3
 800be66:	4603      	mov	r3, r0
 800be68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be6a:	e004      	b.n	800be76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800be6c:	2303      	movs	r3, #3
 800be6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be70:	e001      	b.n	800be76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800be72:	2303      	movs	r3, #3
 800be74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	88db      	ldrh	r3, [r3, #6]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d110      	bne.n	800bea0 <USBD_StdItfReq+0xc0>
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10d      	bne.n	800bea0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fdd3 	bl	800ca30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be8a:	e009      	b.n	800bea0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fcf7 	bl	800c882 <USBD_CtlError>
          break;
 800be94:	e004      	b.n	800bea0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fcf2 	bl	800c882 <USBD_CtlError>
          break;
 800be9e:	e000      	b.n	800bea2 <USBD_StdItfReq+0xc2>
          break;
 800bea0:	bf00      	nop
      }
      break;
 800bea2:	e004      	b.n	800beae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fceb 	bl	800c882 <USBD_CtlError>
      break;
 800beac:	bf00      	nop
  }

  return ret;
 800beae:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	889b      	ldrh	r3, [r3, #4]
 800beca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bed4:	2b40      	cmp	r3, #64	@ 0x40
 800bed6:	d007      	beq.n	800bee8 <USBD_StdEPReq+0x30>
 800bed8:	2b40      	cmp	r3, #64	@ 0x40
 800beda:	f200 817f 	bhi.w	800c1dc <USBD_StdEPReq+0x324>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d02a      	beq.n	800bf38 <USBD_StdEPReq+0x80>
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	f040 817a 	bne.w	800c1dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff fe85 	bl	800bbfc <USBD_CoreFindEP>
 800bef2:	4603      	mov	r3, r0
 800bef4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bef6:	7b7b      	ldrb	r3, [r7, #13]
 800bef8:	2bff      	cmp	r3, #255	@ 0xff
 800befa:	f000 8174 	beq.w	800c1e6 <USBD_StdEPReq+0x32e>
 800befe:	7b7b      	ldrb	r3, [r7, #13]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f040 8170 	bne.w	800c1e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bf06:	7b7a      	ldrb	r2, [r7, #13]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bf0e:	7b7a      	ldrb	r2, [r7, #13]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	32ae      	adds	r2, #174	@ 0xae
 800bf14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 8163 	beq.w	800c1e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bf20:	7b7a      	ldrb	r2, [r7, #13]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	32ae      	adds	r2, #174	@ 0xae
 800bf26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	4798      	blx	r3
 800bf32:	4603      	mov	r3, r0
 800bf34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bf36:	e156      	b.n	800c1e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	785b      	ldrb	r3, [r3, #1]
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d008      	beq.n	800bf52 <USBD_StdEPReq+0x9a>
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	f300 8145 	bgt.w	800c1d0 <USBD_StdEPReq+0x318>
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f000 809b 	beq.w	800c082 <USBD_StdEPReq+0x1ca>
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d03c      	beq.n	800bfca <USBD_StdEPReq+0x112>
 800bf50:	e13e      	b.n	800c1d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d002      	beq.n	800bf64 <USBD_StdEPReq+0xac>
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	d016      	beq.n	800bf90 <USBD_StdEPReq+0xd8>
 800bf62:	e02c      	b.n	800bfbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00d      	beq.n	800bf86 <USBD_StdEPReq+0xce>
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	2b80      	cmp	r3, #128	@ 0x80
 800bf6e:	d00a      	beq.n	800bf86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf70:	7bbb      	ldrb	r3, [r7, #14]
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f002 facf 	bl	800e518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf7a:	2180      	movs	r1, #128	@ 0x80
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f002 facb 	bl	800e518 <USBD_LL_StallEP>
 800bf82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf84:	e020      	b.n	800bfc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fc7a 	bl	800c882 <USBD_CtlError>
              break;
 800bf8e:	e01b      	b.n	800bfc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	885b      	ldrh	r3, [r3, #2]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10e      	bne.n	800bfb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00b      	beq.n	800bfb6 <USBD_StdEPReq+0xfe>
 800bf9e:	7bbb      	ldrb	r3, [r7, #14]
 800bfa0:	2b80      	cmp	r3, #128	@ 0x80
 800bfa2:	d008      	beq.n	800bfb6 <USBD_StdEPReq+0xfe>
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	88db      	ldrh	r3, [r3, #6]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d104      	bne.n	800bfb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f002 fab1 	bl	800e518 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fd3a 	bl	800ca30 <USBD_CtlSendStatus>

              break;
 800bfbc:	e004      	b.n	800bfc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fc5e 	bl	800c882 <USBD_CtlError>
              break;
 800bfc6:	bf00      	nop
          }
          break;
 800bfc8:	e107      	b.n	800c1da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d002      	beq.n	800bfdc <USBD_StdEPReq+0x124>
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d016      	beq.n	800c008 <USBD_StdEPReq+0x150>
 800bfda:	e04b      	b.n	800c074 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfdc:	7bbb      	ldrb	r3, [r7, #14]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00d      	beq.n	800bffe <USBD_StdEPReq+0x146>
 800bfe2:	7bbb      	ldrb	r3, [r7, #14]
 800bfe4:	2b80      	cmp	r3, #128	@ 0x80
 800bfe6:	d00a      	beq.n	800bffe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfe8:	7bbb      	ldrb	r3, [r7, #14]
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f002 fa93 	bl	800e518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bff2:	2180      	movs	r1, #128	@ 0x80
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f002 fa8f 	bl	800e518 <USBD_LL_StallEP>
 800bffa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bffc:	e040      	b.n	800c080 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fc3e 	bl	800c882 <USBD_CtlError>
              break;
 800c006:	e03b      	b.n	800c080 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	885b      	ldrh	r3, [r3, #2]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d136      	bne.n	800c07e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c010:	7bbb      	ldrb	r3, [r7, #14]
 800c012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c016:	2b00      	cmp	r3, #0
 800c018:	d004      	beq.n	800c024 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f002 fa99 	bl	800e556 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fd03 	bl	800ca30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff fde4 	bl	800bbfc <USBD_CoreFindEP>
 800c034:	4603      	mov	r3, r0
 800c036:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c038:	7b7b      	ldrb	r3, [r7, #13]
 800c03a:	2bff      	cmp	r3, #255	@ 0xff
 800c03c:	d01f      	beq.n	800c07e <USBD_StdEPReq+0x1c6>
 800c03e:	7b7b      	ldrb	r3, [r7, #13]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d11c      	bne.n	800c07e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c044:	7b7a      	ldrb	r2, [r7, #13]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c04c:	7b7a      	ldrb	r2, [r7, #13]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	32ae      	adds	r2, #174	@ 0xae
 800c052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d010      	beq.n	800c07e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c05c:	7b7a      	ldrb	r2, [r7, #13]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	32ae      	adds	r2, #174	@ 0xae
 800c062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	4798      	blx	r3
 800c06e:	4603      	mov	r3, r0
 800c070:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c072:	e004      	b.n	800c07e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fc03 	bl	800c882 <USBD_CtlError>
              break;
 800c07c:	e000      	b.n	800c080 <USBD_StdEPReq+0x1c8>
              break;
 800c07e:	bf00      	nop
          }
          break;
 800c080:	e0ab      	b.n	800c1da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d002      	beq.n	800c094 <USBD_StdEPReq+0x1dc>
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d032      	beq.n	800c0f8 <USBD_StdEPReq+0x240>
 800c092:	e097      	b.n	800c1c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c094:	7bbb      	ldrb	r3, [r7, #14]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d007      	beq.n	800c0aa <USBD_StdEPReq+0x1f2>
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
 800c09c:	2b80      	cmp	r3, #128	@ 0x80
 800c09e:	d004      	beq.n	800c0aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fbed 	bl	800c882 <USBD_CtlError>
                break;
 800c0a8:	e091      	b.n	800c1ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	da0b      	bge.n	800c0ca <USBD_StdEPReq+0x212>
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4413      	add	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	3310      	adds	r3, #16
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	e00b      	b.n	800c0e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0ca:	7bbb      	ldrb	r3, [r7, #14]
 800c0cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	4413      	add	r3, r2
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fc43 	bl	800c97c <USBD_CtlSendData>
              break;
 800c0f6:	e06a      	b.n	800c1ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	da11      	bge.n	800c124 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c100:	7bbb      	ldrb	r3, [r7, #14]
 800c102:	f003 020f 	and.w	r2, r3, #15
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4613      	mov	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	440b      	add	r3, r1
 800c112:	3324      	adds	r3, #36	@ 0x24
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d117      	bne.n	800c14a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fbb0 	bl	800c882 <USBD_CtlError>
                  break;
 800c122:	e054      	b.n	800c1ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c124:	7bbb      	ldrb	r3, [r7, #14]
 800c126:	f003 020f 	and.w	r2, r3, #15
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	4613      	mov	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	440b      	add	r3, r1
 800c136:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d104      	bne.n	800c14a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fb9d 	bl	800c882 <USBD_CtlError>
                  break;
 800c148:	e041      	b.n	800c1ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c14a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da0b      	bge.n	800c16a <USBD_StdEPReq+0x2b2>
 800c152:	7bbb      	ldrb	r3, [r7, #14]
 800c154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	3310      	adds	r3, #16
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4413      	add	r3, r2
 800c166:	3304      	adds	r3, #4
 800c168:	e00b      	b.n	800c182 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c170:	4613      	mov	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	4413      	add	r3, r2
 800c180:	3304      	adds	r3, #4
 800c182:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d002      	beq.n	800c190 <USBD_StdEPReq+0x2d8>
 800c18a:	7bbb      	ldrb	r3, [r7, #14]
 800c18c:	2b80      	cmp	r3, #128	@ 0x80
 800c18e:	d103      	bne.n	800c198 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2200      	movs	r2, #0
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	e00e      	b.n	800c1b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f002 f9f9 	bl	800e594 <USBD_LL_IsStallEP>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d003      	beq.n	800c1b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	e002      	b.n	800c1b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fbdd 	bl	800c97c <USBD_CtlSendData>
              break;
 800c1c2:	e004      	b.n	800c1ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fb5b 	bl	800c882 <USBD_CtlError>
              break;
 800c1cc:	bf00      	nop
          }
          break;
 800c1ce:	e004      	b.n	800c1da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fb55 	bl	800c882 <USBD_CtlError>
          break;
 800c1d8:	bf00      	nop
      }
      break;
 800c1da:	e005      	b.n	800c1e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c1dc:	6839      	ldr	r1, [r7, #0]
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fb4f 	bl	800c882 <USBD_CtlError>
      break;
 800c1e4:	e000      	b.n	800c1e8 <USBD_StdEPReq+0x330>
      break;
 800c1e6:	bf00      	nop
  }

  return ret;
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
	...

0800c1f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1fe:	2300      	movs	r3, #0
 800c200:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c202:	2300      	movs	r3, #0
 800c204:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c206:	2300      	movs	r3, #0
 800c208:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	885b      	ldrh	r3, [r3, #2]
 800c20e:	0a1b      	lsrs	r3, r3, #8
 800c210:	b29b      	uxth	r3, r3
 800c212:	3b01      	subs	r3, #1
 800c214:	2b06      	cmp	r3, #6
 800c216:	f200 8128 	bhi.w	800c46a <USBD_GetDescriptor+0x276>
 800c21a:	a201      	add	r2, pc, #4	@ (adr r2, 800c220 <USBD_GetDescriptor+0x2c>)
 800c21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c220:	0800c23d 	.word	0x0800c23d
 800c224:	0800c255 	.word	0x0800c255
 800c228:	0800c295 	.word	0x0800c295
 800c22c:	0800c46b 	.word	0x0800c46b
 800c230:	0800c46b 	.word	0x0800c46b
 800c234:	0800c40b 	.word	0x0800c40b
 800c238:	0800c437 	.word	0x0800c437
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	7c12      	ldrb	r2, [r2, #16]
 800c248:	f107 0108 	add.w	r1, r7, #8
 800c24c:	4610      	mov	r0, r2
 800c24e:	4798      	blx	r3
 800c250:	60f8      	str	r0, [r7, #12]
      break;
 800c252:	e112      	b.n	800c47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	7c1b      	ldrb	r3, [r3, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10d      	bne.n	800c278 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c264:	f107 0208 	add.w	r2, r7, #8
 800c268:	4610      	mov	r0, r2
 800c26a:	4798      	blx	r3
 800c26c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3301      	adds	r3, #1
 800c272:	2202      	movs	r2, #2
 800c274:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c276:	e100      	b.n	800c47a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c280:	f107 0208 	add.w	r2, r7, #8
 800c284:	4610      	mov	r0, r2
 800c286:	4798      	blx	r3
 800c288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3301      	adds	r3, #1
 800c28e:	2202      	movs	r2, #2
 800c290:	701a      	strb	r2, [r3, #0]
      break;
 800c292:	e0f2      	b.n	800c47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	885b      	ldrh	r3, [r3, #2]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b05      	cmp	r3, #5
 800c29c:	f200 80ac 	bhi.w	800c3f8 <USBD_GetDescriptor+0x204>
 800c2a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2a8 <USBD_GetDescriptor+0xb4>)
 800c2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a6:	bf00      	nop
 800c2a8:	0800c2c1 	.word	0x0800c2c1
 800c2ac:	0800c2f5 	.word	0x0800c2f5
 800c2b0:	0800c329 	.word	0x0800c329
 800c2b4:	0800c35d 	.word	0x0800c35d
 800c2b8:	0800c391 	.word	0x0800c391
 800c2bc:	0800c3c5 	.word	0x0800c3c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00b      	beq.n	800c2e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	7c12      	ldrb	r2, [r2, #16]
 800c2d8:	f107 0108 	add.w	r1, r7, #8
 800c2dc:	4610      	mov	r0, r2
 800c2de:	4798      	blx	r3
 800c2e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2e2:	e091      	b.n	800c408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 facb 	bl	800c882 <USBD_CtlError>
            err++;
 800c2ec:	7afb      	ldrb	r3, [r7, #11]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2f2:	e089      	b.n	800c408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	7c12      	ldrb	r2, [r2, #16]
 800c30c:	f107 0108 	add.w	r1, r7, #8
 800c310:	4610      	mov	r0, r2
 800c312:	4798      	blx	r3
 800c314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c316:	e077      	b.n	800c408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fab1 	bl	800c882 <USBD_CtlError>
            err++;
 800c320:	7afb      	ldrb	r3, [r7, #11]
 800c322:	3301      	adds	r3, #1
 800c324:	72fb      	strb	r3, [r7, #11]
          break;
 800c326:	e06f      	b.n	800c408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00b      	beq.n	800c34c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	7c12      	ldrb	r2, [r2, #16]
 800c340:	f107 0108 	add.w	r1, r7, #8
 800c344:	4610      	mov	r0, r2
 800c346:	4798      	blx	r3
 800c348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c34a:	e05d      	b.n	800c408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fa97 	bl	800c882 <USBD_CtlError>
            err++;
 800c354:	7afb      	ldrb	r3, [r7, #11]
 800c356:	3301      	adds	r3, #1
 800c358:	72fb      	strb	r3, [r7, #11]
          break;
 800c35a:	e055      	b.n	800c408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00b      	beq.n	800c380 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	7c12      	ldrb	r2, [r2, #16]
 800c374:	f107 0108 	add.w	r1, r7, #8
 800c378:	4610      	mov	r0, r2
 800c37a:	4798      	blx	r3
 800c37c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c37e:	e043      	b.n	800c408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fa7d 	bl	800c882 <USBD_CtlError>
            err++;
 800c388:	7afb      	ldrb	r3, [r7, #11]
 800c38a:	3301      	adds	r3, #1
 800c38c:	72fb      	strb	r3, [r7, #11]
          break;
 800c38e:	e03b      	b.n	800c408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c396:	695b      	ldr	r3, [r3, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00b      	beq.n	800c3b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	7c12      	ldrb	r2, [r2, #16]
 800c3a8:	f107 0108 	add.w	r1, r7, #8
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4798      	blx	r3
 800c3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3b2:	e029      	b.n	800c408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fa63 	bl	800c882 <USBD_CtlError>
            err++;
 800c3bc:	7afb      	ldrb	r3, [r7, #11]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3c2:	e021      	b.n	800c408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00b      	beq.n	800c3e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	7c12      	ldrb	r2, [r2, #16]
 800c3dc:	f107 0108 	add.w	r1, r7, #8
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	4798      	blx	r3
 800c3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3e6:	e00f      	b.n	800c408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fa49 	bl	800c882 <USBD_CtlError>
            err++;
 800c3f0:	7afb      	ldrb	r3, [r7, #11]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3f6:	e007      	b.n	800c408 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3f8:	6839      	ldr	r1, [r7, #0]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fa41 	bl	800c882 <USBD_CtlError>
          err++;
 800c400:	7afb      	ldrb	r3, [r7, #11]
 800c402:	3301      	adds	r3, #1
 800c404:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c406:	bf00      	nop
      }
      break;
 800c408:	e037      	b.n	800c47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	7c1b      	ldrb	r3, [r3, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d109      	bne.n	800c426 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c41a:	f107 0208 	add.w	r2, r7, #8
 800c41e:	4610      	mov	r0, r2
 800c420:	4798      	blx	r3
 800c422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c424:	e029      	b.n	800c47a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c426:	6839      	ldr	r1, [r7, #0]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 fa2a 	bl	800c882 <USBD_CtlError>
        err++;
 800c42e:	7afb      	ldrb	r3, [r7, #11]
 800c430:	3301      	adds	r3, #1
 800c432:	72fb      	strb	r3, [r7, #11]
      break;
 800c434:	e021      	b.n	800c47a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	7c1b      	ldrb	r3, [r3, #16]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10d      	bne.n	800c45a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c446:	f107 0208 	add.w	r2, r7, #8
 800c44a:	4610      	mov	r0, r2
 800c44c:	4798      	blx	r3
 800c44e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	3301      	adds	r3, #1
 800c454:	2207      	movs	r2, #7
 800c456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c458:	e00f      	b.n	800c47a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c45a:	6839      	ldr	r1, [r7, #0]
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 fa10 	bl	800c882 <USBD_CtlError>
        err++;
 800c462:	7afb      	ldrb	r3, [r7, #11]
 800c464:	3301      	adds	r3, #1
 800c466:	72fb      	strb	r3, [r7, #11]
      break;
 800c468:	e007      	b.n	800c47a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c46a:	6839      	ldr	r1, [r7, #0]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fa08 	bl	800c882 <USBD_CtlError>
      err++;
 800c472:	7afb      	ldrb	r3, [r7, #11]
 800c474:	3301      	adds	r3, #1
 800c476:	72fb      	strb	r3, [r7, #11]
      break;
 800c478:	bf00      	nop
  }

  if (err != 0U)
 800c47a:	7afb      	ldrb	r3, [r7, #11]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d11e      	bne.n	800c4be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	88db      	ldrh	r3, [r3, #6]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d016      	beq.n	800c4b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c488:	893b      	ldrh	r3, [r7, #8]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00e      	beq.n	800c4ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	88da      	ldrh	r2, [r3, #6]
 800c492:	893b      	ldrh	r3, [r7, #8]
 800c494:	4293      	cmp	r3, r2
 800c496:	bf28      	it	cs
 800c498:	4613      	movcs	r3, r2
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c49e:	893b      	ldrh	r3, [r7, #8]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	68f9      	ldr	r1, [r7, #12]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fa69 	bl	800c97c <USBD_CtlSendData>
 800c4aa:	e009      	b.n	800c4c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f9e7 	bl	800c882 <USBD_CtlError>
 800c4b4:	e004      	b.n	800c4c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 faba 	bl	800ca30 <USBD_CtlSendStatus>
 800c4bc:	e000      	b.n	800c4c0 <USBD_GetDescriptor+0x2cc>
    return;
 800c4be:	bf00      	nop
  }
}
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop

0800c4c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	889b      	ldrh	r3, [r3, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d131      	bne.n	800c53e <USBD_SetAddress+0x76>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	88db      	ldrh	r3, [r3, #6]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d12d      	bne.n	800c53e <USBD_SetAddress+0x76>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	885b      	ldrh	r3, [r3, #2]
 800c4e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4e8:	d829      	bhi.n	800c53e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	885b      	ldrh	r3, [r3, #2]
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d104      	bne.n	800c50c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f9bc 	bl	800c882 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c50a:	e01d      	b.n	800c548 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	7bfa      	ldrb	r2, [r7, #15]
 800c510:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c514:	7bfb      	ldrb	r3, [r7, #15]
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f002 f867 	bl	800e5ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa86 	bl	800ca30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c524:	7bfb      	ldrb	r3, [r7, #15]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d004      	beq.n	800c534 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2202      	movs	r2, #2
 800c52e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c532:	e009      	b.n	800c548 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c53c:	e004      	b.n	800c548 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 f99e 	bl	800c882 <USBD_CtlError>
  }
}
 800c546:	bf00      	nop
 800c548:	bf00      	nop
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	885b      	ldrh	r3, [r3, #2]
 800c562:	b2da      	uxtb	r2, r3
 800c564:	4b4e      	ldr	r3, [pc, #312]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c566:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c568:	4b4d      	ldr	r3, [pc, #308]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d905      	bls.n	800c57c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f985 	bl	800c882 <USBD_CtlError>
    return USBD_FAIL;
 800c578:	2303      	movs	r3, #3
 800c57a:	e08c      	b.n	800c696 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b02      	cmp	r3, #2
 800c586:	d002      	beq.n	800c58e <USBD_SetConfig+0x3e>
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d029      	beq.n	800c5e0 <USBD_SetConfig+0x90>
 800c58c:	e075      	b.n	800c67a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c58e:	4b44      	ldr	r3, [pc, #272]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d020      	beq.n	800c5d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c596:	4b42      	ldr	r3, [pc, #264]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5a0:	4b3f      	ldr	r3, [pc, #252]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7fe ffe3 	bl	800b572 <USBD_SetClassConfig>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d008      	beq.n	800c5c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f962 	bl	800c882 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5c6:	e065      	b.n	800c694 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 fa31 	bl	800ca30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2203      	movs	r2, #3
 800c5d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c5d6:	e05d      	b.n	800c694 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fa29 	bl	800ca30 <USBD_CtlSendStatus>
      break;
 800c5de:	e059      	b.n	800c694 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5e0:	4b2f      	ldr	r3, [pc, #188]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d112      	bne.n	800c60e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c5f0:	4b2b      	ldr	r3, [pc, #172]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5fa:	4b29      	ldr	r3, [pc, #164]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7fe ffd2 	bl	800b5aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fa12 	bl	800ca30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c60c:	e042      	b.n	800c694 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c60e:	4b24      	ldr	r3, [pc, #144]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d02a      	beq.n	800c672 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7fe ffc0 	bl	800b5aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c62a:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c634:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7fe ff99 	bl	800b572 <USBD_SetClassConfig>
 800c640:	4603      	mov	r3, r0
 800c642:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00f      	beq.n	800c66a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f918 	bl	800c882 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7fe ffa5 	bl	800b5aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2202      	movs	r2, #2
 800c664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c668:	e014      	b.n	800c694 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f9e0 	bl	800ca30 <USBD_CtlSendStatus>
      break;
 800c670:	e010      	b.n	800c694 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f9dc 	bl	800ca30 <USBD_CtlSendStatus>
      break;
 800c678:	e00c      	b.n	800c694 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f900 	bl	800c882 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c682:	4b07      	ldr	r3, [pc, #28]	@ (800c6a0 <USBD_SetConfig+0x150>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7fe ff8e 	bl	800b5aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c68e:	2303      	movs	r3, #3
 800c690:	73fb      	strb	r3, [r7, #15]
      break;
 800c692:	bf00      	nop
  }

  return ret;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	20000424 	.word	0x20000424

0800c6a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	88db      	ldrh	r3, [r3, #6]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d004      	beq.n	800c6c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f8e2 	bl	800c882 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6be:	e023      	b.n	800c708 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	dc02      	bgt.n	800c6d2 <USBD_GetConfig+0x2e>
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dc03      	bgt.n	800c6d8 <USBD_GetConfig+0x34>
 800c6d0:	e015      	b.n	800c6fe <USBD_GetConfig+0x5a>
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d00b      	beq.n	800c6ee <USBD_GetConfig+0x4a>
 800c6d6:	e012      	b.n	800c6fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f948 	bl	800c97c <USBD_CtlSendData>
        break;
 800c6ec:	e00c      	b.n	800c708 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f940 	bl	800c97c <USBD_CtlSendData>
        break;
 800c6fc:	e004      	b.n	800c708 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f8be 	bl	800c882 <USBD_CtlError>
        break;
 800c706:	bf00      	nop
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c720:	b2db      	uxtb	r3, r3
 800c722:	3b01      	subs	r3, #1
 800c724:	2b02      	cmp	r3, #2
 800c726:	d81e      	bhi.n	800c766 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	88db      	ldrh	r3, [r3, #6]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d004      	beq.n	800c73a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f8a5 	bl	800c882 <USBD_CtlError>
        break;
 800c738:	e01a      	b.n	800c770 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f043 0202 	orr.w	r2, r3, #2
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	330c      	adds	r3, #12
 800c75a:	2202      	movs	r2, #2
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f90c 	bl	800c97c <USBD_CtlSendData>
      break;
 800c764:	e004      	b.n	800c770 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f88a 	bl	800c882 <USBD_CtlError>
      break;
 800c76e:	bf00      	nop
  }
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	885b      	ldrh	r3, [r3, #2]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d107      	bne.n	800c79a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f94c 	bl	800ca30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c798:	e013      	b.n	800c7c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	885b      	ldrh	r3, [r3, #2]
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d10b      	bne.n	800c7ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	889b      	ldrh	r3, [r3, #4]
 800c7a6:	0a1b      	lsrs	r3, r3, #8
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f93c 	bl	800ca30 <USBD_CtlSendStatus>
}
 800c7b8:	e003      	b.n	800c7c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f860 	bl	800c882 <USBD_CtlError>
}
 800c7c2:	bf00      	nop
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d80b      	bhi.n	800c7fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	885b      	ldrh	r3, [r3, #2]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d10c      	bne.n	800c804 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f91c 	bl	800ca30 <USBD_CtlSendStatus>
      }
      break;
 800c7f8:	e004      	b.n	800c804 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f840 	bl	800c882 <USBD_CtlError>
      break;
 800c802:	e000      	b.n	800c806 <USBD_ClrFeature+0x3c>
      break;
 800c804:	bf00      	nop
  }
}
 800c806:	bf00      	nop
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	781a      	ldrb	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3301      	adds	r3, #1
 800c828:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	781a      	ldrb	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3301      	adds	r3, #1
 800c836:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff fa40 	bl	800bcbe <SWAPBYTE>
 800c83e:	4603      	mov	r3, r0
 800c840:	461a      	mov	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	3301      	adds	r3, #1
 800c84a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3301      	adds	r3, #1
 800c850:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fa33 	bl	800bcbe <SWAPBYTE>
 800c858:	4603      	mov	r3, r0
 800c85a:	461a      	mov	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3301      	adds	r3, #1
 800c864:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3301      	adds	r3, #1
 800c86a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f7ff fa26 	bl	800bcbe <SWAPBYTE>
 800c872:	4603      	mov	r3, r0
 800c874:	461a      	mov	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	80da      	strh	r2, [r3, #6]
}
 800c87a:	bf00      	nop
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b082      	sub	sp, #8
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c88c:	2180      	movs	r1, #128	@ 0x80
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f001 fe42 	bl	800e518 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c894:	2100      	movs	r1, #0
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f001 fe3e 	bl	800e518 <USBD_LL_StallEP>
}
 800c89c:	bf00      	nop
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d042      	beq.n	800c940 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c8be:	6938      	ldr	r0, [r7, #16]
 800c8c0:	f000 f842 	bl	800c948 <USBD_GetLen>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8ce:	d808      	bhi.n	800c8e2 <USBD_GetString+0x3e>
 800c8d0:	6938      	ldr	r0, [r7, #16]
 800c8d2:	f000 f839 	bl	800c948 <USBD_GetLen>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	3301      	adds	r3, #1
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	e001      	b.n	800c8e6 <USBD_GetString+0x42>
 800c8e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	7812      	ldrb	r2, [r2, #0]
 800c8f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	4413      	add	r3, r2
 800c902:	2203      	movs	r2, #3
 800c904:	701a      	strb	r2, [r3, #0]
  idx++;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	3301      	adds	r3, #1
 800c90a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c90c:	e013      	b.n	800c936 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	4413      	add	r3, r2
 800c914:	693a      	ldr	r2, [r7, #16]
 800c916:	7812      	ldrb	r2, [r2, #0]
 800c918:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	3301      	adds	r3, #1
 800c91e:	613b      	str	r3, [r7, #16]
    idx++;
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	3301      	adds	r3, #1
 800c924:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c926:	7dfb      	ldrb	r3, [r7, #23]
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	4413      	add	r3, r2
 800c92c:	2200      	movs	r2, #0
 800c92e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	3301      	adds	r3, #1
 800c934:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1e7      	bne.n	800c90e <USBD_GetString+0x6a>
 800c93e:	e000      	b.n	800c942 <USBD_GetString+0x9e>
    return;
 800c940:	bf00      	nop
  }
}
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c950:	2300      	movs	r3, #0
 800c952:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c958:	e005      	b.n	800c966 <USBD_GetLen+0x1e>
  {
    len++;
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
 800c95c:	3301      	adds	r3, #1
 800c95e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	3301      	adds	r3, #1
 800c964:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1f5      	bne.n	800c95a <USBD_GetLen+0x12>
  }

  return len;
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2202      	movs	r2, #2
 800c98c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f001 fe41 	bl	800e62a <USBD_LL_Transmit>

  return USBD_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	60f8      	str	r0, [r7, #12]
 800c9ba:	60b9      	str	r1, [r7, #8]
 800c9bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f001 fe30 	bl	800e62a <USBD_LL_Transmit>

  return USBD_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3710      	adds	r7, #16
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2203      	movs	r2, #3
 800c9e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f001 fe34 	bl	800e66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	60f8      	str	r0, [r7, #12]
 800ca16:	60b9      	str	r1, [r7, #8]
 800ca18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	2100      	movs	r1, #0
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f001 fe23 	bl	800e66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2204      	movs	r2, #4
 800ca3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca40:	2300      	movs	r3, #0
 800ca42:	2200      	movs	r2, #0
 800ca44:	2100      	movs	r1, #0
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f001 fdef 	bl	800e62a <USBD_LL_Transmit>

  return USBD_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2205      	movs	r2, #5
 800ca62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca66:	2300      	movs	r3, #0
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 fdfd 	bl	800e66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	4603      	mov	r3, r0
 800ca84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ca86:	79fb      	ldrb	r3, [r7, #7]
 800ca88:	4a08      	ldr	r2, [pc, #32]	@ (800caac <disk_status+0x30>)
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	79fa      	ldrb	r2, [r7, #7]
 800ca94:	4905      	ldr	r1, [pc, #20]	@ (800caac <disk_status+0x30>)
 800ca96:	440a      	add	r2, r1
 800ca98:	7a12      	ldrb	r2, [r2, #8]
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	4798      	blx	r3
 800ca9e:	4603      	mov	r3, r0
 800caa0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	20000450 	.word	0x20000450

0800cab0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	4603      	mov	r3, r0
 800cab8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800caba:	2300      	movs	r3, #0
 800cabc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cabe:	79fb      	ldrb	r3, [r7, #7]
 800cac0:	4a0e      	ldr	r2, [pc, #56]	@ (800cafc <disk_initialize+0x4c>)
 800cac2:	5cd3      	ldrb	r3, [r2, r3]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d114      	bne.n	800caf2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	4a0c      	ldr	r2, [pc, #48]	@ (800cafc <disk_initialize+0x4c>)
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	4413      	add	r3, r2
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	79fa      	ldrb	r2, [r7, #7]
 800cad6:	4909      	ldr	r1, [pc, #36]	@ (800cafc <disk_initialize+0x4c>)
 800cad8:	440a      	add	r2, r1
 800cada:	7a12      	ldrb	r2, [r2, #8]
 800cadc:	4610      	mov	r0, r2
 800cade:	4798      	blx	r3
 800cae0:	4603      	mov	r3, r0
 800cae2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d103      	bne.n	800caf2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	4a03      	ldr	r2, [pc, #12]	@ (800cafc <disk_initialize+0x4c>)
 800caee:	2101      	movs	r1, #1
 800caf0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	20000450 	.word	0x20000450

0800cb00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb00:	b590      	push	{r4, r7, lr}
 800cb02:	b087      	sub	sp, #28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	607a      	str	r2, [r7, #4]
 800cb0a:	603b      	str	r3, [r7, #0]
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
 800cb12:	4a0a      	ldr	r2, [pc, #40]	@ (800cb3c <disk_read+0x3c>)
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	689c      	ldr	r4, [r3, #8]
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	4a07      	ldr	r2, [pc, #28]	@ (800cb3c <disk_read+0x3c>)
 800cb20:	4413      	add	r3, r2
 800cb22:	7a18      	ldrb	r0, [r3, #8]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	68b9      	ldr	r1, [r7, #8]
 800cb2a:	47a0      	blx	r4
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	371c      	adds	r7, #28
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd90      	pop	{r4, r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20000450 	.word	0x20000450

0800cb40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cb40:	b590      	push	{r4, r7, lr}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	607a      	str	r2, [r7, #4]
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	4a0a      	ldr	r2, [pc, #40]	@ (800cb7c <disk_write+0x3c>)
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	68dc      	ldr	r4, [r3, #12]
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
 800cb5e:	4a07      	ldr	r2, [pc, #28]	@ (800cb7c <disk_write+0x3c>)
 800cb60:	4413      	add	r3, r2
 800cb62:	7a18      	ldrb	r0, [r3, #8]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	68b9      	ldr	r1, [r7, #8]
 800cb6a:	47a0      	blx	r4
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	371c      	adds	r7, #28
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd90      	pop	{r4, r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20000450 	.word	0x20000450

0800cb80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	603a      	str	r2, [r7, #0]
 800cb8a:	71fb      	strb	r3, [r7, #7]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	4a09      	ldr	r2, [pc, #36]	@ (800cbb8 <disk_ioctl+0x38>)
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	79fa      	ldrb	r2, [r7, #7]
 800cb9e:	4906      	ldr	r1, [pc, #24]	@ (800cbb8 <disk_ioctl+0x38>)
 800cba0:	440a      	add	r2, r1
 800cba2:	7a10      	ldrb	r0, [r2, #8]
 800cba4:	79b9      	ldrb	r1, [r7, #6]
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	4798      	blx	r3
 800cbaa:	4603      	mov	r3, r0
 800cbac:	73fb      	strb	r3, [r7, #15]
  return res;
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	20000450 	.word	0x20000450

0800cbbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cbcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cbd0:	021b      	lsls	r3, r3, #8
 800cbd2:	b21a      	sxth	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	b21b      	sxth	r3, r3
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	b21b      	sxth	r3, r3
 800cbde:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cbe0:	89fb      	ldrh	r3, [r7, #14]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3714      	adds	r7, #20
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cbee:	b480      	push	{r7}
 800cbf0:	b085      	sub	sp, #20
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	3303      	adds	r3, #3
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	021b      	lsls	r3, r3, #8
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	3202      	adds	r2, #2
 800cc06:	7812      	ldrb	r2, [r2, #0]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	021b      	lsls	r3, r3, #8
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	3201      	adds	r2, #1
 800cc14:	7812      	ldrb	r2, [r2, #0]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	021b      	lsls	r3, r3, #8
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	7812      	ldrb	r2, [r2, #0]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	60fb      	str	r3, [r7, #12]
	return rv;
 800cc26:	68fb      	ldr	r3, [r7, #12]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	607a      	str	r2, [r7, #4]
 800cc46:	887a      	ldrh	r2, [r7, #2]
 800cc48:	b2d2      	uxtb	r2, r2
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	887b      	ldrh	r3, [r7, #2]
 800cc4e:	0a1b      	lsrs	r3, r3, #8
 800cc50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	1c5a      	adds	r2, r3, #1
 800cc56:	607a      	str	r2, [r7, #4]
 800cc58:	887a      	ldrh	r2, [r7, #2]
 800cc5a:	b2d2      	uxtb	r2, r2
 800cc5c:	701a      	strb	r2, [r3, #0]
}
 800cc5e:	bf00      	nop
 800cc60:	370c      	adds	r7, #12
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b083      	sub	sp, #12
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	607a      	str	r2, [r7, #4]
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	b2d2      	uxtb	r2, r2
 800cc7e:	701a      	strb	r2, [r3, #0]
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	0a1b      	lsrs	r3, r3, #8
 800cc84:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	1c5a      	adds	r2, r3, #1
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	b2d2      	uxtb	r2, r2
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	0a1b      	lsrs	r3, r3, #8
 800cc96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	607a      	str	r2, [r7, #4]
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	b2d2      	uxtb	r2, r2
 800cca2:	701a      	strb	r2, [r3, #0]
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	0a1b      	lsrs	r3, r3, #8
 800cca8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	b2d2      	uxtb	r2, r2
 800ccb4:	701a      	strb	r2, [r3, #0]
}
 800ccb6:	bf00      	nop
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ccc2:	b480      	push	{r7}
 800ccc4:	b087      	sub	sp, #28
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	60f8      	str	r0, [r7, #12]
 800ccca:	60b9      	str	r1, [r7, #8]
 800cccc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00d      	beq.n	800ccf8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ccdc:	693a      	ldr	r2, [r7, #16]
 800ccde:	1c53      	adds	r3, r2, #1
 800cce0:	613b      	str	r3, [r7, #16]
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	1c59      	adds	r1, r3, #1
 800cce6:	6179      	str	r1, [r7, #20]
 800cce8:	7812      	ldrb	r2, [r2, #0]
 800ccea:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	607b      	str	r3, [r7, #4]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1f1      	bne.n	800ccdc <mem_cpy+0x1a>
	}
}
 800ccf8:	bf00      	nop
 800ccfa:	371c      	adds	r7, #28
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd04:	b480      	push	{r7}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	1c5a      	adds	r2, r3, #1
 800cd18:	617a      	str	r2, [r7, #20]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	b2d2      	uxtb	r2, r2
 800cd1e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	607b      	str	r3, [r7, #4]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1f3      	bne.n	800cd14 <mem_set+0x10>
}
 800cd2c:	bf00      	nop
 800cd2e:	bf00      	nop
 800cd30:	371c      	adds	r7, #28
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
	...

0800cd3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	607b      	str	r3, [r7, #4]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d825      	bhi.n	800cd9c <dec_lock+0x60>
		n = Files[i].ctr;
 800cd50:	4a17      	ldr	r2, [pc, #92]	@ (800cdb0 <dec_lock+0x74>)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	011b      	lsls	r3, r3, #4
 800cd56:	4413      	add	r3, r2
 800cd58:	330c      	adds	r3, #12
 800cd5a:	881b      	ldrh	r3, [r3, #0]
 800cd5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cd5e:	89fb      	ldrh	r3, [r7, #14]
 800cd60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd64:	d101      	bne.n	800cd6a <dec_lock+0x2e>
 800cd66:	2300      	movs	r3, #0
 800cd68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cd6a:	89fb      	ldrh	r3, [r7, #14]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <dec_lock+0x3a>
 800cd70:	89fb      	ldrh	r3, [r7, #14]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cd76:	4a0e      	ldr	r2, [pc, #56]	@ (800cdb0 <dec_lock+0x74>)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	011b      	lsls	r3, r3, #4
 800cd7c:	4413      	add	r3, r2
 800cd7e:	330c      	adds	r3, #12
 800cd80:	89fa      	ldrh	r2, [r7, #14]
 800cd82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cd84:	89fb      	ldrh	r3, [r7, #14]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <dec_lock+0x5a>
 800cd8a:	4a09      	ldr	r2, [pc, #36]	@ (800cdb0 <dec_lock+0x74>)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	4413      	add	r3, r2
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	737b      	strb	r3, [r7, #13]
 800cd9a:	e001      	b.n	800cda0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cda0:	7b7b      	ldrb	r3, [r7, #13]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	20000430 	.word	0x20000430

0800cdb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	e010      	b.n	800cde4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cdc2:	4a0d      	ldr	r2, [pc, #52]	@ (800cdf8 <clear_lock+0x44>)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	011b      	lsls	r3, r3, #4
 800cdc8:	4413      	add	r3, r2
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d105      	bne.n	800cdde <clear_lock+0x2a>
 800cdd2:	4a09      	ldr	r2, [pc, #36]	@ (800cdf8 <clear_lock+0x44>)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	011b      	lsls	r3, r3, #4
 800cdd8:	4413      	add	r3, r2
 800cdda:	2200      	movs	r2, #0
 800cddc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	3301      	adds	r3, #1
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d9eb      	bls.n	800cdc2 <clear_lock+0xe>
	}
}
 800cdea:	bf00      	nop
 800cdec:	bf00      	nop
 800cdee:	3714      	adds	r7, #20
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	20000430 	.word	0x20000430

0800cdfc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	78db      	ldrb	r3, [r3, #3]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d034      	beq.n	800ce7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	7858      	ldrb	r0, [r3, #1]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce20:	2301      	movs	r3, #1
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	f7ff fe8c 	bl	800cb40 <disk_write>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	73fb      	strb	r3, [r7, #15]
 800ce32:	e022      	b.n	800ce7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	1ad2      	subs	r2, r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d217      	bcs.n	800ce7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	789b      	ldrb	r3, [r3, #2]
 800ce4e:	613b      	str	r3, [r7, #16]
 800ce50:	e010      	b.n	800ce74 <sync_window+0x78>
					wsect += fs->fsize;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	4413      	add	r3, r2
 800ce5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	7858      	ldrb	r0, [r3, #1]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce66:	2301      	movs	r3, #1
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	f7ff fe69 	bl	800cb40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	3b01      	subs	r3, #1
 800ce72:	613b      	str	r3, [r7, #16]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d8eb      	bhi.n	800ce52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ce7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d01b      	beq.n	800ced4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff ffad 	bl	800cdfc <sync_window>
 800cea2:	4603      	mov	r3, r0
 800cea4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d113      	bne.n	800ced4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	7858      	ldrb	r0, [r3, #1]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	f7ff fe21 	bl	800cb00 <disk_read>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d004      	beq.n	800cece <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cec8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	683a      	ldr	r2, [r7, #0]
 800ced2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
	...

0800cee0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff ff87 	bl	800cdfc <sync_window>
 800ceee:	4603      	mov	r3, r0
 800cef0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d158      	bne.n	800cfaa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	2b03      	cmp	r3, #3
 800cefe:	d148      	bne.n	800cf92 <sync_fs+0xb2>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	791b      	ldrb	r3, [r3, #4]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d144      	bne.n	800cf92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3330      	adds	r3, #48	@ 0x30
 800cf0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf10:	2100      	movs	r1, #0
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff fef6 	bl	800cd04 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3330      	adds	r3, #48	@ 0x30
 800cf1c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cf20:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7ff fe85 	bl	800cc34 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3330      	adds	r3, #48	@ 0x30
 800cf2e:	4921      	ldr	r1, [pc, #132]	@ (800cfb4 <sync_fs+0xd4>)
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff fe9a 	bl	800cc6a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	3330      	adds	r3, #48	@ 0x30
 800cf3a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cf3e:	491e      	ldr	r1, [pc, #120]	@ (800cfb8 <sync_fs+0xd8>)
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7ff fe92 	bl	800cc6a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	3330      	adds	r3, #48	@ 0x30
 800cf4a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	4619      	mov	r1, r3
 800cf54:	4610      	mov	r0, r2
 800cf56:	f7ff fe88 	bl	800cc6a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3330      	adds	r3, #48	@ 0x30
 800cf5e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	4619      	mov	r1, r3
 800cf68:	4610      	mov	r0, r2
 800cf6a:	f7ff fe7e 	bl	800cc6a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	69db      	ldr	r3, [r3, #28]
 800cf72:	1c5a      	adds	r2, r3, #1
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	7858      	ldrb	r0, [r3, #1]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf86:	2301      	movs	r3, #1
 800cf88:	f7ff fdda 	bl	800cb40 <disk_write>
			fs->fsi_flag = 0;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	785b      	ldrb	r3, [r3, #1]
 800cf96:	2200      	movs	r2, #0
 800cf98:	2100      	movs	r1, #0
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff fdf0 	bl	800cb80 <disk_ioctl>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <sync_fs+0xca>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	41615252 	.word	0x41615252
 800cfb8:	61417272 	.word	0x61417272

0800cfbc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	3b02      	subs	r3, #2
 800cfca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	695b      	ldr	r3, [r3, #20]
 800cfd0:	3b02      	subs	r3, #2
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d301      	bcc.n	800cfdc <clust2sect+0x20>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	e008      	b.n	800cfee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	895b      	ldrh	r3, [r3, #10]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	fb03 f202 	mul.w	r2, r3, r2
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfec:	4413      	add	r3, r2
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b086      	sub	sp, #24
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d904      	bls.n	800d01a <get_fat+0x20>
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d302      	bcc.n	800d020 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d01a:	2301      	movs	r3, #1
 800d01c:	617b      	str	r3, [r7, #20]
 800d01e:	e08e      	b.n	800d13e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d020:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d024:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	2b03      	cmp	r3, #3
 800d02c:	d061      	beq.n	800d0f2 <get_fat+0xf8>
 800d02e:	2b03      	cmp	r3, #3
 800d030:	dc7b      	bgt.n	800d12a <get_fat+0x130>
 800d032:	2b01      	cmp	r3, #1
 800d034:	d002      	beq.n	800d03c <get_fat+0x42>
 800d036:	2b02      	cmp	r3, #2
 800d038:	d041      	beq.n	800d0be <get_fat+0xc4>
 800d03a:	e076      	b.n	800d12a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	085b      	lsrs	r3, r3, #1
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	4413      	add	r3, r2
 800d048:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	6a1a      	ldr	r2, [r3, #32]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	0a5b      	lsrs	r3, r3, #9
 800d052:	4413      	add	r3, r2
 800d054:	4619      	mov	r1, r3
 800d056:	6938      	ldr	r0, [r7, #16]
 800d058:	f7ff ff14 	bl	800ce84 <move_window>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d166      	bne.n	800d130 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	60fa      	str	r2, [r7, #12]
 800d068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	4413      	add	r3, r2
 800d070:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d074:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	6a1a      	ldr	r2, [r3, #32]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	0a5b      	lsrs	r3, r3, #9
 800d07e:	4413      	add	r3, r2
 800d080:	4619      	mov	r1, r3
 800d082:	6938      	ldr	r0, [r7, #16]
 800d084:	f7ff fefe 	bl	800ce84 <move_window>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d152      	bne.n	800d134 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d094:	693a      	ldr	r2, [r7, #16]
 800d096:	4413      	add	r3, r2
 800d098:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d09c:	021b      	lsls	r3, r3, #8
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	f003 0301 	and.w	r3, r3, #1
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d002      	beq.n	800d0b4 <get_fat+0xba>
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	091b      	lsrs	r3, r3, #4
 800d0b2:	e002      	b.n	800d0ba <get_fat+0xc0>
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0ba:	617b      	str	r3, [r7, #20]
			break;
 800d0bc:	e03f      	b.n	800d13e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	6a1a      	ldr	r2, [r3, #32]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	0a1b      	lsrs	r3, r3, #8
 800d0c6:	4413      	add	r3, r2
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6938      	ldr	r0, [r7, #16]
 800d0cc:	f7ff feda 	bl	800ce84 <move_window>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d130      	bne.n	800d138 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	005b      	lsls	r3, r3, #1
 800d0e0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d0e4:	4413      	add	r3, r2
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7ff fd68 	bl	800cbbc <ld_word>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	617b      	str	r3, [r7, #20]
			break;
 800d0f0:	e025      	b.n	800d13e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	6a1a      	ldr	r2, [r3, #32]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	09db      	lsrs	r3, r3, #7
 800d0fa:	4413      	add	r3, r2
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6938      	ldr	r0, [r7, #16]
 800d100:	f7ff fec0 	bl	800ce84 <move_window>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d118      	bne.n	800d13c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d118:	4413      	add	r3, r2
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7ff fd67 	bl	800cbee <ld_dword>
 800d120:	4603      	mov	r3, r0
 800d122:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d126:	617b      	str	r3, [r7, #20]
			break;
 800d128:	e009      	b.n	800d13e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d12a:	2301      	movs	r3, #1
 800d12c:	617b      	str	r3, [r7, #20]
 800d12e:	e006      	b.n	800d13e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d130:	bf00      	nop
 800d132:	e004      	b.n	800d13e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d134:	bf00      	nop
 800d136:	e002      	b.n	800d13e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d13c:	bf00      	nop
		}
	}

	return val;
 800d13e:	697b      	ldr	r3, [r7, #20]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3718      	adds	r7, #24
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d148:	b480      	push	{r7}
 800d14a:	b087      	sub	sp, #28
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d15c:	3304      	adds	r3, #4
 800d15e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	0a5b      	lsrs	r3, r3, #9
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	8952      	ldrh	r2, [r2, #10]
 800d168:	fbb3 f3f2 	udiv	r3, r3, r2
 800d16c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	1d1a      	adds	r2, r3, #4
 800d172:	613a      	str	r2, [r7, #16]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <clmt_clust+0x3a>
 800d17e:	2300      	movs	r3, #0
 800d180:	e010      	b.n	800d1a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d182:	697a      	ldr	r2, [r7, #20]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	429a      	cmp	r2, r3
 800d188:	d307      	bcc.n	800d19a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	617b      	str	r3, [r7, #20]
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	3304      	adds	r3, #4
 800d196:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d198:	e7e9      	b.n	800d16e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d19a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	4413      	add	r3, r2
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	371c      	adds	r7, #28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	331a      	adds	r3, #26
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	b292      	uxth	r2, r2
 800d1c4:	4611      	mov	r1, r2
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fd34 	bl	800cc34 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b03      	cmp	r3, #3
 800d1d2:	d109      	bne.n	800d1e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f103 0214 	add.w	r2, r3, #20
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	0c1b      	lsrs	r3, r3, #16
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	4610      	mov	r0, r2
 800d1e4:	f7ff fd26 	bl	800cc34 <st_word>
	}
}
 800d1e8:	bf00      	nop
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d1f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d031      	beq.n	800d26a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	617b      	str	r3, [r7, #20]
 800d20c:	e002      	b.n	800d214 <get_ldnumber+0x24>
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	3301      	adds	r3, #1
 800d212:	617b      	str	r3, [r7, #20]
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	2b20      	cmp	r3, #32
 800d21a:	d903      	bls.n	800d224 <get_ldnumber+0x34>
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	2b3a      	cmp	r3, #58	@ 0x3a
 800d222:	d1f4      	bne.n	800d20e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	2b3a      	cmp	r3, #58	@ 0x3a
 800d22a:	d11c      	bne.n	800d266 <get_ldnumber+0x76>
			tp = *path;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	60fa      	str	r2, [r7, #12]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	3b30      	subs	r3, #48	@ 0x30
 800d23c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b09      	cmp	r3, #9
 800d242:	d80e      	bhi.n	800d262 <get_ldnumber+0x72>
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d10a      	bne.n	800d262 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d107      	bne.n	800d262 <get_ldnumber+0x72>
					vol = (int)i;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	3301      	adds	r3, #1
 800d25a:	617b      	str	r3, [r7, #20]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	697a      	ldr	r2, [r7, #20]
 800d260:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	e002      	b.n	800d26c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d266:	2300      	movs	r3, #0
 800d268:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d26a:	693b      	ldr	r3, [r7, #16]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	371c      	adds	r7, #28
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	70da      	strb	r2, [r3, #3]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d28e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7ff fdf6 	bl	800ce84 <move_window>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <check_fs+0x2a>
 800d29e:	2304      	movs	r3, #4
 800d2a0:	e038      	b.n	800d314 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	3330      	adds	r3, #48	@ 0x30
 800d2a6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff fc86 	bl	800cbbc <ld_word>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d001      	beq.n	800d2c0 <check_fs+0x48>
 800d2bc:	2303      	movs	r3, #3
 800d2be:	e029      	b.n	800d314 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2c6:	2be9      	cmp	r3, #233	@ 0xe9
 800d2c8:	d009      	beq.n	800d2de <check_fs+0x66>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2d0:	2beb      	cmp	r3, #235	@ 0xeb
 800d2d2:	d11e      	bne.n	800d312 <check_fs+0x9a>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d2da:	2b90      	cmp	r3, #144	@ 0x90
 800d2dc:	d119      	bne.n	800d312 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3330      	adds	r3, #48	@ 0x30
 800d2e2:	3336      	adds	r3, #54	@ 0x36
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff fc82 	bl	800cbee <ld_dword>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d2f0:	4a0a      	ldr	r2, [pc, #40]	@ (800d31c <check_fs+0xa4>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d101      	bne.n	800d2fa <check_fs+0x82>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	e00c      	b.n	800d314 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3330      	adds	r3, #48	@ 0x30
 800d2fe:	3352      	adds	r3, #82	@ 0x52
 800d300:	4618      	mov	r0, r3
 800d302:	f7ff fc74 	bl	800cbee <ld_dword>
 800d306:	4603      	mov	r3, r0
 800d308:	4a05      	ldr	r2, [pc, #20]	@ (800d320 <check_fs+0xa8>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d101      	bne.n	800d312 <check_fs+0x9a>
 800d30e:	2300      	movs	r3, #0
 800d310:	e000      	b.n	800d314 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d312:	2302      	movs	r3, #2
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	00544146 	.word	0x00544146
 800d320:	33544146 	.word	0x33544146

0800d324 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b096      	sub	sp, #88	@ 0x58
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	4613      	mov	r3, r2
 800d330:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2200      	movs	r2, #0
 800d336:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f7ff ff59 	bl	800d1f0 <get_ldnumber>
 800d33e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d342:	2b00      	cmp	r3, #0
 800d344:	da01      	bge.n	800d34a <find_volume+0x26>
 800d346:	230b      	movs	r3, #11
 800d348:	e22d      	b.n	800d7a6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d34a:	4aa1      	ldr	r2, [pc, #644]	@ (800d5d0 <find_volume+0x2ac>)
 800d34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d352:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <find_volume+0x3a>
 800d35a:	230c      	movs	r3, #12
 800d35c:	e223      	b.n	800d7a6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d362:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	f023 0301 	bic.w	r3, r3, #1
 800d36a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d01a      	beq.n	800d3aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d376:	785b      	ldrb	r3, [r3, #1]
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff fb7f 	bl	800ca7c <disk_status>
 800d37e:	4603      	mov	r3, r0
 800d380:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d384:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d388:	f003 0301 	and.w	r3, r3, #1
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10c      	bne.n	800d3aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d007      	beq.n	800d3a6 <find_volume+0x82>
 800d396:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d39a:	f003 0304 	and.w	r3, r3, #4
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d3a2:	230a      	movs	r3, #10
 800d3a4:	e1ff      	b.n	800d7a6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e1fd      	b.n	800d7a6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ba:	785b      	ldrb	r3, [r3, #1]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff fb77 	bl	800cab0 <disk_initialize>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d3c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e1e6      	b.n	800d7a6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d3d8:	79fb      	ldrb	r3, [r7, #7]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d007      	beq.n	800d3ee <find_volume+0xca>
 800d3de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d3e2:	f003 0304 	and.w	r3, r3, #4
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d001      	beq.n	800d3ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d3ea:	230a      	movs	r3, #10
 800d3ec:	e1db      	b.n	800d7a6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d3f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3f6:	f7ff ff3f 	bl	800d278 <check_fs>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d400:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d404:	2b02      	cmp	r3, #2
 800d406:	d149      	bne.n	800d49c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d408:	2300      	movs	r3, #0
 800d40a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d40c:	e01e      	b.n	800d44c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d410:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d416:	011b      	lsls	r3, r3, #4
 800d418:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d41c:	4413      	add	r3, r2
 800d41e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d422:	3304      	adds	r3, #4
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d006      	beq.n	800d438 <find_volume+0x114>
 800d42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d42c:	3308      	adds	r3, #8
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff fbdd 	bl	800cbee <ld_dword>
 800d434:	4602      	mov	r2, r0
 800d436:	e000      	b.n	800d43a <find_volume+0x116>
 800d438:	2200      	movs	r2, #0
 800d43a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	3358      	adds	r3, #88	@ 0x58
 800d440:	443b      	add	r3, r7
 800d442:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d448:	3301      	adds	r3, #1
 800d44a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d44c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d44e:	2b03      	cmp	r3, #3
 800d450:	d9dd      	bls.n	800d40e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d452:	2300      	movs	r3, #0
 800d454:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <find_volume+0x13e>
 800d45c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d45e:	3b01      	subs	r3, #1
 800d460:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	3358      	adds	r3, #88	@ 0x58
 800d468:	443b      	add	r3, r7
 800d46a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d46e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d472:	2b00      	cmp	r3, #0
 800d474:	d005      	beq.n	800d482 <find_volume+0x15e>
 800d476:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d478:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d47a:	f7ff fefd 	bl	800d278 <check_fs>
 800d47e:	4603      	mov	r3, r0
 800d480:	e000      	b.n	800d484 <find_volume+0x160>
 800d482:	2303      	movs	r3, #3
 800d484:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d488:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d905      	bls.n	800d49c <find_volume+0x178>
 800d490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d492:	3301      	adds	r3, #1
 800d494:	643b      	str	r3, [r7, #64]	@ 0x40
 800d496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d498:	2b03      	cmp	r3, #3
 800d49a:	d9e2      	bls.n	800d462 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d49c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d4a0:	2b04      	cmp	r3, #4
 800d4a2:	d101      	bne.n	800d4a8 <find_volume+0x184>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e17e      	b.n	800d7a6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d4a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d901      	bls.n	800d4b4 <find_volume+0x190>
 800d4b0:	230d      	movs	r3, #13
 800d4b2:	e178      	b.n	800d7a6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b6:	3330      	adds	r3, #48	@ 0x30
 800d4b8:	330b      	adds	r3, #11
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7ff fb7e 	bl	800cbbc <ld_word>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4c6:	d001      	beq.n	800d4cc <find_volume+0x1a8>
 800d4c8:	230d      	movs	r3, #13
 800d4ca:	e16c      	b.n	800d7a6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ce:	3330      	adds	r3, #48	@ 0x30
 800d4d0:	3316      	adds	r3, #22
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7ff fb72 	bl	800cbbc <ld_word>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d4dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <find_volume+0x1cc>
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e4:	3330      	adds	r3, #48	@ 0x30
 800d4e6:	3324      	adds	r3, #36	@ 0x24
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff fb80 	bl	800cbee <ld_dword>
 800d4ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4f4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d502:	789b      	ldrb	r3, [r3, #2]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d005      	beq.n	800d514 <find_volume+0x1f0>
 800d508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50a:	789b      	ldrb	r3, [r3, #2]
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d001      	beq.n	800d514 <find_volume+0x1f0>
 800d510:	230d      	movs	r3, #13
 800d512:	e148      	b.n	800d7a6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d516:	789b      	ldrb	r3, [r3, #2]
 800d518:	461a      	mov	r2, r3
 800d51a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d51c:	fb02 f303 	mul.w	r3, r2, r3
 800d520:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d528:	461a      	mov	r2, r3
 800d52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d52c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d530:	895b      	ldrh	r3, [r3, #10]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d008      	beq.n	800d548 <find_volume+0x224>
 800d536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d538:	895b      	ldrh	r3, [r3, #10]
 800d53a:	461a      	mov	r2, r3
 800d53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53e:	895b      	ldrh	r3, [r3, #10]
 800d540:	3b01      	subs	r3, #1
 800d542:	4013      	ands	r3, r2
 800d544:	2b00      	cmp	r3, #0
 800d546:	d001      	beq.n	800d54c <find_volume+0x228>
 800d548:	230d      	movs	r3, #13
 800d54a:	e12c      	b.n	800d7a6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54e:	3330      	adds	r3, #48	@ 0x30
 800d550:	3311      	adds	r3, #17
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff fb32 	bl	800cbbc <ld_word>
 800d558:	4603      	mov	r3, r0
 800d55a:	461a      	mov	r2, r3
 800d55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d562:	891b      	ldrh	r3, [r3, #8]
 800d564:	f003 030f 	and.w	r3, r3, #15
 800d568:	b29b      	uxth	r3, r3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d001      	beq.n	800d572 <find_volume+0x24e>
 800d56e:	230d      	movs	r3, #13
 800d570:	e119      	b.n	800d7a6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d574:	3330      	adds	r3, #48	@ 0x30
 800d576:	3313      	adds	r3, #19
 800d578:	4618      	mov	r0, r3
 800d57a:	f7ff fb1f 	bl	800cbbc <ld_word>
 800d57e:	4603      	mov	r3, r0
 800d580:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d584:	2b00      	cmp	r3, #0
 800d586:	d106      	bne.n	800d596 <find_volume+0x272>
 800d588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58a:	3330      	adds	r3, #48	@ 0x30
 800d58c:	3320      	adds	r3, #32
 800d58e:	4618      	mov	r0, r3
 800d590:	f7ff fb2d 	bl	800cbee <ld_dword>
 800d594:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d598:	3330      	adds	r3, #48	@ 0x30
 800d59a:	330e      	adds	r3, #14
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7ff fb0d 	bl	800cbbc <ld_word>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d5a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <find_volume+0x28c>
 800d5ac:	230d      	movs	r3, #13
 800d5ae:	e0fa      	b.n	800d7a6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d5b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d5b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5b4:	4413      	add	r3, r2
 800d5b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5b8:	8912      	ldrh	r2, [r2, #8]
 800d5ba:	0912      	lsrs	r2, r2, #4
 800d5bc:	b292      	uxth	r2, r2
 800d5be:	4413      	add	r3, r2
 800d5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d5c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d204      	bcs.n	800d5d4 <find_volume+0x2b0>
 800d5ca:	230d      	movs	r3, #13
 800d5cc:	e0eb      	b.n	800d7a6 <find_volume+0x482>
 800d5ce:	bf00      	nop
 800d5d0:	20000428 	.word	0x20000428
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d5d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5dc:	8952      	ldrh	r2, [r2, #10]
 800d5de:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <find_volume+0x2ca>
 800d5ea:	230d      	movs	r3, #13
 800d5ec:	e0db      	b.n	800d7a6 <find_volume+0x482>
		fmt = FS_FAT32;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d802      	bhi.n	800d604 <find_volume+0x2e0>
 800d5fe:	2302      	movs	r3, #2
 800d600:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d606:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d802      	bhi.n	800d614 <find_volume+0x2f0>
 800d60e:	2301      	movs	r3, #1
 800d610:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d616:	1c9a      	adds	r2, r3, #2
 800d618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d620:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d622:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d626:	441a      	add	r2, r3
 800d628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d62c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d630:	441a      	add	r2, r3
 800d632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d634:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d636:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d11e      	bne.n	800d67c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d640:	3330      	adds	r3, #48	@ 0x30
 800d642:	332a      	adds	r3, #42	@ 0x2a
 800d644:	4618      	mov	r0, r3
 800d646:	f7ff fab9 	bl	800cbbc <ld_word>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <find_volume+0x330>
 800d650:	230d      	movs	r3, #13
 800d652:	e0a8      	b.n	800d7a6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d656:	891b      	ldrh	r3, [r3, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <find_volume+0x33c>
 800d65c:	230d      	movs	r3, #13
 800d65e:	e0a2      	b.n	800d7a6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d662:	3330      	adds	r3, #48	@ 0x30
 800d664:	332c      	adds	r3, #44	@ 0x2c
 800d666:	4618      	mov	r0, r3
 800d668:	f7ff fac1 	bl	800cbee <ld_dword>
 800d66c:	4602      	mov	r2, r0
 800d66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d670:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d674:	695b      	ldr	r3, [r3, #20]
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	647b      	str	r3, [r7, #68]	@ 0x44
 800d67a:	e01f      	b.n	800d6bc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67e:	891b      	ldrh	r3, [r3, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <find_volume+0x364>
 800d684:	230d      	movs	r3, #13
 800d686:	e08e      	b.n	800d7a6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68a:	6a1a      	ldr	r2, [r3, #32]
 800d68c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d68e:	441a      	add	r2, r3
 800d690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d692:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d694:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d103      	bne.n	800d6a4 <find_volume+0x380>
 800d69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69e:	695b      	ldr	r3, [r3, #20]
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	e00a      	b.n	800d6ba <find_volume+0x396>
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a6:	695a      	ldr	r2, [r3, #20]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	4413      	add	r3, r2
 800d6ae:	085a      	lsrs	r2, r3, #1
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	695b      	ldr	r3, [r3, #20]
 800d6b4:	f003 0301 	and.w	r3, r3, #1
 800d6b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d6ba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6be:	699a      	ldr	r2, [r3, #24]
 800d6c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6c2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d6c6:	0a5b      	lsrs	r3, r3, #9
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d201      	bcs.n	800d6d0 <find_volume+0x3ac>
 800d6cc:	230d      	movs	r3, #13
 800d6ce:	e06a      	b.n	800d7a6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6d6:	611a      	str	r2, [r3, #16]
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6da:	691a      	ldr	r2, [r3, #16]
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6de:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e2:	2280      	movs	r2, #128	@ 0x80
 800d6e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d6e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	d149      	bne.n	800d782 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f0:	3330      	adds	r3, #48	@ 0x30
 800d6f2:	3330      	adds	r3, #48	@ 0x30
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff fa61 	bl	800cbbc <ld_word>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d140      	bne.n	800d782 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d702:	3301      	adds	r3, #1
 800d704:	4619      	mov	r1, r3
 800d706:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d708:	f7ff fbbc 	bl	800ce84 <move_window>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d137      	bne.n	800d782 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d714:	2200      	movs	r2, #0
 800d716:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71a:	3330      	adds	r3, #48	@ 0x30
 800d71c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d720:	4618      	mov	r0, r3
 800d722:	f7ff fa4b 	bl	800cbbc <ld_word>
 800d726:	4603      	mov	r3, r0
 800d728:	461a      	mov	r2, r3
 800d72a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d72e:	429a      	cmp	r2, r3
 800d730:	d127      	bne.n	800d782 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d734:	3330      	adds	r3, #48	@ 0x30
 800d736:	4618      	mov	r0, r3
 800d738:	f7ff fa59 	bl	800cbee <ld_dword>
 800d73c:	4603      	mov	r3, r0
 800d73e:	4a1c      	ldr	r2, [pc, #112]	@ (800d7b0 <find_volume+0x48c>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d11e      	bne.n	800d782 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d746:	3330      	adds	r3, #48	@ 0x30
 800d748:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff fa4e 	bl	800cbee <ld_dword>
 800d752:	4603      	mov	r3, r0
 800d754:	4a17      	ldr	r2, [pc, #92]	@ (800d7b4 <find_volume+0x490>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d113      	bne.n	800d782 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75c:	3330      	adds	r3, #48	@ 0x30
 800d75e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d762:	4618      	mov	r0, r3
 800d764:	f7ff fa43 	bl	800cbee <ld_dword>
 800d768:	4602      	mov	r2, r0
 800d76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d770:	3330      	adds	r3, #48	@ 0x30
 800d772:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff fa39 	bl	800cbee <ld_dword>
 800d77c:	4602      	mov	r2, r0
 800d77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d780:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d784:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d788:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d78a:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b8 <find_volume+0x494>)
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	3301      	adds	r3, #1
 800d790:	b29a      	uxth	r2, r3
 800d792:	4b09      	ldr	r3, [pc, #36]	@ (800d7b8 <find_volume+0x494>)
 800d794:	801a      	strh	r2, [r3, #0]
 800d796:	4b08      	ldr	r3, [pc, #32]	@ (800d7b8 <find_volume+0x494>)
 800d798:	881a      	ldrh	r2, [r3, #0]
 800d79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d79e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7a0:	f7ff fb08 	bl	800cdb4 <clear_lock>
#endif
	return FR_OK;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3758      	adds	r7, #88	@ 0x58
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	41615252 	.word	0x41615252
 800d7b4:	61417272 	.word	0x61417272
 800d7b8:	2000042c 	.word	0x2000042c

0800d7bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d7c6:	2309      	movs	r3, #9
 800d7c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d01c      	beq.n	800d80a <validate+0x4e>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d018      	beq.n	800d80a <validate+0x4e>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d013      	beq.n	800d80a <validate+0x4e>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	889a      	ldrh	r2, [r3, #4]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	88db      	ldrh	r3, [r3, #6]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d10c      	bne.n	800d80a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	785b      	ldrb	r3, [r3, #1]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7ff f940 	bl	800ca7c <disk_status>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	f003 0301 	and.w	r3, r3, #1
 800d802:	2b00      	cmp	r3, #0
 800d804:	d101      	bne.n	800d80a <validate+0x4e>
			res = FR_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d80a:	7bfb      	ldrb	r3, [r7, #15]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d102      	bne.n	800d816 <validate+0x5a>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	e000      	b.n	800d818 <validate+0x5c>
 800d816:	2300      	movs	r3, #0
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	6013      	str	r3, [r2, #0]
	return res;
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
	...

0800d828 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b088      	sub	sp, #32
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	4613      	mov	r3, r2
 800d834:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d83a:	f107 0310 	add.w	r3, r7, #16
 800d83e:	4618      	mov	r0, r3
 800d840:	f7ff fcd6 	bl	800d1f0 <get_ldnumber>
 800d844:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	da01      	bge.n	800d850 <f_mount+0x28>
 800d84c:	230b      	movs	r3, #11
 800d84e:	e02b      	b.n	800d8a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d850:	4a17      	ldr	r2, [pc, #92]	@ (800d8b0 <f_mount+0x88>)
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d858:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d005      	beq.n	800d86c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d860:	69b8      	ldr	r0, [r7, #24]
 800d862:	f7ff faa7 	bl	800cdb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	2200      	movs	r2, #0
 800d86a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d002      	beq.n	800d878 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	490d      	ldr	r1, [pc, #52]	@ (800d8b0 <f_mount+0x88>)
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <f_mount+0x66>
 800d888:	79fb      	ldrb	r3, [r7, #7]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d001      	beq.n	800d892 <f_mount+0x6a>
 800d88e:	2300      	movs	r3, #0
 800d890:	e00a      	b.n	800d8a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d892:	f107 010c 	add.w	r1, r7, #12
 800d896:	f107 0308 	add.w	r3, r7, #8
 800d89a:	2200      	movs	r2, #0
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff fd41 	bl	800d324 <find_volume>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3720      	adds	r7, #32
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	20000428 	.word	0x20000428

0800d8b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b08e      	sub	sp, #56	@ 0x38
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f107 0214 	add.w	r2, r7, #20
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff ff71 	bl	800d7bc <validate>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d8e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d107      	bne.n	800d8f8 <f_read+0x44>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	7d5b      	ldrb	r3, [r3, #21]
 800d8ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d8f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <f_read+0x4a>
 800d8f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d8fc:	e115      	b.n	800db2a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	7d1b      	ldrb	r3, [r3, #20]
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <f_read+0x5a>
 800d90a:	2307      	movs	r3, #7
 800d90c:	e10d      	b.n	800db2a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	68da      	ldr	r2, [r3, #12]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	429a      	cmp	r2, r3
 800d920:	f240 80fe 	bls.w	800db20 <f_read+0x26c>
 800d924:	6a3b      	ldr	r3, [r7, #32]
 800d926:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d928:	e0fa      	b.n	800db20 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d932:	2b00      	cmp	r3, #0
 800d934:	f040 80c6 	bne.w	800dac4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	0a5b      	lsrs	r3, r3, #9
 800d93e:	697a      	ldr	r2, [r7, #20]
 800d940:	8952      	ldrh	r2, [r2, #10]
 800d942:	3a01      	subs	r2, #1
 800d944:	4013      	ands	r3, r2
 800d946:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d12f      	bne.n	800d9ae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d103      	bne.n	800d95e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d95c:	e013      	b.n	800d986 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d962:	2b00      	cmp	r3, #0
 800d964:	d007      	beq.n	800d976 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	4619      	mov	r1, r3
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7ff fbeb 	bl	800d148 <clmt_clust>
 800d972:	6338      	str	r0, [r7, #48]	@ 0x30
 800d974:	e007      	b.n	800d986 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	69db      	ldr	r3, [r3, #28]
 800d97c:	4619      	mov	r1, r3
 800d97e:	4610      	mov	r0, r2
 800d980:	f7ff fb3b 	bl	800cffa <get_fat>
 800d984:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d804      	bhi.n	800d996 <f_read+0xe2>
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2202      	movs	r2, #2
 800d990:	755a      	strb	r2, [r3, #21]
 800d992:	2302      	movs	r3, #2
 800d994:	e0c9      	b.n	800db2a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d99c:	d104      	bne.n	800d9a8 <f_read+0xf4>
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	755a      	strb	r2, [r3, #21]
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e0c0      	b.n	800db2a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	69db      	ldr	r3, [r3, #28]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	4610      	mov	r0, r2
 800d9b8:	f7ff fb00 	bl	800cfbc <clust2sect>
 800d9bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d104      	bne.n	800d9ce <f_read+0x11a>
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2202      	movs	r2, #2
 800d9c8:	755a      	strb	r2, [r3, #21]
 800d9ca:	2302      	movs	r3, #2
 800d9cc:	e0ad      	b.n	800db2a <f_read+0x276>
			sect += csect;
 800d9ce:	69ba      	ldr	r2, [r7, #24]
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	0a5b      	lsrs	r3, r3, #9
 800d9da:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d039      	beq.n	800da56 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d9e2:	69fa      	ldr	r2, [r7, #28]
 800d9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e6:	4413      	add	r3, r2
 800d9e8:	697a      	ldr	r2, [r7, #20]
 800d9ea:	8952      	ldrh	r2, [r2, #10]
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d905      	bls.n	800d9fc <f_read+0x148>
					cc = fs->csize - csect;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	895b      	ldrh	r3, [r3, #10]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	1ad3      	subs	r3, r2, r3
 800d9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	7858      	ldrb	r0, [r3, #1]
 800da00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da02:	69ba      	ldr	r2, [r7, #24]
 800da04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da06:	f7ff f87b 	bl	800cb00 <disk_read>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d004      	beq.n	800da1a <f_read+0x166>
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2201      	movs	r2, #1
 800da14:	755a      	strb	r2, [r3, #21]
 800da16:	2301      	movs	r3, #1
 800da18:	e087      	b.n	800db2a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	7d1b      	ldrb	r3, [r3, #20]
 800da1e:	b25b      	sxtb	r3, r3
 800da20:	2b00      	cmp	r3, #0
 800da22:	da14      	bge.n	800da4e <f_read+0x19a>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6a1a      	ldr	r2, [r3, #32]
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da2e:	429a      	cmp	r2, r3
 800da30:	d90d      	bls.n	800da4e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	6a1a      	ldr	r2, [r3, #32]
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	025b      	lsls	r3, r3, #9
 800da3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da3e:	18d0      	adds	r0, r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	3330      	adds	r3, #48	@ 0x30
 800da44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da48:	4619      	mov	r1, r3
 800da4a:	f7ff f93a 	bl	800ccc2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800da4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da50:	025b      	lsls	r3, r3, #9
 800da52:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800da54:	e050      	b.n	800daf8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6a1b      	ldr	r3, [r3, #32]
 800da5a:	69ba      	ldr	r2, [r7, #24]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d02e      	beq.n	800dabe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	7d1b      	ldrb	r3, [r3, #20]
 800da64:	b25b      	sxtb	r3, r3
 800da66:	2b00      	cmp	r3, #0
 800da68:	da18      	bge.n	800da9c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	7858      	ldrb	r0, [r3, #1]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6a1a      	ldr	r2, [r3, #32]
 800da78:	2301      	movs	r3, #1
 800da7a:	f7ff f861 	bl	800cb40 <disk_write>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d004      	beq.n	800da8e <f_read+0x1da>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2201      	movs	r2, #1
 800da88:	755a      	strb	r2, [r3, #21]
 800da8a:	2301      	movs	r3, #1
 800da8c:	e04d      	b.n	800db2a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	7d1b      	ldrb	r3, [r3, #20]
 800da92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da96:	b2da      	uxtb	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	7858      	ldrb	r0, [r3, #1]
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800daa6:	2301      	movs	r3, #1
 800daa8:	69ba      	ldr	r2, [r7, #24]
 800daaa:	f7ff f829 	bl	800cb00 <disk_read>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d004      	beq.n	800dabe <f_read+0x20a>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2201      	movs	r2, #1
 800dab8:	755a      	strb	r2, [r3, #21]
 800daba:	2301      	movs	r3, #1
 800dabc:	e035      	b.n	800db2a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	699b      	ldr	r3, [r3, #24]
 800dac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dacc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d901      	bls.n	800dade <f_read+0x22a>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	699b      	ldr	r3, [r3, #24]
 800dae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daec:	4413      	add	r3, r2
 800daee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daf0:	4619      	mov	r1, r3
 800daf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800daf4:	f7ff f8e5 	bl	800ccc2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800daf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafc:	4413      	add	r3, r2
 800dafe:	627b      	str	r3, [r7, #36]	@ 0x24
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	699a      	ldr	r2, [r3, #24]
 800db04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db06:	441a      	add	r2, r3
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	619a      	str	r2, [r3, #24]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db12:	441a      	add	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	601a      	str	r2, [r3, #0]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f47f af01 	bne.w	800d92a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3738      	adds	r7, #56	@ 0x38
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b086      	sub	sp, #24
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f107 0208 	add.w	r2, r7, #8
 800db40:	4611      	mov	r1, r2
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff fe3a 	bl	800d7bc <validate>
 800db48:	4603      	mov	r3, r0
 800db4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d168      	bne.n	800dc24 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	7d1b      	ldrb	r3, [r3, #20]
 800db56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d062      	beq.n	800dc24 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	7d1b      	ldrb	r3, [r3, #20]
 800db62:	b25b      	sxtb	r3, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	da15      	bge.n	800db94 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	7858      	ldrb	r0, [r3, #1]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a1a      	ldr	r2, [r3, #32]
 800db76:	2301      	movs	r3, #1
 800db78:	f7fe ffe2 	bl	800cb40 <disk_write>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d001      	beq.n	800db86 <f_sync+0x54>
 800db82:	2301      	movs	r3, #1
 800db84:	e04f      	b.n	800dc26 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	7d1b      	ldrb	r3, [r3, #20]
 800db8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800db94:	f7fc ff42 	bl	800aa1c <get_fattime>
 800db98:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba0:	4619      	mov	r1, r3
 800dba2:	4610      	mov	r0, r2
 800dba4:	f7ff f96e 	bl	800ce84 <move_window>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d138      	bne.n	800dc24 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	330b      	adds	r3, #11
 800dbbc:	781a      	ldrb	r2, [r3, #0]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	330b      	adds	r3, #11
 800dbc2:	f042 0220 	orr.w	r2, r2, #32
 800dbc6:	b2d2      	uxtb	r2, r2
 800dbc8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6818      	ldr	r0, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	68f9      	ldr	r1, [r7, #12]
 800dbd6:	f7ff faeb 	bl	800d1b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f103 021c 	add.w	r2, r3, #28
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	f7ff f83f 	bl	800cc6a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3316      	adds	r3, #22
 800dbf0:	6939      	ldr	r1, [r7, #16]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7ff f839 	bl	800cc6a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	3312      	adds	r3, #18
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff f818 	bl	800cc34 <st_word>
					fs->wflag = 1;
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2201      	movs	r2, #1
 800dc08:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff f967 	bl	800cee0 <sync_fs>
 800dc12:	4603      	mov	r3, r0
 800dc14:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	7d1b      	ldrb	r3, [r3, #20]
 800dc1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc1e:	b2da      	uxtb	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dc24:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3718      	adds	r7, #24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b084      	sub	sp, #16
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff ff7b 	bl	800db32 <f_sync>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d118      	bne.n	800dc78 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f107 0208 	add.w	r2, r7, #8
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff fdb4 	bl	800d7bc <validate>
 800dc54:	4603      	mov	r3, r0
 800dc56:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10c      	bne.n	800dc78 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff f86a 	bl	800cd3c <dec_lock>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dc6c:	7bfb      	ldrb	r3, [r7, #15]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d102      	bne.n	800dc78 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
	...

0800dc84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc92:	2301      	movs	r3, #1
 800dc94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc96:	2300      	movs	r3, #0
 800dc98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc9a:	4b1f      	ldr	r3, [pc, #124]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dc9c:	7a5b      	ldrb	r3, [r3, #9]
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d131      	bne.n	800dd08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dca4:	4b1c      	ldr	r3, [pc, #112]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dca6:	7a5b      	ldrb	r3, [r3, #9]
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	461a      	mov	r2, r3
 800dcac:	4b1a      	ldr	r3, [pc, #104]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dcae:	2100      	movs	r1, #0
 800dcb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dcb2:	4b19      	ldr	r3, [pc, #100]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dcb4:	7a5b      	ldrb	r3, [r3, #9]
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	4a17      	ldr	r2, [pc, #92]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dcc2:	4b15      	ldr	r3, [pc, #84]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dcc4:	7a5b      	ldrb	r3, [r3, #9]
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	461a      	mov	r2, r3
 800dcca:	4b13      	ldr	r3, [pc, #76]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dccc:	4413      	add	r3, r2
 800dcce:	79fa      	ldrb	r2, [r7, #7]
 800dcd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dcd2:	4b11      	ldr	r3, [pc, #68]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dcd4:	7a5b      	ldrb	r3, [r3, #9]
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	1c5a      	adds	r2, r3, #1
 800dcda:	b2d1      	uxtb	r1, r2
 800dcdc:	4a0e      	ldr	r2, [pc, #56]	@ (800dd18 <FATFS_LinkDriverEx+0x94>)
 800dcde:	7251      	strb	r1, [r2, #9]
 800dce0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dce2:	7dbb      	ldrb	r3, [r7, #22]
 800dce4:	3330      	adds	r3, #48	@ 0x30
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	223a      	movs	r2, #58	@ 0x3a
 800dcf2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	3302      	adds	r3, #2
 800dcf8:	222f      	movs	r2, #47	@ 0x2f
 800dcfa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	3303      	adds	r3, #3
 800dd00:	2200      	movs	r2, #0
 800dd02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd04:	2300      	movs	r3, #0
 800dd06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	371c      	adds	r7, #28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20000450 	.word	0x20000450

0800dd1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd26:	2200      	movs	r2, #0
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7ff ffaa 	bl	800dc84 <FATFS_LinkDriverEx>
 800dd30:	4603      	mov	r3, r0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3708      	adds	r7, #8
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
	...

0800dd3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dd40:	2200      	movs	r2, #0
 800dd42:	4912      	ldr	r1, [pc, #72]	@ (800dd8c <MX_USB_DEVICE_Init+0x50>)
 800dd44:	4812      	ldr	r0, [pc, #72]	@ (800dd90 <MX_USB_DEVICE_Init+0x54>)
 800dd46:	f7fd fb97 	bl	800b478 <USBD_Init>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d001      	beq.n	800dd54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dd50:	f7f3 fd60 	bl	8001814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dd54:	490f      	ldr	r1, [pc, #60]	@ (800dd94 <MX_USB_DEVICE_Init+0x58>)
 800dd56:	480e      	ldr	r0, [pc, #56]	@ (800dd90 <MX_USB_DEVICE_Init+0x54>)
 800dd58:	f7fd fbbe 	bl	800b4d8 <USBD_RegisterClass>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d001      	beq.n	800dd66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dd62:	f7f3 fd57 	bl	8001814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dd66:	490c      	ldr	r1, [pc, #48]	@ (800dd98 <MX_USB_DEVICE_Init+0x5c>)
 800dd68:	4809      	ldr	r0, [pc, #36]	@ (800dd90 <MX_USB_DEVICE_Init+0x54>)
 800dd6a:	f7fd fab5 	bl	800b2d8 <USBD_CDC_RegisterInterface>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dd74:	f7f3 fd4e 	bl	8001814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dd78:	4805      	ldr	r0, [pc, #20]	@ (800dd90 <MX_USB_DEVICE_Init+0x54>)
 800dd7a:	f7fd fbe3 	bl	800b544 <USBD_Start>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dd84:	f7f3 fd46 	bl	8001814 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dd88:	bf00      	nop
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	200000ec 	.word	0x200000ec
 800dd90:	2000045c 	.word	0x2000045c
 800dd94:	20000058 	.word	0x20000058
 800dd98:	200000d8 	.word	0x200000d8

0800dd9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dda0:	2200      	movs	r2, #0
 800dda2:	4905      	ldr	r1, [pc, #20]	@ (800ddb8 <CDC_Init_FS+0x1c>)
 800dda4:	4805      	ldr	r0, [pc, #20]	@ (800ddbc <CDC_Init_FS+0x20>)
 800dda6:	f7fd fab1 	bl	800b30c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ddaa:	4905      	ldr	r1, [pc, #20]	@ (800ddc0 <CDC_Init_FS+0x24>)
 800ddac:	4803      	ldr	r0, [pc, #12]	@ (800ddbc <CDC_Init_FS+0x20>)
 800ddae:	f7fd facf 	bl	800b350 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ddb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20000b38 	.word	0x20000b38
 800ddbc:	2000045c 	.word	0x2000045c
 800ddc0:	20000738 	.word	0x20000738

0800ddc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ddc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	4603      	mov	r3, r0
 800dddc:	6039      	str	r1, [r7, #0]
 800ddde:	71fb      	strb	r3, [r7, #7]
 800dde0:	4613      	mov	r3, r2
 800dde2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dde4:	79fb      	ldrb	r3, [r7, #7]
 800dde6:	2b23      	cmp	r3, #35	@ 0x23
 800dde8:	d84a      	bhi.n	800de80 <CDC_Control_FS+0xac>
 800ddea:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf0 <CDC_Control_FS+0x1c>)
 800ddec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf0:	0800de81 	.word	0x0800de81
 800ddf4:	0800de81 	.word	0x0800de81
 800ddf8:	0800de81 	.word	0x0800de81
 800ddfc:	0800de81 	.word	0x0800de81
 800de00:	0800de81 	.word	0x0800de81
 800de04:	0800de81 	.word	0x0800de81
 800de08:	0800de81 	.word	0x0800de81
 800de0c:	0800de81 	.word	0x0800de81
 800de10:	0800de81 	.word	0x0800de81
 800de14:	0800de81 	.word	0x0800de81
 800de18:	0800de81 	.word	0x0800de81
 800de1c:	0800de81 	.word	0x0800de81
 800de20:	0800de81 	.word	0x0800de81
 800de24:	0800de81 	.word	0x0800de81
 800de28:	0800de81 	.word	0x0800de81
 800de2c:	0800de81 	.word	0x0800de81
 800de30:	0800de81 	.word	0x0800de81
 800de34:	0800de81 	.word	0x0800de81
 800de38:	0800de81 	.word	0x0800de81
 800de3c:	0800de81 	.word	0x0800de81
 800de40:	0800de81 	.word	0x0800de81
 800de44:	0800de81 	.word	0x0800de81
 800de48:	0800de81 	.word	0x0800de81
 800de4c:	0800de81 	.word	0x0800de81
 800de50:	0800de81 	.word	0x0800de81
 800de54:	0800de81 	.word	0x0800de81
 800de58:	0800de81 	.word	0x0800de81
 800de5c:	0800de81 	.word	0x0800de81
 800de60:	0800de81 	.word	0x0800de81
 800de64:	0800de81 	.word	0x0800de81
 800de68:	0800de81 	.word	0x0800de81
 800de6c:	0800de81 	.word	0x0800de81
 800de70:	0800de81 	.word	0x0800de81
 800de74:	0800de81 	.word	0x0800de81
 800de78:	0800de81 	.word	0x0800de81
 800de7c:	0800de81 	.word	0x0800de81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de80:	bf00      	nop
  }

  return (USBD_OK);
 800de82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800de84:	4618      	mov	r0, r3
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800de9a:	6879      	ldr	r1, [r7, #4]
 800de9c:	4805      	ldr	r0, [pc, #20]	@ (800deb4 <CDC_Receive_FS+0x24>)
 800de9e:	f7fd fa57 	bl	800b350 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dea2:	4804      	ldr	r0, [pc, #16]	@ (800deb4 <CDC_Receive_FS+0x24>)
 800dea4:	f7fd fab2 	bl	800b40c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dea8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	2000045c 	.word	0x2000045c

0800deb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dec8:	4b0d      	ldr	r3, [pc, #52]	@ (800df00 <CDC_Transmit_FS+0x48>)
 800deca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dece:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800deda:	2301      	movs	r3, #1
 800dedc:	e00b      	b.n	800def6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dede:	887b      	ldrh	r3, [r7, #2]
 800dee0:	461a      	mov	r2, r3
 800dee2:	6879      	ldr	r1, [r7, #4]
 800dee4:	4806      	ldr	r0, [pc, #24]	@ (800df00 <CDC_Transmit_FS+0x48>)
 800dee6:	f7fd fa11 	bl	800b30c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800deea:	4805      	ldr	r0, [pc, #20]	@ (800df00 <CDC_Transmit_FS+0x48>)
 800deec:	f7fd fa4e 	bl	800b38c <USBD_CDC_TransmitPacket>
 800def0:	4603      	mov	r3, r0
 800def2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800def4:	7bfb      	ldrb	r3, [r7, #15]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	2000045c 	.word	0x2000045c

0800df04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df04:	b480      	push	{r7}
 800df06:	b087      	sub	sp, #28
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	4613      	mov	r3, r2
 800df10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df12:	2300      	movs	r3, #0
 800df14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800df16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	371c      	adds	r7, #28
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
	...

0800df28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	4603      	mov	r3, r0
 800df30:	6039      	str	r1, [r7, #0]
 800df32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	2212      	movs	r2, #18
 800df38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800df3a:	4b03      	ldr	r3, [pc, #12]	@ (800df48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr
 800df48:	20000108 	.word	0x20000108

0800df4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	4603      	mov	r3, r0
 800df54:	6039      	str	r1, [r7, #0]
 800df56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2204      	movs	r2, #4
 800df5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df5e:	4b03      	ldr	r3, [pc, #12]	@ (800df6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr
 800df6c:	2000011c 	.word	0x2000011c

0800df70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	4603      	mov	r3, r0
 800df78:	6039      	str	r1, [r7, #0]
 800df7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df7c:	79fb      	ldrb	r3, [r7, #7]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d105      	bne.n	800df8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800df82:	683a      	ldr	r2, [r7, #0]
 800df84:	4907      	ldr	r1, [pc, #28]	@ (800dfa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800df86:	4808      	ldr	r0, [pc, #32]	@ (800dfa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800df88:	f7fe fc8c 	bl	800c8a4 <USBD_GetString>
 800df8c:	e004      	b.n	800df98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800df8e:	683a      	ldr	r2, [r7, #0]
 800df90:	4904      	ldr	r1, [pc, #16]	@ (800dfa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800df92:	4805      	ldr	r0, [pc, #20]	@ (800dfa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800df94:	f7fe fc86 	bl	800c8a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df98:	4b02      	ldr	r3, [pc, #8]	@ (800dfa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20000f38 	.word	0x20000f38
 800dfa8:	0800f43c 	.word	0x0800f43c

0800dfac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	6039      	str	r1, [r7, #0]
 800dfb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dfb8:	683a      	ldr	r2, [r7, #0]
 800dfba:	4904      	ldr	r1, [pc, #16]	@ (800dfcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dfbc:	4804      	ldr	r0, [pc, #16]	@ (800dfd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dfbe:	f7fe fc71 	bl	800c8a4 <USBD_GetString>
  return USBD_StrDesc;
 800dfc2:	4b02      	ldr	r3, [pc, #8]	@ (800dfcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	20000f38 	.word	0x20000f38
 800dfd0:	0800f454 	.word	0x0800f454

0800dfd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	4603      	mov	r3, r0
 800dfdc:	6039      	str	r1, [r7, #0]
 800dfde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	221a      	movs	r2, #26
 800dfe4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dfe6:	f000 f843 	bl	800e070 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dfea:	4b02      	ldr	r3, [pc, #8]	@ (800dff4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	20000120 	.word	0x20000120

0800dff8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	4603      	mov	r3, r0
 800e000:	6039      	str	r1, [r7, #0]
 800e002:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d105      	bne.n	800e016 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	4907      	ldr	r1, [pc, #28]	@ (800e02c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e00e:	4808      	ldr	r0, [pc, #32]	@ (800e030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e010:	f7fe fc48 	bl	800c8a4 <USBD_GetString>
 800e014:	e004      	b.n	800e020 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e016:	683a      	ldr	r2, [r7, #0]
 800e018:	4904      	ldr	r1, [pc, #16]	@ (800e02c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e01a:	4805      	ldr	r0, [pc, #20]	@ (800e030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e01c:	f7fe fc42 	bl	800c8a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e020:	4b02      	ldr	r3, [pc, #8]	@ (800e02c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e022:	4618      	mov	r0, r3
 800e024:	3708      	adds	r7, #8
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20000f38 	.word	0x20000f38
 800e030:	0800f468 	.word	0x0800f468

0800e034 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	4603      	mov	r3, r0
 800e03c:	6039      	str	r1, [r7, #0]
 800e03e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e040:	79fb      	ldrb	r3, [r7, #7]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d105      	bne.n	800e052 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e046:	683a      	ldr	r2, [r7, #0]
 800e048:	4907      	ldr	r1, [pc, #28]	@ (800e068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e04a:	4808      	ldr	r0, [pc, #32]	@ (800e06c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e04c:	f7fe fc2a 	bl	800c8a4 <USBD_GetString>
 800e050:	e004      	b.n	800e05c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e052:	683a      	ldr	r2, [r7, #0]
 800e054:	4904      	ldr	r1, [pc, #16]	@ (800e068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e056:	4805      	ldr	r0, [pc, #20]	@ (800e06c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e058:	f7fe fc24 	bl	800c8a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e05c:	4b02      	ldr	r3, [pc, #8]	@ (800e068 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	20000f38 	.word	0x20000f38
 800e06c:	0800f474 	.word	0x0800f474

0800e070 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e076:	4b0f      	ldr	r3, [pc, #60]	@ (800e0b4 <Get_SerialNum+0x44>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e07c:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b8 <Get_SerialNum+0x48>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e082:	4b0e      	ldr	r3, [pc, #56]	@ (800e0bc <Get_SerialNum+0x4c>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4413      	add	r3, r2
 800e08e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d009      	beq.n	800e0aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e096:	2208      	movs	r2, #8
 800e098:	4909      	ldr	r1, [pc, #36]	@ (800e0c0 <Get_SerialNum+0x50>)
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f000 f814 	bl	800e0c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0a0:	2204      	movs	r2, #4
 800e0a2:	4908      	ldr	r1, [pc, #32]	@ (800e0c4 <Get_SerialNum+0x54>)
 800e0a4:	68b8      	ldr	r0, [r7, #8]
 800e0a6:	f000 f80f 	bl	800e0c8 <IntToUnicode>
  }
}
 800e0aa:	bf00      	nop
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	1fff7a10 	.word	0x1fff7a10
 800e0b8:	1fff7a14 	.word	0x1fff7a14
 800e0bc:	1fff7a18 	.word	0x1fff7a18
 800e0c0:	20000122 	.word	0x20000122
 800e0c4:	20000132 	.word	0x20000132

0800e0c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b087      	sub	sp, #28
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e0da:	2300      	movs	r3, #0
 800e0dc:	75fb      	strb	r3, [r7, #23]
 800e0de:	e027      	b.n	800e130 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	0f1b      	lsrs	r3, r3, #28
 800e0e4:	2b09      	cmp	r3, #9
 800e0e6:	d80b      	bhi.n	800e100 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	0f1b      	lsrs	r3, r3, #28
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	7dfb      	ldrb	r3, [r7, #23]
 800e0f0:	005b      	lsls	r3, r3, #1
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	440b      	add	r3, r1
 800e0f8:	3230      	adds	r2, #48	@ 0x30
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]
 800e0fe:	e00a      	b.n	800e116 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	0f1b      	lsrs	r3, r3, #28
 800e104:	b2da      	uxtb	r2, r3
 800e106:	7dfb      	ldrb	r3, [r7, #23]
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	4619      	mov	r1, r3
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	440b      	add	r3, r1
 800e110:	3237      	adds	r2, #55	@ 0x37
 800e112:	b2d2      	uxtb	r2, r2
 800e114:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	011b      	lsls	r3, r3, #4
 800e11a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e11c:	7dfb      	ldrb	r3, [r7, #23]
 800e11e:	005b      	lsls	r3, r3, #1
 800e120:	3301      	adds	r3, #1
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	4413      	add	r3, r2
 800e126:	2200      	movs	r2, #0
 800e128:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
 800e12c:	3301      	adds	r3, #1
 800e12e:	75fb      	strb	r3, [r7, #23]
 800e130:	7dfa      	ldrb	r2, [r7, #23]
 800e132:	79fb      	ldrb	r3, [r7, #7]
 800e134:	429a      	cmp	r2, r3
 800e136:	d3d3      	bcc.n	800e0e0 <IntToUnicode+0x18>
  }
}
 800e138:	bf00      	nop
 800e13a:	bf00      	nop
 800e13c:	371c      	adds	r7, #28
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr
	...

0800e148 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b08a      	sub	sp, #40	@ 0x28
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e150:	f107 0314 	add.w	r3, r7, #20
 800e154:	2200      	movs	r2, #0
 800e156:	601a      	str	r2, [r3, #0]
 800e158:	605a      	str	r2, [r3, #4]
 800e15a:	609a      	str	r2, [r3, #8]
 800e15c:	60da      	str	r2, [r3, #12]
 800e15e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e168:	d13a      	bne.n	800e1e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e16a:	2300      	movs	r3, #0
 800e16c:	613b      	str	r3, [r7, #16]
 800e16e:	4b1e      	ldr	r3, [pc, #120]	@ (800e1e8 <HAL_PCD_MspInit+0xa0>)
 800e170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e172:	4a1d      	ldr	r2, [pc, #116]	@ (800e1e8 <HAL_PCD_MspInit+0xa0>)
 800e174:	f043 0301 	orr.w	r3, r3, #1
 800e178:	6313      	str	r3, [r2, #48]	@ 0x30
 800e17a:	4b1b      	ldr	r3, [pc, #108]	@ (800e1e8 <HAL_PCD_MspInit+0xa0>)
 800e17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e17e:	f003 0301 	and.w	r3, r3, #1
 800e182:	613b      	str	r3, [r7, #16]
 800e184:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e186:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e18a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e18c:	2302      	movs	r3, #2
 800e18e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e190:	2300      	movs	r3, #0
 800e192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e194:	2303      	movs	r3, #3
 800e196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e198:	230a      	movs	r3, #10
 800e19a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e19c:	f107 0314 	add.w	r3, r7, #20
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	4812      	ldr	r0, [pc, #72]	@ (800e1ec <HAL_PCD_MspInit+0xa4>)
 800e1a4:	f7f7 f8bc 	bl	8005320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e1a8:	4b0f      	ldr	r3, [pc, #60]	@ (800e1e8 <HAL_PCD_MspInit+0xa0>)
 800e1aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1ac:	4a0e      	ldr	r2, [pc, #56]	@ (800e1e8 <HAL_PCD_MspInit+0xa0>)
 800e1ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1b2:	6353      	str	r3, [r2, #52]	@ 0x34
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e1e8 <HAL_PCD_MspInit+0xa0>)
 800e1ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e1e8 <HAL_PCD_MspInit+0xa0>)
 800e1be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e1c2:	6453      	str	r3, [r2, #68]	@ 0x44
 800e1c4:	4b08      	ldr	r3, [pc, #32]	@ (800e1e8 <HAL_PCD_MspInit+0xa0>)
 800e1c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e1cc:	60fb      	str	r3, [r7, #12]
 800e1ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	2043      	movs	r0, #67	@ 0x43
 800e1d6:	f7f6 fcda 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e1da:	2043      	movs	r0, #67	@ 0x43
 800e1dc:	f7f6 fcf3 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e1e0:	bf00      	nop
 800e1e2:	3728      	adds	r7, #40	@ 0x28
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	40023800 	.word	0x40023800
 800e1ec:	40020000 	.word	0x40020000

0800e1f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e204:	4619      	mov	r1, r3
 800e206:	4610      	mov	r0, r2
 800e208:	f7fd f9e9 	bl	800b5de <USBD_LL_SetupStage>
}
 800e20c:	bf00      	nop
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e226:	78fa      	ldrb	r2, [r7, #3]
 800e228:	6879      	ldr	r1, [r7, #4]
 800e22a:	4613      	mov	r3, r2
 800e22c:	00db      	lsls	r3, r3, #3
 800e22e:	4413      	add	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	440b      	add	r3, r1
 800e234:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	78fb      	ldrb	r3, [r7, #3]
 800e23c:	4619      	mov	r1, r3
 800e23e:	f7fd fa23 	bl	800b688 <USBD_LL_DataOutStage>
}
 800e242:	bf00      	nop
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b082      	sub	sp, #8
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
 800e252:	460b      	mov	r3, r1
 800e254:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e25c:	78fa      	ldrb	r2, [r7, #3]
 800e25e:	6879      	ldr	r1, [r7, #4]
 800e260:	4613      	mov	r3, r2
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	3320      	adds	r3, #32
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	78fb      	ldrb	r3, [r7, #3]
 800e270:	4619      	mov	r1, r3
 800e272:	f7fd fabc 	bl	800b7ee <USBD_LL_DataInStage>
}
 800e276:	bf00      	nop
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fd fbf6 	bl	800ba7e <USBD_LL_SOF>
}
 800e292:	bf00      	nop
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b084      	sub	sp, #16
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	79db      	ldrb	r3, [r3, #7]
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d001      	beq.n	800e2b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e2ae:	f7f3 fab1 	bl	8001814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2b8:	7bfa      	ldrb	r2, [r7, #15]
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fd fb9a 	bl	800b9f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fd fb42 	bl	800b952 <USBD_LL_Reset>
}
 800e2ce:	bf00      	nop
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
	...

0800e2d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fd fb95 	bl	800ba16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	6812      	ldr	r2, [r2, #0]
 800e2fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e2fe:	f043 0301 	orr.w	r3, r3, #1
 800e302:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7adb      	ldrb	r3, [r3, #11]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d005      	beq.n	800e318 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e30c:	4b04      	ldr	r3, [pc, #16]	@ (800e320 <HAL_PCD_SuspendCallback+0x48>)
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	4a03      	ldr	r2, [pc, #12]	@ (800e320 <HAL_PCD_SuspendCallback+0x48>)
 800e312:	f043 0306 	orr.w	r3, r3, #6
 800e316:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e318:	bf00      	nop
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	e000ed00 	.word	0xe000ed00

0800e324 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e332:	4618      	mov	r0, r3
 800e334:	f7fd fb8b 	bl	800ba4e <USBD_LL_Resume>
}
 800e338:	bf00      	nop
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	460b      	mov	r3, r1
 800e34a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e352:	78fa      	ldrb	r2, [r7, #3]
 800e354:	4611      	mov	r1, r2
 800e356:	4618      	mov	r0, r3
 800e358:	f7fd fbe3 	bl	800bb22 <USBD_LL_IsoOUTIncomplete>
}
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e376:	78fa      	ldrb	r2, [r7, #3]
 800e378:	4611      	mov	r1, r2
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fd fb9f 	bl	800babe <USBD_LL_IsoINIncomplete>
}
 800e380:	bf00      	nop
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e396:	4618      	mov	r0, r3
 800e398:	f7fd fbf5 	bl	800bb86 <USBD_LL_DevConnected>
}
 800e39c:	bf00      	nop
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fd fbf2 	bl	800bb9c <USBD_LL_DevDisconnected>
}
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d13c      	bne.n	800e44a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e3d0:	4a20      	ldr	r2, [pc, #128]	@ (800e454 <USBD_LL_Init+0x94>)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	4a1e      	ldr	r2, [pc, #120]	@ (800e454 <USBD_LL_Init+0x94>)
 800e3dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e3e0:	4b1c      	ldr	r3, [pc, #112]	@ (800e454 <USBD_LL_Init+0x94>)
 800e3e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e3e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800e454 <USBD_LL_Init+0x94>)
 800e3ea:	2204      	movs	r2, #4
 800e3ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e3ee:	4b19      	ldr	r3, [pc, #100]	@ (800e454 <USBD_LL_Init+0x94>)
 800e3f0:	2202      	movs	r2, #2
 800e3f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e3f4:	4b17      	ldr	r3, [pc, #92]	@ (800e454 <USBD_LL_Init+0x94>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e3fa:	4b16      	ldr	r3, [pc, #88]	@ (800e454 <USBD_LL_Init+0x94>)
 800e3fc:	2202      	movs	r2, #2
 800e3fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e400:	4b14      	ldr	r3, [pc, #80]	@ (800e454 <USBD_LL_Init+0x94>)
 800e402:	2200      	movs	r2, #0
 800e404:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e406:	4b13      	ldr	r3, [pc, #76]	@ (800e454 <USBD_LL_Init+0x94>)
 800e408:	2200      	movs	r2, #0
 800e40a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e40c:	4b11      	ldr	r3, [pc, #68]	@ (800e454 <USBD_LL_Init+0x94>)
 800e40e:	2200      	movs	r2, #0
 800e410:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e412:	4b10      	ldr	r3, [pc, #64]	@ (800e454 <USBD_LL_Init+0x94>)
 800e414:	2200      	movs	r2, #0
 800e416:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e418:	4b0e      	ldr	r3, [pc, #56]	@ (800e454 <USBD_LL_Init+0x94>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e41e:	480d      	ldr	r0, [pc, #52]	@ (800e454 <USBD_LL_Init+0x94>)
 800e420:	f7f7 f934 	bl	800568c <HAL_PCD_Init>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e42a:	f7f3 f9f3 	bl	8001814 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e42e:	2180      	movs	r1, #128	@ 0x80
 800e430:	4808      	ldr	r0, [pc, #32]	@ (800e454 <USBD_LL_Init+0x94>)
 800e432:	f7f8 fb60 	bl	8006af6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e436:	2240      	movs	r2, #64	@ 0x40
 800e438:	2100      	movs	r1, #0
 800e43a:	4806      	ldr	r0, [pc, #24]	@ (800e454 <USBD_LL_Init+0x94>)
 800e43c:	f7f8 fb14 	bl	8006a68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e440:	2280      	movs	r2, #128	@ 0x80
 800e442:	2101      	movs	r1, #1
 800e444:	4803      	ldr	r0, [pc, #12]	@ (800e454 <USBD_LL_Init+0x94>)
 800e446:	f7f8 fb0f 	bl	8006a68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20001138 	.word	0x20001138

0800e458 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e464:	2300      	movs	r3, #0
 800e466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e46e:	4618      	mov	r0, r3
 800e470:	f7f7 fa1b 	bl	80058aa <HAL_PCD_Start>
 800e474:	4603      	mov	r3, r0
 800e476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e478:	7bfb      	ldrb	r3, [r7, #15]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 f942 	bl	800e704 <USBD_Get_USB_Status>
 800e480:	4603      	mov	r3, r0
 800e482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e484:	7bbb      	ldrb	r3, [r7, #14]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b084      	sub	sp, #16
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	4608      	mov	r0, r1
 800e498:	4611      	mov	r1, r2
 800e49a:	461a      	mov	r2, r3
 800e49c:	4603      	mov	r3, r0
 800e49e:	70fb      	strb	r3, [r7, #3]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	70bb      	strb	r3, [r7, #2]
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4b6:	78bb      	ldrb	r3, [r7, #2]
 800e4b8:	883a      	ldrh	r2, [r7, #0]
 800e4ba:	78f9      	ldrb	r1, [r7, #3]
 800e4bc:	f7f7 feef 	bl	800629e <HAL_PCD_EP_Open>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 f91c 	bl	800e704 <USBD_Get_USB_Status>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b084      	sub	sp, #16
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4f4:	78fa      	ldrb	r2, [r7, #3]
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7f7 ff3a 	bl	8006372 <HAL_PCD_EP_Close>
 800e4fe:	4603      	mov	r3, r0
 800e500:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e502:	7bfb      	ldrb	r3, [r7, #15]
 800e504:	4618      	mov	r0, r3
 800e506:	f000 f8fd 	bl	800e704 <USBD_Get_USB_Status>
 800e50a:	4603      	mov	r3, r0
 800e50c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e528:	2300      	movs	r3, #0
 800e52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e532:	78fa      	ldrb	r2, [r7, #3]
 800e534:	4611      	mov	r1, r2
 800e536:	4618      	mov	r0, r3
 800e538:	f7f7 fff2 	bl	8006520 <HAL_PCD_EP_SetStall>
 800e53c:	4603      	mov	r3, r0
 800e53e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	4618      	mov	r0, r3
 800e544:	f000 f8de 	bl	800e704 <USBD_Get_USB_Status>
 800e548:	4603      	mov	r3, r0
 800e54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b084      	sub	sp, #16
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
 800e55e:	460b      	mov	r3, r1
 800e560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e562:	2300      	movs	r3, #0
 800e564:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e566:	2300      	movs	r3, #0
 800e568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e570:	78fa      	ldrb	r2, [r7, #3]
 800e572:	4611      	mov	r1, r2
 800e574:	4618      	mov	r0, r3
 800e576:	f7f8 f836 	bl	80065e6 <HAL_PCD_EP_ClrStall>
 800e57a:	4603      	mov	r3, r0
 800e57c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e57e:	7bfb      	ldrb	r3, [r7, #15]
 800e580:	4618      	mov	r0, r3
 800e582:	f000 f8bf 	bl	800e704 <USBD_Get_USB_Status>
 800e586:	4603      	mov	r3, r0
 800e588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e58a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e594:	b480      	push	{r7}
 800e596:	b085      	sub	sp, #20
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	460b      	mov	r3, r1
 800e59e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e5a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	da0b      	bge.n	800e5c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e5b0:	78fb      	ldrb	r3, [r7, #3]
 800e5b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5b6:	68f9      	ldr	r1, [r7, #12]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	4413      	add	r3, r2
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	440b      	add	r3, r1
 800e5c2:	3316      	adds	r3, #22
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	e00b      	b.n	800e5e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e5c8:	78fb      	ldrb	r3, [r7, #3]
 800e5ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5ce:	68f9      	ldr	r1, [r7, #12]
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	00db      	lsls	r3, r3, #3
 800e5d4:	4413      	add	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	440b      	add	r3, r1
 800e5da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e5de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3714      	adds	r7, #20
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e606:	78fa      	ldrb	r2, [r7, #3]
 800e608:	4611      	mov	r1, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7f7 fe23 	bl	8006256 <HAL_PCD_SetAddress>
 800e610:	4603      	mov	r3, r0
 800e612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e614:	7bfb      	ldrb	r3, [r7, #15]
 800e616:	4618      	mov	r0, r3
 800e618:	f000 f874 	bl	800e704 <USBD_Get_USB_Status>
 800e61c:	4603      	mov	r3, r0
 800e61e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e620:	7bbb      	ldrb	r3, [r7, #14]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b086      	sub	sp, #24
 800e62e:	af00      	add	r7, sp, #0
 800e630:	60f8      	str	r0, [r7, #12]
 800e632:	607a      	str	r2, [r7, #4]
 800e634:	603b      	str	r3, [r7, #0]
 800e636:	460b      	mov	r3, r1
 800e638:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e63a:	2300      	movs	r3, #0
 800e63c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e63e:	2300      	movs	r3, #0
 800e640:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e648:	7af9      	ldrb	r1, [r7, #11]
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	f7f7 ff2d 	bl	80064ac <HAL_PCD_EP_Transmit>
 800e652:	4603      	mov	r3, r0
 800e654:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 f853 	bl	800e704 <USBD_Get_USB_Status>
 800e65e:	4603      	mov	r3, r0
 800e660:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e662:	7dbb      	ldrb	r3, [r7, #22]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3718      	adds	r7, #24
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	607a      	str	r2, [r7, #4]
 800e676:	603b      	str	r3, [r7, #0]
 800e678:	460b      	mov	r3, r1
 800e67a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e680:	2300      	movs	r3, #0
 800e682:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e68a:	7af9      	ldrb	r1, [r7, #11]
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	f7f7 feb9 	bl	8006406 <HAL_PCD_EP_Receive>
 800e694:	4603      	mov	r3, r0
 800e696:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e698:	7dfb      	ldrb	r3, [r7, #23]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f000 f832 	bl	800e704 <USBD_Get_USB_Status>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b082      	sub	sp, #8
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6c0:	78fa      	ldrb	r2, [r7, #3]
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f7 fed9 	bl	800647c <HAL_PCD_EP_GetRxCount>
 800e6ca:	4603      	mov	r3, r0
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e6dc:	4b03      	ldr	r3, [pc, #12]	@ (800e6ec <USBD_static_malloc+0x18>)
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	2000161c 	.word	0x2000161c

0800e6f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]

}
 800e6f8:	bf00      	nop
 800e6fa:	370c      	adds	r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	4603      	mov	r3, r0
 800e70c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e70e:	2300      	movs	r3, #0
 800e710:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e712:	79fb      	ldrb	r3, [r7, #7]
 800e714:	2b03      	cmp	r3, #3
 800e716:	d817      	bhi.n	800e748 <USBD_Get_USB_Status+0x44>
 800e718:	a201      	add	r2, pc, #4	@ (adr r2, 800e720 <USBD_Get_USB_Status+0x1c>)
 800e71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71e:	bf00      	nop
 800e720:	0800e731 	.word	0x0800e731
 800e724:	0800e737 	.word	0x0800e737
 800e728:	0800e73d 	.word	0x0800e73d
 800e72c:	0800e743 	.word	0x0800e743
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e730:	2300      	movs	r3, #0
 800e732:	73fb      	strb	r3, [r7, #15]
    break;
 800e734:	e00b      	b.n	800e74e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e736:	2303      	movs	r3, #3
 800e738:	73fb      	strb	r3, [r7, #15]
    break;
 800e73a:	e008      	b.n	800e74e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e73c:	2301      	movs	r3, #1
 800e73e:	73fb      	strb	r3, [r7, #15]
    break;
 800e740:	e005      	b.n	800e74e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e742:	2303      	movs	r3, #3
 800e744:	73fb      	strb	r3, [r7, #15]
    break;
 800e746:	e002      	b.n	800e74e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e748:	2303      	movs	r3, #3
 800e74a:	73fb      	strb	r3, [r7, #15]
    break;
 800e74c:	bf00      	nop
  }
  return usb_status;
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e750:	4618      	mov	r0, r3
 800e752:	3714      	adds	r7, #20
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <_ZdlPvj>:
 800e75c:	f000 b811 	b.w	800e782 <_ZdlPv>

0800e760 <_Znwj>:
 800e760:	2801      	cmp	r0, #1
 800e762:	bf38      	it	cc
 800e764:	2001      	movcc	r0, #1
 800e766:	b510      	push	{r4, lr}
 800e768:	4604      	mov	r4, r0
 800e76a:	4620      	mov	r0, r4
 800e76c:	f000 f836 	bl	800e7dc <malloc>
 800e770:	b100      	cbz	r0, 800e774 <_Znwj+0x14>
 800e772:	bd10      	pop	{r4, pc}
 800e774:	f000 f808 	bl	800e788 <_ZSt15get_new_handlerv>
 800e778:	b908      	cbnz	r0, 800e77e <_Znwj+0x1e>
 800e77a:	f000 f80d 	bl	800e798 <abort>
 800e77e:	4780      	blx	r0
 800e780:	e7f3      	b.n	800e76a <_Znwj+0xa>

0800e782 <_ZdlPv>:
 800e782:	f000 b833 	b.w	800e7ec <free>
	...

0800e788 <_ZSt15get_new_handlerv>:
 800e788:	4b02      	ldr	r3, [pc, #8]	@ (800e794 <_ZSt15get_new_handlerv+0xc>)
 800e78a:	6818      	ldr	r0, [r3, #0]
 800e78c:	f3bf 8f5b 	dmb	ish
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	2000183c 	.word	0x2000183c

0800e798 <abort>:
 800e798:	b508      	push	{r3, lr}
 800e79a:	2006      	movs	r0, #6
 800e79c:	f000 f9b0 	bl	800eb00 <raise>
 800e7a0:	2001      	movs	r0, #1
 800e7a2:	f7f3 fcc3 	bl	800212c <_exit>

0800e7a6 <__itoa>:
 800e7a6:	1e93      	subs	r3, r2, #2
 800e7a8:	2b22      	cmp	r3, #34	@ 0x22
 800e7aa:	b510      	push	{r4, lr}
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	d904      	bls.n	800e7ba <__itoa+0x14>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	700b      	strb	r3, [r1, #0]
 800e7b4:	461c      	mov	r4, r3
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	bd10      	pop	{r4, pc}
 800e7ba:	2a0a      	cmp	r2, #10
 800e7bc:	d109      	bne.n	800e7d2 <__itoa+0x2c>
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	da07      	bge.n	800e7d2 <__itoa+0x2c>
 800e7c2:	232d      	movs	r3, #45	@ 0x2d
 800e7c4:	700b      	strb	r3, [r1, #0]
 800e7c6:	4240      	negs	r0, r0
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	4421      	add	r1, r4
 800e7cc:	f000 f8c4 	bl	800e958 <__utoa>
 800e7d0:	e7f1      	b.n	800e7b6 <__itoa+0x10>
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	e7f9      	b.n	800e7ca <__itoa+0x24>

0800e7d6 <itoa>:
 800e7d6:	f7ff bfe6 	b.w	800e7a6 <__itoa>
	...

0800e7dc <malloc>:
 800e7dc:	4b02      	ldr	r3, [pc, #8]	@ (800e7e8 <malloc+0xc>)
 800e7de:	4601      	mov	r1, r0
 800e7e0:	6818      	ldr	r0, [r3, #0]
 800e7e2:	f000 b82d 	b.w	800e840 <_malloc_r>
 800e7e6:	bf00      	nop
 800e7e8:	2000013c 	.word	0x2000013c

0800e7ec <free>:
 800e7ec:	4b02      	ldr	r3, [pc, #8]	@ (800e7f8 <free+0xc>)
 800e7ee:	4601      	mov	r1, r0
 800e7f0:	6818      	ldr	r0, [r3, #0]
 800e7f2:	f000 b9eb 	b.w	800ebcc <_free_r>
 800e7f6:	bf00      	nop
 800e7f8:	2000013c 	.word	0x2000013c

0800e7fc <sbrk_aligned>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4e0f      	ldr	r6, [pc, #60]	@ (800e83c <sbrk_aligned+0x40>)
 800e800:	460c      	mov	r4, r1
 800e802:	6831      	ldr	r1, [r6, #0]
 800e804:	4605      	mov	r5, r0
 800e806:	b911      	cbnz	r1, 800e80e <sbrk_aligned+0x12>
 800e808:	f000 f996 	bl	800eb38 <_sbrk_r>
 800e80c:	6030      	str	r0, [r6, #0]
 800e80e:	4621      	mov	r1, r4
 800e810:	4628      	mov	r0, r5
 800e812:	f000 f991 	bl	800eb38 <_sbrk_r>
 800e816:	1c43      	adds	r3, r0, #1
 800e818:	d103      	bne.n	800e822 <sbrk_aligned+0x26>
 800e81a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e81e:	4620      	mov	r0, r4
 800e820:	bd70      	pop	{r4, r5, r6, pc}
 800e822:	1cc4      	adds	r4, r0, #3
 800e824:	f024 0403 	bic.w	r4, r4, #3
 800e828:	42a0      	cmp	r0, r4
 800e82a:	d0f8      	beq.n	800e81e <sbrk_aligned+0x22>
 800e82c:	1a21      	subs	r1, r4, r0
 800e82e:	4628      	mov	r0, r5
 800e830:	f000 f982 	bl	800eb38 <_sbrk_r>
 800e834:	3001      	adds	r0, #1
 800e836:	d1f2      	bne.n	800e81e <sbrk_aligned+0x22>
 800e838:	e7ef      	b.n	800e81a <sbrk_aligned+0x1e>
 800e83a:	bf00      	nop
 800e83c:	20001840 	.word	0x20001840

0800e840 <_malloc_r>:
 800e840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e844:	1ccd      	adds	r5, r1, #3
 800e846:	f025 0503 	bic.w	r5, r5, #3
 800e84a:	3508      	adds	r5, #8
 800e84c:	2d0c      	cmp	r5, #12
 800e84e:	bf38      	it	cc
 800e850:	250c      	movcc	r5, #12
 800e852:	2d00      	cmp	r5, #0
 800e854:	4606      	mov	r6, r0
 800e856:	db01      	blt.n	800e85c <_malloc_r+0x1c>
 800e858:	42a9      	cmp	r1, r5
 800e85a:	d904      	bls.n	800e866 <_malloc_r+0x26>
 800e85c:	230c      	movs	r3, #12
 800e85e:	6033      	str	r3, [r6, #0]
 800e860:	2000      	movs	r0, #0
 800e862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e93c <_malloc_r+0xfc>
 800e86a:	f000 f869 	bl	800e940 <__malloc_lock>
 800e86e:	f8d8 3000 	ldr.w	r3, [r8]
 800e872:	461c      	mov	r4, r3
 800e874:	bb44      	cbnz	r4, 800e8c8 <_malloc_r+0x88>
 800e876:	4629      	mov	r1, r5
 800e878:	4630      	mov	r0, r6
 800e87a:	f7ff ffbf 	bl	800e7fc <sbrk_aligned>
 800e87e:	1c43      	adds	r3, r0, #1
 800e880:	4604      	mov	r4, r0
 800e882:	d158      	bne.n	800e936 <_malloc_r+0xf6>
 800e884:	f8d8 4000 	ldr.w	r4, [r8]
 800e888:	4627      	mov	r7, r4
 800e88a:	2f00      	cmp	r7, #0
 800e88c:	d143      	bne.n	800e916 <_malloc_r+0xd6>
 800e88e:	2c00      	cmp	r4, #0
 800e890:	d04b      	beq.n	800e92a <_malloc_r+0xea>
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	4639      	mov	r1, r7
 800e896:	4630      	mov	r0, r6
 800e898:	eb04 0903 	add.w	r9, r4, r3
 800e89c:	f000 f94c 	bl	800eb38 <_sbrk_r>
 800e8a0:	4581      	cmp	r9, r0
 800e8a2:	d142      	bne.n	800e92a <_malloc_r+0xea>
 800e8a4:	6821      	ldr	r1, [r4, #0]
 800e8a6:	1a6d      	subs	r5, r5, r1
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f7ff ffa6 	bl	800e7fc <sbrk_aligned>
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d03a      	beq.n	800e92a <_malloc_r+0xea>
 800e8b4:	6823      	ldr	r3, [r4, #0]
 800e8b6:	442b      	add	r3, r5
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	f8d8 3000 	ldr.w	r3, [r8]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	bb62      	cbnz	r2, 800e91c <_malloc_r+0xdc>
 800e8c2:	f8c8 7000 	str.w	r7, [r8]
 800e8c6:	e00f      	b.n	800e8e8 <_malloc_r+0xa8>
 800e8c8:	6822      	ldr	r2, [r4, #0]
 800e8ca:	1b52      	subs	r2, r2, r5
 800e8cc:	d420      	bmi.n	800e910 <_malloc_r+0xd0>
 800e8ce:	2a0b      	cmp	r2, #11
 800e8d0:	d917      	bls.n	800e902 <_malloc_r+0xc2>
 800e8d2:	1961      	adds	r1, r4, r5
 800e8d4:	42a3      	cmp	r3, r4
 800e8d6:	6025      	str	r5, [r4, #0]
 800e8d8:	bf18      	it	ne
 800e8da:	6059      	strne	r1, [r3, #4]
 800e8dc:	6863      	ldr	r3, [r4, #4]
 800e8de:	bf08      	it	eq
 800e8e0:	f8c8 1000 	streq.w	r1, [r8]
 800e8e4:	5162      	str	r2, [r4, r5]
 800e8e6:	604b      	str	r3, [r1, #4]
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	f000 f82f 	bl	800e94c <__malloc_unlock>
 800e8ee:	f104 000b 	add.w	r0, r4, #11
 800e8f2:	1d23      	adds	r3, r4, #4
 800e8f4:	f020 0007 	bic.w	r0, r0, #7
 800e8f8:	1ac2      	subs	r2, r0, r3
 800e8fa:	bf1c      	itt	ne
 800e8fc:	1a1b      	subne	r3, r3, r0
 800e8fe:	50a3      	strne	r3, [r4, r2]
 800e900:	e7af      	b.n	800e862 <_malloc_r+0x22>
 800e902:	6862      	ldr	r2, [r4, #4]
 800e904:	42a3      	cmp	r3, r4
 800e906:	bf0c      	ite	eq
 800e908:	f8c8 2000 	streq.w	r2, [r8]
 800e90c:	605a      	strne	r2, [r3, #4]
 800e90e:	e7eb      	b.n	800e8e8 <_malloc_r+0xa8>
 800e910:	4623      	mov	r3, r4
 800e912:	6864      	ldr	r4, [r4, #4]
 800e914:	e7ae      	b.n	800e874 <_malloc_r+0x34>
 800e916:	463c      	mov	r4, r7
 800e918:	687f      	ldr	r7, [r7, #4]
 800e91a:	e7b6      	b.n	800e88a <_malloc_r+0x4a>
 800e91c:	461a      	mov	r2, r3
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	42a3      	cmp	r3, r4
 800e922:	d1fb      	bne.n	800e91c <_malloc_r+0xdc>
 800e924:	2300      	movs	r3, #0
 800e926:	6053      	str	r3, [r2, #4]
 800e928:	e7de      	b.n	800e8e8 <_malloc_r+0xa8>
 800e92a:	230c      	movs	r3, #12
 800e92c:	6033      	str	r3, [r6, #0]
 800e92e:	4630      	mov	r0, r6
 800e930:	f000 f80c 	bl	800e94c <__malloc_unlock>
 800e934:	e794      	b.n	800e860 <_malloc_r+0x20>
 800e936:	6005      	str	r5, [r0, #0]
 800e938:	e7d6      	b.n	800e8e8 <_malloc_r+0xa8>
 800e93a:	bf00      	nop
 800e93c:	20001844 	.word	0x20001844

0800e940 <__malloc_lock>:
 800e940:	4801      	ldr	r0, [pc, #4]	@ (800e948 <__malloc_lock+0x8>)
 800e942:	f000 b933 	b.w	800ebac <__retarget_lock_acquire_recursive>
 800e946:	bf00      	nop
 800e948:	20001984 	.word	0x20001984

0800e94c <__malloc_unlock>:
 800e94c:	4801      	ldr	r0, [pc, #4]	@ (800e954 <__malloc_unlock+0x8>)
 800e94e:	f000 b92e 	b.w	800ebae <__retarget_lock_release_recursive>
 800e952:	bf00      	nop
 800e954:	20001984 	.word	0x20001984

0800e958 <__utoa>:
 800e958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e95a:	4c1f      	ldr	r4, [pc, #124]	@ (800e9d8 <__utoa+0x80>)
 800e95c:	b08b      	sub	sp, #44	@ 0x2c
 800e95e:	4605      	mov	r5, r0
 800e960:	460b      	mov	r3, r1
 800e962:	466e      	mov	r6, sp
 800e964:	f104 0c20 	add.w	ip, r4, #32
 800e968:	6820      	ldr	r0, [r4, #0]
 800e96a:	6861      	ldr	r1, [r4, #4]
 800e96c:	4637      	mov	r7, r6
 800e96e:	c703      	stmia	r7!, {r0, r1}
 800e970:	3408      	adds	r4, #8
 800e972:	4564      	cmp	r4, ip
 800e974:	463e      	mov	r6, r7
 800e976:	d1f7      	bne.n	800e968 <__utoa+0x10>
 800e978:	7921      	ldrb	r1, [r4, #4]
 800e97a:	7139      	strb	r1, [r7, #4]
 800e97c:	1e91      	subs	r1, r2, #2
 800e97e:	6820      	ldr	r0, [r4, #0]
 800e980:	6038      	str	r0, [r7, #0]
 800e982:	2922      	cmp	r1, #34	@ 0x22
 800e984:	f04f 0100 	mov.w	r1, #0
 800e988:	d904      	bls.n	800e994 <__utoa+0x3c>
 800e98a:	7019      	strb	r1, [r3, #0]
 800e98c:	460b      	mov	r3, r1
 800e98e:	4618      	mov	r0, r3
 800e990:	b00b      	add	sp, #44	@ 0x2c
 800e992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e994:	1e58      	subs	r0, r3, #1
 800e996:	4684      	mov	ip, r0
 800e998:	fbb5 f7f2 	udiv	r7, r5, r2
 800e99c:	fb02 5617 	mls	r6, r2, r7, r5
 800e9a0:	3628      	adds	r6, #40	@ 0x28
 800e9a2:	446e      	add	r6, sp
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e9aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e9ae:	462e      	mov	r6, r5
 800e9b0:	42b2      	cmp	r2, r6
 800e9b2:	f101 0101 	add.w	r1, r1, #1
 800e9b6:	463d      	mov	r5, r7
 800e9b8:	d9ee      	bls.n	800e998 <__utoa+0x40>
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	545a      	strb	r2, [r3, r1]
 800e9be:	1919      	adds	r1, r3, r4
 800e9c0:	1aa5      	subs	r5, r4, r2
 800e9c2:	42aa      	cmp	r2, r5
 800e9c4:	dae3      	bge.n	800e98e <__utoa+0x36>
 800e9c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e9ca:	780e      	ldrb	r6, [r1, #0]
 800e9cc:	7006      	strb	r6, [r0, #0]
 800e9ce:	3201      	adds	r2, #1
 800e9d0:	f801 5901 	strb.w	r5, [r1], #-1
 800e9d4:	e7f4      	b.n	800e9c0 <__utoa+0x68>
 800e9d6:	bf00      	nop
 800e9d8:	08016f28 	.word	0x08016f28

0800e9dc <_vsniprintf_r>:
 800e9dc:	b530      	push	{r4, r5, lr}
 800e9de:	4614      	mov	r4, r2
 800e9e0:	2c00      	cmp	r4, #0
 800e9e2:	b09b      	sub	sp, #108	@ 0x6c
 800e9e4:	4605      	mov	r5, r0
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	da05      	bge.n	800e9f6 <_vsniprintf_r+0x1a>
 800e9ea:	238b      	movs	r3, #139	@ 0x8b
 800e9ec:	6003      	str	r3, [r0, #0]
 800e9ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9f2:	b01b      	add	sp, #108	@ 0x6c
 800e9f4:	bd30      	pop	{r4, r5, pc}
 800e9f6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e9fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e9fe:	f04f 0300 	mov.w	r3, #0
 800ea02:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea04:	bf14      	ite	ne
 800ea06:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800ea0a:	4623      	moveq	r3, r4
 800ea0c:	9302      	str	r3, [sp, #8]
 800ea0e:	9305      	str	r3, [sp, #20]
 800ea10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea14:	9100      	str	r1, [sp, #0]
 800ea16:	9104      	str	r1, [sp, #16]
 800ea18:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ea1c:	4669      	mov	r1, sp
 800ea1e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ea20:	f000 f97a 	bl	800ed18 <_svfiprintf_r>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	bfbc      	itt	lt
 800ea28:	238b      	movlt	r3, #139	@ 0x8b
 800ea2a:	602b      	strlt	r3, [r5, #0]
 800ea2c:	2c00      	cmp	r4, #0
 800ea2e:	d0e0      	beq.n	800e9f2 <_vsniprintf_r+0x16>
 800ea30:	9b00      	ldr	r3, [sp, #0]
 800ea32:	2200      	movs	r2, #0
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	e7dc      	b.n	800e9f2 <_vsniprintf_r+0x16>

0800ea38 <vsniprintf>:
 800ea38:	b507      	push	{r0, r1, r2, lr}
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	460a      	mov	r2, r1
 800ea40:	4601      	mov	r1, r0
 800ea42:	4803      	ldr	r0, [pc, #12]	@ (800ea50 <vsniprintf+0x18>)
 800ea44:	6800      	ldr	r0, [r0, #0]
 800ea46:	f7ff ffc9 	bl	800e9dc <_vsniprintf_r>
 800ea4a:	b003      	add	sp, #12
 800ea4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea50:	2000013c 	.word	0x2000013c

0800ea54 <memset>:
 800ea54:	4402      	add	r2, r0
 800ea56:	4603      	mov	r3, r0
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d100      	bne.n	800ea5e <memset+0xa>
 800ea5c:	4770      	bx	lr
 800ea5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ea62:	e7f9      	b.n	800ea58 <memset+0x4>

0800ea64 <strncat>:
 800ea64:	b530      	push	{r4, r5, lr}
 800ea66:	4604      	mov	r4, r0
 800ea68:	7825      	ldrb	r5, [r4, #0]
 800ea6a:	4623      	mov	r3, r4
 800ea6c:	3401      	adds	r4, #1
 800ea6e:	2d00      	cmp	r5, #0
 800ea70:	d1fa      	bne.n	800ea68 <strncat+0x4>
 800ea72:	3a01      	subs	r2, #1
 800ea74:	d304      	bcc.n	800ea80 <strncat+0x1c>
 800ea76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea7a:	f803 4b01 	strb.w	r4, [r3], #1
 800ea7e:	b904      	cbnz	r4, 800ea82 <strncat+0x1e>
 800ea80:	bd30      	pop	{r4, r5, pc}
 800ea82:	2a00      	cmp	r2, #0
 800ea84:	d1f5      	bne.n	800ea72 <strncat+0xe>
 800ea86:	701a      	strb	r2, [r3, #0]
 800ea88:	e7f3      	b.n	800ea72 <strncat+0xe>

0800ea8a <strncpy>:
 800ea8a:	b510      	push	{r4, lr}
 800ea8c:	3901      	subs	r1, #1
 800ea8e:	4603      	mov	r3, r0
 800ea90:	b132      	cbz	r2, 800eaa0 <strncpy+0x16>
 800ea92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea96:	f803 4b01 	strb.w	r4, [r3], #1
 800ea9a:	3a01      	subs	r2, #1
 800ea9c:	2c00      	cmp	r4, #0
 800ea9e:	d1f7      	bne.n	800ea90 <strncpy+0x6>
 800eaa0:	441a      	add	r2, r3
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d100      	bne.n	800eaaa <strncpy+0x20>
 800eaa8:	bd10      	pop	{r4, pc}
 800eaaa:	f803 1b01 	strb.w	r1, [r3], #1
 800eaae:	e7f9      	b.n	800eaa4 <strncpy+0x1a>

0800eab0 <_raise_r>:
 800eab0:	291f      	cmp	r1, #31
 800eab2:	b538      	push	{r3, r4, r5, lr}
 800eab4:	4605      	mov	r5, r0
 800eab6:	460c      	mov	r4, r1
 800eab8:	d904      	bls.n	800eac4 <_raise_r+0x14>
 800eaba:	2316      	movs	r3, #22
 800eabc:	6003      	str	r3, [r0, #0]
 800eabe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eac6:	b112      	cbz	r2, 800eace <_raise_r+0x1e>
 800eac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eacc:	b94b      	cbnz	r3, 800eae2 <_raise_r+0x32>
 800eace:	4628      	mov	r0, r5
 800ead0:	f000 f830 	bl	800eb34 <_getpid_r>
 800ead4:	4622      	mov	r2, r4
 800ead6:	4601      	mov	r1, r0
 800ead8:	4628      	mov	r0, r5
 800eada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eade:	f000 b817 	b.w	800eb10 <_kill_r>
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d00a      	beq.n	800eafc <_raise_r+0x4c>
 800eae6:	1c59      	adds	r1, r3, #1
 800eae8:	d103      	bne.n	800eaf2 <_raise_r+0x42>
 800eaea:	2316      	movs	r3, #22
 800eaec:	6003      	str	r3, [r0, #0]
 800eaee:	2001      	movs	r0, #1
 800eaf0:	e7e7      	b.n	800eac2 <_raise_r+0x12>
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eaf8:	4620      	mov	r0, r4
 800eafa:	4798      	blx	r3
 800eafc:	2000      	movs	r0, #0
 800eafe:	e7e0      	b.n	800eac2 <_raise_r+0x12>

0800eb00 <raise>:
 800eb00:	4b02      	ldr	r3, [pc, #8]	@ (800eb0c <raise+0xc>)
 800eb02:	4601      	mov	r1, r0
 800eb04:	6818      	ldr	r0, [r3, #0]
 800eb06:	f7ff bfd3 	b.w	800eab0 <_raise_r>
 800eb0a:	bf00      	nop
 800eb0c:	2000013c 	.word	0x2000013c

0800eb10 <_kill_r>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	4d07      	ldr	r5, [pc, #28]	@ (800eb30 <_kill_r+0x20>)
 800eb14:	2300      	movs	r3, #0
 800eb16:	4604      	mov	r4, r0
 800eb18:	4608      	mov	r0, r1
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	602b      	str	r3, [r5, #0]
 800eb1e:	f7f3 faf5 	bl	800210c <_kill>
 800eb22:	1c43      	adds	r3, r0, #1
 800eb24:	d102      	bne.n	800eb2c <_kill_r+0x1c>
 800eb26:	682b      	ldr	r3, [r5, #0]
 800eb28:	b103      	cbz	r3, 800eb2c <_kill_r+0x1c>
 800eb2a:	6023      	str	r3, [r4, #0]
 800eb2c:	bd38      	pop	{r3, r4, r5, pc}
 800eb2e:	bf00      	nop
 800eb30:	20001980 	.word	0x20001980

0800eb34 <_getpid_r>:
 800eb34:	f7f3 bae2 	b.w	80020fc <_getpid>

0800eb38 <_sbrk_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4d06      	ldr	r5, [pc, #24]	@ (800eb54 <_sbrk_r+0x1c>)
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	4604      	mov	r4, r0
 800eb40:	4608      	mov	r0, r1
 800eb42:	602b      	str	r3, [r5, #0]
 800eb44:	f7f3 fafe 	bl	8002144 <_sbrk>
 800eb48:	1c43      	adds	r3, r0, #1
 800eb4a:	d102      	bne.n	800eb52 <_sbrk_r+0x1a>
 800eb4c:	682b      	ldr	r3, [r5, #0]
 800eb4e:	b103      	cbz	r3, 800eb52 <_sbrk_r+0x1a>
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	bd38      	pop	{r3, r4, r5, pc}
 800eb54:	20001980 	.word	0x20001980

0800eb58 <__errno>:
 800eb58:	4b01      	ldr	r3, [pc, #4]	@ (800eb60 <__errno+0x8>)
 800eb5a:	6818      	ldr	r0, [r3, #0]
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	2000013c 	.word	0x2000013c

0800eb64 <__libc_init_array>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	4d0d      	ldr	r5, [pc, #52]	@ (800eb9c <__libc_init_array+0x38>)
 800eb68:	4c0d      	ldr	r4, [pc, #52]	@ (800eba0 <__libc_init_array+0x3c>)
 800eb6a:	1b64      	subs	r4, r4, r5
 800eb6c:	10a4      	asrs	r4, r4, #2
 800eb6e:	2600      	movs	r6, #0
 800eb70:	42a6      	cmp	r6, r4
 800eb72:	d109      	bne.n	800eb88 <__libc_init_array+0x24>
 800eb74:	4d0b      	ldr	r5, [pc, #44]	@ (800eba4 <__libc_init_array+0x40>)
 800eb76:	4c0c      	ldr	r4, [pc, #48]	@ (800eba8 <__libc_init_array+0x44>)
 800eb78:	f000 fba6 	bl	800f2c8 <_init>
 800eb7c:	1b64      	subs	r4, r4, r5
 800eb7e:	10a4      	asrs	r4, r4, #2
 800eb80:	2600      	movs	r6, #0
 800eb82:	42a6      	cmp	r6, r4
 800eb84:	d105      	bne.n	800eb92 <__libc_init_array+0x2e>
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb8c:	4798      	blx	r3
 800eb8e:	3601      	adds	r6, #1
 800eb90:	e7ee      	b.n	800eb70 <__libc_init_array+0xc>
 800eb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb96:	4798      	blx	r3
 800eb98:	3601      	adds	r6, #1
 800eb9a:	e7f2      	b.n	800eb82 <__libc_init_array+0x1e>
 800eb9c:	08016f88 	.word	0x08016f88
 800eba0:	08016f88 	.word	0x08016f88
 800eba4:	08016f88 	.word	0x08016f88
 800eba8:	08016f94 	.word	0x08016f94

0800ebac <__retarget_lock_acquire_recursive>:
 800ebac:	4770      	bx	lr

0800ebae <__retarget_lock_release_recursive>:
 800ebae:	4770      	bx	lr

0800ebb0 <memcpy>:
 800ebb0:	440a      	add	r2, r1
 800ebb2:	4291      	cmp	r1, r2
 800ebb4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ebb8:	d100      	bne.n	800ebbc <memcpy+0xc>
 800ebba:	4770      	bx	lr
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebc6:	4291      	cmp	r1, r2
 800ebc8:	d1f9      	bne.n	800ebbe <memcpy+0xe>
 800ebca:	bd10      	pop	{r4, pc}

0800ebcc <_free_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4605      	mov	r5, r0
 800ebd0:	2900      	cmp	r1, #0
 800ebd2:	d041      	beq.n	800ec58 <_free_r+0x8c>
 800ebd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebd8:	1f0c      	subs	r4, r1, #4
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	bfb8      	it	lt
 800ebde:	18e4      	addlt	r4, r4, r3
 800ebe0:	f7ff feae 	bl	800e940 <__malloc_lock>
 800ebe4:	4a1d      	ldr	r2, [pc, #116]	@ (800ec5c <_free_r+0x90>)
 800ebe6:	6813      	ldr	r3, [r2, #0]
 800ebe8:	b933      	cbnz	r3, 800ebf8 <_free_r+0x2c>
 800ebea:	6063      	str	r3, [r4, #4]
 800ebec:	6014      	str	r4, [r2, #0]
 800ebee:	4628      	mov	r0, r5
 800ebf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebf4:	f7ff beaa 	b.w	800e94c <__malloc_unlock>
 800ebf8:	42a3      	cmp	r3, r4
 800ebfa:	d908      	bls.n	800ec0e <_free_r+0x42>
 800ebfc:	6820      	ldr	r0, [r4, #0]
 800ebfe:	1821      	adds	r1, r4, r0
 800ec00:	428b      	cmp	r3, r1
 800ec02:	bf01      	itttt	eq
 800ec04:	6819      	ldreq	r1, [r3, #0]
 800ec06:	685b      	ldreq	r3, [r3, #4]
 800ec08:	1809      	addeq	r1, r1, r0
 800ec0a:	6021      	streq	r1, [r4, #0]
 800ec0c:	e7ed      	b.n	800ebea <_free_r+0x1e>
 800ec0e:	461a      	mov	r2, r3
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	b10b      	cbz	r3, 800ec18 <_free_r+0x4c>
 800ec14:	42a3      	cmp	r3, r4
 800ec16:	d9fa      	bls.n	800ec0e <_free_r+0x42>
 800ec18:	6811      	ldr	r1, [r2, #0]
 800ec1a:	1850      	adds	r0, r2, r1
 800ec1c:	42a0      	cmp	r0, r4
 800ec1e:	d10b      	bne.n	800ec38 <_free_r+0x6c>
 800ec20:	6820      	ldr	r0, [r4, #0]
 800ec22:	4401      	add	r1, r0
 800ec24:	1850      	adds	r0, r2, r1
 800ec26:	4283      	cmp	r3, r0
 800ec28:	6011      	str	r1, [r2, #0]
 800ec2a:	d1e0      	bne.n	800ebee <_free_r+0x22>
 800ec2c:	6818      	ldr	r0, [r3, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	6053      	str	r3, [r2, #4]
 800ec32:	4408      	add	r0, r1
 800ec34:	6010      	str	r0, [r2, #0]
 800ec36:	e7da      	b.n	800ebee <_free_r+0x22>
 800ec38:	d902      	bls.n	800ec40 <_free_r+0x74>
 800ec3a:	230c      	movs	r3, #12
 800ec3c:	602b      	str	r3, [r5, #0]
 800ec3e:	e7d6      	b.n	800ebee <_free_r+0x22>
 800ec40:	6820      	ldr	r0, [r4, #0]
 800ec42:	1821      	adds	r1, r4, r0
 800ec44:	428b      	cmp	r3, r1
 800ec46:	bf04      	itt	eq
 800ec48:	6819      	ldreq	r1, [r3, #0]
 800ec4a:	685b      	ldreq	r3, [r3, #4]
 800ec4c:	6063      	str	r3, [r4, #4]
 800ec4e:	bf04      	itt	eq
 800ec50:	1809      	addeq	r1, r1, r0
 800ec52:	6021      	streq	r1, [r4, #0]
 800ec54:	6054      	str	r4, [r2, #4]
 800ec56:	e7ca      	b.n	800ebee <_free_r+0x22>
 800ec58:	bd38      	pop	{r3, r4, r5, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20001844 	.word	0x20001844

0800ec60 <__ssputs_r>:
 800ec60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec64:	688e      	ldr	r6, [r1, #8]
 800ec66:	461f      	mov	r7, r3
 800ec68:	42be      	cmp	r6, r7
 800ec6a:	680b      	ldr	r3, [r1, #0]
 800ec6c:	4682      	mov	sl, r0
 800ec6e:	460c      	mov	r4, r1
 800ec70:	4690      	mov	r8, r2
 800ec72:	d82d      	bhi.n	800ecd0 <__ssputs_r+0x70>
 800ec74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ec7c:	d026      	beq.n	800eccc <__ssputs_r+0x6c>
 800ec7e:	6965      	ldr	r5, [r4, #20]
 800ec80:	6909      	ldr	r1, [r1, #16]
 800ec82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec86:	eba3 0901 	sub.w	r9, r3, r1
 800ec8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec8e:	1c7b      	adds	r3, r7, #1
 800ec90:	444b      	add	r3, r9
 800ec92:	106d      	asrs	r5, r5, #1
 800ec94:	429d      	cmp	r5, r3
 800ec96:	bf38      	it	cc
 800ec98:	461d      	movcc	r5, r3
 800ec9a:	0553      	lsls	r3, r2, #21
 800ec9c:	d527      	bpl.n	800ecee <__ssputs_r+0x8e>
 800ec9e:	4629      	mov	r1, r5
 800eca0:	f7ff fdce 	bl	800e840 <_malloc_r>
 800eca4:	4606      	mov	r6, r0
 800eca6:	b360      	cbz	r0, 800ed02 <__ssputs_r+0xa2>
 800eca8:	6921      	ldr	r1, [r4, #16]
 800ecaa:	464a      	mov	r2, r9
 800ecac:	f7ff ff80 	bl	800ebb0 <memcpy>
 800ecb0:	89a3      	ldrh	r3, [r4, #12]
 800ecb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ecb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecba:	81a3      	strh	r3, [r4, #12]
 800ecbc:	6126      	str	r6, [r4, #16]
 800ecbe:	6165      	str	r5, [r4, #20]
 800ecc0:	444e      	add	r6, r9
 800ecc2:	eba5 0509 	sub.w	r5, r5, r9
 800ecc6:	6026      	str	r6, [r4, #0]
 800ecc8:	60a5      	str	r5, [r4, #8]
 800ecca:	463e      	mov	r6, r7
 800eccc:	42be      	cmp	r6, r7
 800ecce:	d900      	bls.n	800ecd2 <__ssputs_r+0x72>
 800ecd0:	463e      	mov	r6, r7
 800ecd2:	6820      	ldr	r0, [r4, #0]
 800ecd4:	4632      	mov	r2, r6
 800ecd6:	4641      	mov	r1, r8
 800ecd8:	f000 faa6 	bl	800f228 <memmove>
 800ecdc:	68a3      	ldr	r3, [r4, #8]
 800ecde:	1b9b      	subs	r3, r3, r6
 800ece0:	60a3      	str	r3, [r4, #8]
 800ece2:	6823      	ldr	r3, [r4, #0]
 800ece4:	4433      	add	r3, r6
 800ece6:	6023      	str	r3, [r4, #0]
 800ece8:	2000      	movs	r0, #0
 800ecea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecee:	462a      	mov	r2, r5
 800ecf0:	f000 fab4 	bl	800f25c <_realloc_r>
 800ecf4:	4606      	mov	r6, r0
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d1e0      	bne.n	800ecbc <__ssputs_r+0x5c>
 800ecfa:	6921      	ldr	r1, [r4, #16]
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	f7ff ff65 	bl	800ebcc <_free_r>
 800ed02:	230c      	movs	r3, #12
 800ed04:	f8ca 3000 	str.w	r3, [sl]
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed0e:	81a3      	strh	r3, [r4, #12]
 800ed10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed14:	e7e9      	b.n	800ecea <__ssputs_r+0x8a>
	...

0800ed18 <_svfiprintf_r>:
 800ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed1c:	4698      	mov	r8, r3
 800ed1e:	898b      	ldrh	r3, [r1, #12]
 800ed20:	061b      	lsls	r3, r3, #24
 800ed22:	b09d      	sub	sp, #116	@ 0x74
 800ed24:	4607      	mov	r7, r0
 800ed26:	460d      	mov	r5, r1
 800ed28:	4614      	mov	r4, r2
 800ed2a:	d510      	bpl.n	800ed4e <_svfiprintf_r+0x36>
 800ed2c:	690b      	ldr	r3, [r1, #16]
 800ed2e:	b973      	cbnz	r3, 800ed4e <_svfiprintf_r+0x36>
 800ed30:	2140      	movs	r1, #64	@ 0x40
 800ed32:	f7ff fd85 	bl	800e840 <_malloc_r>
 800ed36:	6028      	str	r0, [r5, #0]
 800ed38:	6128      	str	r0, [r5, #16]
 800ed3a:	b930      	cbnz	r0, 800ed4a <_svfiprintf_r+0x32>
 800ed3c:	230c      	movs	r3, #12
 800ed3e:	603b      	str	r3, [r7, #0]
 800ed40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed44:	b01d      	add	sp, #116	@ 0x74
 800ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4a:	2340      	movs	r3, #64	@ 0x40
 800ed4c:	616b      	str	r3, [r5, #20]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed52:	2320      	movs	r3, #32
 800ed54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed5c:	2330      	movs	r3, #48	@ 0x30
 800ed5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eefc <_svfiprintf_r+0x1e4>
 800ed62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed66:	f04f 0901 	mov.w	r9, #1
 800ed6a:	4623      	mov	r3, r4
 800ed6c:	469a      	mov	sl, r3
 800ed6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed72:	b10a      	cbz	r2, 800ed78 <_svfiprintf_r+0x60>
 800ed74:	2a25      	cmp	r2, #37	@ 0x25
 800ed76:	d1f9      	bne.n	800ed6c <_svfiprintf_r+0x54>
 800ed78:	ebba 0b04 	subs.w	fp, sl, r4
 800ed7c:	d00b      	beq.n	800ed96 <_svfiprintf_r+0x7e>
 800ed7e:	465b      	mov	r3, fp
 800ed80:	4622      	mov	r2, r4
 800ed82:	4629      	mov	r1, r5
 800ed84:	4638      	mov	r0, r7
 800ed86:	f7ff ff6b 	bl	800ec60 <__ssputs_r>
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	f000 80a7 	beq.w	800eede <_svfiprintf_r+0x1c6>
 800ed90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed92:	445a      	add	r2, fp
 800ed94:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed96:	f89a 3000 	ldrb.w	r3, [sl]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 809f 	beq.w	800eede <_svfiprintf_r+0x1c6>
 800eda0:	2300      	movs	r3, #0
 800eda2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eda6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edaa:	f10a 0a01 	add.w	sl, sl, #1
 800edae:	9304      	str	r3, [sp, #16]
 800edb0:	9307      	str	r3, [sp, #28]
 800edb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800edb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800edb8:	4654      	mov	r4, sl
 800edba:	2205      	movs	r2, #5
 800edbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edc0:	484e      	ldr	r0, [pc, #312]	@ (800eefc <_svfiprintf_r+0x1e4>)
 800edc2:	f7f1 fa15 	bl	80001f0 <memchr>
 800edc6:	9a04      	ldr	r2, [sp, #16]
 800edc8:	b9d8      	cbnz	r0, 800ee02 <_svfiprintf_r+0xea>
 800edca:	06d0      	lsls	r0, r2, #27
 800edcc:	bf44      	itt	mi
 800edce:	2320      	movmi	r3, #32
 800edd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edd4:	0711      	lsls	r1, r2, #28
 800edd6:	bf44      	itt	mi
 800edd8:	232b      	movmi	r3, #43	@ 0x2b
 800edda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edde:	f89a 3000 	ldrb.w	r3, [sl]
 800ede2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ede4:	d015      	beq.n	800ee12 <_svfiprintf_r+0xfa>
 800ede6:	9a07      	ldr	r2, [sp, #28]
 800ede8:	4654      	mov	r4, sl
 800edea:	2000      	movs	r0, #0
 800edec:	f04f 0c0a 	mov.w	ip, #10
 800edf0:	4621      	mov	r1, r4
 800edf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edf6:	3b30      	subs	r3, #48	@ 0x30
 800edf8:	2b09      	cmp	r3, #9
 800edfa:	d94b      	bls.n	800ee94 <_svfiprintf_r+0x17c>
 800edfc:	b1b0      	cbz	r0, 800ee2c <_svfiprintf_r+0x114>
 800edfe:	9207      	str	r2, [sp, #28]
 800ee00:	e014      	b.n	800ee2c <_svfiprintf_r+0x114>
 800ee02:	eba0 0308 	sub.w	r3, r0, r8
 800ee06:	fa09 f303 	lsl.w	r3, r9, r3
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	9304      	str	r3, [sp, #16]
 800ee0e:	46a2      	mov	sl, r4
 800ee10:	e7d2      	b.n	800edb8 <_svfiprintf_r+0xa0>
 800ee12:	9b03      	ldr	r3, [sp, #12]
 800ee14:	1d19      	adds	r1, r3, #4
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	9103      	str	r1, [sp, #12]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	bfbb      	ittet	lt
 800ee1e:	425b      	neglt	r3, r3
 800ee20:	f042 0202 	orrlt.w	r2, r2, #2
 800ee24:	9307      	strge	r3, [sp, #28]
 800ee26:	9307      	strlt	r3, [sp, #28]
 800ee28:	bfb8      	it	lt
 800ee2a:	9204      	strlt	r2, [sp, #16]
 800ee2c:	7823      	ldrb	r3, [r4, #0]
 800ee2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee30:	d10a      	bne.n	800ee48 <_svfiprintf_r+0x130>
 800ee32:	7863      	ldrb	r3, [r4, #1]
 800ee34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee36:	d132      	bne.n	800ee9e <_svfiprintf_r+0x186>
 800ee38:	9b03      	ldr	r3, [sp, #12]
 800ee3a:	1d1a      	adds	r2, r3, #4
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	9203      	str	r2, [sp, #12]
 800ee40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee44:	3402      	adds	r4, #2
 800ee46:	9305      	str	r3, [sp, #20]
 800ee48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ef0c <_svfiprintf_r+0x1f4>
 800ee4c:	7821      	ldrb	r1, [r4, #0]
 800ee4e:	2203      	movs	r2, #3
 800ee50:	4650      	mov	r0, sl
 800ee52:	f7f1 f9cd 	bl	80001f0 <memchr>
 800ee56:	b138      	cbz	r0, 800ee68 <_svfiprintf_r+0x150>
 800ee58:	9b04      	ldr	r3, [sp, #16]
 800ee5a:	eba0 000a 	sub.w	r0, r0, sl
 800ee5e:	2240      	movs	r2, #64	@ 0x40
 800ee60:	4082      	lsls	r2, r0
 800ee62:	4313      	orrs	r3, r2
 800ee64:	3401      	adds	r4, #1
 800ee66:	9304      	str	r3, [sp, #16]
 800ee68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee6c:	4824      	ldr	r0, [pc, #144]	@ (800ef00 <_svfiprintf_r+0x1e8>)
 800ee6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee72:	2206      	movs	r2, #6
 800ee74:	f7f1 f9bc 	bl	80001f0 <memchr>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d036      	beq.n	800eeea <_svfiprintf_r+0x1d2>
 800ee7c:	4b21      	ldr	r3, [pc, #132]	@ (800ef04 <_svfiprintf_r+0x1ec>)
 800ee7e:	bb1b      	cbnz	r3, 800eec8 <_svfiprintf_r+0x1b0>
 800ee80:	9b03      	ldr	r3, [sp, #12]
 800ee82:	3307      	adds	r3, #7
 800ee84:	f023 0307 	bic.w	r3, r3, #7
 800ee88:	3308      	adds	r3, #8
 800ee8a:	9303      	str	r3, [sp, #12]
 800ee8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee8e:	4433      	add	r3, r6
 800ee90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee92:	e76a      	b.n	800ed6a <_svfiprintf_r+0x52>
 800ee94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee98:	460c      	mov	r4, r1
 800ee9a:	2001      	movs	r0, #1
 800ee9c:	e7a8      	b.n	800edf0 <_svfiprintf_r+0xd8>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	3401      	adds	r4, #1
 800eea2:	9305      	str	r3, [sp, #20]
 800eea4:	4619      	mov	r1, r3
 800eea6:	f04f 0c0a 	mov.w	ip, #10
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeb0:	3a30      	subs	r2, #48	@ 0x30
 800eeb2:	2a09      	cmp	r2, #9
 800eeb4:	d903      	bls.n	800eebe <_svfiprintf_r+0x1a6>
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d0c6      	beq.n	800ee48 <_svfiprintf_r+0x130>
 800eeba:	9105      	str	r1, [sp, #20]
 800eebc:	e7c4      	b.n	800ee48 <_svfiprintf_r+0x130>
 800eebe:	fb0c 2101 	mla	r1, ip, r1, r2
 800eec2:	4604      	mov	r4, r0
 800eec4:	2301      	movs	r3, #1
 800eec6:	e7f0      	b.n	800eeaa <_svfiprintf_r+0x192>
 800eec8:	ab03      	add	r3, sp, #12
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	462a      	mov	r2, r5
 800eece:	4b0e      	ldr	r3, [pc, #56]	@ (800ef08 <_svfiprintf_r+0x1f0>)
 800eed0:	a904      	add	r1, sp, #16
 800eed2:	4638      	mov	r0, r7
 800eed4:	f3af 8000 	nop.w
 800eed8:	1c42      	adds	r2, r0, #1
 800eeda:	4606      	mov	r6, r0
 800eedc:	d1d6      	bne.n	800ee8c <_svfiprintf_r+0x174>
 800eede:	89ab      	ldrh	r3, [r5, #12]
 800eee0:	065b      	lsls	r3, r3, #25
 800eee2:	f53f af2d 	bmi.w	800ed40 <_svfiprintf_r+0x28>
 800eee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eee8:	e72c      	b.n	800ed44 <_svfiprintf_r+0x2c>
 800eeea:	ab03      	add	r3, sp, #12
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	462a      	mov	r2, r5
 800eef0:	4b05      	ldr	r3, [pc, #20]	@ (800ef08 <_svfiprintf_r+0x1f0>)
 800eef2:	a904      	add	r1, sp, #16
 800eef4:	4638      	mov	r0, r7
 800eef6:	f000 f879 	bl	800efec <_printf_i>
 800eefa:	e7ed      	b.n	800eed8 <_svfiprintf_r+0x1c0>
 800eefc:	08016f4d 	.word	0x08016f4d
 800ef00:	08016f57 	.word	0x08016f57
 800ef04:	00000000 	.word	0x00000000
 800ef08:	0800ec61 	.word	0x0800ec61
 800ef0c:	08016f53 	.word	0x08016f53

0800ef10 <_printf_common>:
 800ef10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef14:	4616      	mov	r6, r2
 800ef16:	4698      	mov	r8, r3
 800ef18:	688a      	ldr	r2, [r1, #8]
 800ef1a:	690b      	ldr	r3, [r1, #16]
 800ef1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef20:	4293      	cmp	r3, r2
 800ef22:	bfb8      	it	lt
 800ef24:	4613      	movlt	r3, r2
 800ef26:	6033      	str	r3, [r6, #0]
 800ef28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	460c      	mov	r4, r1
 800ef30:	b10a      	cbz	r2, 800ef36 <_printf_common+0x26>
 800ef32:	3301      	adds	r3, #1
 800ef34:	6033      	str	r3, [r6, #0]
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	0699      	lsls	r1, r3, #26
 800ef3a:	bf42      	ittt	mi
 800ef3c:	6833      	ldrmi	r3, [r6, #0]
 800ef3e:	3302      	addmi	r3, #2
 800ef40:	6033      	strmi	r3, [r6, #0]
 800ef42:	6825      	ldr	r5, [r4, #0]
 800ef44:	f015 0506 	ands.w	r5, r5, #6
 800ef48:	d106      	bne.n	800ef58 <_printf_common+0x48>
 800ef4a:	f104 0a19 	add.w	sl, r4, #25
 800ef4e:	68e3      	ldr	r3, [r4, #12]
 800ef50:	6832      	ldr	r2, [r6, #0]
 800ef52:	1a9b      	subs	r3, r3, r2
 800ef54:	42ab      	cmp	r3, r5
 800ef56:	dc26      	bgt.n	800efa6 <_printf_common+0x96>
 800ef58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ef5c:	6822      	ldr	r2, [r4, #0]
 800ef5e:	3b00      	subs	r3, #0
 800ef60:	bf18      	it	ne
 800ef62:	2301      	movne	r3, #1
 800ef64:	0692      	lsls	r2, r2, #26
 800ef66:	d42b      	bmi.n	800efc0 <_printf_common+0xb0>
 800ef68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef6c:	4641      	mov	r1, r8
 800ef6e:	4638      	mov	r0, r7
 800ef70:	47c8      	blx	r9
 800ef72:	3001      	adds	r0, #1
 800ef74:	d01e      	beq.n	800efb4 <_printf_common+0xa4>
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	6922      	ldr	r2, [r4, #16]
 800ef7a:	f003 0306 	and.w	r3, r3, #6
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	bf02      	ittt	eq
 800ef82:	68e5      	ldreq	r5, [r4, #12]
 800ef84:	6833      	ldreq	r3, [r6, #0]
 800ef86:	1aed      	subeq	r5, r5, r3
 800ef88:	68a3      	ldr	r3, [r4, #8]
 800ef8a:	bf0c      	ite	eq
 800ef8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef90:	2500      	movne	r5, #0
 800ef92:	4293      	cmp	r3, r2
 800ef94:	bfc4      	itt	gt
 800ef96:	1a9b      	subgt	r3, r3, r2
 800ef98:	18ed      	addgt	r5, r5, r3
 800ef9a:	2600      	movs	r6, #0
 800ef9c:	341a      	adds	r4, #26
 800ef9e:	42b5      	cmp	r5, r6
 800efa0:	d11a      	bne.n	800efd8 <_printf_common+0xc8>
 800efa2:	2000      	movs	r0, #0
 800efa4:	e008      	b.n	800efb8 <_printf_common+0xa8>
 800efa6:	2301      	movs	r3, #1
 800efa8:	4652      	mov	r2, sl
 800efaa:	4641      	mov	r1, r8
 800efac:	4638      	mov	r0, r7
 800efae:	47c8      	blx	r9
 800efb0:	3001      	adds	r0, #1
 800efb2:	d103      	bne.n	800efbc <_printf_common+0xac>
 800efb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efbc:	3501      	adds	r5, #1
 800efbe:	e7c6      	b.n	800ef4e <_printf_common+0x3e>
 800efc0:	18e1      	adds	r1, r4, r3
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	2030      	movs	r0, #48	@ 0x30
 800efc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800efca:	4422      	add	r2, r4
 800efcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800efd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800efd4:	3302      	adds	r3, #2
 800efd6:	e7c7      	b.n	800ef68 <_printf_common+0x58>
 800efd8:	2301      	movs	r3, #1
 800efda:	4622      	mov	r2, r4
 800efdc:	4641      	mov	r1, r8
 800efde:	4638      	mov	r0, r7
 800efe0:	47c8      	blx	r9
 800efe2:	3001      	adds	r0, #1
 800efe4:	d0e6      	beq.n	800efb4 <_printf_common+0xa4>
 800efe6:	3601      	adds	r6, #1
 800efe8:	e7d9      	b.n	800ef9e <_printf_common+0x8e>
	...

0800efec <_printf_i>:
 800efec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eff0:	7e0f      	ldrb	r7, [r1, #24]
 800eff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eff4:	2f78      	cmp	r7, #120	@ 0x78
 800eff6:	4691      	mov	r9, r2
 800eff8:	4680      	mov	r8, r0
 800effa:	460c      	mov	r4, r1
 800effc:	469a      	mov	sl, r3
 800effe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f002:	d807      	bhi.n	800f014 <_printf_i+0x28>
 800f004:	2f62      	cmp	r7, #98	@ 0x62
 800f006:	d80a      	bhi.n	800f01e <_printf_i+0x32>
 800f008:	2f00      	cmp	r7, #0
 800f00a:	f000 80d1 	beq.w	800f1b0 <_printf_i+0x1c4>
 800f00e:	2f58      	cmp	r7, #88	@ 0x58
 800f010:	f000 80b8 	beq.w	800f184 <_printf_i+0x198>
 800f014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f01c:	e03a      	b.n	800f094 <_printf_i+0xa8>
 800f01e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f022:	2b15      	cmp	r3, #21
 800f024:	d8f6      	bhi.n	800f014 <_printf_i+0x28>
 800f026:	a101      	add	r1, pc, #4	@ (adr r1, 800f02c <_printf_i+0x40>)
 800f028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f02c:	0800f085 	.word	0x0800f085
 800f030:	0800f099 	.word	0x0800f099
 800f034:	0800f015 	.word	0x0800f015
 800f038:	0800f015 	.word	0x0800f015
 800f03c:	0800f015 	.word	0x0800f015
 800f040:	0800f015 	.word	0x0800f015
 800f044:	0800f099 	.word	0x0800f099
 800f048:	0800f015 	.word	0x0800f015
 800f04c:	0800f015 	.word	0x0800f015
 800f050:	0800f015 	.word	0x0800f015
 800f054:	0800f015 	.word	0x0800f015
 800f058:	0800f197 	.word	0x0800f197
 800f05c:	0800f0c3 	.word	0x0800f0c3
 800f060:	0800f151 	.word	0x0800f151
 800f064:	0800f015 	.word	0x0800f015
 800f068:	0800f015 	.word	0x0800f015
 800f06c:	0800f1b9 	.word	0x0800f1b9
 800f070:	0800f015 	.word	0x0800f015
 800f074:	0800f0c3 	.word	0x0800f0c3
 800f078:	0800f015 	.word	0x0800f015
 800f07c:	0800f015 	.word	0x0800f015
 800f080:	0800f159 	.word	0x0800f159
 800f084:	6833      	ldr	r3, [r6, #0]
 800f086:	1d1a      	adds	r2, r3, #4
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	6032      	str	r2, [r6, #0]
 800f08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f094:	2301      	movs	r3, #1
 800f096:	e09c      	b.n	800f1d2 <_printf_i+0x1e6>
 800f098:	6833      	ldr	r3, [r6, #0]
 800f09a:	6820      	ldr	r0, [r4, #0]
 800f09c:	1d19      	adds	r1, r3, #4
 800f09e:	6031      	str	r1, [r6, #0]
 800f0a0:	0606      	lsls	r6, r0, #24
 800f0a2:	d501      	bpl.n	800f0a8 <_printf_i+0xbc>
 800f0a4:	681d      	ldr	r5, [r3, #0]
 800f0a6:	e003      	b.n	800f0b0 <_printf_i+0xc4>
 800f0a8:	0645      	lsls	r5, r0, #25
 800f0aa:	d5fb      	bpl.n	800f0a4 <_printf_i+0xb8>
 800f0ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f0b0:	2d00      	cmp	r5, #0
 800f0b2:	da03      	bge.n	800f0bc <_printf_i+0xd0>
 800f0b4:	232d      	movs	r3, #45	@ 0x2d
 800f0b6:	426d      	negs	r5, r5
 800f0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0bc:	4858      	ldr	r0, [pc, #352]	@ (800f220 <_printf_i+0x234>)
 800f0be:	230a      	movs	r3, #10
 800f0c0:	e011      	b.n	800f0e6 <_printf_i+0xfa>
 800f0c2:	6821      	ldr	r1, [r4, #0]
 800f0c4:	6833      	ldr	r3, [r6, #0]
 800f0c6:	0608      	lsls	r0, r1, #24
 800f0c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f0cc:	d402      	bmi.n	800f0d4 <_printf_i+0xe8>
 800f0ce:	0649      	lsls	r1, r1, #25
 800f0d0:	bf48      	it	mi
 800f0d2:	b2ad      	uxthmi	r5, r5
 800f0d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f0d6:	4852      	ldr	r0, [pc, #328]	@ (800f220 <_printf_i+0x234>)
 800f0d8:	6033      	str	r3, [r6, #0]
 800f0da:	bf14      	ite	ne
 800f0dc:	230a      	movne	r3, #10
 800f0de:	2308      	moveq	r3, #8
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f0e6:	6866      	ldr	r6, [r4, #4]
 800f0e8:	60a6      	str	r6, [r4, #8]
 800f0ea:	2e00      	cmp	r6, #0
 800f0ec:	db05      	blt.n	800f0fa <_printf_i+0x10e>
 800f0ee:	6821      	ldr	r1, [r4, #0]
 800f0f0:	432e      	orrs	r6, r5
 800f0f2:	f021 0104 	bic.w	r1, r1, #4
 800f0f6:	6021      	str	r1, [r4, #0]
 800f0f8:	d04b      	beq.n	800f192 <_printf_i+0x1a6>
 800f0fa:	4616      	mov	r6, r2
 800f0fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800f100:	fb03 5711 	mls	r7, r3, r1, r5
 800f104:	5dc7      	ldrb	r7, [r0, r7]
 800f106:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f10a:	462f      	mov	r7, r5
 800f10c:	42bb      	cmp	r3, r7
 800f10e:	460d      	mov	r5, r1
 800f110:	d9f4      	bls.n	800f0fc <_printf_i+0x110>
 800f112:	2b08      	cmp	r3, #8
 800f114:	d10b      	bne.n	800f12e <_printf_i+0x142>
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	07df      	lsls	r7, r3, #31
 800f11a:	d508      	bpl.n	800f12e <_printf_i+0x142>
 800f11c:	6923      	ldr	r3, [r4, #16]
 800f11e:	6861      	ldr	r1, [r4, #4]
 800f120:	4299      	cmp	r1, r3
 800f122:	bfde      	ittt	le
 800f124:	2330      	movle	r3, #48	@ 0x30
 800f126:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f12a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f12e:	1b92      	subs	r2, r2, r6
 800f130:	6122      	str	r2, [r4, #16]
 800f132:	f8cd a000 	str.w	sl, [sp]
 800f136:	464b      	mov	r3, r9
 800f138:	aa03      	add	r2, sp, #12
 800f13a:	4621      	mov	r1, r4
 800f13c:	4640      	mov	r0, r8
 800f13e:	f7ff fee7 	bl	800ef10 <_printf_common>
 800f142:	3001      	adds	r0, #1
 800f144:	d14a      	bne.n	800f1dc <_printf_i+0x1f0>
 800f146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f14a:	b004      	add	sp, #16
 800f14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f150:	6823      	ldr	r3, [r4, #0]
 800f152:	f043 0320 	orr.w	r3, r3, #32
 800f156:	6023      	str	r3, [r4, #0]
 800f158:	4832      	ldr	r0, [pc, #200]	@ (800f224 <_printf_i+0x238>)
 800f15a:	2778      	movs	r7, #120	@ 0x78
 800f15c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	6831      	ldr	r1, [r6, #0]
 800f164:	061f      	lsls	r7, r3, #24
 800f166:	f851 5b04 	ldr.w	r5, [r1], #4
 800f16a:	d402      	bmi.n	800f172 <_printf_i+0x186>
 800f16c:	065f      	lsls	r7, r3, #25
 800f16e:	bf48      	it	mi
 800f170:	b2ad      	uxthmi	r5, r5
 800f172:	6031      	str	r1, [r6, #0]
 800f174:	07d9      	lsls	r1, r3, #31
 800f176:	bf44      	itt	mi
 800f178:	f043 0320 	orrmi.w	r3, r3, #32
 800f17c:	6023      	strmi	r3, [r4, #0]
 800f17e:	b11d      	cbz	r5, 800f188 <_printf_i+0x19c>
 800f180:	2310      	movs	r3, #16
 800f182:	e7ad      	b.n	800f0e0 <_printf_i+0xf4>
 800f184:	4826      	ldr	r0, [pc, #152]	@ (800f220 <_printf_i+0x234>)
 800f186:	e7e9      	b.n	800f15c <_printf_i+0x170>
 800f188:	6823      	ldr	r3, [r4, #0]
 800f18a:	f023 0320 	bic.w	r3, r3, #32
 800f18e:	6023      	str	r3, [r4, #0]
 800f190:	e7f6      	b.n	800f180 <_printf_i+0x194>
 800f192:	4616      	mov	r6, r2
 800f194:	e7bd      	b.n	800f112 <_printf_i+0x126>
 800f196:	6833      	ldr	r3, [r6, #0]
 800f198:	6825      	ldr	r5, [r4, #0]
 800f19a:	6961      	ldr	r1, [r4, #20]
 800f19c:	1d18      	adds	r0, r3, #4
 800f19e:	6030      	str	r0, [r6, #0]
 800f1a0:	062e      	lsls	r6, r5, #24
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	d501      	bpl.n	800f1aa <_printf_i+0x1be>
 800f1a6:	6019      	str	r1, [r3, #0]
 800f1a8:	e002      	b.n	800f1b0 <_printf_i+0x1c4>
 800f1aa:	0668      	lsls	r0, r5, #25
 800f1ac:	d5fb      	bpl.n	800f1a6 <_printf_i+0x1ba>
 800f1ae:	8019      	strh	r1, [r3, #0]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	6123      	str	r3, [r4, #16]
 800f1b4:	4616      	mov	r6, r2
 800f1b6:	e7bc      	b.n	800f132 <_printf_i+0x146>
 800f1b8:	6833      	ldr	r3, [r6, #0]
 800f1ba:	1d1a      	adds	r2, r3, #4
 800f1bc:	6032      	str	r2, [r6, #0]
 800f1be:	681e      	ldr	r6, [r3, #0]
 800f1c0:	6862      	ldr	r2, [r4, #4]
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	4630      	mov	r0, r6
 800f1c6:	f7f1 f813 	bl	80001f0 <memchr>
 800f1ca:	b108      	cbz	r0, 800f1d0 <_printf_i+0x1e4>
 800f1cc:	1b80      	subs	r0, r0, r6
 800f1ce:	6060      	str	r0, [r4, #4]
 800f1d0:	6863      	ldr	r3, [r4, #4]
 800f1d2:	6123      	str	r3, [r4, #16]
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1da:	e7aa      	b.n	800f132 <_printf_i+0x146>
 800f1dc:	6923      	ldr	r3, [r4, #16]
 800f1de:	4632      	mov	r2, r6
 800f1e0:	4649      	mov	r1, r9
 800f1e2:	4640      	mov	r0, r8
 800f1e4:	47d0      	blx	sl
 800f1e6:	3001      	adds	r0, #1
 800f1e8:	d0ad      	beq.n	800f146 <_printf_i+0x15a>
 800f1ea:	6823      	ldr	r3, [r4, #0]
 800f1ec:	079b      	lsls	r3, r3, #30
 800f1ee:	d413      	bmi.n	800f218 <_printf_i+0x22c>
 800f1f0:	68e0      	ldr	r0, [r4, #12]
 800f1f2:	9b03      	ldr	r3, [sp, #12]
 800f1f4:	4298      	cmp	r0, r3
 800f1f6:	bfb8      	it	lt
 800f1f8:	4618      	movlt	r0, r3
 800f1fa:	e7a6      	b.n	800f14a <_printf_i+0x15e>
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	4632      	mov	r2, r6
 800f200:	4649      	mov	r1, r9
 800f202:	4640      	mov	r0, r8
 800f204:	47d0      	blx	sl
 800f206:	3001      	adds	r0, #1
 800f208:	d09d      	beq.n	800f146 <_printf_i+0x15a>
 800f20a:	3501      	adds	r5, #1
 800f20c:	68e3      	ldr	r3, [r4, #12]
 800f20e:	9903      	ldr	r1, [sp, #12]
 800f210:	1a5b      	subs	r3, r3, r1
 800f212:	42ab      	cmp	r3, r5
 800f214:	dcf2      	bgt.n	800f1fc <_printf_i+0x210>
 800f216:	e7eb      	b.n	800f1f0 <_printf_i+0x204>
 800f218:	2500      	movs	r5, #0
 800f21a:	f104 0619 	add.w	r6, r4, #25
 800f21e:	e7f5      	b.n	800f20c <_printf_i+0x220>
 800f220:	08016f5e 	.word	0x08016f5e
 800f224:	08016f6f 	.word	0x08016f6f

0800f228 <memmove>:
 800f228:	4288      	cmp	r0, r1
 800f22a:	b510      	push	{r4, lr}
 800f22c:	eb01 0402 	add.w	r4, r1, r2
 800f230:	d902      	bls.n	800f238 <memmove+0x10>
 800f232:	4284      	cmp	r4, r0
 800f234:	4623      	mov	r3, r4
 800f236:	d807      	bhi.n	800f248 <memmove+0x20>
 800f238:	1e43      	subs	r3, r0, #1
 800f23a:	42a1      	cmp	r1, r4
 800f23c:	d008      	beq.n	800f250 <memmove+0x28>
 800f23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f246:	e7f8      	b.n	800f23a <memmove+0x12>
 800f248:	4402      	add	r2, r0
 800f24a:	4601      	mov	r1, r0
 800f24c:	428a      	cmp	r2, r1
 800f24e:	d100      	bne.n	800f252 <memmove+0x2a>
 800f250:	bd10      	pop	{r4, pc}
 800f252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f25a:	e7f7      	b.n	800f24c <memmove+0x24>

0800f25c <_realloc_r>:
 800f25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f260:	4607      	mov	r7, r0
 800f262:	4614      	mov	r4, r2
 800f264:	460d      	mov	r5, r1
 800f266:	b921      	cbnz	r1, 800f272 <_realloc_r+0x16>
 800f268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f26c:	4611      	mov	r1, r2
 800f26e:	f7ff bae7 	b.w	800e840 <_malloc_r>
 800f272:	b92a      	cbnz	r2, 800f280 <_realloc_r+0x24>
 800f274:	f7ff fcaa 	bl	800ebcc <_free_r>
 800f278:	4625      	mov	r5, r4
 800f27a:	4628      	mov	r0, r5
 800f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f280:	f000 f81a 	bl	800f2b8 <_malloc_usable_size_r>
 800f284:	4284      	cmp	r4, r0
 800f286:	4606      	mov	r6, r0
 800f288:	d802      	bhi.n	800f290 <_realloc_r+0x34>
 800f28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f28e:	d8f4      	bhi.n	800f27a <_realloc_r+0x1e>
 800f290:	4621      	mov	r1, r4
 800f292:	4638      	mov	r0, r7
 800f294:	f7ff fad4 	bl	800e840 <_malloc_r>
 800f298:	4680      	mov	r8, r0
 800f29a:	b908      	cbnz	r0, 800f2a0 <_realloc_r+0x44>
 800f29c:	4645      	mov	r5, r8
 800f29e:	e7ec      	b.n	800f27a <_realloc_r+0x1e>
 800f2a0:	42b4      	cmp	r4, r6
 800f2a2:	4622      	mov	r2, r4
 800f2a4:	4629      	mov	r1, r5
 800f2a6:	bf28      	it	cs
 800f2a8:	4632      	movcs	r2, r6
 800f2aa:	f7ff fc81 	bl	800ebb0 <memcpy>
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7ff fc8b 	bl	800ebcc <_free_r>
 800f2b6:	e7f1      	b.n	800f29c <_realloc_r+0x40>

0800f2b8 <_malloc_usable_size_r>:
 800f2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2bc:	1f18      	subs	r0, r3, #4
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	bfbc      	itt	lt
 800f2c2:	580b      	ldrlt	r3, [r1, r0]
 800f2c4:	18c0      	addlt	r0, r0, r3
 800f2c6:	4770      	bx	lr

0800f2c8 <_init>:
 800f2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ca:	bf00      	nop
 800f2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ce:	bc08      	pop	{r3}
 800f2d0:	469e      	mov	lr, r3
 800f2d2:	4770      	bx	lr

0800f2d4 <_fini>:
 800f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d6:	bf00      	nop
 800f2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2da:	bc08      	pop	{r3}
 800f2dc:	469e      	mov	lr, r3
 800f2de:	4770      	bx	lr
