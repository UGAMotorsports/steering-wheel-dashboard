
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010300  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007d90  080104a0  080104a0  000114a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018230  08018230  0001a18c  2**0
                  CONTENTS
  4 .ARM          00000008  08018230  08018230  00019230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018238  08018238  0001a18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018238  08018238  00019238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018244  08018244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08018248  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000180c  20000190  080183d4  0001a190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000199c  080183d4  0001a99c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e34  00000000  00000000  0001a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fd5  00000000  00000000  0003dff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  00043fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001681  00000000  00000000  00045d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020552  00000000  00000000  000473e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002775f  00000000  00000000  0006793b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abfb  00000000  00000000  0008f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129c95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008140  00000000  00000000  00129cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00131e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010488 	.word	0x08010488

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	08010488 	.word	0x08010488

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200b      	movs	r0, #11
 80005c4:	f004 fba3 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f004 fbbc 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	203b      	movs	r0, #59	@ 0x3b
 80005d4:	f004 fb9b 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005d8:	203b      	movs	r0, #59	@ 0x3b
 80005da:	f004 fbb4 	bl	8004d46 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SELECT+0x18>)
 80005f6:	f005 f8d7 	bl	80057a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f004 fa88 	bl	8004b10 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400

08000608 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <DESELECT+0x18>)
 8000612:	f005 f8c9 	bl	80057a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f004 fa7a 	bl	8004b10 <HAL_Delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <SPI_TxByte+0x30>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SPI_TxByte+0x30>)
 8000646:	f006 ffec 	bl	8007622 <HAL_SPI_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000234 	.word	0x20000234

08000658 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000664:	bf00      	nop
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <SPI_TxBuffer+0x30>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b02      	cmp	r3, #2
 8000672:	d1f8      	bne.n	8000666 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_TxBuffer+0x30>)
 800067c:	f006 ffd1 	bl	8007622 <HAL_SPI_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000234 	.word	0x20000234

0800068c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000696:	bf00      	nop
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <SPI_RxByte+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d1f8      	bne.n	8000698 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006a6:	1dba      	adds	r2, r7, #6
 80006a8:	1df9      	adds	r1, r7, #7
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <SPI_RxByte+0x34>)
 80006b2:	f007 fa13 	bl	8007adc <HAL_SPI_TransmitReceive>

	return data;
 80006b6:	79bb      	ldrb	r3, [r7, #6]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000234 	.word	0x20000234

080006c4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006cc:	f7ff ffde 	bl	800068c <SPI_RxByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <SD_ReadyWait+0x30>)
 80006e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ec:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006ee:	f7ff ffcd 	bl	800068c <SPI_RxByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2bff      	cmp	r3, #255	@ 0xff
 80006fa:	d003      	beq.n	8000704 <SD_ReadyWait+0x24>
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <SD_ReadyWait+0x30>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f4      	bne.n	80006ee <SD_ReadyWait+0xe>

	return res;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001ae 	.word	0x200001ae

08000714 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800071a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800071e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000720:	f7ff ff72 	bl	8000608 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e005      	b.n	8000736 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	f7ff ff7a 	bl	8000624 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b09      	cmp	r3, #9
 800073a:	ddf6      	ble.n	800072a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800073c:	f7ff ff56 	bl	80005ec <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000754:	2395      	movs	r3, #149	@ 0x95
 8000756:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000758:	463b      	mov	r3, r7
 800075a:	2106      	movs	r1, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff7b 	bl	8000658 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000762:	e002      	b.n	800076a <SD_PowerOn+0x56>
	{
		cnt--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3b01      	subs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800076a:	f7ff ff8f 	bl	800068c <SPI_RxByte>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d002      	beq.n	800077a <SD_PowerOn+0x66>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_PowerOn+0x50>
	}

	DESELECT();
 800077a:	f7ff ff45 	bl	8000608 <DESELECT>
	SPI_TxByte(0XFF);
 800077e:	20ff      	movs	r0, #255	@ 0xff
 8000780:	f7ff ff50 	bl	8000624 <SPI_TxByte>

	PowerFlag = 1;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SD_PowerOn+0x80>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200001b1 	.word	0x200001b1

08000798 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <SD_PowerOff+0x14>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200001b1 	.word	0x200001b1

080007b0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <SD_CheckPower+0x14>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	200001b1 	.word	0x200001b1

080007c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007d4:	22c8      	movs	r2, #200	@ 0xc8
 80007d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007d8:	f7ff ff58 	bl	800068c <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d103      	bne.n	80007ee <SD_RxDataBlock+0x26>
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f4      	bne.n	80007d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007f2:	d001      	beq.n	80007f8 <SD_RxDataBlock+0x30>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e00f      	b.n	8000818 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff60 	bl	80006c4 <SPI_RxBytePtr>
	} while(len--);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	603a      	str	r2, [r7, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f4      	bne.n	80007f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800080e:	f7ff ff3d 	bl	800068c <SPI_RxByte>
	SPI_RxByte();
 8000812:	f7ff ff3b 	bl	800068c <SPI_RxByte>

	return TRUE;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200001ac 	.word	0x200001ac

08000824 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000834:	f7ff ff54 	bl	80006e0 <SD_ReadyWait>
 8000838:	4603      	mov	r3, r0
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	d001      	beq.n	8000842 <SD_TxDataBlock+0x1e>
 800083e:	2300      	movs	r3, #0
 8000840:	e02f      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff feed 	bl	8000624 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2bfd      	cmp	r3, #253	@ 0xfd
 800084e:	d020      	beq.n	8000892 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff feff 	bl	8000658 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800085a:	f7ff ff17 	bl	800068c <SPI_RxByte>
		SPI_RxByte();
 800085e:	f7ff ff15 	bl	800068c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000862:	e00b      	b.n	800087c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000864:	f7ff ff12 	bl	800068c <SPI_RxByte>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b05      	cmp	r3, #5
 8000874:	d006      	beq.n	8000884 <SD_TxDataBlock+0x60>
			i++;
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	2b40      	cmp	r3, #64	@ 0x40
 8000880:	d9f0      	bls.n	8000864 <SD_TxDataBlock+0x40>
 8000882:	e000      	b.n	8000886 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000884:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000886:	bf00      	nop
 8000888:	f7ff ff00 	bl	800068c <SPI_RxByte>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fa      	beq.n	8000888 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2b05      	cmp	r3, #5
 800089a:	d101      	bne.n	80008a0 <SD_TxDataBlock+0x7c>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008b6:	f7ff ff13 	bl	80006e0 <SD_ReadyWait>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d001      	beq.n	80008c4 <SD_SendCmd+0x1a>
 80008c0:	23ff      	movs	r3, #255	@ 0xff
 80008c2:	e042      	b.n	800094a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff feac 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	0e1b      	lsrs	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fea6 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fea0 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe9a 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe95 	bl	8000624 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d102      	bne.n	8000906 <SD_SendCmd+0x5c>
 8000900:	2395      	movs	r3, #149	@ 0x95
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e007      	b.n	8000916 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b48      	cmp	r3, #72	@ 0x48
 800090a:	d102      	bne.n	8000912 <SD_SendCmd+0x68>
 800090c:	2387      	movs	r3, #135	@ 0x87
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e001      	b.n	8000916 <SD_SendCmd+0x6c>
	else crc = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe83 	bl	8000624 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b4c      	cmp	r3, #76	@ 0x4c
 8000922:	d101      	bne.n	8000928 <SD_SendCmd+0x7e>
 8000924:	f7ff feb2 	bl	800068c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800092c:	f7ff feae 	bl	800068c <SPI_RxByte>
 8000930:	4603      	mov	r3, r0
 8000932:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000934:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da05      	bge.n	8000948 <SD_SendCmd+0x9e>
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3b01      	subs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <SD_SendCmd+0x82>

	return res;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SD_disk_initialize+0x14>
 8000964:	2301      	movs	r3, #1
 8000966:	e0d1      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000968:	4b6a      	ldr	r3, [pc, #424]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SD_disk_initialize+0x2a>
 8000976:	4b67      	ldr	r3, [pc, #412]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	e0c6      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800097e:	f7ff fec9 	bl	8000714 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000982:	f7ff fe33 	bl	80005ec <SELECT>

	/* check disk type */
	type = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800098a:	2100      	movs	r1, #0
 800098c:	2040      	movs	r0, #64	@ 0x40
 800098e:	f7ff ff8c 	bl	80008aa <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	f040 80a1 	bne.w	8000adc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800099a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 800099c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009a2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009a6:	2048      	movs	r0, #72	@ 0x48
 80009a8:	f7ff ff7f 	bl	80008aa <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d155      	bne.n	8000a5e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e00c      	b.n	80009d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009b8:	7bfc      	ldrb	r4, [r7, #15]
 80009ba:	f7ff fe67 	bl	800068c <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	f104 0310 	add.w	r3, r4, #16
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d9ef      	bls.n	80009b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d17e      	bne.n	8000adc <SD_disk_initialize+0x188>
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2baa      	cmp	r3, #170	@ 0xaa
 80009e2:	d17b      	bne.n	8000adc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	2100      	movs	r1, #0
 80009e6:	2077      	movs	r0, #119	@ 0x77
 80009e8:	f7ff ff5f 	bl	80008aa <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d807      	bhi.n	8000a02 <SD_disk_initialize+0xae>
 80009f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009f6:	2069      	movs	r0, #105	@ 0x69
 80009f8:	f7ff ff57 	bl	80008aa <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ec      	bne.n	80009e4 <SD_disk_initialize+0x90>
 8000a0a:	e000      	b.n	8000a0e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d062      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f7ff ff46 	bl	80008aa <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15b      	bne.n	8000adc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e00c      	b.n	8000a44 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	f7ff fe2e 	bl	800068c <SPI_RxByte>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	f104 0310 	add.w	r3, r4, #16
 8000a38:	443b      	add	r3, r7
 8000a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3301      	adds	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9ef      	bls.n	8000a2a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a4a:	7a3b      	ldrb	r3, [r7, #8]
 8000a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x104>
 8000a54:	230c      	movs	r3, #12
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x106>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
 8000a5c:	e03e      	b.n	8000adc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2077      	movs	r0, #119	@ 0x77
 8000a62:	f7ff ff22 	bl	80008aa <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d808      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2069      	movs	r0, #105	@ 0x69
 8000a70:	f7ff ff1b 	bl	80008aa <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d801      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x12c>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d10e      	bne.n	8000aa6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff0d 	bl	80008aa <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d80e      	bhi.n	8000ab4 <SD_disk_initialize+0x160>
 8000a96:	2100      	movs	r1, #0
 8000a98:	2069      	movs	r0, #105	@ 0x69
 8000a9a:	f7ff ff06 	bl	80008aa <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <SD_disk_initialize+0x160>
 8000aa4:	e00c      	b.n	8000ac0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f7ff fefe 	bl	80008aa <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e2      	bne.n	8000a82 <SD_disk_initialize+0x12e>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000abe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <SD_disk_initialize+0x184>
 8000ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000acc:	2050      	movs	r0, #80	@ 0x50
 8000ace:	f7ff feec 	bl	80008aa <SD_SendCmd>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <SD_disk_initialize+0x1c8>)
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ae2:	f7ff fd91 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000ae6:	f7ff fdd1 	bl	800068c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e001      	b.n	8000b06 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b02:	f7ff fe49 	bl	8000798 <SD_PowerOff>
	}

	return Stat;
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	200001ac 	.word	0x200001ac
 8000b1c:	200001b0 	.word	0x200001b0

08000b20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SD_disk_status+0x14>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e002      	b.n	8000b3a <SD_disk_status+0x1a>
	return Stat;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SD_disk_status+0x28>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_read+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_read+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e051      	b.n	8000c10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <SD_disk_read+0xcc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_read+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e048      	b.n	8000c10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SD_disk_read+0xd0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_read+0x44>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b90:	f7ff fd2c 	bl	80005ec <SELECT>

	if (count == 1)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d111      	bne.n	8000bbe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2051      	movs	r0, #81	@ 0x51
 8000b9e:	f7ff fe84 	bl	80008aa <SD_SendCmd>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d129      	bne.n	8000bfc <SD_disk_read+0xb0>
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fe0b 	bl	80007c8 <SD_RxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <SD_disk_read+0xb0>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e01e      	b.n	8000bfc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2052      	movs	r0, #82	@ 0x52
 8000bc2:	f7ff fe72 	bl	80008aa <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d117      	bne.n	8000bfc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fdf9 	bl	80007c8 <SD_RxDataBlock>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <SD_disk_read+0xa6>
				buff += 512;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ed      	bne.n	8000bcc <SD_disk_read+0x80>
 8000bf0:	e000      	b.n	8000bf4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bf2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	204c      	movs	r0, #76	@ 0x4c
 8000bf8:	f7ff fe57 	bl	80008aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bfc:	f7ff fd04 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000c00:	f7ff fd44 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	200001b0 	.word	0x200001b0

08000c20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <SD_disk_write+0x1c>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <SD_disk_write+0x20>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e06b      	b.n	8000d18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c40:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <SD_disk_write+0x100>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SD_disk_write+0x32>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e062      	b.n	8000d18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SD_disk_write+0x100>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SD_disk_write+0x44>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e059      	b.n	8000d18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <SD_disk_write+0x104>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <SD_disk_write+0x56>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c76:	f7ff fcb9 	bl	80005ec <SELECT>

	if (count == 1)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d110      	bne.n	8000ca2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2058      	movs	r0, #88	@ 0x58
 8000c84:	f7ff fe11 	bl	80008aa <SD_SendCmd>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13a      	bne.n	8000d04 <SD_disk_write+0xe4>
 8000c8e:	21fe      	movs	r1, #254	@ 0xfe
 8000c90:	68b8      	ldr	r0, [r7, #8]
 8000c92:	f7ff fdc7 	bl	8000824 <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d033      	beq.n	8000d04 <SD_disk_write+0xe4>
			count = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e030      	b.n	8000d04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <SD_disk_write+0x104>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2077      	movs	r0, #119	@ 0x77
 8000cb2:	f7ff fdfa 	bl	80008aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	2057      	movs	r0, #87	@ 0x57
 8000cba:	f7ff fdf6 	bl	80008aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2059      	movs	r0, #89	@ 0x59
 8000cc2:	f7ff fdf2 	bl	80008aa <SD_SendCmd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ccc:	21fc      	movs	r1, #252	@ 0xfc
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f7ff fda8 	bl	8000824 <SD_TxDataBlock>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <SD_disk_write+0xd0>
				buff += 512;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ce0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1ee      	bne.n	8000ccc <SD_disk_write+0xac>
 8000cee:	e000      	b.n	8000cf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cf2:	21fd      	movs	r1, #253	@ 0xfd
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fd95 	bl	8000824 <SD_TxDataBlock>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d04:	f7ff fc80 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000d08:	f7ff fcc0 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	200001b0 	.word	0x200001b0

08000d28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	@ 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	603a      	str	r2, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	460b      	mov	r3, r1
 8000d36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x1e>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e113      	b.n	8000f6e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d124      	bne.n	8000d9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d012      	beq.n	8000d80 <SD_disk_ioctl+0x58>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	dc1a      	bgt.n	8000d94 <SD_disk_ioctl+0x6c>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <SD_disk_ioctl+0x40>
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d006      	beq.n	8000d74 <SD_disk_ioctl+0x4c>
 8000d66:	e015      	b.n	8000d94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d68:	f7ff fd16 	bl	8000798 <SD_PowerOff>
			res = RES_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d72:	e0fa      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d74:	f7ff fcce 	bl	8000714 <SD_PowerOn>
			res = RES_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d7e:	e0f4      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	1c5c      	adds	r4, r3, #1
 8000d84:	f7ff fd14 	bl	80007b0 <SD_CheckPower>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d92:	e0ea      	b.n	8000f6a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d9a:	e0e6      	b.n	8000f6a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d9c:	4b76      	ldr	r3, [pc, #472]	@ (8000f78 <SD_disk_ioctl+0x250>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SD_disk_ioctl+0x86>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0df      	b.n	8000f6e <SD_disk_ioctl+0x246>

		SELECT();
 8000dae:	f7ff fc1d 	bl	80005ec <SELECT>

		switch (ctrl)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b0d      	cmp	r3, #13
 8000db6:	f200 80c9 	bhi.w	8000f4c <SD_disk_ioctl+0x224>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <SD_disk_ioctl+0x98>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000eb7 	.word	0x08000eb7
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000ea7 	.word	0x08000ea7
 8000dcc:	08000f4d 	.word	0x08000f4d
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f4d 	.word	0x08000f4d
 8000dd8:	08000f4d 	.word	0x08000f4d
 8000ddc:	08000f4d 	.word	0x08000f4d
 8000de0:	08000f4d 	.word	0x08000f4d
 8000de4:	08000f4d 	.word	0x08000f4d
 8000de8:	08000f4d 	.word	0x08000f4d
 8000dec:	08000ec9 	.word	0x08000ec9
 8000df0:	08000eed 	.word	0x08000eed
 8000df4:	08000f11 	.word	0x08000f11
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2049      	movs	r0, #73	@ 0x49
 8000dfc:	f7ff fd55 	bl	80008aa <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80a6 	bne.w	8000f54 <SD_disk_ioctl+0x22c>
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fcda 	bl	80007c8 <SD_RxDataBlock>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 809c 	beq.w	8000f54 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10d      	bne.n	8000e42 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e26:	7d7b      	ldrb	r3, [r7, #21]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	029a      	lsls	r2, r3, #10
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02d      	b.n	8000e9e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e42:	7c7b      	ldrb	r3, [r7, #17]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	09db      	lsrs	r3, r3, #7
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 0306 	and.w	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3302      	adds	r3, #2
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e6a:	7d3b      	ldrb	r3, [r7, #20]
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	7cbb      	ldrb	r3, [r7, #18]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e90:	8bfa      	ldrh	r2, [r7, #30]
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	3b09      	subs	r3, #9
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ea4:	e056      	b.n	8000f54 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb4:	e055      	b.n	8000f62 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000eb6:	f7ff fc13 	bl	80006e0 <SD_ReadyWait>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2bff      	cmp	r3, #255	@ 0xff
 8000ebe:	d14b      	bne.n	8000f58 <SD_disk_ioctl+0x230>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ec6:	e047      	b.n	8000f58 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	@ 0x49
 8000ecc:	f7ff fced 	bl	80008aa <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d142      	bne.n	8000f5c <SD_disk_ioctl+0x234>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc75 	bl	80007c8 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03b      	beq.n	8000f5c <SD_disk_ioctl+0x234>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eea:	e037      	b.n	8000f5c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eec:	2100      	movs	r1, #0
 8000eee:	204a      	movs	r0, #74	@ 0x4a
 8000ef0:	f7ff fcdb 	bl	80008aa <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d132      	bne.n	8000f60 <SD_disk_ioctl+0x238>
 8000efa:	2110      	movs	r1, #16
 8000efc:	6a38      	ldr	r0, [r7, #32]
 8000efe:	f7ff fc63 	bl	80007c8 <SD_RxDataBlock>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02b      	beq.n	8000f60 <SD_disk_ioctl+0x238>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f0e:	e027      	b.n	8000f60 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f10:	2100      	movs	r1, #0
 8000f12:	207a      	movs	r0, #122	@ 0x7a
 8000f14:	f7ff fcc9 	bl	80008aa <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f24:	e00b      	b.n	8000f3e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f26:	6a3c      	ldr	r4, [r7, #32]
 8000f28:	1c63      	adds	r3, r4, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	f7ff fbae 	bl	800068c <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9ef      	bls.n	8000f26 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f52:	e006      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f60:	bf00      	nop
		}

		DESELECT();
 8000f62:	f7ff fb51 	bl	8000608 <DESELECT>
		SPI_RxByte();
 8000f66:	f7ff fb91 	bl	800068c <SPI_RxByte>
	}

	return res;
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	372c      	adds	r7, #44	@ 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b5d      	ldr	r3, [pc, #372]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b56      	ldr	r3, [pc, #344]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a55      	ldr	r2, [pc, #340]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b53      	ldr	r3, [pc, #332]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b4f      	ldr	r3, [pc, #316]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b48      	ldr	r3, [pc, #288]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a47      	ldr	r2, [pc, #284]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b45      	ldr	r3, [pc, #276]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	4841      	ldr	r0, [pc, #260]	@ (8001110 <MX_GPIO_Init+0x194>)
 800100a:	f004 fbcd 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2110      	movs	r1, #16
 8001012:	4840      	ldr	r0, [pc, #256]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001014:	f004 fbc8 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001018:	2200      	movs	r2, #0
 800101a:	213b      	movs	r1, #59	@ 0x3b
 800101c:	483e      	ldr	r0, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800101e:	f004 fbc3 	bl	80057a8 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 8001022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4835      	ldr	r0, [pc, #212]	@ (8001110 <MX_GPIO_Init+0x194>)
 800103c:	f004 fa30 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 8001040:	2306      	movs	r3, #6
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4830      	ldr	r0, [pc, #192]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001054:	f004 fa24 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001058:	2310      	movs	r3, #16
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4829      	ldr	r0, [pc, #164]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001070:	f004 fa16 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001074:	233b      	movs	r3, #59	@ 0x3b
 8001076:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4823      	ldr	r0, [pc, #140]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800108c:	f004 fa08 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <MX_GPIO_Init+0x19c>)
 80010a8:	f004 f9fa 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010c4:	f004 f9ec 	bl	80054a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 80010c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010e0:	f004 f9de 	bl	80054a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2017      	movs	r0, #23
 80010ea:	f003 fe10 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ee:	2017      	movs	r0, #23
 80010f0:	f003 fe29 	bl	8004d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2028      	movs	r0, #40	@ 0x28
 80010fa:	f003 fe08 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fe:	2028      	movs	r0, #40	@ 0x28
 8001100:	f003 fe21 	bl	8004d46 <HAL_NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	@ 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400

0800111c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static struct can_frame mark;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button1INT_Pin) {
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800112c:	d103      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x1a>
		USB_Println("button 1 was pressed\n");
 800112e:	4816      	ldr	r0, [pc, #88]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001130:	f001 f94c 	bl	80023cc <USB_Println>
	} else if (GPIO_Pin == button4INT_Pin) {
		USB_Println("button 4 was pressed\n");
	} else {
		USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
	}
}
 8001134:	e023      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x62>
	} else if (GPIO_Pin == button2INT_Pin) {
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800113c:	d103      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x2a>
		USB_Println("button 2 was pressed\n");
 800113e:	4813      	ldr	r0, [pc, #76]	@ (800118c <HAL_GPIO_EXTI_Callback+0x70>)
 8001140:	f001 f944 	bl	80023cc <USB_Println>
}
 8001144:	e01b      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x62>
	} else if (GPIO_Pin == button3INT_Pin ) {
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114c:	d10a      	bne.n	8001164 <HAL_GPIO_EXTI_Callback+0x48>
		USB_Println("button 3 was pressed\n");
 800114e:	4810      	ldr	r0, [pc, #64]	@ (8001190 <HAL_GPIO_EXTI_Callback+0x74>)
 8001150:	f001 f93c 	bl	80023cc <USB_Println>
		mark.can_id = 601;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x78>)
 8001156:	f240 2259 	movw	r2, #601	@ 0x259
 800115a:	601a      	str	r2, [r3, #0]
		sendMessage(&mark);
 800115c:	480d      	ldr	r0, [pc, #52]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x78>)
 800115e:	f000 fb5b 	bl	8001818 <sendMessage>
}
 8001162:	e00c      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x62>
	} else if (GPIO_Pin == button4INT_Pin) {
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800116a:	d103      	bne.n	8001174 <HAL_GPIO_EXTI_Callback+0x58>
		USB_Println("button 4 was pressed\n");
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <HAL_GPIO_EXTI_Callback+0x7c>)
 800116e:	f001 f92d 	bl	80023cc <USB_Println>
}
 8001172:	e004      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x62>
		USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4619      	mov	r1, r3
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <HAL_GPIO_EXTI_Callback+0x80>)
 800117a:	f001 f927 	bl	80023cc <USB_Println>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	080104a0 	.word	0x080104a0
 800118c:	080104b8 	.word	0x080104b8
 8001190:	080104d0 	.word	0x080104d0
 8001194:	200001b8 	.word	0x200001b8
 8001198:	080104e8 	.word	0x080104e8
 800119c:	08010500 	.word	0x08010500

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	f5ad 6def 	sub.w	sp, sp, #1912	@ 0x778
 80011a6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f003 fc40 	bl	8004a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 fab0 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f7ff fee4 	bl	8000f7c <MX_GPIO_Init>
  MX_DMA_Init();
 80011b4:	f7ff f9e4 	bl	8000580 <MX_DMA_Init>
  MX_SPI1_Init();
 80011b8:	f000 fdb2 	bl	8001d20 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011bc:	f00d fe9e 	bl	800eefc <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011c0:	f000 fde6 	bl	8001d90 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011c4:	f000 fffe 	bl	80021c4 <MX_TIM4_Init>
  MX_FATFS_Init();
 80011c8:	f009 fcd6 	bl	800ab78 <MX_FATFS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80011cc:	2064      	movs	r0, #100	@ 0x64
 80011ce:	f003 fc9f 	bl	8004b10 <HAL_Delay>

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011d2:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80011d6:	2201      	movs	r2, #1
 80011d8:	49a6      	ldr	r1, [pc, #664]	@ (8001474 <main+0x2d4>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f00d fa4a 	bl	800e674 <f_mount>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 3763 	strb.w	r3, [r7, #1891]	@ 0x763
//	  USB_Println("There was an error: %d\n", fresult);
//  } else {
//	  USB_Println("the sdcard is mounted\n");
//  }

  initializeMCP2515();
 80011e6:	f000 fb05 	bl	80017f4 <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 3000, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 80011ea:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80011ee:	f5a3 63db 	sub.w	r3, r3, #1752	@ 0x6d8
 80011f2:	4aa1      	ldr	r2, [pc, #644]	@ (8001478 <main+0x2d8>)
 80011f4:	461c      	mov	r4, r3
 80011f6:	4615      	mov	r5, r2
 80011f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10500};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001208:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800120c:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 8001210:	2100      	movs	r1, #0
 8001212:	489a      	ldr	r0, [pc, #616]	@ (800147c <main+0x2dc>)
 8001214:	f000 fbc4 	bl	80019a0 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001218:	2300      	movs	r3, #0
 800121a:	9303      	str	r3, [sp, #12]
 800121c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2300      	movs	r3, #0
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2300      	movs	r3, #0
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	4892      	ldr	r0, [pc, #584]	@ (800147c <main+0x2dc>)
 8001234:	f000 fb38 	bl	80018a8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001238:	2301      	movs	r3, #1
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	2300      	movs	r3, #0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	488a      	ldr	r0, [pc, #552]	@ (800147c <main+0x2dc>)
 8001254:	f000 fb28 	bl	80018a8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001258:	230e      	movs	r3, #14
 800125a:	9303      	str	r3, [sp, #12]
 800125c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	2300      	movs	r3, #0
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2300      	movs	r3, #0
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	4882      	ldr	r0, [pc, #520]	@ (800147c <main+0x2dc>)
 8001274:	f000 fb18 	bl	80018a8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001278:	230f      	movs	r3, #15
 800127a:	9303      	str	r3, [sp, #12]
 800127c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	2300      	movs	r3, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	487a      	ldr	r0, [pc, #488]	@ (800147c <main+0x2dc>)
 8001294:	f000 fb08 	bl	80018a8 <setColor>

  resetScreen();
 8001298:	f001 fdae 	bl	8002df8 <resetScreen>
  initializeScreen();
 800129c:	f001 fdca 	bl	8002e34 <initializeScreen>
  //dosplashscene();
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80012a0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012a4:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 80012a8:	2100      	movs	r1, #0
 80012aa:	4874      	ldr	r0, [pc, #464]	@ (800147c <main+0x2dc>)
 80012ac:	f000 fcd0 	bl	8001c50 <startUp>
  HAL_Delay(200);
 80012b0:	20c8      	movs	r0, #200	@ 0xc8
 80012b2:	f003 fc2d 	bl	8004b10 <HAL_Delay>

  char result[20] = "null"; //rpm
 80012b6:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012ba:	f2a3 62ec 	subw	r2, r3, #1772	@ 0x6ec
 80012be:	4970      	ldr	r1, [pc, #448]	@ (8001480 <main+0x2e0>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	c903      	ldmia	r1, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
 80012ca:	1d53      	adds	r3, r2, #5
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	f8c3 200b 	str.w	r2, [r3, #11]
  char result2[20] = "null";//temp
 80012d8:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012dc:	f5a3 62e0 	sub.w	r2, r3, #1792	@ 0x700
 80012e0:	4967      	ldr	r1, [pc, #412]	@ (8001480 <main+0x2e0>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	c903      	ldmia	r1, {r0, r1}
 80012e6:	6018      	str	r0, [r3, #0]
 80012e8:	3304      	adds	r3, #4
 80012ea:	7019      	strb	r1, [r3, #0]
 80012ec:	1d53      	adds	r3, r2, #5
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	f8c3 200b 	str.w	r2, [r3, #11]
  char result3[20] = "8";//gear
 80012fa:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012fe:	f2a3 7314 	subw	r3, r3, #1812	@ 0x714
 8001302:	2238      	movs	r2, #56	@ 0x38
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	3304      	adds	r3, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 8001312:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001316:	f5a3 62e5 	sub.w	r2, r3, #1832	@ 0x728
 800131a:	4959      	ldr	r1, [pc, #356]	@ (8001480 <main+0x2e0>)
 800131c:	4613      	mov	r3, r2
 800131e:	c903      	ldmia	r1, {r0, r1}
 8001320:	6018      	str	r0, [r3, #0]
 8001322:	3304      	adds	r3, #4
 8001324:	7019      	strb	r1, [r3, #0]
 8001326:	1d53      	adds	r3, r2, #5
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	f8c3 200b 	str.w	r2, [r3, #11]
  char result5[20] = "null"; //speed
 8001334:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001338:	f2a3 723c 	subw	r2, r3, #1852	@ 0x73c
 800133c:	4950      	ldr	r1, [pc, #320]	@ (8001480 <main+0x2e0>)
 800133e:	4613      	mov	r3, r2
 8001340:	c903      	ldmia	r1, {r0, r1}
 8001342:	6018      	str	r0, [r3, #0]
 8001344:	3304      	adds	r3, #4
 8001346:	7019      	strb	r1, [r3, #0]
 8001348:	1d53      	adds	r3, r2, #5
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	f8c3 200b 	str.w	r2, [r3, #11]
  settempdata(result2);
 8001356:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fafc 	bl	8003958 <settempdata>
  setgeardata(result3);
 8001360:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fb23 	bl	80039b0 <setgeardata>
  setrpmdata(result);
 800136a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fac6 	bl	8003900 <setrpmdata>
  setbattdata(result4);
 8001374:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fb43 	bl	8003a04 <setbattdata>
  setspeeddata(result5);
 800137e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fb6a 	bl	8003a5c <setspeeddata>
  domainscreen();
 8001388:	f002 fb94 	bl	8003ab4 <domainscreen>

  struct can_frame frame;

  while (1)
  {
	  for (int i = 0; i < 10; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 8001392:	e1a8      	b.n	80016e6 <main+0x546>
		  int canresult = readMessage(&frame);
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fa4d 	bl	8001838 <readMessage>
 800139e:	f8c7 075c 	str.w	r0, [r7, #1884]	@ 0x75c
		  if (canresult == 0) {
 80013a2:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 8198 	bne.w	80016dc <main+0x53c>
			  if (frame.can_id == (1520 + 0)) {
 80013ac:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80013b0:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 80013ba:	d12b      	bne.n	8001414 <main+0x274>
				  uint16_t rpm = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 80013bc:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80013c0:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80013c4:	7b9b      	ldrb	r3, [r3, #14]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 80013ce:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 80013d2:	7bd2      	ldrb	r2, [r2, #15]
 80013d4:	4413      	add	r3, r2
 80013d6:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
				  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80013da:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 80013de:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013e2:	f207 41ec 	addw	r1, r7, #1260	@ 0x4ec
 80013e6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	460a      	mov	r2, r1
 80013f2:	2100      	movs	r1, #0
 80013f4:	4821      	ldr	r0, [pc, #132]	@ (800147c <main+0x2dc>)
 80013f6:	f000 fb63 	bl	8001ac0 <UpdateShiftLights>

				  itoa(rpm, (char*)(result), 10);
 80013fa:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 80013fe:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001402:	220a      	movs	r2, #10
 8001404:	4618      	mov	r0, r3
 8001406:	f00e fac6 	bl	800f996 <itoa>
				  setrpmdata(result);
 800140a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fa76 	bl	8003900 <setrpmdata>
			  }
			  if (frame.can_id == (1520 + 2)) {
 8001414:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001418:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f240 52f2 	movw	r2, #1522	@ 0x5f2
 8001422:	4293      	cmp	r3, r2
 8001424:	d153      	bne.n	80014ce <main+0x32e>
				  uint16_t temp = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 8001426:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800142a:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 800142e:	7b9b      	ldrb	r3, [r3, #14]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 8001438:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 800143c:	7bd2      	ldrb	r2, [r2, #15]
 800143e:	4413      	add	r3, r2
 8001440:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758
				  if (temp > 2150) {
 8001444:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 8001448:	f640 0266 	movw	r2, #2150	@ 0x866
 800144c:	4293      	cmp	r3, r2
 800144e:	d919      	bls.n	8001484 <main+0x2e4>
					setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 8001450:	230f      	movs	r3, #15
 8001452:	9303      	str	r3, [sp, #12]
 8001454:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	23ff      	movs	r3, #255	@ 0xff
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	4804      	ldr	r0, [pc, #16]	@ (800147c <main+0x2dc>)
 800146c:	f000 fa1c 	bl	80018a8 <setColor>
 8001470:	e018      	b.n	80014a4 <main+0x304>
 8001472:	bf00      	nop
 8001474:	08010520 	.word	0x08010520
 8001478:	08010534 	.word	0x08010534
 800147c:	200002f4 	.word	0x200002f4
 8001480:	08010564 	.word	0x08010564
				  } else {
					setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001484:	230f      	movs	r3, #15
 8001486:	9303      	str	r3, [sp, #12]
 8001488:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	2300      	movs	r3, #0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2300      	movs	r3, #0
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	4896      	ldr	r0, [pc, #600]	@ (80016f8 <main+0x558>)
 80014a0:	f000 fa02 	bl	80018a8 <setColor>
				  }
				  temp /= 10;
 80014a4:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 80014a8:	4a94      	ldr	r2, [pc, #592]	@ (80016fc <main+0x55c>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	08db      	lsrs	r3, r3, #3
 80014b0:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758
				  itoa(temp, result2, 10);
 80014b4:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 80014b8:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80014bc:	220a      	movs	r2, #10
 80014be:	4618      	mov	r0, r3
 80014c0:	f00e fa69 	bl	800f996 <itoa>
				  settempdata(result2);
 80014c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fa45 	bl	8003958 <settempdata>
			  }
			  if (frame.can_id == 1520 + 33) {
 80014ce:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80014d2:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f240 6211 	movw	r2, #1553	@ 0x611
 80014dc:	4293      	cmp	r3, r2
 80014de:	d117      	bne.n	8001510 <main+0x370>
				  uint8_t gear = ((uint8_t)frame.data[6]);
 80014e0:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80014e4:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80014e8:	7b9b      	ldrb	r3, [r3, #14]
 80014ea:	f887 3757 	strb.w	r3, [r7, #1879]	@ 0x757
				  if (gear != 0) {
 80014ee:	f897 3757 	ldrb.w	r3, [r7, #1879]	@ 0x757
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00c      	beq.n	8001510 <main+0x370>
					  //USB_Println("the gear value is %d\n", gear);
					  itoa(gear, result3, 10);
 80014f6:	f897 3757 	ldrb.w	r3, [r7, #1879]	@ 0x757
 80014fa:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80014fe:	220a      	movs	r2, #10
 8001500:	4618      	mov	r0, r3
 8001502:	f00e fa48 	bl	800f996 <itoa>
					  setgeardata(result3);
 8001506:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fa50 	bl	80039b0 <setgeardata>
				  }
			  }
			  if (frame.can_id == (1520 + 3)) {
 8001510:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001514:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f240 52f3 	movw	r2, #1523	@ 0x5f3
 800151e:	4293      	cmp	r3, r2
 8001520:	d155      	bne.n	80015ce <main+0x42e>
				  uint8_t battvalue = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 8001522:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001526:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 800152a:	7adb      	ldrb	r3, [r3, #11]
 800152c:	f887 3751 	strb.w	r3, [r7, #1873]	@ 0x751
				  uint8_t batIntPart = battvalue / 10;
 8001530:	f897 3751 	ldrb.w	r3, [r7, #1873]	@ 0x751
 8001534:	4a71      	ldr	r2, [pc, #452]	@ (80016fc <main+0x55c>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	f887 3750 	strb.w	r3, [r7, #1872]	@ 0x750
				  uint8_t batDecimalPart = battvalue % 10;
 8001540:	f897 2751 	ldrb.w	r2, [r7, #1873]	@ 0x751
 8001544:	4b6d      	ldr	r3, [pc, #436]	@ (80016fc <main+0x55c>)
 8001546:	fba3 1302 	umull	r1, r3, r3, r2
 800154a:	08d9      	lsrs	r1, r3, #3
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
				  char batint[10];
				  char batdec[10];
				  itoa(batIntPart, batint, 10);
 800155a:	f897 3750 	ldrb.w	r3, [r7, #1872]	@ 0x750
 800155e:	f107 010c 	add.w	r1, r7, #12
 8001562:	220a      	movs	r2, #10
 8001564:	4618      	mov	r0, r3
 8001566:	f00e fa16 	bl	800f996 <itoa>
				  itoa(batDecimalPart, batdec, 10);
 800156a:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 800156e:	4639      	mov	r1, r7
 8001570:	220a      	movs	r2, #10
 8001572:	4618      	mov	r0, r3
 8001574:	f00e fa0f 	bl	800f996 <itoa>
				  strncpy(result4, "", 20);
 8001578:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800157c:	2214      	movs	r2, #20
 800157e:	4960      	ldr	r1, [pc, #384]	@ (8001700 <main+0x560>)
 8001580:	4618      	mov	r0, r3
 8001582:	f00e fb60 	bl	800fc46 <strncpy>
				  strncat(result4, batint, 5);
 8001586:	f107 010c 	add.w	r1, r7, #12
 800158a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800158e:	2205      	movs	r2, #5
 8001590:	4618      	mov	r0, r3
 8001592:	f00e fb45 	bl	800fc20 <strncat>
				  strncat(result4, ".", 5);
 8001596:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fe20 	bl	80001e0 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a8:	4413      	add	r3, r2
 80015aa:	4956      	ldr	r1, [pc, #344]	@ (8001704 <main+0x564>)
 80015ac:	461a      	mov	r2, r3
 80015ae:	460b      	mov	r3, r1
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	8013      	strh	r3, [r2, #0]
				  strncat(result4, batdec, 1);
 80015b4:	4639      	mov	r1, r7
 80015b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ba:	2201      	movs	r2, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f00e fb2f 	bl	800fc20 <strncat>
				  setbattdata(result4);
 80015c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fa1c 	bl	8003a04 <setbattdata>
 80015cc:	e086      	b.n	80016dc <main+0x53c>
			  } else if (frame.can_id == 504) {
 80015ce:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015d2:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80015dc:	d14f      	bne.n	800167e <main+0x4de>
				  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 80015de:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015e2:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015e6:	7b9b      	ldrb	r3, [r3, #14]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015f0:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015f4:	7bdb      	ldrb	r3, [r3, #15]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  if (neutrallight < 1024) {
 8001600:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 8001604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001608:	d21c      	bcs.n	8001644 <main+0x4a4>
					  setColor(&htim4, TIM_CHANNEL_1, 128, 255, 0, ledcolors, ledbytes, 0);
 800160a:	2300      	movs	r3, #0
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	23ff      	movs	r3, #255	@ 0xff
 8001620:	2280      	movs	r2, #128	@ 0x80
 8001622:	2100      	movs	r1, #0
 8001624:	4834      	ldr	r0, [pc, #208]	@ (80016f8 <main+0x558>)
 8001626:	f000 f93f 	bl	80018a8 <setColor>
					  strncpy(result3, "7", 10);
 800162a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800162e:	220a      	movs	r2, #10
 8001630:	4935      	ldr	r1, [pc, #212]	@ (8001708 <main+0x568>)
 8001632:	4618      	mov	r0, r3
 8001634:	f00e fb07 	bl	800fc46 <strncpy>
					  setgeardata(result3);
 8001638:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800163c:	4618      	mov	r0, r3
 800163e:	f002 f9b7 	bl	80039b0 <setgeardata>
 8001642:	e04b      	b.n	80016dc <main+0x53c>
				  } else {
					  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001644:	2300      	movs	r3, #0
 8001646:	9303      	str	r3, [sp, #12]
 8001648:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2300      	movs	r3, #0
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	4826      	ldr	r0, [pc, #152]	@ (80016f8 <main+0x558>)
 8001660:	f000 f922 	bl	80018a8 <setColor>
					  strncpy(result3, "8", 10);
 8001664:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001668:	220a      	movs	r2, #10
 800166a:	4928      	ldr	r1, [pc, #160]	@ (800170c <main+0x56c>)
 800166c:	4618      	mov	r0, r3
 800166e:	f00e faea 	bl	800fc46 <strncpy>
					  setgeardata(result3);
 8001672:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001676:	4618      	mov	r0, r3
 8001678:	f002 f99a 	bl	80039b0 <setgeardata>
 800167c:	e02e      	b.n	80016dc <main+0x53c>
				  }
				  //USB_Println("the neutral light value is %d\n", neutrallight);
			  } else if (frame.can_id == 1520 + 42) {
 800167e:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001682:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f240 621a 	movw	r2, #1562	@ 0x61a
 800168c:	4293      	cmp	r3, r2
 800168e:	d125      	bne.n	80016dc <main+0x53c>
				  uint16_t speed = (uint16_t)((frame.data[0] << 8) | (frame.data[1]));
 8001690:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001694:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001698:	7a1b      	ldrb	r3, [r3, #8]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21a      	sxth	r2, r3
 800169e:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80016a2:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80016a6:	7a5b      	ldrb	r3, [r3, #9]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  speed /= 10;
 80016b2:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 80016b6:	4a11      	ldr	r2, [pc, #68]	@ (80016fc <main+0x55c>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  itoa(speed, (char*) result5, 10);
 80016c2:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 80016c6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80016ca:	220a      	movs	r2, #10
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00e f962 	bl	800f996 <itoa>
				  setspeeddata(result5);
 80016d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 f9c0 	bl	8003a5c <setspeeddata>
	  for (int i = 0; i < 10; i++) {
 80016dc:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 80016e0:	3301      	adds	r3, #1
 80016e2:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 80016e6:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 80016ea:	2b09      	cmp	r3, #9
 80016ec:	f77f ae52 	ble.w	8001394 <main+0x1f4>
			  }
		  }
	  }

	  domainscreen();
 80016f0:	f002 f9e0 	bl	8003ab4 <domainscreen>
	  for (int i = 0; i < 10; i++) {
 80016f4:	e64a      	b.n	800138c <main+0x1ec>
 80016f6:	bf00      	nop
 80016f8:	200002f4 	.word	0x200002f4
 80016fc:	cccccccd 	.word	0xcccccccd
 8001700:	08010524 	.word	0x08010524
 8001704:	08010528 	.word	0x08010528
 8001708:	0801052c 	.word	0x0801052c
 800170c:	08010530 	.word	0x08010530

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b094      	sub	sp, #80	@ 0x50
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	2230      	movs	r2, #48	@ 0x30
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f00e fa76 	bl	800fc10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <SystemClock_Config+0xd0>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	4a28      	ldr	r2, [pc, #160]	@ (80017e0 <SystemClock_Config+0xd0>)
 800173e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001742:	6413      	str	r3, [r2, #64]	@ 0x40
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <SystemClock_Config+0xd0>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <SystemClock_Config+0xd4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800175c:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <SystemClock_Config+0xd4>)
 800175e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <SystemClock_Config+0xd4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001770:	2301      	movs	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001774:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001784:	2319      	movs	r3, #25
 8001786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001788:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800178c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800178e:	2304      	movs	r3, #4
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001792:	2307      	movs	r3, #7
 8001794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	4618      	mov	r0, r3
 800179c:	f005 fa88 	bl	8006cb0 <HAL_RCC_OscConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017a6:	f000 f81f 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017aa:	230f      	movs	r3, #15
 80017ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ae:	2302      	movs	r3, #2
 80017b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 fcea 	bl	80071a0 <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017d2:	f000 f809 	bl	80017e8 <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3750      	adds	r7, #80	@ 0x50
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <Error_Handler+0x8>

080017f4 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	myMCP.reset();
 80017f8:	4806      	ldr	r0, [pc, #24]	@ (8001814 <initializeMCP2515+0x20>)
 80017fa:	f002 fb11 	bl	8003e20 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80017fe:	2202      	movs	r2, #2
 8001800:	210e      	movs	r1, #14
 8001802:	4804      	ldr	r0, [pc, #16]	@ (8001814 <initializeMCP2515+0x20>)
 8001804:	f002 fcde 	bl	80041c4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <initializeMCP2515+0x20>)
 800180a:	f002 fc8f 	bl	800412c <_ZN7MCP251513setNormalModeEv>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001c8 	.word	0x200001c8

08001818 <sendMessage>:

int sendMessage(struct can_frame *frame) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	return myMCP.sendMessage(frame);
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4804      	ldr	r0, [pc, #16]	@ (8001834 <sendMessage+0x1c>)
 8001824:	f002 fff4 	bl	8004810 <_ZN7MCP251511sendMessageEPK9can_frame>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200001c8 	.word	0x200001c8

08001838 <readMessage>:

int readMessage(struct can_frame *frame) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4804      	ldr	r0, [pc, #16]	@ (8001854 <readMessage+0x1c>)
 8001844:	f003 f89c 	bl	8004980 <_ZN7MCP251511readMessageEP9can_frame>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200001c8 	.word	0x200001c8

08001858 <_Z41__static_initialization_and_destruction_0ii>:
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af02      	add	r7, sp, #8
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800186e:	4293      	cmp	r3, r2
 8001870:	d107      	bne.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 8001872:	2310      	movs	r3, #16
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001878:	220a      	movs	r2, #10
 800187a:	4905      	ldr	r1, [pc, #20]	@ (8001890 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800187e:	f002 fa6f 	bl	8003d60 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40020000 	.word	0x40020000
 8001890:	20000234 	.word	0x20000234
 8001894:	200001c8 	.word	0x200001c8

08001898 <_GLOBAL__sub_I_myMCP>:
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
 800189c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff ffd9 	bl	8001858 <_Z41__static_initialization_and_destruction_0ii>
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	460b      	mov	r3, r1
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	4613      	mov	r3, r2
 80018bc:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 80018be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018cc:	4413      	add	r3, r2
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	3301      	adds	r3, #1
 80018d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d8:	4413      	add	r3, r2
 80018da:	79ba      	ldrb	r2, [r7, #6]
 80018dc:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	3302      	adds	r3, #2
 80018e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e4:	4413      	add	r3, r2
 80018e6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018ea:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	e02a      	b.n	8001948 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	e021      	b.n	800193c <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800190c:	2b00      	cmp	r3, #0
 800190e:	d009      	beq.n	8001924 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	00da      	lsls	r2, r3, #3
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800191c:	4413      	add	r3, r2
 800191e:	2246      	movs	r2, #70	@ 0x46
 8001920:	801a      	strh	r2, [r3, #0]
 8001922:	e008      	b.n	8001936 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	00da      	lsls	r2, r3, #3
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	4413      	add	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001930:	4413      	add	r3, r2
 8001932:	2223      	movs	r2, #35	@ 0x23
 8001934:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	3301      	adds	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b07      	cmp	r3, #7
 8001940:	ddda      	ble.n	80018f8 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3301      	adds	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	3302      	adds	r3, #2
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	429a      	cmp	r2, r3
 8001950:	ddcf      	ble.n	80018f2 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001952:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e008      	b.n	800196c <setColor+0xc4>
    	ledbytes[i] = 0;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001960:	4413      	add	r3, r2
 8001962:	2200      	movs	r2, #0
 8001964:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f240 2215 	movw	r2, #533	@ 0x215
 8001972:	4293      	cmp	r3, r2
 8001974:	ddf1      	ble.n	800195a <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001976:	f240 2316 	movw	r3, #534	@ 0x216
 800197a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f006 fd88 	bl	8008494 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8001984:	bf00      	nop
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <setColor+0xf4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0fb      	beq.n	8001986 <setColor+0xde>
    datasentflag = 0;
 800198e:	4b03      	ldr	r3, [pc, #12]	@ (800199c <setColor+0xf4>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200001d8 	.word	0x200001d8

080019a0 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e013      	b.n	80019dc <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3301      	adds	r3, #1
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3302      	adds	r3, #2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	22ff      	movs	r2, #255	@ 0xff
 80019d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3303      	adds	r3, #3
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b2f      	cmp	r3, #47	@ 0x2f
 80019e0:	dde8      	ble.n	80019b4 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	e02a      	b.n	8001a3e <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e021      	b.n	8001a32 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	00da      	lsls	r2, r3, #3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	2246      	movs	r2, #70	@ 0x46
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	e008      	b.n	8001a2c <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	00da      	lsls	r2, r3, #3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	4413      	add	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	2223      	movs	r2, #35	@ 0x23
 8001a2a:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b07      	cmp	r3, #7
 8001a36:	ddda      	ble.n	80019ee <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a42:	ddd1      	ble.n	80019e8 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a44:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e008      	b.n	8001a5e <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	2200      	movs	r2, #0
 8001a56:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f240 2215 	movw	r2, #533	@ 0x215
 8001a64:	4293      	cmp	r3, r2
 8001a66:	ddf1      	ble.n	8001a4c <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001a68:	f240 2316 	movw	r3, #534	@ 0x216
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f006 fd0f 	bl	8008494 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8001a76:	bf00      	nop
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <shiftLightsInit+0xf4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0fb      	beq.n	8001a78 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001a80:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <shiftLightsInit+0xf4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001d8 	.word	0x200001d8

08001a98 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001aa4:	f006 fea6 	bl	80087f4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002f4 	.word	0x200002f4
 8001abc:	200001d8 	.word	0x200001d8

08001ac0 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af04      	add	r7, sp, #16
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	dd06      	ble.n	8001ae6 <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f8b6 	bl	8001c50 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001ae4:	e02a      	b.n	8001b3c <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e024      	b.n	8001b36 <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001af2:	3b02      	subs	r3, #2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af8:	4413      	add	r3, r2
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a3a      	ldr	r2, [r7, #32]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	db08      	blt.n	8001b14 <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f819 	bl	8001b44 <lightOn>
 8001b12:	e00d      	b.n	8001b30 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	9303      	str	r3, [sp, #12]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	2300      	movs	r3, #0
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	2200      	movs	r2, #0
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff febc 	bl	80018a8 <setColor>
	for (int i = 2; i < 14; i++) {
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b0d      	cmp	r3, #13
 8001b3a:	ddd7      	ble.n	8001aec <UpdateShiftLights+0x2c>
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b0d      	cmp	r3, #13
 8001b56:	d140      	bne.n	8001bda <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff ff1e 	bl	80019a0 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001b64:	2300      	movs	r3, #0
 8001b66:	9303      	str	r3, [sp, #12]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2300      	movs	r3, #0
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4834      	ldr	r0, [pc, #208]	@ (8001c4c <lightOn+0x108>)
 8001b7c:	f7ff fe94 	bl	80018a8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001b80:	2301      	movs	r3, #1
 8001b82:	9303      	str	r3, [sp, #12]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	482d      	ldr	r0, [pc, #180]	@ (8001c4c <lightOn+0x108>)
 8001b98:	f7ff fe86 	bl	80018a8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001b9c:	230e      	movs	r3, #14
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2300      	movs	r3, #0
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4826      	ldr	r0, [pc, #152]	@ (8001c4c <lightOn+0x108>)
 8001bb4:	f7ff fe78 	bl	80018a8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001bb8:	230f      	movs	r3, #15
 8001bba:	9303      	str	r3, [sp, #12]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	9302      	str	r3, [sp, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	481f      	ldr	r0, [pc, #124]	@ (8001c4c <lightOn+0x108>)
 8001bd0:	f7ff fe6a 	bl	80018a8 <setColor>
		HAL_Delay(5);
 8001bd4:	2005      	movs	r0, #5
 8001bd6:	f002 ff9b 	bl	8004b10 <HAL_Delay>
	}
	if (index < 6) {
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	dc0e      	bgt.n	8001bfe <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2300      	movs	r3, #0
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	22ff      	movs	r2, #255	@ 0xff
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff fe56 	bl	80018a8 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001bfc:	e022      	b.n	8001c44 <lightOn+0x100>
	} else if (index < 10) {
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	dc0e      	bgt.n	8001c22 <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	9303      	str	r3, [sp, #12]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2300      	movs	r3, #0
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	23ff      	movs	r3, #255	@ 0xff
 8001c16:	2200      	movs	r2, #0
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fe44 	bl	80018a8 <setColor>
}
 8001c20:	e010      	b.n	8001c44 <lightOn+0x100>
	} else if (index < 14){
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b0d      	cmp	r3, #13
 8001c26:	dc0d      	bgt.n	8001c44 <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	23ff      	movs	r3, #255	@ 0xff
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f7ff fe32 	bl	80018a8 <setColor>
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200002f4 	.word	0x200002f4

08001c50 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001c5e:	2307      	movs	r3, #7
 8001c60:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e026      	b.n	8001cb6 <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	9303      	str	r3, [sp, #12]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	23ff      	movs	r3, #255	@ 0xff
 8001c7e:	2200      	movs	r2, #0
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff fe10 	bl	80018a8 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3301      	adds	r3, #1
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	23ff      	movs	r3, #255	@ 0xff
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff fdff 	bl	80018a8 <setColor>
		HAL_Delay(20);
 8001caa:	2014      	movs	r0, #20
 8001cac:	f002 ff30 	bl	8004b10 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	ddd5      	ble.n	8001c68 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e026      	b.n	8001d10 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	9303      	str	r3, [sp, #12]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2200      	movs	r2, #0
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff fde3 	bl	80018a8 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3301      	adds	r3, #1
 8001cea:	9303      	str	r3, [sp, #12]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff fdd2 	bl	80018a8 <setColor>
		HAL_Delay(20);
 8001d04:	2014      	movs	r0, #20
 8001d06:	f002 ff03 	bl	8004b10 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	ddd5      	ble.n	8001cc2 <startUp+0x72>
	}
}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d24:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d26:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <MX_SPI1_Init+0x6c>)
 8001d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d6e:	220a      	movs	r2, #10
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <MX_SPI1_Init+0x68>)
 8001d74:	f005 fbcc 	bl	8007510 <HAL_SPI_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d7e:	f7ff fd33 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200001dc 	.word	0x200001dc
 8001d8c:	40013000 	.word	0x40013000

08001d90 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d94:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001d96:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <MX_SPI2_Init+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001d9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001da0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001da2:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001ddc:	220a      	movs	r2, #10
 8001dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	@ (8001df4 <MX_SPI2_Init+0x64>)
 8001de2:	f005 fb95 	bl	8007510 <HAL_SPI_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dec:	f7ff fcfc 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000234 	.word	0x20000234
 8001df8:	40003800 	.word	0x40003800

08001dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	@ 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a4a      	ldr	r2, [pc, #296]	@ (8001f44 <HAL_SPI_MspInit+0x148>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d15c      	bne.n	8001ed8 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	4a48      	ldr	r2, [pc, #288]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001e28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	4b42      	ldr	r3, [pc, #264]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a41      	ldr	r2, [pc, #260]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e56:	23a0      	movs	r3, #160	@ 0xa0
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e66:	2305      	movs	r3, #5
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4836      	ldr	r0, [pc, #216]	@ (8001f4c <HAL_SPI_MspInit+0x150>)
 8001e72:	f003 fb15 	bl	80054a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e76:	4b36      	ldr	r3, [pc, #216]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e78:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <HAL_SPI_MspInit+0x158>)
 8001e7a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e7c:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e7e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e82:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e84:	4b32      	ldr	r3, [pc, #200]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e8a:	4b31      	ldr	r3, [pc, #196]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e96:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001e9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e9e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001ea2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ea6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ea8:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eae:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eb4:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001eba:	4825      	ldr	r0, [pc, #148]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001ebc:	f002 ff5e 	bl	8004d7c <HAL_DMA_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001ec6:	f7ff fc8f 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001ece:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_SPI_MspInit+0x154>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ed6:	e031      	b.n	8001f3c <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f58 <HAL_SPI_MspInit+0x15c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d12c      	bne.n	8001f3c <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b18      	ldr	r3, [pc, #96]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4a17      	ldr	r2, [pc, #92]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <HAL_SPI_MspInit+0x14c>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001f1a:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f2c:	2305      	movs	r3, #5
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	4809      	ldr	r0, [pc, #36]	@ (8001f5c <HAL_SPI_MspInit+0x160>)
 8001f38:	f003 fab2 	bl	80054a0 <HAL_GPIO_Init>
}
 8001f3c:	bf00      	nop
 8001f3e:	3730      	adds	r7, #48	@ 0x30
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40013000 	.word	0x40013000
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	2000028c 	.word	0x2000028c
 8001f54:	40026458 	.word	0x40026458
 8001f58:	40003800 	.word	0x40003800
 8001f5c:	40020400 	.word	0x40020400

08001f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a08      	ldr	r2, [pc, #32]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <SDTimer_Handler+0x40>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <SDTimer_Handler+0x1c>
    Timer1--;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <SDTimer_Handler+0x40>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <SDTimer_Handler+0x40>)
 8001fca:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <SDTimer_Handler+0x44>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <SDTimer_Handler+0x34>
    Timer2--;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <SDTimer_Handler+0x44>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <SDTimer_Handler+0x44>)
 8001fe2:	801a      	strh	r2, [r3, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200001ac 	.word	0x200001ac
 8001ff4:	200001ae 	.word	0x200001ae

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <NMI_Handler+0x4>

08002000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <MemManage_Handler+0x4>

08002010 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <UsageFault_Handler+0x4>

08002020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002050:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <SysTick_Handler+0x30>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	3301      	adds	r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <SysTick_Handler+0x30>)
 800205c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <SysTick_Handler+0x30>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b09      	cmp	r3, #9
 8002066:	d904      	bls.n	8002072 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002068:	4b04      	ldr	r3, [pc, #16]	@ (800207c <SysTick_Handler+0x30>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800206e:	f7ff ff9f 	bl	8001fb0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002072:	f002 fd2d 	bl	8004ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200002ec 	.word	0x200002ec

08002080 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <DMA1_Stream0_IRQHandler+0x10>)
 8002086:	f002 ffa1 	bl	8004fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000033c 	.word	0x2000033c

08002094 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 8002098:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800209c:	f003 fb9e 	bl	80057dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 80020a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020a4:	f003 fb9a 	bl	80057dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 80020b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80020b4:	f003 fb92 	bl	80057dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 80020b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020bc:	f003 fb8e 	bl	80057dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <DMA2_Stream3_IRQHandler+0x10>)
 80020ca:	f002 ff7f 	bl	8004fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000028c 	.word	0x2000028c

080020d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <OTG_FS_IRQHandler+0x10>)
 80020de:	f003 fcd9 	bl	8005a94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000114c 	.word	0x2000114c

080020ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_kill>:

int _kill(int pid, int sig)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002106:	f00d fe05 	bl	800fd14 <__errno>
 800210a:	4603      	mov	r3, r0
 800210c:	2216      	movs	r2, #22
 800210e:	601a      	str	r2, [r3, #0]
  return -1;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_exit>:

void _exit (int status)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ffe7 	bl	80020fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800212e:	bf00      	nop
 8002130:	e7fd      	b.n	800212e <_exit+0x12>
	...

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f00d fdd6 	bl	800fd14 <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20010000 	.word	0x20010000
 8002194:	00000400 	.word	0x00000400
 8002198:	200002f0 	.word	0x200002f0
 800219c:	200019a0 	.word	0x200019a0

080021a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08e      	sub	sp, #56	@ 0x38
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d8:	f107 0320 	add.w	r3, r7, #32
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	615a      	str	r2, [r3, #20]
 80021f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021f4:	4b2c      	ldr	r3, [pc, #176]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 80021f6:	4a2d      	ldr	r2, [pc, #180]	@ (80022ac <MX_TIM4_Init+0xe8>)
 80021f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021fa:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b29      	ldr	r3, [pc, #164]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8002206:	4b28      	ldr	r3, [pc, #160]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 8002208:	2269      	movs	r2, #105	@ 0x69
 800220a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002218:	4823      	ldr	r0, [pc, #140]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 800221a:	f006 f893 	bl	8008344 <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002224:	f7ff fae0 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800222e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002232:	4619      	mov	r1, r3
 8002234:	481c      	ldr	r0, [pc, #112]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 8002236:	f006 fc65 	bl	8008b04 <HAL_TIM_ConfigClockSource>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002240:	f7ff fad2 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002244:	4818      	ldr	r0, [pc, #96]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 8002246:	f006 f8cc 	bl	80083e2 <HAL_TIM_PWM_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002250:	f7ff faca 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800225c:	f107 0320 	add.w	r3, r7, #32
 8002260:	4619      	mov	r1, r3
 8002262:	4811      	ldr	r0, [pc, #68]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 8002264:	f007 f8d2 	bl	800940c <HAL_TIMEx_MasterConfigSynchronization>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800226e:	f7ff fabb 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002272:	2360      	movs	r3, #96	@ 0x60
 8002274:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2200      	movs	r2, #0
 8002286:	4619      	mov	r1, r3
 8002288:	4807      	ldr	r0, [pc, #28]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 800228a:	f006 fb79 	bl	8008980 <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002294:	f7ff faa8 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002298:	4803      	ldr	r0, [pc, #12]	@ (80022a8 <MX_TIM4_Init+0xe4>)
 800229a:	f000 f85d 	bl	8002358 <HAL_TIM_MspPostInit>

}
 800229e:	bf00      	nop
 80022a0:	3738      	adds	r7, #56	@ 0x38
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200002f4 	.word	0x200002f4
 80022ac:	40000800 	.word	0x40000800

080022b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a22      	ldr	r2, [pc, #136]	@ (8002348 <HAL_TIM_Base_MspInit+0x98>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d13d      	bne.n	800233e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b21      	ldr	r3, [pc, #132]	@ (800234c <HAL_TIM_Base_MspInit+0x9c>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	4a20      	ldr	r2, [pc, #128]	@ (800234c <HAL_TIM_Base_MspInit+0x9c>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d2:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <HAL_TIM_Base_MspInit+0x9c>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_TIM_Base_MspInit+0xa4>)
 80022e2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022ea:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022ee:	2240      	movs	r2, #64	@ 0x40
 80022f0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f2:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 80022fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022fe:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002300:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 8002302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002306:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002308:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 800230a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800230e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002310:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002316:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800231c:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002322:	480b      	ldr	r0, [pc, #44]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 8002324:	f002 fd2a 	bl	8004d7c <HAL_DMA_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800232e:	f7ff fa5b 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a06      	ldr	r2, [pc, #24]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24
 8002338:	4a05      	ldr	r2, [pc, #20]	@ (8002350 <HAL_TIM_Base_MspInit+0xa0>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40000800 	.word	0x40000800
 800234c:	40023800 	.word	0x40023800
 8002350:	2000033c 	.word	0x2000033c
 8002354:	40026010 	.word	0x40026010

08002358 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <HAL_TIM_MspPostInit+0x68>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d11d      	bne.n	80023b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_TIM_MspPostInit+0x6c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a10      	ldr	r2, [pc, #64]	@ (80023c4 <HAL_TIM_MspPostInit+0x6c>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <HAL_TIM_MspPostInit+0x6c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002396:	2340      	movs	r3, #64	@ 0x40
 8002398:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <HAL_TIM_MspPostInit+0x70>)
 80023b2:	f003 f875 	bl	80054a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023b6:	bf00      	nop
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020400 	.word	0x40020400

080023cc <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 80023cc:	b40f      	push	{r0, r1, r2, r3}
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b0a2      	sub	sp, #136	@ 0x88
 80023d2:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80023d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80023d8:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80023da:	f107 0008 	add.w	r0, r7, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	f00d fc05 	bl	800fbf4 <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fd fef6 	bl	80001e0 <strlen>
 80023f4:	4603      	mov	r3, r0
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f00c fe3a 	bl	800f078 <CDC_Transmit_FS>
}
 8002404:	bf00      	nop
 8002406:	3788      	adds	r7, #136	@ 0x88
 8002408:	46bd      	mov	sp, r7
 800240a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800240e:	b004      	add	sp, #16
 8002410:	4770      	bx	lr
	...

08002414 <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <transmitdma+0x28>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	461a      	mov	r2, r3
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f005 fcfe 	bl	8007e30 <HAL_SPI_Transmit_DMA>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2000039c 	.word	0x2000039c

08002440 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a05      	ldr	r2, [pc, #20]	@ (8002464 <HAL_SPI_TxCpltCallback+0x24>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d102      	bne.n	8002458 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 8002452:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_SPI_TxCpltCallback+0x28>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
	}
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40013000 	.word	0x40013000
 8002468:	2000039c 	.word	0x2000039c

0800246c <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	4613      	mov	r3, r2
 8002478:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	461a      	mov	r2, r3
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f805 	bl	8002490 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	79fa      	ldrb	r2, [r7, #7]
 80024a8:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e014      	b.n	80024e6 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4413      	add	r3, r2
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f9da 	bl	8002880 <_ZN13DisplayObject11getpriorityEv>
 80024cc:	4603      	mov	r3, r0
 80024ce:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	799b      	ldrb	r3, [r3, #6]
 80024d4:	7cfa      	ldrb	r2, [r7, #19]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d902      	bls.n	80024e0 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	7cfa      	ldrb	r2, [r7, #19]
 80024de:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbe6      	blt.n	80024bc <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002506:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800250a:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 800250c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002510:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	795b      	ldrb	r3, [r3, #5]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 813e 	beq.w	800279a <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 800251e:	f240 133f 	movw	r3, #319	@ 0x13f
 8002522:	f240 12df 	movw	r2, #479	@ 0x1df
 8002526:	2100      	movs	r1, #0
 8002528:	2000      	movs	r0, #0
 800252a:	f000 fd3c 	bl	8002fa6 <modifySpace>
		startCommand(WRITE_COMMAND);
 800252e:	202c      	movs	r0, #44	@ 0x2c
 8002530:	f000 fc46 	bl	8002dc0 <startCommand>
		dataOrRegister(1);
 8002534:	2001      	movs	r0, #1
 8002536:	f000 fc01 	bl	8002d3c <dataOrRegister>
		uint8_t anychanges = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002540:	f102 021f 	add.w	r2, r2, #31
 8002544:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002546:	2300      	movs	r3, #0
 8002548:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800254c:	f102 0218 	add.w	r2, r2, #24
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e028      	b.n	80025a6 <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 8002554:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002558:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002564:	f103 0318 	add.w	r3, r3, #24
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f9a0 	bl	80028b6 <_ZN13DisplayObject13getChangeFlagEv>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800257e:	f103 031f 	add.w	r3, r3, #31
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4413      	add	r3, r2
 8002586:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800258a:	f102 021f 	add.w	r2, r2, #31
 800258e:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002590:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002594:	f103 0318 	add.w	r3, r3, #24
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025a0:	f102 0218 	add.w	r2, r2, #24
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025aa:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	791b      	ldrb	r3, [r3, #4]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025b8:	f103 0318 	add.w	r3, r3, #24
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4293      	cmp	r3, r2
 80025c0:	dbc8      	blt.n	8002554 <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 80025c2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025c6:	f103 031f 	add.w	r3, r3, #31
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80ec 	beq.w	80027aa <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80025d2:	2300      	movs	r3, #0
 80025d4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025d8:	f102 0214 	add.w	r2, r2, #20
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e0d2      	b.n	8002786 <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 80025e0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025e4:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 80025e8:	4618      	mov	r0, r3
 80025ea:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80025ee:	461a      	mov	r2, r3
 80025f0:	2100      	movs	r1, #0
 80025f2:	f00d fb0d 	bl	800fc10 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 80025f6:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025fa:	f103 0314 	add.w	r3, r3, #20
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800260c:	f102 0208 	add.w	r2, r2, #8
 8002610:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 8002612:	2300      	movs	r3, #0
 8002614:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002618:	f102 0210 	add.w	r2, r2, #16
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e084      	b.n	800272a <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 8002620:	2300      	movs	r3, #0
 8002622:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002626:	f102 020c 	add.w	r2, r2, #12
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e064      	b.n	80026f8 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 800262e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002632:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800263e:	f103 030c 	add.w	r3, r3, #12
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f918 	bl	8002880 <_ZN13DisplayObject11getpriorityEv>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002658:	f103 0310 	add.w	r3, r3, #16
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4293      	cmp	r3, r2
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d03a      	beq.n	80026e2 <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 800266c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002670:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800267c:	f103 030c 	add.w	r3, r3, #12
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800268c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002698:	f103 030c 	add.w	r3, r3, #12
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3308      	adds	r3, #8
 80026a8:	681c      	ldr	r4, [r3, #0]
 80026aa:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026ae:	f103 0308 	add.w	r3, r3, #8
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f107 0120 	add.w	r1, r7, #32
 80026ba:	3918      	subs	r1, #24
 80026bc:	2250      	movs	r2, #80	@ 0x50
 80026be:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 80026c0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026c4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026d0:	f103 030c 	add.w	r3, r3, #12
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f87f 	bl	80027e0 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 80026e2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026e6:	f103 030c 	add.w	r3, r3, #12
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026f2:	f102 020c 	add.w	r2, r2, #12
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026fc:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	791b      	ldrb	r3, [r3, #4]
 8002704:	461a      	mov	r2, r3
 8002706:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800270a:	f103 030c 	add.w	r3, r3, #12
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4293      	cmp	r3, r2
 8002712:	db8c      	blt.n	800262e <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 8002714:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002718:	f103 0310 	add.w	r3, r3, #16
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002724:	f102 0210 	add.w	r2, r2, #16
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800272e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	799b      	ldrb	r3, [r3, #6]
 8002736:	461a      	mov	r2, r3
 8002738:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800273c:	f103 0310 	add.w	r3, r3, #16
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4293      	cmp	r3, r2
 8002744:	f77f af6c 	ble.w	8002620 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	3b18      	subs	r3, #24
 800274e:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002752:	4619      	mov	r1, r3
 8002754:	4818      	ldr	r0, [pc, #96]	@ (80027b8 <_ZN5Scene9drawSceneEv+0x2c0>)
 8002756:	f7ff fe5d 	bl	8002414 <transmitdma>
			while(!spidatasentflag) {}
 800275a:	bf00      	nop
 800275c:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <_ZN5Scene9drawSceneEv+0x2c4>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f5      	bne.n	800275c <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002770:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002774:	f103 0314 	add.w	r3, r3, #20
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002780:	f102 0214 	add.w	r2, r2, #20
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800278a:	f103 0314 	add.w	r3, r3, #20
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b05      	cmp	r3, #5
 8002792:	f77f af25 	ble.w	80025e0 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 8002796:	f000 fb29 	bl	8002dec <endCommand>
	}
	this->changed = 0;
 800279a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800279e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2200      	movs	r2, #0
 80027a6:	715a      	strb	r2, [r3, #5]
 80027a8:	e000      	b.n	80027ac <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 80027aa:	bf00      	nop
}
 80027ac:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200001dc 	.word	0x200001dc
 80027bc:	2000039c 	.word	0x2000039c

080027c0 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <_ZN13DisplayObjectD1Ev+0x1c>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	08010708 	.word	0x08010708

080027e0 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	715a      	strb	r2, [r3, #5]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	715a      	strb	r2, [r3, #5]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	return this->xpos;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	88db      	ldrh	r3, [r3, #6]
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	80da      	strh	r2, [r3, #6]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
	return this->ypos;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	891b      	ldrh	r3, [r3, #8]
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	887a      	ldrh	r2, [r7, #2]
 8002872:	811a      	strh	r2, [r3, #8]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	return this->priority;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	791b      	ldrb	r3, [r3, #4]
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	711a      	strb	r2, [r3, #4]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	return this->changed;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	795b      	ldrb	r3, [r3, #5]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <_ZN13DisplayObjectC1Ev+0x1c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	08010708 	.word	0x08010708

080028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	817b      	strh	r3, [r7, #10]
 8002902:	460b      	mov	r3, r1
 8002904:	813b      	strh	r3, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ffdf 	bl	80028d0 <_ZN13DisplayObjectC1Ev>
 8002912:	4a15      	ldr	r2, [pc, #84]	@ (8002968 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a3a      	ldr	r2, [r7, #32]
 800291c:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	897a      	ldrh	r2, [r7, #10]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff81 	bl	800282c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	893a      	ldrh	r2, [r7, #8]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff96 	bl	8002862 <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	7f3a      	ldrb	r2, [r7, #28]
 8002940:	751a      	strb	r2, [r3, #20]
	this->font = font;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ffa1 	bl	8002898 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff4e 	bl	80027fa <_ZN13DisplayObject12redrawObjectEv>
}
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	080106f4 	.word	0x080106f4

0800296c <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002970:	b08a      	sub	sp, #40	@ 0x28
 8002972:	af06      	add	r7, sp, #24
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	4611      	mov	r1, r2
 800297a:	461a      	mov	r2, r3
 800297c:	460b      	mov	r3, r1
 800297e:	80fb      	strh	r3, [r7, #6]
 8002980:	4613      	mov	r3, r2
 8002982:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68dc      	ldr	r4, [r3, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691d      	ldr	r5, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	895e      	ldrh	r6, [r3, #10]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff3e 	bl	8002814 <_ZN13DisplayObject7getxposEv>
 8002998:	4603      	mov	r3, r0
 800299a:	4698      	mov	r8, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff53 	bl	800284a <_ZN13DisplayObject7getyposEv>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4619      	mov	r1, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	7d1b      	ldrb	r3, [r3, #20]
 80029ac:	88ba      	ldrh	r2, [r7, #4]
 80029ae:	9204      	str	r2, [sp, #16]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	9203      	str	r2, [sp, #12]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	9202      	str	r2, [sp, #8]
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	9100      	str	r1, [sp, #0]
 80029bc:	4643      	mov	r3, r8
 80029be:	4632      	mov	r2, r6
 80029c0:	4629      	mov	r1, r5
 80029c2:	4620      	mov	r0, r4
 80029c4:	f000 fdcc 	bl	8003560 <drawStringIntoFramebuffer>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029d4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	460b      	mov	r3, r1
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	79fa      	ldrb	r2, [r7, #7]
 80029f4:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88ba      	ldrh	r2, [r7, #4]
 80029fa:	815a      	strh	r2, [r3, #10]
	this->font = font;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8bba      	ldrh	r2, [r7, #28]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff0f 	bl	800282c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8c3a      	ldrh	r2, [r7, #32]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff24 	bl	8002862 <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff38 	bl	8002898 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fee5 	bl	80027fa <_ZN13DisplayObject12redrawObjectEv>
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_ZN17OutlineRectObjectC1Ettttthh>:

/*
 * the following are all OutlineRectObject definitions
 */

OutlineRectObject::OutlineRectObject(uint16_t xpos, uint16_t ypos, uint16_t length, uint16_t height, uint16_t colorvalue, uint8_t positioning, uint8_t priority) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff3b 	bl	80028d0 <_ZN13DisplayObjectC1Ev>
 8002a5a:	4a16      	ldr	r2, [pc, #88]	@ (8002ab4 <_ZN17OutlineRectObjectC1Ettttthh+0x7c>)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]
	this->setxpos(xpos);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	897a      	ldrh	r2, [r7, #10]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fee0 	bl	800282c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	893a      	ldrh	r2, [r7, #8]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fef5 	bl	8002862 <_ZN13DisplayObject7setyposEt>
	this->length = length;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	88fa      	ldrh	r2, [r7, #6]
 8002a7c:	819a      	strh	r2, [r3, #12]
	this->height = height;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8b3a      	ldrh	r2, [r7, #24]
 8002a82:	81da      	strh	r2, [r3, #14]
	this->colorvalue = colorvalue;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8bba      	ldrh	r2, [r7, #28]
 8002a88:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a90:	741a      	strb	r2, [r3, #16]
	this->setpriority(priority);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fefc 	bl	8002898 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fea9 	bl	80027fa <_ZN13DisplayObject12redrawObjectEv>
}
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	080106e0 	.word	0x080106e0

08002ab8 <_ZN17OutlineRectObject19drawIntoFramebufferEPttt>:

uint16_t OutlineRectObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aba:	b08b      	sub	sp, #44	@ 0x2c
 8002abc:	af06      	add	r7, sp, #24
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	80fb      	strh	r3, [r7, #6]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80bb      	strh	r3, [r7, #4]
	drawRectangleOutlineIntoFramebuffer(this->getxpos(), this->getypos(), this->length, this->height, this->colorvalue, this->positioning, framebuffer, framewidth, xstart);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fe9f 	bl	8002814 <_ZN13DisplayObject7getxposEv>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461d      	mov	r5, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff feb4 	bl	800284a <_ZN13DisplayObject7getyposEv>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461e      	mov	r6, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8998      	ldrh	r0, [r3, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	89dc      	ldrh	r4, [r3, #14]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	895b      	ldrh	r3, [r3, #10]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	7c12      	ldrb	r2, [r2, #16]
 8002af6:	88b9      	ldrh	r1, [r7, #4]
 8002af8:	9104      	str	r1, [sp, #16]
 8002afa:	88f9      	ldrh	r1, [r7, #6]
 8002afc:	9103      	str	r1, [sp, #12]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	9102      	str	r1, [sp, #8]
 8002b02:	9201      	str	r2, [sp, #4]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4623      	mov	r3, r4
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4631      	mov	r1, r6
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 fb26 	bl	800315e <drawRectangleOutlineIntoFramebuffer>
	return 0;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b1c <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af04      	add	r7, sp, #16
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	80fb      	strh	r3, [r7, #6]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80bb      	strh	r3, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fecb 	bl	80028d0 <_ZN13DisplayObjectC1Ev>
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b6c <_ZN11ImageObjectC1EPctttthh+0x50>)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8002b40:	88b9      	ldrh	r1, [r7, #4]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b4e:	9302      	str	r3, [sp, #8]
 8002b50:	8bbb      	ldrh	r3, [r7, #28]
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	8b3b      	ldrh	r3, [r7, #24]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f83b 	bl	8002bd8 <_ZN11ImageObject11updateImageEPctttthh>
}
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	080106cc 	.word	0x080106cc

08002b70 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b74:	b08a      	sub	sp, #40	@ 0x28
 8002b76:	af06      	add	r7, sp, #24
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	80fb      	strh	r3, [r7, #6]
 8002b84:	4613      	mov	r3, r2
 8002b86:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691c      	ldr	r4, [r3, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	895d      	ldrh	r5, [r3, #10]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	899e      	ldrh	r6, [r3, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe3c 	bl	8002814 <_ZN13DisplayObject7getxposEv>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4698      	mov	r8, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fe51 	bl	800284a <_ZN13DisplayObject7getyposEv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4619      	mov	r1, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	7b9b      	ldrb	r3, [r3, #14]
 8002bb0:	88ba      	ldrh	r2, [r7, #4]
 8002bb2:	9204      	str	r2, [sp, #16]
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	9203      	str	r2, [sp, #12]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	9202      	str	r2, [sp, #8]
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	9100      	str	r1, [sp, #0]
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	4632      	mov	r2, r6
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f000 fd42 	bl	8003650 <drawImageIntoFramebuffer>
	return 0;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bd8 <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	460b      	mov	r3, r1
 8002be8:	80fb      	strh	r3, [r7, #6]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8b3a      	ldrh	r2, [r7, #24]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fe19 	bl	800282c <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8bba      	ldrh	r2, [r7, #28]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fe2e 	bl	8002862 <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	88ba      	ldrh	r2, [r7, #4]
 8002c16:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c1e:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fe35 	bl	8002898 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fde2 	bl	80027fa <_ZN13DisplayObject12redrawObjectEv>
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	4a05      	ldr	r2, [pc, #20]	@ (8002c60 <_ZN11ImageObjectD1Ev+0x20>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fdb5 	bl	80027c0 <_ZN13DisplayObjectD1Ev>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	080106cc 	.word	0x080106cc

08002c64 <_ZN11ImageObjectD0Ev>:
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ffe7 	bl	8002c40 <_ZN11ImageObjectD1Ev>
 8002c72:	2114      	movs	r1, #20
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f00c fe51 	bl	800f91c <_ZdlPvj>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_ZN17OutlineRectObjectD1Ev>:
class OutlineRectObject : public DisplayObject {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <_ZN17OutlineRectObjectD1Ev+0x20>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fd93 	bl	80027c0 <_ZN13DisplayObjectD1Ev>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	080106e0 	.word	0x080106e0

08002ca8 <_ZN17OutlineRectObjectD0Ev>:
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ffe7 	bl	8002c84 <_ZN17OutlineRectObjectD1Ev>
 8002cb6:	2114      	movs	r1, #20
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f00c fe2f 	bl	800f91c <_ZdlPvj>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <_ZN12StringObjectD1Ev+0x20>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fd71 	bl	80027c0 <_ZN13DisplayObjectD1Ev>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	080106f4 	.word	0x080106f4

08002cec <_ZN12StringObjectD0Ev>:
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ffe7 	bl	8002cc8 <_ZN12StringObjectD1Ev>
 8002cfa:	2118      	movs	r1, #24
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f00c fe0d 	bl	800f91c <_ZdlPvj>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2108      	movs	r1, #8
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <startTransaction+0x14>)
 8002d16:	f002 fd47 	bl	80057a8 <HAL_GPIO_WritePin>
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40020400 	.word	0x40020400

08002d24 <endTransaction>:

void endTransaction() {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002d28:	2201      	movs	r2, #1
 8002d2a:	2108      	movs	r1, #8
 8002d2c:	4802      	ldr	r0, [pc, #8]	@ (8002d38 <endTransaction+0x14>)
 8002d2e:	f002 fd3b 	bl	80057a8 <HAL_GPIO_WritePin>
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40020400 	.word	0x40020400

08002d3c <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2110      	movs	r1, #16
 8002d50:	4806      	ldr	r0, [pc, #24]	@ (8002d6c <dataOrRegister+0x30>)
 8002d52:	f002 fd29 	bl	80057a8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002d56:	e004      	b.n	8002d62 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	4803      	ldr	r0, [pc, #12]	@ (8002d6c <dataOrRegister+0x30>)
 8002d5e:	f002 fd23 	bl	80057a8 <HAL_GPIO_WritePin>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40020400 	.word	0x40020400

08002d70 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002d7e:	f7ff ffc5 	bl	8002d0c <startTransaction>

	dataOrRegister(0);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7ff ffda 	bl	8002d3c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002d88:	f107 010e 	add.w	r1, r7, #14
 8002d8c:	230a      	movs	r3, #10
 8002d8e:	2201      	movs	r2, #1
 8002d90:	480a      	ldr	r0, [pc, #40]	@ (8002dbc <commandAndData+0x4c>)
 8002d92:	f004 fc46 	bl	8007622 <HAL_SPI_Transmit>

	if (size) {
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <commandAndData+0x40>
		dataOrRegister(1);
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff ffcd 	bl	8002d3c <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	230a      	movs	r3, #10
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	4804      	ldr	r0, [pc, #16]	@ (8002dbc <commandAndData+0x4c>)
 8002dac:	f004 fc39 	bl	8007622 <HAL_SPI_Transmit>
	}

	endTransaction();
 8002db0:	f7ff ffb8 	bl	8002d24 <endTransaction>
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	200001dc 	.word	0x200001dc

08002dc0 <startCommand>:

void startCommand(uint16_t command) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002dca:	f7ff ff9f 	bl	8002d0c <startTransaction>
	dataOrRegister(0);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7ff ffb4 	bl	8002d3c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002dd4:	1db9      	adds	r1, r7, #6
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4803      	ldr	r0, [pc, #12]	@ (8002de8 <startCommand+0x28>)
 8002ddc:	f004 fc21 	bl	8007622 <HAL_SPI_Transmit>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200001dc 	.word	0x200001dc

08002dec <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	endTransaction();
 8002df0:	f7ff ff98 	bl	8002d24 <endTransaction>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <resetScreen>:

void resetScreen() {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	2120      	movs	r1, #32
 8002e00:	480b      	ldr	r0, [pc, #44]	@ (8002e30 <resetScreen+0x38>)
 8002e02:	f002 fcd1 	bl	80057a8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002e06:	2014      	movs	r0, #20
 8002e08:	f001 fe82 	bl	8004b10 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2120      	movs	r1, #32
 8002e10:	4807      	ldr	r0, [pc, #28]	@ (8002e30 <resetScreen+0x38>)
 8002e12:	f002 fcc9 	bl	80057a8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002e16:	2014      	movs	r0, #20
 8002e18:	f001 fe7a 	bl	8004b10 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2120      	movs	r1, #32
 8002e20:	4803      	ldr	r0, [pc, #12]	@ (8002e30 <resetScreen+0x38>)
 8002e22:	f002 fcc1 	bl	80057a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e26:	2064      	movs	r0, #100	@ 0x64
 8002e28:	f001 fe72 	bl	8004b10 <HAL_Delay>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40020400 	.word	0x40020400

08002e34 <initializeScreen>:

void initializeScreen() {
 8002e34:	b5b0      	push	{r4, r5, r7, lr}
 8002e36:	b09c      	sub	sp, #112	@ 0x70
 8002e38:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f7ff ff96 	bl	8002d70 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002e44:	2200      	movs	r2, #0
 8002e46:	2100      	movs	r1, #0
 8002e48:	2011      	movs	r0, #17
 8002e4a:	f7ff ff91 	bl	8002d70 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002e4e:	2355      	movs	r3, #85	@ 0x55
 8002e50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002e54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	203a      	movs	r0, #58	@ 0x3a
 8002e5e:	f7ff ff87 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002e62:	4b47      	ldr	r3, [pc, #284]	@ (8002f80 <initializeScreen+0x14c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002e68:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	20c0      	movs	r0, #192	@ 0xc0
 8002e72:	f7ff ff7d 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002e76:	2345      	movs	r3, #69	@ 0x45
 8002e78:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002e82:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e86:	2204      	movs	r2, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	20c1      	movs	r0, #193	@ 0xc1
 8002e8c:	f7ff ff70 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002e90:	2333      	movs	r3, #51	@ 0x33
 8002e92:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002e96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	20c2      	movs	r0, #194	@ 0xc2
 8002ea0:	f7ff ff66 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002eaa:	2328      	movs	r3, #40	@ 0x28
 8002eac:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002eb0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	20c5      	movs	r0, #197	@ 0xc5
 8002eba:	f7ff ff59 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002ebe:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <initializeScreen+0x150>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002ec4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ec8:	2204      	movs	r2, #4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	20b1      	movs	r0, #177	@ 0xb1
 8002ece:	f7ff ff4f 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002ed8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002edc:	2202      	movs	r2, #2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	20b4      	movs	r0, #180	@ 0xb4
 8002ee2:	f7ff ff45 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002ee6:	4a28      	ldr	r2, [pc, #160]	@ (8002f88 <initializeScreen+0x154>)
 8002ee8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ef0:	6018      	str	r0, [r3, #0]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002ef6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002efa:	2206      	movs	r2, #6
 8002efc:	4619      	mov	r1, r3
 8002efe:	20b6      	movs	r0, #182	@ 0xb6
 8002f00:	f7ff ff36 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002f04:	4b21      	ldr	r3, [pc, #132]	@ (8002f8c <initializeScreen+0x158>)
 8002f06:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f14:	c407      	stmia	r4!, {r0, r1, r2}
 8002f16:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f1c:	221e      	movs	r2, #30
 8002f1e:	4619      	mov	r1, r3
 8002f20:	20e0      	movs	r0, #224	@ 0xe0
 8002f22:	f7ff ff25 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002f26:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <initializeScreen+0x15c>)
 8002f28:	f107 040c 	add.w	r4, r7, #12
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f36:	c407      	stmia	r4!, {r0, r1, r2}
 8002f38:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	221e      	movs	r2, #30
 8002f40:	4619      	mov	r1, r3
 8002f42:	20e1      	movs	r0, #225	@ 0xe1
 8002f44:	f7ff ff14 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002f48:	2300      	movs	r3, #0
 8002f4a:	813b      	strh	r3, [r7, #8]
 8002f4c:	2322      	movs	r3, #34	@ 0x22
 8002f4e:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	2204      	movs	r2, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	20b6      	movs	r0, #182	@ 0xb6
 8002f5a:	f7ff ff09 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002f5e:	2308      	movs	r3, #8
 8002f60:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	2202      	movs	r2, #2
 8002f66:	4619      	mov	r1, r3
 8002f68:	2036      	movs	r0, #54	@ 0x36
 8002f6a:	f7ff ff01 	bl	8002d70 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f000 f85a 	bl	8003028 <clearScreenfast>
	displayOn();
 8002f74:	f000 f80e 	bl	8002f94 <displayOn>
}
 8002f78:	bf00      	nop
 8002f7a:	3770      	adds	r7, #112	@ 0x70
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f80:	08010578 	.word	0x08010578
 8002f84:	0801057c 	.word	0x0801057c
 8002f88:	08010580 	.word	0x08010580
 8002f8c:	08010588 	.word	0x08010588
 8002f90:	080105a8 	.word	0x080105a8

08002f94 <displayOn>:

void displayOn() {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2029      	movs	r0, #41	@ 0x29
 8002f9e:	f7ff fee7 	bl	8002d70 <commandAndData>
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002fa6:	b590      	push	{r4, r7, lr}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4604      	mov	r4, r0
 8002fae:	4608      	mov	r0, r1
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	80fb      	strh	r3, [r7, #6]
 8002fb8:	4603      	mov	r3, r0
 8002fba:	80bb      	strh	r3, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002fc4:	88bb      	ldrh	r3, [r7, #4]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	823b      	strh	r3, [r7, #16]
 8002fcc:	88bb      	ldrh	r3, [r7, #4]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	827b      	strh	r3, [r7, #18]
 8002fd4:	883b      	ldrh	r3, [r7, #0]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	82bb      	strh	r3, [r7, #20]
 8002fdc:	883b      	ldrh	r3, [r7, #0]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	2208      	movs	r2, #8
 8002fea:	4619      	mov	r1, r3
 8002fec:	202a      	movs	r0, #42	@ 0x2a
 8002fee:	f7ff febf 	bl	8002d70 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	813b      	strh	r3, [r7, #8]
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	817b      	strh	r3, [r7, #10]
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	b29b      	uxth	r3, r3
 8003008:	81bb      	strh	r3, [r7, #12]
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	b29b      	uxth	r3, r3
 8003010:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	2208      	movs	r2, #8
 8003018:	4619      	mov	r1, r3
 800301a:	202b      	movs	r0, #43	@ 0x2b
 800301c:	f7ff fea8 	bl	8002d70 <commandAndData>
	}
}
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bd90      	pop	{r4, r7, pc}

08003028 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8003028:	b580      	push	{r7, lr}
 800302a:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	4602      	mov	r2, r0
 8003034:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003038:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 800303c:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 800303e:	2300      	movs	r3, #0
 8003040:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003044:	f102 020c 	add.w	r2, r2, #12
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e01a      	b.n	8003082 <clearScreenfast+0x5a>
		buffer1[i] = color;
 800304c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003050:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8003054:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003058:	f102 020c 	add.w	r2, r2, #12
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8003062:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 8003066:	8809      	ldrh	r1, [r1, #0]
 8003068:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 800306c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003070:	f103 030c 	add.w	r3, r3, #12
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800307c:	f102 020c 	add.w	r2, r2, #12
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003086:	f103 030c 	add.w	r3, r3, #12
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8003090:	dbdc      	blt.n	800304c <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 8003092:	f240 133f 	movw	r3, #319	@ 0x13f
 8003096:	f240 12df 	movw	r2, #479	@ 0x1df
 800309a:	2100      	movs	r1, #0
 800309c:	2000      	movs	r0, #0
 800309e:	f7ff ff82 	bl	8002fa6 <modifySpace>
	startCommand(0x2C);
 80030a2:	202c      	movs	r0, #44	@ 0x2c
 80030a4:	f7ff fe8c 	bl	8002dc0 <startCommand>
	dataOrRegister(1);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7ff fe47 	bl	8002d3c <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80030ae:	2300      	movs	r3, #0
 80030b0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80030b4:	f102 0208 	add.w	r2, r2, #8
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e019      	b.n	80030f0 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 80030bc:	f107 0310 	add.w	r3, r7, #16
 80030c0:	3b08      	subs	r3, #8
 80030c2:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80030c6:	4619      	mov	r1, r3
 80030c8:	4811      	ldr	r0, [pc, #68]	@ (8003110 <clearScreenfast+0xe8>)
 80030ca:	f7ff f9a3 	bl	8002414 <transmitdma>
		while (!spidatasentflag) {}
 80030ce:	bf00      	nop
 80030d0:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <clearScreenfast+0xec>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0fa      	beq.n	80030d0 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80030da:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80030de:	f103 0308 	add.w	r3, r3, #8
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80030ea:	f102 0208 	add.w	r2, r2, #8
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80030f4:	f103 0308 	add.w	r3, r3, #8
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	ddde      	ble.n	80030bc <clearScreenfast+0x94>
	}
	endCommand();
 80030fe:	f7ff fe75 	bl	8002dec <endCommand>
}
 8003102:	bf00      	nop
 8003104:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200001dc 	.word	0x200001dc
 8003114:	2000039c 	.word	0x2000039c

08003118 <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4611      	mov	r1, r2
 8003124:	461a      	mov	r2, r3
 8003126:	460b      	mov	r3, r1
 8003128:	80fb      	strh	r3, [r7, #6]
 800312a:	4613      	mov	r3, r2
 800312c:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	881a      	ldrh	r2, [r3, #0]
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	881a      	ldrh	r2, [r3, #0]
 8003144:	88bb      	ldrh	r3, [r7, #4]
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	b29a      	uxth	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	801a      	strh	r2, [r3, #0]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <drawRectangleOutlineIntoFramebuffer>:
	drawVLine(x1 + length, y1, height, color);
	drawHLine(x1, y1, length, color);
	drawHLine(x1, y1 + height, length, color);
}

void drawRectangleOutlineIntoFramebuffer(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color, uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800315e:	b590      	push	{r4, r7, lr}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	4604      	mov	r4, r0
 8003166:	4608      	mov	r0, r1
 8003168:	4611      	mov	r1, r2
 800316a:	461a      	mov	r2, r3
 800316c:	4623      	mov	r3, r4
 800316e:	80fb      	strh	r3, [r7, #6]
 8003170:	4603      	mov	r3, r0
 8003172:	80bb      	strh	r3, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	803b      	strh	r3, [r7, #0]
	if (positioning & CENTER_OBJECT) {
 800317c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <drawRectangleOutlineIntoFramebuffer+0x36>
		getRectCenter(&x1, &y1, length, height);
 8003188:	883b      	ldrh	r3, [r7, #0]
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	1d39      	adds	r1, r7, #4
 800318e:	1db8      	adds	r0, r7, #6
 8003190:	f7ff ffc2 	bl	8003118 <getRectCenter>
	}
	for (int x = x1; x < x1 + length; x++) {
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e09c      	b.n	80032d4 <drawRectangleOutlineIntoFramebuffer+0x176>
		for (int y = y1; y < y1 + height; y++) {
 800319a:	88bb      	ldrh	r3, [r7, #4]
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	e08e      	b.n	80032be <drawRectangleOutlineIntoFramebuffer+0x160>
			if ((x >= xstart) & (x < (xstart + framewidth))) {
 80031a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	bfac      	ite	ge
 80031a8:	2301      	movge	r3, #1
 80031aa:	2300      	movlt	r3, #0
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80031b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80031b2:	440b      	add	r3, r1
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	4299      	cmp	r1, r3
 80031b8:	bfb4      	ite	lt
 80031ba:	2301      	movlt	r3, #1
 80031bc:	2300      	movge	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4013      	ands	r3, r2
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d077      	beq.n	80032b8 <drawRectangleOutlineIntoFramebuffer+0x15a>
				if ((x == x1) | (x == (x1 + length - 1))) {
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4293      	cmp	r3, r2
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	4619      	mov	r1, r3
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	440b      	add	r3, r1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	4299      	cmp	r1, r3
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d024      	beq.n	8003240 <drawRectangleOutlineIntoFramebuffer+0xe2>
					if ((y >= y1) & (y < y1 + height)) {
 80031f6:	88bb      	ldrh	r3, [r7, #4]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4293      	cmp	r3, r2
 80031fe:	bfac      	ite	ge
 8003200:	2301      	movge	r3, #1
 8003202:	2300      	movlt	r3, #0
 8003204:	b2da      	uxtb	r2, r3
 8003206:	88bb      	ldrh	r3, [r7, #4]
 8003208:	4619      	mov	r1, r3
 800320a:	883b      	ldrh	r3, [r7, #0]
 800320c:	440b      	add	r3, r1
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	4299      	cmp	r1, r3
 8003212:	bfb4      	ite	lt
 8003214:	2301      	movlt	r3, #1
 8003216:	2300      	movge	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4013      	ands	r3, r2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <drawRectangleOutlineIntoFramebuffer+0xe2>
							framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 8003222:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	1ad2      	subs	r2, r2, r3
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	461a      	mov	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4413      	add	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800323a:	4413      	add	r3, r2
 800323c:	8c3a      	ldrh	r2, [r7, #32]
 800323e:	801a      	strh	r2, [r3, #0]
					}
				}
				if ((y == y1) | (y == (y1 + height - 1))) {
 8003240:	88bb      	ldrh	r3, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4293      	cmp	r3, r2
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2da      	uxtb	r2, r3
 8003250:	88bb      	ldrh	r3, [r7, #4]
 8003252:	4619      	mov	r1, r3
 8003254:	883b      	ldrh	r3, [r7, #0]
 8003256:	440b      	add	r3, r1
 8003258:	3b01      	subs	r3, #1
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	4299      	cmp	r1, r3
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d024      	beq.n	80032b8 <drawRectangleOutlineIntoFramebuffer+0x15a>
					if ((x >= x1) & (x < (x1 + length))) {
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	461a      	mov	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4293      	cmp	r3, r2
 8003276:	bfac      	ite	ge
 8003278:	2301      	movge	r3, #1
 800327a:	2300      	movlt	r3, #0
 800327c:	b2da      	uxtb	r2, r3
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	4619      	mov	r1, r3
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	440b      	add	r3, r1
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	4299      	cmp	r1, r3
 800328a:	bfb4      	ite	lt
 800328c:	2301      	movlt	r3, #1
 800328e:	2300      	movge	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	4013      	ands	r3, r2
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00e      	beq.n	80032b8 <drawRectangleOutlineIntoFramebuffer+0x15a>
						framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 800329a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	1ad2      	subs	r2, r2, r3
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	019b      	lsls	r3, r3, #6
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4413      	add	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	8c3a      	ldrh	r2, [r7, #32]
 80032b6:	801a      	strh	r2, [r3, #0]
		for (int y = y1; y < y1 + height; y++) {
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	88bb      	ldrh	r3, [r7, #4]
 80032c0:	461a      	mov	r2, r3
 80032c2:	883b      	ldrh	r3, [r7, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	f6ff af69 	blt.w	80031a0 <drawRectangleOutlineIntoFramebuffer+0x42>
	for (int x = x1; x < x1 + length; x++) {
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3301      	adds	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	461a      	mov	r2, r3
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	4413      	add	r3, r2
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	429a      	cmp	r2, r3
 80032e0:	f6ff af5b 	blt.w	800319a <drawRectangleOutlineIntoFramebuffer+0x3c>
					}
				}
			}
		}
	}
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}

080032ee <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 80032ee:	b480      	push	{r7}
 80032f0:	b089      	sub	sp, #36	@ 0x24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003304:	e015      	b.n	8003332 <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	4619      	mov	r1, r3
 8003310:	460b      	mov	r3, r1
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800331c:	4413      	add	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	791b      	ldrb	r3, [r3, #4]
 8003324:	461a      	mov	r2, r3
 8003326:	8b7b      	ldrh	r3, [r7, #26]
 8003328:	4413      	add	r3, r2
 800332a:	837b      	strh	r3, [r7, #26]
		currentletter++;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	3301      	adds	r3, #1
 8003330:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	881a      	ldrh	r2, [r3, #0]
 800333e:	8b7b      	ldrh	r3, [r7, #26]
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	b29b      	uxth	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 800334c:	bf00      	nop
 800334e:	3724      	adds	r7, #36	@ 0x24
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	@ 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 800336e:	e015      	b.n	800339c <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4619      	mov	r1, r3
 800337a:	460b      	mov	r3, r1
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003386:	4413      	add	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	791b      	ldrb	r3, [r3, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	8b7b      	ldrh	r3, [r7, #26]
 8003392:	4413      	add	r3, r2
 8003394:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3301      	adds	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e5      	bne.n	8003370 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	881a      	ldrh	r2, [r3, #0]
 80033a8:	8b7b      	ldrh	r3, [r7, #26]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 80033b2:	bf00      	nop
 80033b4:	3724      	adds	r7, #36	@ 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <getCharXadv>:
	}

	return (uint16_t)xadv;
}

uint16_t getCharXadv(char letter, const GFXfont *font) {
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	6039      	str	r1, [r7, #0]
 80033c8:	71fb      	strb	r3, [r7, #7]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	79fa      	ldrb	r2, [r7, #7]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033dc:	440b      	add	r3, r1
 80033de:	60fb      	str	r3, [r7, #12]
	return toDraw->xAdvance;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	791b      	ldrb	r3, [r3, #4]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <drawCharIntoFramebuffer>:

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80033f0:	b480      	push	{r7}
 80033f2:	b08d      	sub	sp, #52	@ 0x34
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	4611      	mov	r1, r2
 80033fa:	461a      	mov	r2, r3
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	460b      	mov	r3, r1
 8003402:	81bb      	strh	r3, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800341a:	440b      	add	r3, r1
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	789b      	ldrb	r3, [r3, #2]
 8003422:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	78db      	ldrb	r3, [r3, #3]
 8003428:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003438:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 8003458:	2300      	movs	r3, #0
 800345a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800345c:	e071      	b.n	8003542 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 800345e:	2300      	movs	r3, #0
 8003460:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003462:	e062      	b.n	800352a <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 8003464:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 8003476:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 800347c:	461a      	mov	r2, r3
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4413      	add	r3, r2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 8003488:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800348c:	2b00      	cmp	r3, #0
 800348e:	da41      	bge.n	8003514 <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 8003490:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003494:	b29a      	uxth	r2, r3
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	4413      	add	r3, r2
 800349a:	b29a      	uxth	r2, r3
 800349c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 80034ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80034ae:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 80034be:	8afa      	ldrh	r2, [r7, #22]
 80034c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80034c4:	429a      	cmp	r2, r3
 80034c6:	bf2c      	ite	cs
 80034c8:	2301      	movcs	r3, #1
 80034ca:	2300      	movcc	r3, #0
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	8af9      	ldrh	r1, [r7, #22]
 80034d0:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80034d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80034d8:	4403      	add	r3, r0
 80034da:	4299      	cmp	r1, r3
 80034dc:	bfb4      	ite	lt
 80034de:	2301      	movlt	r3, #1
 80034e0:	2300      	movge	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4013      	ands	r3, r2
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 80034ec:	8abb      	ldrh	r3, [r7, #20]
 80034ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034f2:	d20f      	bcs.n	8003514 <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80034f4:	8afa      	ldrh	r2, [r7, #22]
 80034f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80034fa:	1ad2      	subs	r2, r2, r3
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	019b      	lsls	r3, r3, #6
 8003504:	461a      	mov	r2, r3
 8003506:	8abb      	ldrh	r3, [r7, #20]
 8003508:	4413      	add	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800350e:	4413      	add	r3, r2
 8003510:	89ba      	ldrh	r2, [r7, #12]
 8003512:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 8003514:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 800351e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003522:	b29b      	uxth	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	b29b      	uxth	r3, r3
 8003528:	853b      	strh	r3, [r7, #40]	@ 0x28
 800352a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 800352e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003532:	429a      	cmp	r2, r3
 8003534:	db96      	blt.n	8003464 <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 8003536:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3301      	adds	r3, #1
 800353e:	b29b      	uxth	r3, r3
 8003540:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003542:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8003546:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800354a:	429a      	cmp	r2, r3
 800354c:	db87      	blt.n	800345e <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 800354e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003552:	b29b      	uxth	r3, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	3734      	adds	r7, #52	@ 0x34
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b08d      	sub	sp, #52	@ 0x34
 8003564:	af06      	add	r7, sp, #24
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	460b      	mov	r3, r1
 8003570:	80fb      	strh	r3, [r7, #6]
 8003572:	4613      	mov	r3, r2
 8003574:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8003576:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8003582:	1d38      	adds	r0, r7, #4
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800358c:	f7ff feaf 	bl	80032ee <getStringCenter>
 8003590:	e00c      	b.n	80035ac <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 8003592:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 800359e:	1d38      	adds	r0, r7, #4
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80035a8:	f7ff fed6 	bl	8003358 <getStringLeft>
	}
	uint16_t xAdvance = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 80035b4:	bf00      	nop
 80035b6:	8abb      	ldrh	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	82bb      	strh	r3, [r7, #20]
 80035bc:	8abb      	ldrh	r3, [r7, #20]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f6      	bne.n	80035b6 <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 80035c8:	8abb      	ldrh	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	e036      	b.n	800363e <drawStringIntoFramebuffer+0xde>
		if ((stringxpos + xAdvance) > (xstart + framewidth)) {
 80035d0:	88bb      	ldrh	r3, [r7, #4]
 80035d2:	461a      	mov	r2, r3
 80035d4:	8afb      	ldrh	r3, [r7, #22]
 80035d6:	441a      	add	r2, r3
 80035d8:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80035da:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80035dc:	440b      	add	r3, r1
 80035de:	429a      	cmp	r2, r3
 80035e0:	dd0d      	ble.n	80035fe <drawStringIntoFramebuffer+0x9e>
			xAdvance += getCharXadv(buffer[i], font);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fee6 	bl	80033be <getCharXadv>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	8afb      	ldrh	r3, [r7, #22]
 80035f8:	4413      	add	r3, r2
 80035fa:	82fb      	strh	r3, [r7, #22]
			break;
 80035fc:	e022      	b.n	8003644 <drawStringIntoFramebuffer+0xe4>
		}
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	7818      	ldrb	r0, [r3, #0]
 8003606:	88ba      	ldrh	r2, [r7, #4]
 8003608:	8afb      	ldrh	r3, [r7, #22]
 800360a:	4413      	add	r3, r2
 800360c:	b29c      	uxth	r4, r3
 800360e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003610:	88f9      	ldrh	r1, [r7, #6]
 8003612:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003614:	9204      	str	r2, [sp, #16]
 8003616:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003618:	9203      	str	r2, [sp, #12]
 800361a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800361c:	9202      	str	r2, [sp, #8]
 800361e:	2200      	movs	r2, #0
 8003620:	9201      	str	r2, [sp, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4623      	mov	r3, r4
 8003626:	460a      	mov	r2, r1
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	f7ff fee1 	bl	80033f0 <drawCharIntoFramebuffer>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	8afb      	ldrh	r3, [r7, #22]
 8003634:	4413      	add	r3, r2
 8003636:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	3b01      	subs	r3, #1
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	dac5      	bge.n	80035d0 <drawStringIntoFramebuffer+0x70>
	}
	return font->yAdvance;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	7b1b      	ldrb	r3, [r3, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd90      	pop	{r4, r7, pc}

08003650 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8003658:	af00      	add	r7, sp, #0
 800365a:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 800365e:	f5a6 7619 	sub.w	r6, r6, #612	@ 0x264
 8003662:	6030      	str	r0, [r6, #0]
 8003664:	460e      	mov	r6, r1
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800366e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003672:	4632      	mov	r2, r6
 8003674:	801a      	strh	r2, [r3, #0]
 8003676:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800367a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800367e:	4602      	mov	r2, r0
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003686:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800368a:	460a      	mov	r2, r1
 800368c:	801a      	strh	r2, [r3, #0]
 800368e:	466b      	mov	r3, sp
 8003690:	469a      	mov	sl, r3
	length = 400;
 8003692:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003696:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800369a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800369e:	801a      	strh	r2, [r3, #0]
	height = 215;
 80036a0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036a4:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80036a8:	22d7      	movs	r2, #215	@ 0xd7
 80036aa:	801a      	strh	r2, [r3, #0]
	if (positioning & CENTER_OBJECT) {
 80036ac:	f897 3294 	ldrb.w	r3, [r7, #660]	@ 0x294
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00f      	beq.n	80036d8 <drawImageIntoFramebuffer+0x88>
		 getRectCenter(&x, &y, length, height);
 80036b8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036bc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80036c0:	8819      	ldrh	r1, [r3, #0]
 80036c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036c6:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	1db8      	adds	r0, r7, #6
 80036ce:	460b      	mov	r3, r1
 80036d0:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80036d4:	f7ff fd20 	bl	8003118 <getRectCenter>
	}
	FIL newfile;
	FRESULT fresult = f_open(&newfile, image, FA_READ);
 80036d8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80036e0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80036e4:	2201      	movs	r2, #1
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	f00b f80a 	bl	800e700 <f_open>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (fresult == FR_OK) {
 80036f2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <drawImageIntoFramebuffer+0xb2>
		USB_Println("the file was opened good\n");
 80036fa:	487e      	ldr	r0, [pc, #504]	@ (80038f4 <drawImageIntoFramebuffer+0x2a4>)
 80036fc:	f7fe fe66 	bl	80023cc <USB_Println>
 8003700:	e007      	b.n	8003712 <drawImageIntoFramebuffer+0xc2>
	} else {
		USB_Println("failure to open %s\n", image);
 8003702:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003706:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	487a      	ldr	r0, [pc, #488]	@ (80038f8 <drawImageIntoFramebuffer+0x2a8>)
 800370e:	f7fe fe5d 	bl	80023cc <USB_Println>
	}
	uint16_t readbuffer[height];
 8003712:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003716:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800371a:	881e      	ldrh	r6, [r3, #0]
 800371c:	4633      	mov	r3, r6
 800371e:	3b01      	subs	r3, #1
 8003720:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8003724:	b2b3      	uxth	r3, r6
 8003726:	2200      	movs	r2, #0
 8003728:	4698      	mov	r8, r3
 800372a:	4691      	mov	r9, r2
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003738:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800373c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003740:	b2b3      	uxth	r3, r6
 8003742:	2200      	movs	r2, #0
 8003744:	461c      	mov	r4, r3
 8003746:	4615      	mov	r5, r2
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	012b      	lsls	r3, r5, #4
 8003752:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003756:	0122      	lsls	r2, r4, #4
 8003758:	4633      	mov	r3, r6
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	3307      	adds	r3, #7
 800375e:	08db      	lsrs	r3, r3, #3
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	ebad 0d03 	sub.w	sp, sp, r3
 8003766:	466b      	mov	r3, sp
 8003768:	3301      	adds	r3, #1
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	unsigned int br = 0;
 8003772:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003776:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
	for (int xx = x; xx < x + length; xx++) {
 800377e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003782:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800378c:	e093      	b.n	80038b6 <drawImageIntoFramebuffer+0x266>
		f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 800378e:	4633      	mov	r3, r6
 8003790:	005a      	lsls	r2, r3, #1
 8003792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003796:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800379a:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 800379e:	f00b f969 	bl	800ea74 <f_read>
		if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 80037a2:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 80037a6:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bfac      	ite	ge
 80037ae:	2301      	movge	r3, #1
 80037b0:	2300      	movlt	r3, #0
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	f8b7 12a0 	ldrh.w	r1, [r7, #672]	@ 0x2a0
 80037b8:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 80037bc:	440b      	add	r3, r1
 80037be:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 80037c2:	4299      	cmp	r1, r3
 80037c4:	bfb4      	ite	lt
 80037c6:	2301      	movlt	r3, #1
 80037c8:	2300      	movge	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4013      	ands	r3, r2
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d062      	beq.n	800389a <drawImageIntoFramebuffer+0x24a>
			for (int i = 0; i < height; i++) {
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80037da:	e055      	b.n	8003888 <drawImageIntoFramebuffer+0x238>
				//USB_Println("writing to screen, x:%d, y:%d\n",xx, y + i);
				int coordinate = ((xx - xstart) * SCREEN_HEIGHT) + y + i;
 80037dc:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 80037e0:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80037e4:	1ad2      	subs	r2, r2, r3
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	461a      	mov	r2, r3
 80037f0:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 80037f4:	4413      	add	r3, r2
 80037f6:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80037fa:	4413      	add	r3, r2
 80037fc:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
				char whatbuffer[20];
				itoa(coordinate, whatbuffer, 10);
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	220a      	movs	r2, #10
 8003806:	4619      	mov	r1, r3
 8003808:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 800380c:	f00c f8c3 	bl	800f996 <itoa>
				strncat(whatbuffer, "\n", 10);
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fce3 	bl	80001e0 <strlen>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	f107 0310 	add.w	r3, r7, #16
 8003822:	4413      	add	r3, r2
 8003824:	4935      	ldr	r1, [pc, #212]	@ (80038fc <drawImageIntoFramebuffer+0x2ac>)
 8003826:	461a      	mov	r2, r3
 8003828:	460b      	mov	r3, r1
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)whatbuffer, strlen(whatbuffer));
 800382e:	f107 0310 	add.w	r3, r7, #16
 8003832:	4618      	mov	r0, r3
 8003834:	f7fc fcd4 	bl	80001e0 <strlen>
 8003838:	4603      	mov	r3, r0
 800383a:	b29a      	uxth	r2, r3
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f00b fc18 	bl	800f078 <CDC_Transmit_FS>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + y + i] = readbuffer[i];
 8003848:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 800384c:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003850:	1ad2      	subs	r2, r2, r3
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	019b      	lsls	r3, r3, #6
 800385a:	461a      	mov	r2, r3
 800385c:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8003860:	441a      	add	r2, r3
 8003862:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003866:	4413      	add	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 800386e:	4413      	add	r3, r2
 8003870:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8003874:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 8003878:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800387c:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < height; i++) {
 800387e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003882:	3301      	adds	r3, #1
 8003884:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003888:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800388c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8003896:	429a      	cmp	r2, r3
 8003898:	dba0      	blt.n	80037dc <drawImageIntoFramebuffer+0x18c>
			}
		}
		if (xx > (xstart + framewidth)) {
 800389a:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 800389e:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 80038a2:	4413      	add	r3, r2
 80038a4:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80038a8:	429a      	cmp	r2, r3
 80038aa:	dc16      	bgt.n	80038da <drawImageIntoFramebuffer+0x28a>
	for (int xx = x; xx < x + length; xx++) {
 80038ac:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80038b0:	3301      	adds	r3, #1
 80038b2:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 80038b6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80038ba:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80038c6:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	f6ff af5b 	blt.w	800378e <drawImageIntoFramebuffer+0x13e>
 80038d8:	e000      	b.n	80038dc <drawImageIntoFramebuffer+0x28c>
			break;
 80038da:	bf00      	nop
		}
	}
	f_close(&newfile);
 80038dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038e0:	4618      	mov	r0, r3
 80038e2:	f00b fa84 	bl	800edee <f_close>
 80038e6:	46d5      	mov	sp, sl
}
 80038e8:	bf00      	nop
 80038ea:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80038ee:	46bd      	mov	sp, r7
 80038f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f4:	080105d8 	.word	0x080105d8
 80038f8:	080105f4 	.word	0x080105f4
 80038fc:	08010608 	.word	0x08010608

08003900 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af04      	add	r7, sp, #16
 8003906:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 8003908:	220a      	movs	r2, #10
 800390a:	490f      	ldr	r1, [pc, #60]	@ (8003948 <setrpmdata+0x48>)
 800390c:	480f      	ldr	r0, [pc, #60]	@ (800394c <setrpmdata+0x4c>)
 800390e:	f00c f99a 	bl	800fc46 <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 8003912:	220a      	movs	r2, #10
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	480d      	ldr	r0, [pc, #52]	@ (800394c <setrpmdata+0x4c>)
 8003918:	f00c f982 	bl	800fc20 <strncat>
	((StringObject*)otherobjects[0])->updateString(rpmresult, NO_CENTER_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 200, 260, 1);
 800391c:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <setrpmdata+0x50>)
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	2301      	movs	r3, #1
 8003922:	9303      	str	r3, [sp, #12]
 8003924:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003928:	9302      	str	r3, [sp, #8]
 800392a:	23c8      	movs	r3, #200	@ 0xc8
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <setrpmdata+0x54>)
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003936:	2200      	movs	r2, #0
 8003938:	4904      	ldr	r1, [pc, #16]	@ (800394c <setrpmdata+0x4c>)
 800393a:	f7ff f84b 	bl	80029d4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	08010618 	.word	0x08010618
 800394c:	200003a0 	.word	0x200003a0
 8003950:	200003f0 	.word	0x200003f0
 8003954:	08013964 	.word	0x08013964

08003958 <settempdata>:

void settempdata(char *tempvalue) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af04      	add	r7, sp, #16
 800395e:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 8003960:	220a      	movs	r2, #10
 8003962:	490f      	ldr	r1, [pc, #60]	@ (80039a0 <settempdata+0x48>)
 8003964:	480f      	ldr	r0, [pc, #60]	@ (80039a4 <settempdata+0x4c>)
 8003966:	f00c f96e 	bl	800fc46 <strncpy>
	strncat(tempresult, tempvalue, 10);
 800396a:	220a      	movs	r2, #10
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	480d      	ldr	r0, [pc, #52]	@ (80039a4 <settempdata+0x4c>)
 8003970:	f00c f956 	bl	800fc20 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <settempdata+0x50>)
 8003976:	6858      	ldr	r0, [r3, #4]
 8003978:	2303      	movs	r3, #3
 800397a:	9303      	str	r3, [sp, #12]
 800397c:	2364      	movs	r3, #100	@ 0x64
 800397e:	9302      	str	r3, [sp, #8]
 8003980:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <settempdata+0x54>)
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800398e:	2202      	movs	r2, #2
 8003990:	4904      	ldr	r1, [pc, #16]	@ (80039a4 <settempdata+0x4c>)
 8003992:	f7ff f81f 	bl	80029d4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	08010618 	.word	0x08010618
 80039a4:	200003b4 	.word	0x200003b4
 80039a8:	200003f0 	.word	0x200003f0
 80039ac:	08011b0c 	.word	0x08011b0c

080039b0 <setgeardata>:

void setgeardata(char *gearvalue) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af04      	add	r7, sp, #16
 80039b6:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 80039b8:	220a      	movs	r2, #10
 80039ba:	490e      	ldr	r1, [pc, #56]	@ (80039f4 <setgeardata+0x44>)
 80039bc:	480e      	ldr	r0, [pc, #56]	@ (80039f8 <setgeardata+0x48>)
 80039be:	f00c f942 	bl	800fc46 <strncpy>
	strncat(gearresult, gearvalue, 10);
 80039c2:	220a      	movs	r2, #10
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	480c      	ldr	r0, [pc, #48]	@ (80039f8 <setgeardata+0x48>)
 80039c8:	f00c f92a 	bl	800fc20 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <setgeardata+0x4c>)
 80039ce:	68d8      	ldr	r0, [r3, #12]
 80039d0:	2302      	movs	r3, #2
 80039d2:	9303      	str	r3, [sp, #12]
 80039d4:	23f0      	movs	r3, #240	@ 0xf0
 80039d6:	9302      	str	r3, [sp, #8]
 80039d8:	2364      	movs	r3, #100	@ 0x64
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <setgeardata+0x50>)
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039e4:	2202      	movs	r2, #2
 80039e6:	4904      	ldr	r1, [pc, #16]	@ (80039f8 <setgeardata+0x48>)
 80039e8:	f7fe fff4 	bl	80029d4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	08010618 	.word	0x08010618
 80039f8:	20000008 	.word	0x20000008
 80039fc:	200003f0 	.word	0x200003f0
 8003a00:	08017d70 	.word	0x08017d70

08003a04 <setbattdata>:

void setbattdata(char *battvalue) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af04      	add	r7, sp, #16
 8003a0a:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 8003a0c:	220a      	movs	r2, #10
 8003a0e:	490f      	ldr	r1, [pc, #60]	@ (8003a4c <setbattdata+0x48>)
 8003a10:	480f      	ldr	r0, [pc, #60]	@ (8003a50 <setbattdata+0x4c>)
 8003a12:	f00c f918 	bl	800fc46 <strncpy>
	strncat(battresult, battvalue, 10);
 8003a16:	220a      	movs	r2, #10
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	480d      	ldr	r0, [pc, #52]	@ (8003a50 <setbattdata+0x4c>)
 8003a1c:	f00c f900 	bl	800fc20 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 8003a20:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <setbattdata+0x50>)
 8003a22:	6898      	ldr	r0, [r3, #8]
 8003a24:	2306      	movs	r3, #6
 8003a26:	9303      	str	r3, [sp, #12]
 8003a28:	233c      	movs	r3, #60	@ 0x3c
 8003a2a:	9302      	str	r3, [sp, #8]
 8003a2c:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <setbattdata+0x54>)
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	4904      	ldr	r1, [pc, #16]	@ (8003a50 <setbattdata+0x4c>)
 8003a3e:	f7fe ffc9 	bl	80029d4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08010618 	.word	0x08010618
 8003a50:	200003dc 	.word	0x200003dc
 8003a54:	200003f0 	.word	0x200003f0
 8003a58:	08011b0c 	.word	0x08011b0c

08003a5c <setspeeddata>:

void setspeeddata(char *speedvalue) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af04      	add	r7, sp, #16
 8003a62:	6078      	str	r0, [r7, #4]
	strncpy(speedresult, "", 10);
 8003a64:	220a      	movs	r2, #10
 8003a66:	490f      	ldr	r1, [pc, #60]	@ (8003aa4 <setspeeddata+0x48>)
 8003a68:	480f      	ldr	r0, [pc, #60]	@ (8003aa8 <setspeeddata+0x4c>)
 8003a6a:	f00c f8ec 	bl	800fc46 <strncpy>
	strncat(speedresult, speedvalue, 10);
 8003a6e:	220a      	movs	r2, #10
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	480d      	ldr	r0, [pc, #52]	@ (8003aa8 <setspeeddata+0x4c>)
 8003a74:	f00c f8d4 	bl	800fc20 <strncat>
	((StringObject*)otherobjects[6])->updateString(speedresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 375, 185, 7);
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <setspeeddata+0x50>)
 8003a7a:	6998      	ldr	r0, [r3, #24]
 8003a7c:	2307      	movs	r3, #7
 8003a7e:	9303      	str	r3, [sp, #12]
 8003a80:	23b9      	movs	r3, #185	@ 0xb9
 8003a82:	9302      	str	r3, [sp, #8]
 8003a84:	f240 1377 	movw	r3, #375	@ 0x177
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <setspeeddata+0x54>)
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a92:	2201      	movs	r2, #1
 8003a94:	4904      	ldr	r1, [pc, #16]	@ (8003aa8 <setspeeddata+0x4c>)
 8003a96:	f7fe ff9d 	bl	80029d4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08010618 	.word	0x08010618
 8003aa8:	200003c8 	.word	0x200003c8
 8003aac:	200003f0 	.word	0x200003f0
 8003ab0:	08011b0c 	.word	0x08011b0c

08003ab4 <domainscreen>:

void domainscreen() {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 8003ab8:	4804      	ldr	r0, [pc, #16]	@ (8003acc <domainscreen+0x18>)
 8003aba:	f7fe fd1d 	bl	80024f8 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 10);
 8003abe:	220a      	movs	r2, #10
 8003ac0:	4903      	ldr	r1, [pc, #12]	@ (8003ad0 <domainscreen+0x1c>)
 8003ac2:	4802      	ldr	r0, [pc, #8]	@ (8003acc <domainscreen+0x18>)
 8003ac4:	f7fe fce4 	bl	8002490 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000418 	.word	0x20000418
 8003ad0:	200003f0 	.word	0x200003f0

08003ad4 <_Z41__static_initialization_and_destruction_0ii>:

void dosplashscene() {
	splashScene.drawScene();
	splashScene.setScene(splashobjects, 1);
}
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af04      	add	r7, sp, #16
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	f040 810d 	bne.w	8003d00 <_Z41__static_initialization_and_destruction_0ii+0x22c>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aec:	4293      	cmp	r3, r2
 8003aee:	f040 8107 	bne.w	8003d00 <_Z41__static_initialization_and_destruction_0ii+0x22c>
		new StringObject(200, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, NO_CENTER_OBJECT, rpmresult, 1),
 8003af2:	2018      	movs	r0, #24
 8003af4:	f00b ff14 	bl	800f920 <_Znwj>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461c      	mov	r4, r3
 8003afc:	2301      	movs	r3, #1
 8003afe:	9303      	str	r3, [sp, #12]
 8003b00:	4b81      	ldr	r3, [pc, #516]	@ (8003d08 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003b02:	9302      	str	r3, [sp, #8]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	4b80      	ldr	r3, [pc, #512]	@ (8003d0c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b14:	21c8      	movs	r1, #200	@ 0xc8
 8003b16:	4620      	mov	r0, r4
 8003b18:	f7fe feea 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b1c:	4b7c      	ldr	r3, [pc, #496]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b1e:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 8003b20:	2018      	movs	r0, #24
 8003b22:	f00b fefd 	bl	800f920 <_Znwj>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461c      	mov	r4, r3
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	9303      	str	r3, [sp, #12]
 8003b2e:	4b79      	ldr	r3, [pc, #484]	@ (8003d14 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003b30:	9302      	str	r3, [sp, #8]
 8003b32:	2302      	movs	r3, #2
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	4b78      	ldr	r3, [pc, #480]	@ (8003d18 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b3e:	2264      	movs	r2, #100	@ 0x64
 8003b40:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003b44:	4620      	mov	r0, r4
 8003b46:	f7fe fed3 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b4a:	4b71      	ldr	r3, [pc, #452]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b4c:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 8003b4e:	2018      	movs	r0, #24
 8003b50:	f00b fee6 	bl	800f920 <_Znwj>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461c      	mov	r4, r3
 8003b58:	2306      	movs	r3, #6
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d1c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	2302      	movs	r3, #2
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	4b6c      	ldr	r3, [pc, #432]	@ (8003d18 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b6c:	223c      	movs	r2, #60	@ 0x3c
 8003b6e:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003b72:	4620      	mov	r0, r4
 8003b74:	f7fe febc 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b78:	4b65      	ldr	r3, [pc, #404]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b7a:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 8003b7c:	2018      	movs	r0, #24
 8003b7e:	f00b fecf 	bl	800f920 <_Znwj>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461c      	mov	r4, r3
 8003b86:	2302      	movs	r3, #2
 8003b88:	9303      	str	r3, [sp, #12]
 8003b8a:	4b65      	ldr	r3, [pc, #404]	@ (8003d20 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	2302      	movs	r3, #2
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	4b64      	ldr	r3, [pc, #400]	@ (8003d24 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b9a:	22f0      	movs	r2, #240	@ 0xf0
 8003b9c:	2164      	movs	r1, #100	@ 0x64
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f7fe fea6 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003ba6:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 8003ba8:	2018      	movs	r0, #24
 8003baa:	f00b feb9 	bl	800f920 <_Znwj>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461c      	mov	r4, r3
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	9303      	str	r3, [sp, #12]
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d28 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003bb8:	9302      	str	r3, [sp, #8]
 8003bba:	2302      	movs	r3, #2
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8003d2c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bc6:	2282      	movs	r2, #130	@ 0x82
 8003bc8:	f240 118b 	movw	r1, #395	@ 0x18b
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f7fe fe8f 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003bd4:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5),
 8003bd6:	2018      	movs	r0, #24
 8003bd8:	f00b fea2 	bl	800f920 <_Znwj>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461c      	mov	r4, r3
 8003be0:	2305      	movs	r3, #5
 8003be2:	9303      	str	r3, [sp, #12]
 8003be4:	4b52      	ldr	r3, [pc, #328]	@ (8003d30 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8003be6:	9302      	str	r3, [sp, #8]
 8003be8:	2302      	movs	r3, #2
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	4b4f      	ldr	r3, [pc, #316]	@ (8003d2c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bf4:	225a      	movs	r2, #90	@ 0x5a
 8003bf6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7fe fe78 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003c00:	4b43      	ldr	r3, [pc, #268]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c02:	615c      	str	r4, [r3, #20]
		new StringObject(375, 185, 0xFFFF, FREE_SANS_18PT7B, LEFTDRAW_OBJECT, speedresult, 7),
 8003c04:	2018      	movs	r0, #24
 8003c06:	f00b fe8b 	bl	800f920 <_Znwj>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461c      	mov	r4, r3
 8003c0e:	2307      	movs	r3, #7
 8003c10:	9303      	str	r3, [sp, #12]
 8003c12:	4b48      	ldr	r3, [pc, #288]	@ (8003d34 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003c14:	9302      	str	r3, [sp, #8]
 8003c16:	2301      	movs	r3, #1
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c22:	22b9      	movs	r2, #185	@ 0xb9
 8003c24:	f240 1177 	movw	r1, #375	@ 0x177
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7fe fe61 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003c2e:	4b38      	ldr	r3, [pc, #224]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c30:	619c      	str	r4, [r3, #24]
		new StringObject(440, 288, 0xFFFF, ICONFONT, LEFTDRAW_OBJECT, rpmicon, 8),
 8003c32:	2018      	movs	r0, #24
 8003c34:	f00b fe74 	bl	800f920 <_Znwj>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461c      	mov	r4, r3
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	9303      	str	r3, [sp, #12]
 8003c40:	4b3d      	ldr	r3, [pc, #244]	@ (8003d38 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8003c42:	9302      	str	r3, [sp, #8]
 8003c44:	2301      	movs	r3, #1
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	4b38      	ldr	r3, [pc, #224]	@ (8003d2c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c50:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8003c54:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f7fe fe49 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c60:	61dc      	str	r4, [r3, #28]
		new OutlineRectObject(190, 250, 260, 55, 0xFFFF, NO_CENTER_OBJECT, 9),
 8003c62:	2014      	movs	r0, #20
 8003c64:	f00b fe5c 	bl	800f920 <_Znwj>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461c      	mov	r4, r3
 8003c6c:	2309      	movs	r3, #9
 8003c6e:	9303      	str	r3, [sp, #12]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9302      	str	r3, [sp, #8]
 8003c74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	2337      	movs	r3, #55	@ 0x37
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003c82:	22fa      	movs	r2, #250	@ 0xfa
 8003c84:	21be      	movs	r1, #190	@ 0xbe
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7fe fed6 	bl	8002a38 <_ZN17OutlineRectObjectC1Ettttthh>
};
 8003c8c:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c8e:	621c      	str	r4, [r3, #32]
		new StringObject(405, 210, 0xFFFF, ICONFONT, CENTER_OBJECT, speedicon, 10)
 8003c90:	2018      	movs	r0, #24
 8003c92:	f00b fe45 	bl	800f920 <_Znwj>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461c      	mov	r4, r3
 8003c9a:	230a      	movs	r3, #10
 8003c9c:	9303      	str	r3, [sp, #12]
 8003c9e:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8003ca0:	9302      	str	r3, [sp, #8]
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cae:	22d2      	movs	r2, #210	@ 0xd2
 8003cb0:	f240 1195 	movw	r1, #405	@ 0x195
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f7fe fe1b 	bl	80028f0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003cbc:	625c      	str	r4, [r3, #36]	@ 0x24
Scene myScene2(otherobjects, 6);
 8003cbe:	2206      	movs	r2, #6
 8003cc0:	4913      	ldr	r1, [pc, #76]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003cc2:	481f      	ldr	r0, [pc, #124]	@ (8003d40 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003cc4:	f7fe fbd2 	bl	800246c <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003cc8:	2014      	movs	r0, #20
 8003cca:	f00b fe29 	bl	800f920 <_Znwj>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461c      	mov	r4, r3
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d44 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	9303      	str	r3, [sp, #12]
 8003cda:	2302      	movs	r3, #2
 8003cdc:	9302      	str	r3, [sp, #8]
 8003cde:	23a0      	movs	r3, #160	@ 0xa0
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	23f0      	movs	r3, #240	@ 0xf0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	23d7      	movs	r3, #215	@ 0xd7
 8003ce8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7fe ff15 	bl	8002b1c <_ZN11ImageObjectC1EPctttthh>
};
 8003cf2:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003cf4:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	4913      	ldr	r1, [pc, #76]	@ (8003d48 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003cfa:	4814      	ldr	r0, [pc, #80]	@ (8003d4c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8003cfc:	f7fe fbb6 	bl	800246c <_ZN5SceneC1EPP13DisplayObjecth>
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd90      	pop	{r4, r7, pc}
 8003d08:	200003a0 	.word	0x200003a0
 8003d0c:	08013964 	.word	0x08013964
 8003d10:	200003f0 	.word	0x200003f0
 8003d14:	200003b4 	.word	0x200003b4
 8003d18:	08011b0c 	.word	0x08011b0c
 8003d1c:	200003dc 	.word	0x200003dc
 8003d20:	20000008 	.word	0x20000008
 8003d24:	08017d70 	.word	0x08017d70
 8003d28:	2000001c 	.word	0x2000001c
 8003d2c:	0801812c 	.word	0x0801812c
 8003d30:	20000020 	.word	0x20000020
 8003d34:	200003c8 	.word	0x200003c8
 8003d38:	20000024 	.word	0x20000024
 8003d3c:	20000028 	.word	0x20000028
 8003d40:	20000418 	.word	0x20000418
 8003d44:	2000002c 	.word	0x2000002c
 8003d48:	20000420 	.word	0x20000420
 8003d4c:	20000424 	.word	0x20000424

08003d50 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7ff febb 	bl	8003ad4 <_Z41__static_initialization_and_destruction_0ii>
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	7e3a      	ldrb	r2, [r7, #24]
 8003d78:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]
    endSPI();
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f839 	bl	8003dfe <_ZN7MCP25156endSPIEv>
}
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	1cf9      	adds	r1, r7, #3
 8003dac:	2201      	movs	r2, #1
 8003dae:	f003 fc38 	bl	8007622 <HAL_SPI_Transmit>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f107 010f 	add.w	r1, r7, #15
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f003 fd6b 	bl	80078aa <HAL_SPI_Receive>
	return retVal;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6898      	ldr	r0, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7b1b      	ldrb	r3, [r3, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	4619      	mov	r1, r3
 8003df2:	f001 fcd9 	bl	80057a8 <HAL_GPIO_WritePin>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6898      	ldr	r0, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7b1b      	ldrb	r3, [r3, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4619      	mov	r1, r3
 8003e12:	f001 fcc9 	bl	80057a8 <HAL_GPIO_WritePin>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	@ 0x30
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	startSPI();
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ffd8 	bl	8003dde <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8003e2e:	21c0      	movs	r1, #192	@ 0xc0
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ffb0 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffe1 	bl	8003dfe <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	220e      	movs	r2, #14
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00b fee3 	bl	800fc10 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8003e4a:	f107 0214 	add.w	r2, r7, #20
 8003e4e:	230e      	movs	r3, #14
 8003e50:	2130      	movs	r1, #48	@ 0x30
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8ec 	bl	8004030 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8003e58:	f107 0214 	add.w	r2, r7, #20
 8003e5c:	230e      	movs	r3, #14
 8003e5e:	2140      	movs	r1, #64	@ 0x40
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8e5 	bl	8004030 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8003e66:	f107 0214 	add.w	r2, r7, #20
 8003e6a:	230e      	movs	r3, #14
 8003e6c:	2150      	movs	r1, #80	@ 0x50
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8de 	bl	8004030 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8003e74:	2200      	movs	r2, #0
 8003e76:	2160      	movs	r1, #96	@ 0x60
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f8b9 	bl	8003ff0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2170      	movs	r1, #112	@ 0x70
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8b4 	bl	8003ff0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8003e88:	22a3      	movs	r2, #163	@ 0xa3
 8003e8a:	212b      	movs	r1, #43	@ 0x2b
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8af 	bl	8003ff0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8003e92:	2304      	movs	r3, #4
 8003e94:	2267      	movs	r2, #103	@ 0x67
 8003e96:	2160      	movs	r1, #96	@ 0x60
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f8f8 	bl	800408e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	2267      	movs	r2, #103	@ 0x67
 8003ea2:	2170      	movs	r1, #112	@ 0x70
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8f2 	bl	800408e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003eaa:	4a29      	ldr	r2, [pc, #164]	@ (8003f50 <_ZN7MCP25155resetEv+0x130>)
 8003eac:	f107 030c 	add.w	r3, r7, #12
 8003eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003eb4:	6018      	str	r0, [r3, #0]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ebe:	e01e      	b.n	8003efe <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003ece:	f107 020c 	add.w	r2, r7, #12
 8003ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed4:	4413      	add	r3, r2
 8003ed6:	7819      	ldrb	r1, [r3, #0]
 8003ed8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003edc:	2300      	movs	r3, #0
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fbcc 	bl	800467c <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003eea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003ef2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ef6:	e027      	b.n	8003f48 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efa:	3301      	adds	r3, #1
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	dddd      	ble.n	8003ec0 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003f04:	2300      	movs	r3, #0
 8003f06:	723b      	strb	r3, [r7, #8]
 8003f08:	2301      	movs	r3, #1
 8003f0a:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f10:	e016      	b.n	8003f40 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003f12:	f107 0208 	add.w	r2, r7, #8
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	4413      	add	r3, r2
 8003f1a:	7819      	ldrb	r1, [r3, #0]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2201      	movs	r2, #1
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fb77 	bl	8004614 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f38:	e006      	b.n	8003f48 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	dde5      	ble.n	8003f12 <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	@ 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	0801061c 	.word	0x0801061c

08003f54 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff3c 	bl	8003dde <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003f66:	2103      	movs	r1, #3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ff14 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	4619      	mov	r1, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ff0f 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff1e 	bl	8003dba <_ZN7MCP25156SPI_RxEv>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff3b 	bl	8003dfe <_ZN7MCP25156endSPIEv>

    return ret;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003f92:	b590      	push	{r4, r7, lr}
 8003f94:	b087      	sub	sp, #28
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	72fb      	strb	r3, [r7, #11]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff ff19 	bl	8003dde <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003fac:	2103      	movs	r1, #3
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7ff fef1 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003fb4:	7afb      	ldrb	r3, [r7, #11]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff feec 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]
 8003fc2:	e00a      	b.n	8003fda <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	18d4      	adds	r4, r2, r3
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff fef5 	bl	8003dba <_ZN7MCP25156SPI_RxEv>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
 8003fda:	7dfa      	ldrb	r2, [r7, #23]
 8003fdc:	7abb      	ldrb	r3, [r7, #10]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d3f0      	bcc.n	8003fc4 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7ff ff0b 	bl	8003dfe <_ZN7MCP25156endSPIEv>
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}

08003ff0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff feec 	bl	8003dde <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8004006:	2102      	movs	r1, #2
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fec4 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff febf 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8004018:	78bb      	ldrb	r3, [r7, #2]
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff feba 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff feeb 	bl	8003dfe <_ZN7MCP25156endSPIEv>
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	461a      	mov	r2, r3
 800403c:	460b      	mov	r3, r1
 800403e:	72fb      	strb	r3, [r7, #11]
 8004040:	4613      	mov	r3, r2
 8004042:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff feca 	bl	8003dde <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 800404a:	2102      	movs	r1, #2
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff fea2 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8004052:	7afb      	ldrb	r3, [r7, #11]
 8004054:	4619      	mov	r1, r3
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff fe9d 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 800405c:	2300      	movs	r3, #0
 800405e:	75fb      	strb	r3, [r7, #23]
 8004060:	e00a      	b.n	8004078 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8004062:	7dfb      	ldrb	r3, [r7, #23]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	4619      	mov	r1, r3
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff fe92 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	3301      	adds	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
 8004078:	7dfa      	ldrb	r2, [r7, #23]
 800407a:	7abb      	ldrb	r3, [r7, #10]
 800407c:	429a      	cmp	r2, r3
 800407e:	d3f0      	bcc.n	8004062 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff febc 	bl	8003dfe <_ZN7MCP25156endSPIEv>
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	4608      	mov	r0, r1
 8004098:	4611      	mov	r1, r2
 800409a:	461a      	mov	r2, r3
 800409c:	4603      	mov	r3, r0
 800409e:	70fb      	strb	r3, [r7, #3]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70bb      	strb	r3, [r7, #2]
 80040a4:	4613      	mov	r3, r2
 80040a6:	707b      	strb	r3, [r7, #1]
    startSPI();
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fe98 	bl	8003dde <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 80040ae:	2105      	movs	r1, #5
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fe70 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fe6b 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 80040c0:	78bb      	ldrb	r3, [r7, #2]
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fe66 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 80040ca:	787b      	ldrb	r3, [r7, #1]
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fe61 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fe92 	bl	8003dfe <_ZN7MCP25156endSPIEv>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
    startSPI();
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fe77 	bl	8003dde <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 80040f0:	21a0      	movs	r1, #160	@ 0xa0
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fe4f 	bl	8003d96 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fe5e 	bl	8003dba <_ZN7MCP25156SPI_RxEv>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe7b 	bl	8003dfe <_ZN7MCP25156endSPIEv>

    return i;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 800411a:	2180      	movs	r1, #128	@ 0x80
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f812 	bl	8004146 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8004122:	4603      	mov	r3, r0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8004134:	2100      	movs	r1, #0
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f805 	bl	8004146 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	460b      	mov	r3, r1
 8004150:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	22e0      	movs	r2, #224	@ 0xe0
 8004156:	210f      	movs	r1, #15
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff98 	bl	800408e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 800415e:	f000 fccb 	bl	8004af8 <HAL_GetTick>
 8004162:	4603      	mov	r3, r0
 8004164:	330a      	adds	r3, #10
 8004166:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8004168:	2300      	movs	r3, #0
 800416a:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 800416c:	e013      	b.n	8004196 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 800416e:	210e      	movs	r1, #14
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff feef 	bl	8003f54 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004176:	4603      	mov	r3, r0
 8004178:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	f023 031f 	bic.w	r3, r3, #31
 8004180:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	429a      	cmp	r2, r3
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8004196:	f000 fcaf 	bl	8004af8 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4293      	cmp	r3, r2
 80041a0:	bf8c      	ite	hi
 80041a2:	2301      	movhi	r3, #1
 80041a4:	2300      	movls	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e0      	bne.n	800416e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 80041ac:	e000      	b.n	80041b0 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 80041ae:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 80041ba:	2301      	movs	r3, #1

}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
 80041d0:	4613      	mov	r3, r2
 80041d2:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff9c 	bl	8004112 <_ZN7MCP251513setConfigModeEv>
 80041da:	4603      	mov	r3, r0
 80041dc:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 80041de:	7afb      	ldrb	r3, [r7, #11]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	e1b5      	b.n	8004554 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 80041ec:	78bb      	ldrb	r3, [r7, #2]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d009      	beq.n	8004206 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	f300 8193 	bgt.w	800451e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 811f 	beq.w	800443c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 80041fe:	2b01      	cmp	r3, #1
 8004200:	f000 808e 	beq.w	8004320 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8004204:	e18b      	b.n	800451e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	2b0f      	cmp	r3, #15
 800420a:	f200 8085 	bhi.w	8004318 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 800420e:	a201      	add	r2, pc, #4	@ (adr r2, 8004214 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004255 	.word	0x08004255
 8004218:	08004263 	.word	0x08004263
 800421c:	08004271 	.word	0x08004271
 8004220:	0800427f 	.word	0x0800427f
 8004224:	0800428d 	.word	0x0800428d
 8004228:	0800429b 	.word	0x0800429b
 800422c:	080042a9 	.word	0x080042a9
 8004230:	080042b7 	.word	0x080042b7
 8004234:	08004319 	.word	0x08004319
 8004238:	08004319 	.word	0x08004319
 800423c:	080042c5 	.word	0x080042c5
 8004240:	080042d3 	.word	0x080042d3
 8004244:	080042e1 	.word	0x080042e1
 8004248:	080042ef 	.word	0x080042ef
 800424c:	080042fd 	.word	0x080042fd
 8004250:	0800430b 	.word	0x0800430b
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8004254:	231f      	movs	r3, #31
 8004256:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8004258:	23bf      	movs	r3, #191	@ 0xbf
 800425a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 800425c:	2387      	movs	r3, #135	@ 0x87
 800425e:	733b      	strb	r3, [r7, #12]
            break;
 8004260:	e05d      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8004262:	230f      	movs	r3, #15
 8004264:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8004266:	23bf      	movs	r3, #191	@ 0xbf
 8004268:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 800426a:	2387      	movs	r3, #135	@ 0x87
 800426c:	733b      	strb	r3, [r7, #12]
            break;
 800426e:	e056      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8004270:	2307      	movs	r3, #7
 8004272:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8004274:	23bf      	movs	r3, #191	@ 0xbf
 8004276:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8004278:	2387      	movs	r3, #135	@ 0x87
 800427a:	733b      	strb	r3, [r7, #12]
            break;
 800427c:	e04f      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 800427e:	2307      	movs	r3, #7
 8004280:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8004282:	23a4      	movs	r3, #164	@ 0xa4
 8004284:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8004286:	2384      	movs	r3, #132	@ 0x84
 8004288:	733b      	strb	r3, [r7, #12]
            break;
 800428a:	e048      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 800428c:	2347      	movs	r3, #71	@ 0x47
 800428e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8004290:	23e2      	movs	r3, #226	@ 0xe2
 8004292:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8004294:	2385      	movs	r3, #133	@ 0x85
 8004296:	733b      	strb	r3, [r7, #12]
            break;
 8004298:	e041      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 800429a:	2303      	movs	r3, #3
 800429c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 800429e:	23bf      	movs	r3, #191	@ 0xbf
 80042a0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 80042a2:	2387      	movs	r3, #135	@ 0x87
 80042a4:	733b      	strb	r3, [r7, #12]
            break;
 80042a6:	e03a      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 80042a8:	2303      	movs	r3, #3
 80042aa:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 80042ac:	23b4      	movs	r3, #180	@ 0xb4
 80042ae:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 80042b0:	2386      	movs	r3, #134	@ 0x86
 80042b2:	733b      	strb	r3, [r7, #12]
            break;
 80042b4:	e033      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 80042ba:	23bf      	movs	r3, #191	@ 0xbf
 80042bc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 80042be:	2387      	movs	r3, #135	@ 0x87
 80042c0:	733b      	strb	r3, [r7, #12]
            break;
 80042c2:	e02c      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 80042c8:	23b4      	movs	r3, #180	@ 0xb4
 80042ca:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 80042cc:	2386      	movs	r3, #134	@ 0x86
 80042ce:	733b      	strb	r3, [r7, #12]
            break;
 80042d0:	e025      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 80042d6:	23b1      	movs	r3, #177	@ 0xb1
 80042d8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 80042da:	2385      	movs	r3, #133	@ 0x85
 80042dc:	733b      	strb	r3, [r7, #12]
            break;
 80042de:	e01e      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 80042e4:	23b4      	movs	r3, #180	@ 0xb4
 80042e6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 80042e8:	2386      	movs	r3, #134	@ 0x86
 80042ea:	733b      	strb	r3, [r7, #12]
            break;
 80042ec:	e017      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 80042f2:	23b1      	movs	r3, #177	@ 0xb1
 80042f4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 80042f6:	2385      	movs	r3, #133	@ 0x85
 80042f8:	733b      	strb	r3, [r7, #12]
            break;
 80042fa:	e010      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8004300:	2390      	movs	r3, #144	@ 0x90
 8004302:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8004304:	2382      	movs	r3, #130	@ 0x82
 8004306:	733b      	strb	r3, [r7, #12]
            break;
 8004308:	e009      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 800430a:	2300      	movs	r3, #0
 800430c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	733b      	strb	r3, [r7, #12]
            break;
 8004316:	e002      	b.n	800431e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]
            break;
 800431c:	bf00      	nop
        }
        break;
 800431e:	e101      	b.n	8004524 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	2b0f      	cmp	r3, #15
 8004324:	f200 8086 	bhi.w	8004434 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004371 	.word	0x08004371
 8004334:	0800437f 	.word	0x0800437f
 8004338:	0800438d 	.word	0x0800438d
 800433c:	08004435 	.word	0x08004435
 8004340:	0800439b 	.word	0x0800439b
 8004344:	080043a9 	.word	0x080043a9
 8004348:	080043b7 	.word	0x080043b7
 800434c:	080043c5 	.word	0x080043c5
 8004350:	080043d3 	.word	0x080043d3
 8004354:	08004435 	.word	0x08004435
 8004358:	080043e1 	.word	0x080043e1
 800435c:	080043ef 	.word	0x080043ef
 8004360:	080043fd 	.word	0x080043fd
 8004364:	0800440b 	.word	0x0800440b
 8004368:	08004419 	.word	0x08004419
 800436c:	08004427 	.word	0x08004427
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8004370:	233f      	movs	r3, #63	@ 0x3f
 8004372:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8004374:	23ff      	movs	r3, #255	@ 0xff
 8004376:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8004378:	2387      	movs	r3, #135	@ 0x87
 800437a:	733b      	strb	r3, [r7, #12]
            break;
 800437c:	e05d      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 800437e:	231f      	movs	r3, #31
 8004380:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8004382:	23ff      	movs	r3, #255	@ 0xff
 8004384:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8004386:	2387      	movs	r3, #135	@ 0x87
 8004388:	733b      	strb	r3, [r7, #12]
            break;
 800438a:	e056      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 800438c:	230f      	movs	r3, #15
 800438e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8004390:	23ff      	movs	r3, #255	@ 0xff
 8004392:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8004394:	2387      	movs	r3, #135	@ 0x87
 8004396:	733b      	strb	r3, [r7, #12]
            break;
 8004398:	e04f      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 800439a:	234e      	movs	r3, #78	@ 0x4e
 800439c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 800439e:	23f1      	movs	r3, #241	@ 0xf1
 80043a0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 80043a2:	2385      	movs	r3, #133	@ 0x85
 80043a4:	733b      	strb	r3, [r7, #12]
            break;
 80043a6:	e048      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 80043a8:	2307      	movs	r3, #7
 80043aa:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 80043ac:	23ff      	movs	r3, #255	@ 0xff
 80043ae:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 80043b0:	2387      	movs	r3, #135	@ 0x87
 80043b2:	733b      	strb	r3, [r7, #12]
            break;
 80043b4:	e041      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 80043b6:	2307      	movs	r3, #7
 80043b8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 80043ba:	23fa      	movs	r3, #250	@ 0xfa
 80043bc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 80043be:	2387      	movs	r3, #135	@ 0x87
 80043c0:	733b      	strb	r3, [r7, #12]
            break;
 80043c2:	e03a      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 80043c4:	2303      	movs	r3, #3
 80043c6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 80043c8:	23ff      	movs	r3, #255	@ 0xff
 80043ca:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 80043cc:	2387      	movs	r3, #135	@ 0x87
 80043ce:	733b      	strb	r3, [r7, #12]
            break;
 80043d0:	e033      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 80043d2:	2303      	movs	r3, #3
 80043d4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 80043d6:	23be      	movs	r3, #190	@ 0xbe
 80043d8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 80043da:	2307      	movs	r3, #7
 80043dc:	733b      	strb	r3, [r7, #12]
            break;
 80043de:	e02c      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 80043e0:	2303      	movs	r3, #3
 80043e2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 80043e4:	23fa      	movs	r3, #250	@ 0xfa
 80043e6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 80043e8:	2387      	movs	r3, #135	@ 0x87
 80043ea:	733b      	strb	r3, [r7, #12]
            break;
 80043ec:	e025      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 80043ee:	2303      	movs	r3, #3
 80043f0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 80043f2:	23f0      	movs	r3, #240	@ 0xf0
 80043f4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 80043f6:	2386      	movs	r3, #134	@ 0x86
 80043f8:	733b      	strb	r3, [r7, #12]
            break;
 80043fa:	e01e      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8004400:	23fa      	movs	r3, #250	@ 0xfa
 8004402:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8004404:	2387      	movs	r3, #135	@ 0x87
 8004406:	733b      	strb	r3, [r7, #12]
            break;
 8004408:	e017      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 800440a:	2341      	movs	r3, #65	@ 0x41
 800440c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 800440e:	23f1      	movs	r3, #241	@ 0xf1
 8004410:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8004412:	2385      	movs	r3, #133	@ 0x85
 8004414:	733b      	strb	r3, [r7, #12]
            break;
 8004416:	e010      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8004418:	2300      	movs	r3, #0
 800441a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 800441c:	23f0      	movs	r3, #240	@ 0xf0
 800441e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8004420:	2386      	movs	r3, #134	@ 0x86
 8004422:	733b      	strb	r3, [r7, #12]
            break;
 8004424:	e009      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8004426:	2300      	movs	r3, #0
 8004428:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 800442a:	23d0      	movs	r3, #208	@ 0xd0
 800442c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 800442e:	2382      	movs	r3, #130	@ 0x82
 8004430:	733b      	strb	r3, [r7, #12]
            break;
 8004432:	e002      	b.n	800443a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]
            break;
 8004438:	bf00      	nop
        }
        break;
 800443a:	e073      	b.n	8004524 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	3b04      	subs	r3, #4
 8004440:	2b0b      	cmp	r3, #11
 8004442:	d868      	bhi.n	8004516 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8004444:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	0800447d 	.word	0x0800447d
 8004450:	0800448b 	.word	0x0800448b
 8004454:	08004499 	.word	0x08004499
 8004458:	080044a7 	.word	0x080044a7
 800445c:	080044b5 	.word	0x080044b5
 8004460:	08004517 	.word	0x08004517
 8004464:	080044c3 	.word	0x080044c3
 8004468:	080044d1 	.word	0x080044d1
 800446c:	080044df 	.word	0x080044df
 8004470:	080044ed 	.word	0x080044ed
 8004474:	080044fb 	.word	0x080044fb
 8004478:	08004509 	.word	0x08004509
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 800447c:	230b      	movs	r3, #11
 800447e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8004480:	23ff      	movs	r3, #255	@ 0xff
 8004482:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8004484:	2387      	movs	r3, #135	@ 0x87
 8004486:	733b      	strb	r3, [r7, #12]
	    break;
 8004488:	e048      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 800448a:	2309      	movs	r3, #9
 800448c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 800448e:	23ff      	movs	r3, #255	@ 0xff
 8004490:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8004492:	2387      	movs	r3, #135	@ 0x87
 8004494:	733b      	strb	r3, [r7, #12]
            break;
 8004496:	e041      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8004498:	2309      	movs	r3, #9
 800449a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 800449c:	23fa      	movs	r3, #250	@ 0xfa
 800449e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 80044a0:	2387      	movs	r3, #135	@ 0x87
 80044a2:	733b      	strb	r3, [r7, #12]
            break;
 80044a4:	e03a      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 80044a6:	2304      	movs	r3, #4
 80044a8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 80044aa:	23ff      	movs	r3, #255	@ 0xff
 80044ac:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 80044ae:	2387      	movs	r3, #135	@ 0x87
 80044b0:	733b      	strb	r3, [r7, #12]
            break;
 80044b2:	e033      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 80044b4:	2304      	movs	r3, #4
 80044b6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 80044b8:	23fe      	movs	r3, #254	@ 0xfe
 80044ba:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 80044bc:	2387      	movs	r3, #135	@ 0x87
 80044be:	733b      	strb	r3, [r7, #12]
	    break;
 80044c0:	e02c      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 80044c2:	2304      	movs	r3, #4
 80044c4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 80044c6:	23fa      	movs	r3, #250	@ 0xfa
 80044c8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 80044ca:	2387      	movs	r3, #135	@ 0x87
 80044cc:	733b      	strb	r3, [r7, #12]
            break;
 80044ce:	e025      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 80044d0:	2303      	movs	r3, #3
 80044d2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 80044d4:	23fa      	movs	r3, #250	@ 0xfa
 80044d6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 80044d8:	2387      	movs	r3, #135	@ 0x87
 80044da:	733b      	strb	r3, [r7, #12]
            break;
 80044dc:	e01e      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 80044de:	2301      	movs	r3, #1
 80044e0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 80044e2:	23ff      	movs	r3, #255	@ 0xff
 80044e4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 80044e6:	2387      	movs	r3, #135	@ 0x87
 80044e8:	733b      	strb	r3, [r7, #12]
            break;
 80044ea:	e017      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 80044ec:	2341      	movs	r3, #65	@ 0x41
 80044ee:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 80044f0:	23fb      	movs	r3, #251	@ 0xfb
 80044f2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 80044f4:	2386      	movs	r3, #134	@ 0x86
 80044f6:	733b      	strb	r3, [r7, #12]
            break;
 80044f8:	e010      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 80044fe:	23fa      	movs	r3, #250	@ 0xfa
 8004500:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8004502:	2387      	movs	r3, #135	@ 0x87
 8004504:	733b      	strb	r3, [r7, #12]
            break;
 8004506:	e009      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8004508:	2300      	movs	r3, #0
 800450a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 800450c:	23d9      	movs	r3, #217	@ 0xd9
 800450e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8004510:	2382      	movs	r3, #130	@ 0x82
 8004512:	733b      	strb	r3, [r7, #12]
            break;
 8004514:	e002      	b.n	800451c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]
            break;
 800451a:	bf00      	nop
        }
        break;
 800451c:	e002      	b.n	8004524 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
        break;
 8004522:	bf00      	nop
    }

    if (set) {
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d013      	beq.n	8004552 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 800452a:	7bbb      	ldrb	r3, [r7, #14]
 800452c:	461a      	mov	r2, r3
 800452e:	212a      	movs	r1, #42	@ 0x2a
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fd5d 	bl	8003ff0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 8004536:	7b7b      	ldrb	r3, [r7, #13]
 8004538:	461a      	mov	r2, r3
 800453a:	2129      	movs	r1, #41	@ 0x29
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fd57 	bl	8003ff0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 8004542:	7b3b      	ldrb	r3, [r7, #12]
 8004544:	461a      	mov	r2, r3
 8004546:	2128      	movs	r1, #40	@ 0x28
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fd51 	bl	8003ff0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 8004552:	2301      	movs	r3, #1
    }
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d034      	beq.n	80045e0 <_ZN7MCP25159prepareIdEPhbm+0x84>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3303      	adds	r3, #3
 800457a:	8afa      	ldrh	r2, [r7, #22]
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8004580:	8afb      	ldrh	r3, [r7, #22]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	b29a      	uxth	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3302      	adds	r3, #2
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8004594:	8afb      	ldrh	r3, [r7, #22]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3301      	adds	r3, #1
 800459c:	f002 0203 	and.w	r2, r2, #3
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3301      	adds	r3, #1
 80045a8:	7819      	ldrb	r1, [r3, #0]
 80045aa:	8afb      	ldrh	r3, [r7, #22]
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f023 031f 	bic.w	r3, r3, #31
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3301      	adds	r3, #1
 80045ba:	440a      	add	r2, r1
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	3301      	adds	r3, #1
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 80045d2:	8afb      	ldrh	r3, [r7, #22]
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 80045de:	e013      	b.n	8004608 <_ZN7MCP25159prepareIdEPhbm+0xac>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 80045e0:	8afb      	ldrh	r3, [r7, #22]
 80045e2:	08db      	lsrs	r3, r3, #3
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 80045ec:	8afb      	ldrh	r3, [r7, #22]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3301      	adds	r3, #1
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	3303      	adds	r3, #3
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3302      	adds	r3, #2
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	72fb      	strb	r3, [r7, #11]
 8004622:	4613      	mov	r3, r2
 8004624:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff fd73 	bl	8004112 <_ZN7MCP251513setConfigModeEv>
 800462c:	4603      	mov	r3, r0
 800462e:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004630:	7dbb      	ldrb	r3, [r7, #22]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 8004636:	7dbb      	ldrb	r3, [r7, #22]
 8004638:	e01c      	b.n	8004674 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 800463a:	7aba      	ldrb	r2, [r7, #10]
 800463c:	f107 0110 	add.w	r1, r7, #16
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff ff8a 	bl	800455c <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 800464e:	2b01      	cmp	r3, #1
 8004650:	d003      	beq.n	800465a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 8004652:	e005      	b.n	8004660 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 8004654:	2320      	movs	r3, #32
 8004656:	75fb      	strb	r3, [r7, #23]
 8004658:	e004      	b.n	8004664 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 800465a:	2324      	movs	r3, #36	@ 0x24
 800465c:	75fb      	strb	r3, [r7, #23]
 800465e:	e001      	b.n	8004664 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 8004660:	2301      	movs	r3, #1
 8004662:	e007      	b.n	8004674 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 8004664:	f107 0210 	add.w	r2, r7, #16
 8004668:	7df9      	ldrb	r1, [r7, #23]
 800466a:	2304      	movs	r3, #4
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fcdf 	bl	8004030 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	72fb      	strb	r3, [r7, #11]
 800468a:	4613      	mov	r3, r2
 800468c:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fd3f 	bl	8004112 <_ZN7MCP251513setConfigModeEv>
 8004694:	4603      	mov	r3, r0
 8004696:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004698:	7dbb      	ldrb	r3, [r7, #22]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 800469e:	7dbb      	ldrb	r3, [r7, #22]
 80046a0:	e035      	b.n	800470e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 80046a2:	7afb      	ldrb	r3, [r7, #11]
 80046a4:	2b05      	cmp	r3, #5
 80046a6:	d821      	bhi.n	80046ec <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 80046a8:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c9 	.word	0x080046c9
 80046b4:	080046cf 	.word	0x080046cf
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046db 	.word	0x080046db
 80046c0:	080046e1 	.word	0x080046e1
 80046c4:	080046e7 	.word	0x080046e7
        case RXF0: reg = MCP_RXF0SIDH; break;
 80046c8:	2300      	movs	r3, #0
 80046ca:	75fb      	strb	r3, [r7, #23]
 80046cc:	e010      	b.n	80046f0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 80046ce:	2304      	movs	r3, #4
 80046d0:	75fb      	strb	r3, [r7, #23]
 80046d2:	e00d      	b.n	80046f0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 80046d4:	2308      	movs	r3, #8
 80046d6:	75fb      	strb	r3, [r7, #23]
 80046d8:	e00a      	b.n	80046f0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 80046da:	2310      	movs	r3, #16
 80046dc:	75fb      	strb	r3, [r7, #23]
 80046de:	e007      	b.n	80046f0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 80046e0:	2314      	movs	r3, #20
 80046e2:	75fb      	strb	r3, [r7, #23]
 80046e4:	e004      	b.n	80046f0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 80046e6:	2318      	movs	r3, #24
 80046e8:	75fb      	strb	r3, [r7, #23]
 80046ea:	e001      	b.n	80046f0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e00e      	b.n	800470e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80046f0:	7aba      	ldrb	r2, [r7, #10]
 80046f2:	f107 0110 	add.w	r1, r7, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7ff ff2f 	bl	800455c <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 80046fe:	f107 0210 	add.w	r2, r7, #16
 8004702:	7df9      	ldrb	r1, [r7, #23]
 8004704:	2304      	movs	r3, #4
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fc92 	bl	8004030 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop

08004718 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08c      	sub	sp, #48	@ 0x30
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	460b      	mov	r3, r1
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	72fb      	strb	r3, [r7, #11]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	791b      	ldrb	r3, [r3, #4]
 800472a:	2b08      	cmp	r3, #8
 800472c:	d901      	bls.n	8004732 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x1a>
        return ERROR_FAILTX;
 800472e:	2304      	movs	r3, #4
 8004730:	e067      	b.n	8004802 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
 8004732:	7afa      	ldrb	r2, [r7, #11]
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	4a34      	ldr	r2, [pc, #208]	@ (800480c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xf4>)
 800473c:	4413      	add	r3, r2
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0fdb      	lsrs	r3, r3, #31
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004766:	2a00      	cmp	r2, #0
 8004768:	d002      	beq.n	8004770 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x58>
 800476a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800476e:	e001      	b.n	8004774 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x5c>
 8004770:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004774:	4013      	ands	r3, r2
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24

    prepareId(data, ext, id);
 8004778:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800477c:	f107 0114 	add.w	r1, r7, #20
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff feea 	bl	800455c <_ZN7MCP25159prepareIdEPhbm>

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
 8004788:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x84>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	791b      	ldrb	r3, [r3, #4]
 8004794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e001      	b.n	80047a0 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x88>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	791b      	ldrb	r3, [r3, #4]
 80047a0:	763b      	strb	r3, [r7, #24]

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f103 0108 	add.w	r1, r3, #8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	791b      	ldrb	r3, [r3, #4]
 80047ac:	461a      	mov	r2, r3
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	3305      	adds	r3, #5
 80047b4:	4618      	mov	r0, r3
 80047b6:	f00b fad9 	bl	800fd6c <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
 80047ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047bc:	7859      	ldrb	r1, [r3, #1]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	791b      	ldrb	r3, [r3, #4]
 80047c2:	3305      	adds	r3, #5
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f107 0214 	add.w	r2, r7, #20
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff fc30 	bl	8004030 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
 80047d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d2:	7819      	ldrb	r1, [r3, #0]
 80047d4:	2308      	movs	r3, #8
 80047d6:	2208      	movs	r2, #8
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff fc58 	bl	800408e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    uint8_t ctrl = readRegister(txbuf->CTRL);
 80047de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fbb5 	bl	8003f54 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
 80047f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
        return ERROR_FAILTX;
 80047fc:	2304      	movs	r3, #4
 80047fe:	e000      	b.n	8004802 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    }
    return ERROR_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3730      	adds	r7, #48	@ 0x30
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	0801813c 	.word	0x0801813c

08004810 <_ZN7MCP251511sendMessageEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	791b      	ldrb	r3, [r3, #4]
 800481e:	2b08      	cmp	r3, #8
 8004820:	d901      	bls.n	8004826 <_ZN7MCP251511sendMessageEPK9can_frame+0x16>
        return ERROR_FAILTX;
 8004822:	2304      	movs	r3, #4
 8004824:	e037      	b.n	8004896 <_ZN7MCP251511sendMessageEPK9can_frame+0x86>
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
 8004826:	4a1e      	ldr	r2, [pc, #120]	@ (80048a0 <_ZN7MCP251511sendMessageEPK9can_frame+0x90>)
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	4611      	mov	r1, r2
 8004830:	8019      	strh	r1, [r3, #0]
 8004832:	3302      	adds	r3, #2
 8004834:	0c12      	lsrs	r2, r2, #16
 8004836:	701a      	strb	r2, [r3, #0]

    for (int i=0; i<N_TXBUFFERS; i++) {
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e027      	b.n	800488e <_ZN7MCP251511sendMessageEPK9can_frame+0x7e>
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
 800483e:	f107 020c 	add.w	r2, r7, #12
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	4a14      	ldr	r2, [pc, #80]	@ (80048a4 <_ZN7MCP251511sendMessageEPK9can_frame+0x94>)
 8004852:	4413      	add	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        uint8_t ctrlval = readRegister(txbuf->CTRL);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff fb79 	bl	8003f54 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004862:	4603      	mov	r3, r0
 8004864:	73fb      	strb	r3, [r7, #15]
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <_ZN7MCP251511sendMessageEPK9can_frame+0x78>
            return sendMessage(txBuffers[i], frame);
 8004870:	f107 020c 	add.w	r2, r7, #12
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4413      	add	r3, r2
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ff4a 	bl	8004718 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
 8004884:	4603      	mov	r3, r0
 8004886:	e006      	b.n	8004896 <_ZN7MCP251511sendMessageEPK9can_frame+0x86>
    for (int i=0; i<N_TXBUFFERS; i++) {
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	3301      	adds	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b02      	cmp	r3, #2
 8004892:	ddd4      	ble.n	800483e <_ZN7MCP251511sendMessageEPK9can_frame+0x2e>
        }
    }

    return ERROR_ALLTXBUSY;
 8004894:	2302      	movs	r3, #2
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	08010624 	.word	0x08010624
 80048a4:	0801813c 	.word	0x0801813c

080048a8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	460b      	mov	r3, r1
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 80048b6:	7afb      	ldrb	r3, [r7, #11]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a30      	ldr	r2, [pc, #192]	@ (800497c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 80048bc:	4413      	add	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	7859      	ldrb	r1, [r3, #1]
 80048c4:	f107 0210 	add.w	r2, r7, #16
 80048c8:	2305      	movs	r3, #5
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fb61 	bl	8003f92 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80048d0:	7c3b      	ldrb	r3, [r7, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	7c7a      	ldrb	r2, [r7, #17]
 80048d6:	0952      	lsrs	r2, r2, #5
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	4413      	add	r3, r2
 80048dc:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80048de:	7c7b      	ldrb	r3, [r7, #17]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d014      	beq.n	8004912 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	009a      	lsls	r2, r3, #2
 80048ec:	7c7b      	ldrb	r3, [r7, #17]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	7cba      	ldrb	r2, [r7, #18]
 80048fc:	4413      	add	r3, r2
 80048fe:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	7cfa      	ldrb	r2, [r7, #19]
 8004906:	4413      	add	r3, r2
 8004908:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004910:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 8004912:	7d3b      	ldrb	r3, [r7, #20]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d901      	bls.n	8004924 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8004920:	2301      	movs	r3, #1
 8004922:	e027      	b.n	8004974 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff fb12 	bl	8003f54 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004930:	4603      	mov	r3, r0
 8004932:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 8004934:	7dbb      	ldrb	r3, [r7, #22]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004944:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7dfa      	ldrb	r2, [r7, #23]
 8004950:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	7899      	ldrb	r1, [r3, #2]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f103 0208 	add.w	r2, r3, #8
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff fb17 	bl	8003f92 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	78da      	ldrb	r2, [r3, #3]
 8004968:	2300      	movs	r3, #0
 800496a:	212c      	movs	r1, #44	@ 0x2c
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fb8e 	bl	800408e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	08018148 	.word	0x08018148

08004980 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fba9 	bl	80040e2 <_ZN7MCP25159getStatusEv>
 8004990:	4603      	mov	r3, r0
 8004992:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8004994:	7bbb      	ldrb	r3, [r7, #14]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	2100      	movs	r1, #0
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ff80 	bl	80048a8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e00e      	b.n	80049cc <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 80049ae:	7bbb      	ldrb	r3, [r7, #14]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	2101      	movs	r1, #1
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ff73 	bl	80048a8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80049c2:	4603      	mov	r3, r0
 80049c4:	73fb      	strb	r3, [r7, #15]
 80049c6:	e001      	b.n	80049cc <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 80049c8:	2305      	movs	r3, #5
 80049ca:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80049dc:	f7fd fbe0 	bl	80021a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049e0:	480c      	ldr	r0, [pc, #48]	@ (8004a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049e2:	490d      	ldr	r1, [pc, #52]	@ (8004a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049e4:	4a0d      	ldr	r2, [pc, #52]	@ (8004a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049e8:	e002      	b.n	80049f0 <LoopCopyDataInit>

080049ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ee:	3304      	adds	r3, #4

080049f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049f4:	d3f9      	bcc.n	80049ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049fc:	e001      	b.n	8004a02 <LoopFillZerobss>

080049fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a00:	3204      	adds	r2, #4

08004a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a04:	d3fb      	bcc.n	80049fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a06:	f00b f98b 	bl	800fd20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a0a:	f7fc fbc9 	bl	80011a0 <main>
  bx  lr    
 8004a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a18:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8004a1c:	08018248 	.word	0x08018248
  ldr r2, =_sbss
 8004a20:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8004a24:	2000199c 	.word	0x2000199c

08004a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a28:	e7fe      	b.n	8004a28 <ADC_IRQHandler>
	...

08004a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a30:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <HAL_Init+0x40>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	@ (8004a6c <HAL_Init+0x40>)
 8004a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <HAL_Init+0x40>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	@ (8004a6c <HAL_Init+0x40>)
 8004a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a48:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <HAL_Init+0x40>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a07      	ldr	r2, [pc, #28]	@ (8004a6c <HAL_Init+0x40>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a54:	2003      	movs	r0, #3
 8004a56:	f000 f94f 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a5a:	200f      	movs	r0, #15
 8004a5c:	f000 f808 	bl	8004a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a60:	f7fd fa7e 	bl	8001f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023c00 	.word	0x40023c00

08004a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a78:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <HAL_InitTick+0x54>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b12      	ldr	r3, [pc, #72]	@ (8004ac8 <HAL_InitTick+0x58>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f967 	bl	8004d62 <HAL_SYSTICK_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e00e      	b.n	8004abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b0f      	cmp	r3, #15
 8004aa2:	d80a      	bhi.n	8004aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	f000 f92f 	bl	8004d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ab0:	4a06      	ldr	r2, [pc, #24]	@ (8004acc <HAL_InitTick+0x5c>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000004 	.word	0x20000004
 8004ac8:	20000034 	.word	0x20000034
 8004acc:	20000030 	.word	0x20000030

08004ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ad4:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <HAL_IncTick+0x20>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <HAL_IncTick+0x24>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4413      	add	r3, r2
 8004ae0:	4a04      	ldr	r2, [pc, #16]	@ (8004af4 <HAL_IncTick+0x24>)
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000034 	.word	0x20000034
 8004af4:	2000042c 	.word	0x2000042c

08004af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return uwTick;
 8004afc:	4b03      	ldr	r3, [pc, #12]	@ (8004b0c <HAL_GetTick+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	2000042c 	.word	0x2000042c

08004b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b18:	f7ff ffee 	bl	8004af8 <HAL_GetTick>
 8004b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d005      	beq.n	8004b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b54 <HAL_Delay+0x44>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b36:	bf00      	nop
 8004b38:	f7ff ffde 	bl	8004af8 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d8f7      	bhi.n	8004b38 <HAL_Delay+0x28>
  {
  }
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000034 	.word	0x20000034

08004b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b68:	4b0c      	ldr	r3, [pc, #48]	@ (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b8a:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	60d3      	str	r3, [r2, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	f003 0307 	and.w	r3, r3, #7
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db0b      	blt.n	8004be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	4907      	ldr	r1, [pc, #28]	@ (8004bf4 <__NVIC_EnableIRQ+0x38>)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2001      	movs	r0, #1
 8004bde:	fa00 f202 	lsl.w	r2, r0, r2
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	@ (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	@ (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	@ 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	@ 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cc4:	d301      	bcc.n	8004cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cca:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <SysTick_Config+0x40>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f7ff ff8e 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <SysTick_Config+0x40>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <SysTick_Config+0x40>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff29 	bl	8004b58 <__NVIC_SetPriorityGrouping>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d20:	f7ff ff3e 	bl	8004ba0 <__NVIC_GetPriorityGrouping>
 8004d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	f7ff ff8e 	bl	8004c4c <NVIC_EncodePriority>
 8004d30:	4602      	mov	r2, r0
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff5d 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff31 	bl	8004bbc <__NVIC_EnableIRQ>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ffa2 	bl	8004cb4 <SysTick_Config>
 8004d70:	4603      	mov	r3, r0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d88:	f7ff feb6 	bl	8004af8 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e099      	b.n	8004ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db8:	e00f      	b.n	8004dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dba:	f7ff fe9d 	bl	8004af8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d908      	bls.n	8004dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e078      	b.n	8004ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e8      	bne.n	8004dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4b38      	ldr	r3, [pc, #224]	@ (8004ed4 <HAL_DMA_Init+0x158>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d107      	bne.n	8004e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0307 	bic.w	r3, r3, #7
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d117      	bne.n	8004e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fa91 	bl	80053a8 <DMA_CheckFifoParam>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2240      	movs	r2, #64	@ 0x40
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e016      	b.n	8004ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa48 	bl	800533c <DMA_CalcBaseAndBitshift>
 8004eac:	4603      	mov	r3, r0
 8004eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb4:	223f      	movs	r2, #63	@ 0x3f
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	f010803f 	.word	0xf010803f

08004ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_DMA_Start_IT+0x26>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e040      	b.n	8004f80 <HAL_DMA_Start_IT+0xa8>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d12f      	bne.n	8004f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f9da 	bl	80052e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f30:	223f      	movs	r2, #63	@ 0x3f
 8004f32:	409a      	lsls	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0216 	orr.w	r2, r2, #22
 8004f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e005      	b.n	8004f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2280      	movs	r2, #128	@ 0x80
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e00c      	b.n	8004fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2205      	movs	r2, #5
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8005214 <HAL_DMA_IRQHandler+0x248>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a8e      	ldr	r2, [pc, #568]	@ (8005218 <HAL_DMA_IRQHandler+0x24c>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0a9b      	lsrs	r3, r3, #10
 8004fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d013      	beq.n	8005038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0204 	bic.w	r2, r2, #4
 800501e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005024:	2208      	movs	r2, #8
 8005026:	409a      	lsls	r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503c:	2201      	movs	r2, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d012      	beq.n	800506e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505a:	2201      	movs	r2, #1
 800505c:	409a      	lsls	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005066:	f043 0202 	orr.w	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005072:	2204      	movs	r2, #4
 8005074:	409a      	lsls	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d012      	beq.n	80050a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005090:	2204      	movs	r2, #4
 8005092:	409a      	lsls	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509c:	f043 0204 	orr.w	r2, r3, #4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a8:	2210      	movs	r2, #16
 80050aa:	409a      	lsls	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d043      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d03c      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c6:	2210      	movs	r2, #16
 80050c8:	409a      	lsls	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d018      	beq.n	800510e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d108      	bne.n	80050fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d024      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
 80050fa:	e01f      	b.n	800513c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
 800510c:	e016      	b.n	800513c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0208 	bic.w	r2, r2, #8
 800512a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	2220      	movs	r2, #32
 8005142:	409a      	lsls	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 808f 	beq.w	800526c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8087 	beq.w	800526c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005162:	2220      	movs	r2, #32
 8005164:	409a      	lsls	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b05      	cmp	r3, #5
 8005174:	d136      	bne.n	80051e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0216 	bic.w	r2, r2, #22
 8005184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x1da>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0208 	bic.w	r2, r2, #8
 80051b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	223f      	movs	r2, #63	@ 0x3f
 80051bc:	409a      	lsls	r2, r3
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d07e      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
        }
        return;
 80051e2:	e079      	b.n	80052d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01d      	beq.n	800522e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10d      	bne.n	800521c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005204:	2b00      	cmp	r3, #0
 8005206:	d031      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
 8005210:	e02c      	b.n	800526c <HAL_DMA_IRQHandler+0x2a0>
 8005212:	bf00      	nop
 8005214:	20000004 	.word	0x20000004
 8005218:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d023      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
 800522c:	e01e      	b.n	800526c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0210 	bic.w	r2, r2, #16
 800524a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005270:	2b00      	cmp	r3, #0
 8005272:	d032      	beq.n	80052da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d022      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2205      	movs	r2, #5
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	3301      	adds	r3, #1
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d307      	bcc.n	80052b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f2      	bne.n	8005298 <HAL_DMA_IRQHandler+0x2cc>
 80052b2:	e000      	b.n	80052b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
 80052d6:	e000      	b.n	80052da <HAL_DMA_IRQHandler+0x30e>
        return;
 80052d8:	bf00      	nop
    }
  }
}
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b40      	cmp	r3, #64	@ 0x40
 800530c:	d108      	bne.n	8005320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800531e:	e007      	b.n	8005330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	60da      	str	r2, [r3, #12]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	3b10      	subs	r3, #16
 800534c:	4a14      	ldr	r2, [pc, #80]	@ (80053a0 <DMA_CalcBaseAndBitshift+0x64>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005356:	4a13      	ldr	r2, [pc, #76]	@ (80053a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d909      	bls.n	800537e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	659a      	str	r2, [r3, #88]	@ 0x58
 800537c:	e007      	b.n	800538e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	aaaaaaab 	.word	0xaaaaaaab
 80053a4:	08018150 	.word	0x08018150

080053a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d11f      	bne.n	8005402 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d856      	bhi.n	8005476 <DMA_CheckFifoParam+0xce>
 80053c8:	a201      	add	r2, pc, #4	@ (adr r2, 80053d0 <DMA_CheckFifoParam+0x28>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	080053e1 	.word	0x080053e1
 80053d4:	080053f3 	.word	0x080053f3
 80053d8:	080053e1 	.word	0x080053e1
 80053dc:	08005477 	.word	0x08005477
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d046      	beq.n	800547a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f0:	e043      	b.n	800547a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053fa:	d140      	bne.n	800547e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005400:	e03d      	b.n	800547e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800540a:	d121      	bne.n	8005450 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d837      	bhi.n	8005482 <DMA_CheckFifoParam+0xda>
 8005412:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <DMA_CheckFifoParam+0x70>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005429 	.word	0x08005429
 800541c:	0800542f 	.word	0x0800542f
 8005420:	08005429 	.word	0x08005429
 8005424:	08005441 	.word	0x08005441
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
      break;
 800542c:	e030      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d025      	beq.n	8005486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800543e:	e022      	b.n	8005486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005448:	d11f      	bne.n	800548a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800544e:	e01c      	b.n	800548a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d903      	bls.n	800545e <DMA_CheckFifoParam+0xb6>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d003      	beq.n	8005464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800545c:	e018      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
      break;
 8005462:	e015      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
      break;
 8005474:	e00b      	b.n	800548e <DMA_CheckFifoParam+0xe6>
      break;
 8005476:	bf00      	nop
 8005478:	e00a      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 800547a:	bf00      	nop
 800547c:	e008      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 800547e:	bf00      	nop
 8005480:	e006      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 8005482:	bf00      	nop
 8005484:	e004      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;   
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <DMA_CheckFifoParam+0xe8>
      break;
 800548e:	bf00      	nop
    }
  } 
  
  return status; 
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop

080054a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
 80054ba:	e159      	b.n	8005770 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054bc:	2201      	movs	r2, #1
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	f040 8148 	bne.w	800576a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d005      	beq.n	80054f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d130      	bne.n	8005554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	2203      	movs	r2, #3
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4313      	orrs	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005528:	2201      	movs	r2, #1
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4013      	ands	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 0201 	and.w	r2, r3, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4313      	orrs	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	2b03      	cmp	r3, #3
 800555e:	d017      	beq.n	8005590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	2203      	movs	r2, #3
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d123      	bne.n	80055e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	08da      	lsrs	r2, r3, #3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3208      	adds	r2, #8
 80055a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	220f      	movs	r2, #15
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	4013      	ands	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	08da      	lsrs	r2, r3, #3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3208      	adds	r2, #8
 80055de:	69b9      	ldr	r1, [r7, #24]
 80055e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	2203      	movs	r2, #3
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 0203 	and.w	r2, r3, #3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80a2 	beq.w	800576a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	4b57      	ldr	r3, [pc, #348]	@ (8005788 <HAL_GPIO_Init+0x2e8>)
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	4a56      	ldr	r2, [pc, #344]	@ (8005788 <HAL_GPIO_Init+0x2e8>)
 8005630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005634:	6453      	str	r3, [r2, #68]	@ 0x44
 8005636:	4b54      	ldr	r3, [pc, #336]	@ (8005788 <HAL_GPIO_Init+0x2e8>)
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005642:	4a52      	ldr	r2, [pc, #328]	@ (800578c <HAL_GPIO_Init+0x2ec>)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	3302      	adds	r3, #2
 800564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	220f      	movs	r2, #15
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a49      	ldr	r2, [pc, #292]	@ (8005790 <HAL_GPIO_Init+0x2f0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d019      	beq.n	80056a2 <HAL_GPIO_Init+0x202>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a48      	ldr	r2, [pc, #288]	@ (8005794 <HAL_GPIO_Init+0x2f4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d013      	beq.n	800569e <HAL_GPIO_Init+0x1fe>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a47      	ldr	r2, [pc, #284]	@ (8005798 <HAL_GPIO_Init+0x2f8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00d      	beq.n	800569a <HAL_GPIO_Init+0x1fa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a46      	ldr	r2, [pc, #280]	@ (800579c <HAL_GPIO_Init+0x2fc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <HAL_GPIO_Init+0x1f6>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a45      	ldr	r2, [pc, #276]	@ (80057a0 <HAL_GPIO_Init+0x300>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <HAL_GPIO_Init+0x1f2>
 800568e:	2304      	movs	r3, #4
 8005690:	e008      	b.n	80056a4 <HAL_GPIO_Init+0x204>
 8005692:	2307      	movs	r3, #7
 8005694:	e006      	b.n	80056a4 <HAL_GPIO_Init+0x204>
 8005696:	2303      	movs	r3, #3
 8005698:	e004      	b.n	80056a4 <HAL_GPIO_Init+0x204>
 800569a:	2302      	movs	r3, #2
 800569c:	e002      	b.n	80056a4 <HAL_GPIO_Init+0x204>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_GPIO_Init+0x204>
 80056a2:	2300      	movs	r3, #0
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	f002 0203 	and.w	r2, r2, #3
 80056aa:	0092      	lsls	r2, r2, #2
 80056ac:	4093      	lsls	r3, r2
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056b4:	4935      	ldr	r1, [pc, #212]	@ (800578c <HAL_GPIO_Init+0x2ec>)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	3302      	adds	r3, #2
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056c2:	4b38      	ldr	r3, [pc, #224]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056e6:	4a2f      	ldr	r2, [pc, #188]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056ec:	4b2d      	ldr	r3, [pc, #180]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005710:	4a24      	ldr	r2, [pc, #144]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005716:	4b23      	ldr	r3, [pc, #140]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800573a:	4a1a      	ldr	r2, [pc, #104]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005740:	4b18      	ldr	r3, [pc, #96]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005764:	4a0f      	ldr	r2, [pc, #60]	@ (80057a4 <HAL_GPIO_Init+0x304>)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	f67f aea2 	bls.w	80054bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	3724      	adds	r7, #36	@ 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800
 800578c:	40013800 	.word	0x40013800
 8005790:	40020000 	.word	0x40020000
 8005794:	40020400 	.word	0x40020400
 8005798:	40020800 	.word	0x40020800
 800579c:	40020c00 	.word	0x40020c00
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40013c00 	.word	0x40013c00

080057a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
 80057b4:	4613      	mov	r3, r2
 80057b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057b8:	787b      	ldrb	r3, [r7, #1]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057c4:	e003      	b.n	80057ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	041a      	lsls	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	619a      	str	r2, [r3, #24]
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d006      	beq.n	8005800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057f2:	4a05      	ldr	r2, [pc, #20]	@ (8005808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fb fc8e 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40013c00 	.word	0x40013c00

0800580c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af02      	add	r7, sp, #8
 8005812:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e101      	b.n	8005a22 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f009 fd65 	bl	800f308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2203      	movs	r2, #3
 8005842:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800584c:	d102      	bne.n	8005854 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f003 ff5c 	bl	8009716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	7c1a      	ldrb	r2, [r3, #16]
 8005866:	f88d 2000 	strb.w	r2, [sp]
 800586a:	3304      	adds	r3, #4
 800586c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800586e:	f003 fe3b 	bl	80094e8 <USB_CoreInit>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0ce      	b.n	8005a22 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2100      	movs	r1, #0
 800588a:	4618      	mov	r0, r3
 800588c:	f003 ff54 	bl	8009738 <USB_SetCurrentMode>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2202      	movs	r2, #2
 800589a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e0bf      	b.n	8005a22 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]
 80058a6:	e04a      	b.n	800593e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058a8:	7bfa      	ldrb	r2, [r7, #15]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	3315      	adds	r3, #21
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	3314      	adds	r3, #20
 80058cc:	7bfa      	ldrb	r2, [r7, #15]
 80058ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058d0:	7bfa      	ldrb	r2, [r7, #15]
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	b298      	uxth	r0, r3
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	332e      	adds	r3, #46	@ 0x2e
 80058e4:	4602      	mov	r2, r0
 80058e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	3318      	adds	r3, #24
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058fc:	7bfa      	ldrb	r2, [r7, #15]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	331c      	adds	r3, #28
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005910:	7bfa      	ldrb	r2, [r7, #15]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	3320      	adds	r3, #32
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005924:	7bfa      	ldrb	r2, [r7, #15]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	3324      	adds	r3, #36	@ 0x24
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	3301      	adds	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	791b      	ldrb	r3, [r3, #4]
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	429a      	cmp	r2, r3
 8005946:	d3af      	bcc.n	80058a8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]
 800594c:	e044      	b.n	80059d8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800594e:	7bfa      	ldrb	r2, [r7, #15]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005964:	7bfa      	ldrb	r2, [r7, #15]
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800597a:	7bfa      	ldrb	r2, [r7, #15]
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005990:	7bfa      	ldrb	r2, [r7, #15]
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4613      	mov	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059a6:	7bfa      	ldrb	r2, [r7, #15]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	3301      	adds	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	791b      	ldrb	r3, [r3, #4]
 80059dc:	7bfa      	ldrb	r2, [r7, #15]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3b5      	bcc.n	800594e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7c1a      	ldrb	r2, [r3, #16]
 80059ea:	f88d 2000 	strb.w	r2, [sp]
 80059ee:	3304      	adds	r3, #4
 80059f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f2:	f003 feed 	bl	80097d0 <USB_DevInit>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e00c      	b.n	8005a22 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f004 ff37 	bl	800a88e <USB_DevDisconnect>

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_PCD_Start+0x1c>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e022      	b.n	8005a8c <HAL_PCD_Start+0x62>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f003 fe3e 	bl	80096f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f004 fee5 	bl	800a84c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a94:	b590      	push	{r4, r7, lr}
 8005a96:	b08d      	sub	sp, #52	@ 0x34
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f004 ffa3 	bl	800a9f6 <USB_GetMode>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 848c 	bne.w	80063d0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f004 ff07 	bl	800a8d0 <USB_ReadInterrupts>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8482 	beq.w	80063ce <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f004 fef4 	bl	800a8d0 <USB_ReadInterrupts>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d107      	bne.n	8005b02 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f002 0202 	and.w	r2, r2, #2
 8005b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f004 fee2 	bl	800a8d0 <USB_ReadInterrupts>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d161      	bne.n	8005bda <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0210 	bic.w	r2, r2, #16
 8005b24:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f003 020f 	and.w	r2, r3, #15
 8005b32:	4613      	mov	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4413      	add	r3, r2
 8005b42:	3304      	adds	r3, #4
 8005b44:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	0c5b      	lsrs	r3, r3, #17
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d124      	bne.n	8005b9c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d035      	beq.n	8005bca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6a38      	ldr	r0, [r7, #32]
 8005b72:	f004 fd19 	bl	800a5a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b82:	441a      	add	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b94:	441a      	add	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	615a      	str	r2, [r3, #20]
 8005b9a:	e016      	b.n	8005bca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	0c5b      	lsrs	r3, r3, #17
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d110      	bne.n	8005bca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bae:	2208      	movs	r2, #8
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6a38      	ldr	r0, [r7, #32]
 8005bb4:	f004 fcf8 	bl	800a5a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bc4:	441a      	add	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0210 	orr.w	r2, r2, #16
 8005bd8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f004 fe76 	bl	800a8d0 <USB_ReadInterrupts>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005bee:	f040 80a7 	bne.w	8005d40 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f004 fe7b 	bl	800a8f6 <USB_ReadDevAllOutEpInterrupt>
 8005c00:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005c02:	e099      	b.n	8005d38 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 808e 	beq.w	8005d2c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f004 fe9f 	bl	800a95e <USB_ReadDevOutEPInterrupt>
 8005c20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c38:	461a      	mov	r2, r3
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fea3 	bl	800698c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2308      	movs	r3, #8
 8005c60:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 ff79 	bl	8006b5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c80:	461a      	mov	r2, r3
 8005c82:	2310      	movs	r3, #16
 8005c84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d030      	beq.n	8005cf2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c98:	2b80      	cmp	r3, #128	@ 0x80
 8005c9a:	d109      	bne.n	8005cb0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	78db      	ldrb	r3, [r3, #3]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d108      	bne.n	8005ce0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f009 fc10 	bl	800f500 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cec:	461a      	mov	r2, r3
 8005cee:	2302      	movs	r3, #2
 8005cf0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d08:	461a      	mov	r2, r3
 8005d0a:	2320      	movs	r3, #32
 8005d0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d24:	461a      	mov	r2, r3
 8005d26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d2a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	3301      	adds	r3, #1
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f47f af62 	bne.w	8005c04 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f004 fdc3 	bl	800a8d0 <USB_ReadInterrupts>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d54:	f040 80db 	bne.w	8005f0e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f004 fde4 	bl	800a92a <USB_ReadDevAllInEpInterrupt>
 8005d62:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005d68:	e0cd      	b.n	8005f06 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80c2 	beq.w	8005efa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f004 fe0a 	bl	800a99a <USB_ReadDevInEPInterrupt>
 8005d86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d057      	beq.n	8005e42 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	2201      	movs	r2, #1
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69f9      	ldr	r1, [r7, #28]
 8005dae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005db2:	4013      	ands	r3, r2
 8005db4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	799b      	ldrb	r3, [r3, #6]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d132      	bne.n	8005e36 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	3320      	adds	r3, #32
 8005de0:	6819      	ldr	r1, [r3, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de6:	4613      	mov	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4403      	add	r3, r0
 8005df0:	331c      	adds	r3, #28
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4419      	add	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4403      	add	r3, r0
 8005e04:	3320      	adds	r3, #32
 8005e06:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d113      	bne.n	8005e36 <HAL_PCD_IRQHandler+0x3a2>
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e12:	4613      	mov	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3324      	adds	r3, #36	@ 0x24
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d108      	bne.n	8005e36 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2101      	movs	r1, #1
 8005e32:	f004 fe11 	bl	800aa58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f009 fae4 	bl	800f40a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e74:	461a      	mov	r2, r3
 8005e76:	2310      	movs	r3, #16
 8005e78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e90:	461a      	mov	r2, r3
 8005e92:	2340      	movs	r3, #64	@ 0x40
 8005e94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d023      	beq.n	8005ee8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ea2:	6a38      	ldr	r0, [r7, #32]
 8005ea4:	f003 fdf8 	bl	8009a98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eaa:	4613      	mov	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	3310      	adds	r3, #16
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3304      	adds	r3, #4
 8005eba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	78db      	ldrb	r3, [r3, #3]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d108      	bne.n	8005ed6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f009 fb27 	bl	800f524 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fcbd 	bl	8006874 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	3301      	adds	r3, #1
 8005efe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f47f af2e 	bne.w	8005d6a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f004 fcdc 	bl	800a8d0 <USB_ReadInterrupts>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f22:	d122      	bne.n	8005f6a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d108      	bne.n	8005f54 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fea3 	bl	8006c98 <HAL_PCDEx_LPM_Callback>
 8005f52:	e002      	b.n	8005f5a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f009 fac5 	bl	800f4e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f004 fcae 	bl	800a8d0 <USB_ReadInterrupts>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f7e:	d112      	bne.n	8005fa6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d102      	bne.n	8005f96 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f009 fa81 	bl	800f498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005fa4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f004 fc90 	bl	800a8d0 <USB_ReadInterrupts>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fba:	f040 80b7 	bne.w	800612c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2110      	movs	r1, #16
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f003 fd5d 	bl	8009a98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fde:	2300      	movs	r3, #0
 8005fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe2:	e046      	b.n	8006072 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ff6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006012:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006016:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006024:	461a      	mov	r2, r3
 8006026:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800602a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006046:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800604a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800604c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006066:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800606a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	3301      	adds	r3, #1
 8006070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	791b      	ldrb	r3, [r3, #4]
 8006076:	461a      	mov	r2, r3
 8006078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607a:	4293      	cmp	r3, r2
 800607c:	d3b2      	bcc.n	8005fe4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800608c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006090:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7bdb      	ldrb	r3, [r3, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d016      	beq.n	80060c8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060aa:	f043 030b 	orr.w	r3, r3, #11
 80060ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060c0:	f043 030b 	orr.w	r3, r3, #11
 80060c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80060c6:	e015      	b.n	80060f4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80060da:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80060de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060ee:	f043 030b 	orr.w	r3, r3, #11
 80060f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006102:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006106:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006116:	461a      	mov	r2, r3
 8006118:	f004 fc9e 	bl	800aa58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800612a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f004 fbcd 	bl	800a8d0 <USB_ReadInterrupts>
 8006136:	4603      	mov	r3, r0
 8006138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006140:	d123      	bne.n	800618a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f004 fc63 	bl	800aa12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f003 fd1a 	bl	8009b8a <USB_GetDevSpeed>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681c      	ldr	r4, [r3, #0]
 8006162:	f001 f9c9 	bl	80074f8 <HAL_RCC_GetHCLKFreq>
 8006166:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800616c:	461a      	mov	r2, r3
 800616e:	4620      	mov	r0, r4
 8006170:	f003 fa1e 	bl	80095b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f009 f970 	bl	800f45a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695a      	ldr	r2, [r3, #20]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006188:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f004 fb9e 	bl	800a8d0 <USB_ReadInterrupts>
 8006194:	4603      	mov	r3, r0
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b08      	cmp	r3, #8
 800619c:	d10a      	bne.n	80061b4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f009 f94d 	bl	800f43e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f002 0208 	and.w	r2, r2, #8
 80061b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f004 fb89 	bl	800a8d0 <USB_ReadInterrupts>
 80061be:	4603      	mov	r3, r0
 80061c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c4:	2b80      	cmp	r3, #128	@ 0x80
 80061c6:	d123      	bne.n	8006210 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061d4:	2301      	movs	r3, #1
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d8:	e014      	b.n	8006204 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061de:	4613      	mov	r3, r2
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d105      	bne.n	80061fe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb0a 	bl	8006812 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	3301      	adds	r3, #1
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	791b      	ldrb	r3, [r3, #4]
 8006208:	461a      	mov	r2, r3
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	4293      	cmp	r3, r2
 800620e:	d3e4      	bcc.n	80061da <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f004 fb5b 	bl	800a8d0 <USB_ReadInterrupts>
 800621a:	4603      	mov	r3, r0
 800621c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006224:	d13c      	bne.n	80062a0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006226:	2301      	movs	r3, #1
 8006228:	627b      	str	r3, [r7, #36]	@ 0x24
 800622a:	e02b      	b.n	8006284 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	3318      	adds	r3, #24
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d115      	bne.n	800627e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006252:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006254:	2b00      	cmp	r3, #0
 8006256:	da12      	bge.n	800627e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625c:	4613      	mov	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	3317      	adds	r3, #23
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006274:	b2db      	uxtb	r3, r3
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 faca 	bl	8006812 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	3301      	adds	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	791b      	ldrb	r3, [r3, #4]
 8006288:	461a      	mov	r2, r3
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	4293      	cmp	r3, r2
 800628e:	d3cd      	bcc.n	800622c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695a      	ldr	r2, [r3, #20]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800629e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f004 fb13 	bl	800a8d0 <USB_ReadInterrupts>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062b4:	d156      	bne.n	8006364 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062b6:	2301      	movs	r3, #1
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ba:	e045      	b.n	8006348 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d0:	4613      	mov	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d12e      	bne.n	8006342 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da2b      	bge.n	8006342 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80062f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d121      	bne.n	8006342 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006310:	2201      	movs	r2, #1
 8006312:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800633a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800633e:	6053      	str	r3, [r2, #4]
            break;
 8006340:	e008      	b.n	8006354 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	3301      	adds	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	791b      	ldrb	r3, [r3, #4]
 800634c:	461a      	mov	r2, r3
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	4293      	cmp	r3, r2
 8006352:	d3b3      	bcc.n	80062bc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f004 fab1 	bl	800a8d0 <USB_ReadInterrupts>
 800636e:	4603      	mov	r3, r0
 8006370:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006378:	d10a      	bne.n	8006390 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f009 f8e4 	bl	800f548 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800638e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f004 fa9b 	bl	800a8d0 <USB_ReadInterrupts>
 800639a:	4603      	mov	r3, r0
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d115      	bne.n	80063d0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f009 f8d4 	bl	800f564 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
 80063cc:	e000      	b.n	80063d0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80063ce:	bf00      	nop
    }
  }
}
 80063d0:	3734      	adds	r7, #52	@ 0x34
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}

080063d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_PCD_SetAddress+0x1a>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e012      	b.n	8006416 <HAL_PCD_SetAddress+0x40>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f004 f9fa 	bl	800a800 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	4608      	mov	r0, r1
 8006428:	4611      	mov	r1, r2
 800642a:	461a      	mov	r2, r3
 800642c:	4603      	mov	r3, r0
 800642e:	70fb      	strb	r3, [r7, #3]
 8006430:	460b      	mov	r3, r1
 8006432:	803b      	strh	r3, [r7, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800643c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006440:	2b00      	cmp	r3, #0
 8006442:	da0f      	bge.n	8006464 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	f003 020f 	and.w	r2, r3, #15
 800644a:	4613      	mov	r3, r2
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	3310      	adds	r3, #16
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4413      	add	r3, r2
 8006458:	3304      	adds	r3, #4
 800645a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	705a      	strb	r2, [r3, #1]
 8006462:	e00f      	b.n	8006484 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	f003 020f 	and.w	r2, r3, #15
 800646a:	4613      	mov	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006490:	883b      	ldrh	r3, [r7, #0]
 8006492:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	78ba      	ldrb	r2, [r7, #2]
 800649e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80064b2:	78bb      	ldrb	r3, [r7, #2]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d102      	bne.n	80064be <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_PCD_EP_Open+0xae>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e00e      	b.n	80064ea <HAL_PCD_EP_Open+0xcc>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68f9      	ldr	r1, [r7, #12]
 80064da:	4618      	mov	r0, r3
 80064dc:	f003 fb7a 	bl	8009bd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80064e8:	7afb      	ldrb	r3, [r7, #11]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006502:	2b00      	cmp	r3, #0
 8006504:	da0f      	bge.n	8006526 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	f003 020f 	and.w	r2, r3, #15
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	3310      	adds	r3, #16
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	3304      	adds	r3, #4
 800651c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	705a      	strb	r2, [r3, #1]
 8006524:	e00f      	b.n	8006546 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	f003 020f 	and.w	r2, r3, #15
 800652c:	4613      	mov	r3, r2
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	4413      	add	r3, r2
 800653c:	3304      	adds	r3, #4
 800653e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	b2da      	uxtb	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_PCD_EP_Close+0x6e>
 800655c:	2302      	movs	r3, #2
 800655e:	e00e      	b.n	800657e <HAL_PCD_EP_Close+0x8c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	4618      	mov	r0, r3
 8006570:	f003 fbb8 	bl	8009ce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	460b      	mov	r3, r1
 8006594:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	4613      	mov	r3, r2
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	3304      	adds	r3, #4
 80065ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	799b      	ldrb	r3, [r3, #6]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d102      	bne.n	80065e2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	799b      	ldrb	r3, [r3, #6]
 80065ea:	461a      	mov	r2, r3
 80065ec:	6979      	ldr	r1, [r7, #20]
 80065ee:	f003 fc55 	bl	8009e9c <USB_EPStartXfer>

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	f003 020f 	and.w	r2, r3, #15
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800661e:	681b      	ldr	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	460b      	mov	r3, r1
 800663a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	f003 020f 	and.w	r2, r3, #15
 8006642:	4613      	mov	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	3310      	adds	r3, #16
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	3304      	adds	r3, #4
 8006652:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2201      	movs	r2, #1
 800666a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800666c:	7afb      	ldrb	r3, [r7, #11]
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	b2da      	uxtb	r2, r3
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	799b      	ldrb	r3, [r3, #6]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d102      	bne.n	8006686 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	799b      	ldrb	r3, [r3, #6]
 800668e:	461a      	mov	r2, r3
 8006690:	6979      	ldr	r1, [r7, #20]
 8006692:	f003 fc03 	bl	8009e9c <USB_EPStartXfer>

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	7912      	ldrb	r2, [r2, #4]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d901      	bls.n	80066be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e04f      	b.n	800675e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	da0f      	bge.n	80066e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	4613      	mov	r3, r2
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	3310      	adds	r3, #16
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	3304      	adds	r3, #4
 80066dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	705a      	strb	r2, [r3, #1]
 80066e4:	e00d      	b.n	8006702 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	4613      	mov	r3, r2
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	4413      	add	r3, r2
 80066f8:	3304      	adds	r3, #4
 80066fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	b2da      	uxtb	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_PCD_EP_SetStall+0x82>
 800671e:	2302      	movs	r3, #2
 8006720:	e01d      	b.n	800675e <HAL_PCD_EP_SetStall+0xbe>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68f9      	ldr	r1, [r7, #12]
 8006730:	4618      	mov	r0, r3
 8006732:	f003 ff91 	bl	800a658 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7999      	ldrb	r1, [r3, #6]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800674e:	461a      	mov	r2, r3
 8006750:	f004 f982 	bl	800aa58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7912      	ldrb	r2, [r2, #4]
 800677c:	4293      	cmp	r3, r2
 800677e:	d901      	bls.n	8006784 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e042      	b.n	800680a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006788:	2b00      	cmp	r3, #0
 800678a:	da0f      	bge.n	80067ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	4613      	mov	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	3310      	adds	r3, #16
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	3304      	adds	r3, #4
 80067a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	705a      	strb	r2, [r3, #1]
 80067aa:	e00f      	b.n	80067cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	4613      	mov	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	3304      	adds	r3, #4
 80067c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_PCD_EP_ClrStall+0x86>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e00e      	b.n	800680a <HAL_PCD_EP_ClrStall+0xa4>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f003 ff9a 	bl	800a734 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800681e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006822:	2b00      	cmp	r3, #0
 8006824:	da0c      	bge.n	8006840 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	f003 020f 	and.w	r2, r3, #15
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	3310      	adds	r3, #16
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	3304      	adds	r3, #4
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e00c      	b.n	800685a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	f003 020f 	and.w	r2, r3, #15
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	3304      	adds	r3, #4
 8006858:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	4618      	mov	r0, r3
 8006862:	f003 fdb9 	bl	800a3d8 <USB_EPStopXfer>
 8006866:	4603      	mov	r3, r0
 8006868:	72fb      	strb	r3, [r7, #11]

  return ret;
 800686a:	7afb      	ldrb	r3, [r7, #11]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	@ 0x28
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	3310      	adds	r3, #16
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	4413      	add	r3, r2
 8006898:	3304      	adds	r3, #4
 800689a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d901      	bls.n	80068ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e06b      	b.n	8006984 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d902      	bls.n	80068c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	3303      	adds	r3, #3
 80068cc:	089b      	lsrs	r3, r3, #2
 80068ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068d0:	e02a      	b.n	8006928 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d902      	bls.n	80068ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3303      	adds	r3, #3
 80068f2:	089b      	lsrs	r3, r3, #2
 80068f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	68d9      	ldr	r1, [r3, #12]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	4603      	mov	r3, r0
 800690a:	6978      	ldr	r0, [r7, #20]
 800690c:	f003 fe0e 	bl	800a52c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	695a      	ldr	r2, [r3, #20]
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	441a      	add	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	429a      	cmp	r2, r3
 800693c:	d809      	bhi.n	8006952 <PCD_WriteEmptyTxFifo+0xde>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006946:	429a      	cmp	r2, r3
 8006948:	d203      	bcs.n	8006952 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1bf      	bne.n	80068d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	429a      	cmp	r2, r3
 800695c:	d811      	bhi.n	8006982 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	2201      	movs	r2, #1
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	43db      	mvns	r3, r3
 8006978:	6939      	ldr	r1, [r7, #16]
 800697a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800697e:	4013      	ands	r3, r2
 8006980:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3720      	adds	r7, #32
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	333c      	adds	r3, #60	@ 0x3c
 80069a4:	3304      	adds	r3, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	799b      	ldrb	r3, [r3, #6]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d17b      	bne.n	8006aba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d015      	beq.n	80069f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	4a61      	ldr	r2, [pc, #388]	@ (8006b54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	f240 80b9 	bls.w	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80b3 	beq.w	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ee:	461a      	mov	r2, r3
 80069f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069f4:	6093      	str	r3, [r2, #8]
 80069f6:	e0a7      	b.n	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2320      	movs	r3, #32
 8006a12:	6093      	str	r3, [r2, #8]
 8006a14:	e098      	b.n	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f040 8093 	bne.w	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4a4b      	ldr	r2, [pc, #300]	@ (8006b54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d90f      	bls.n	8006a4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a40:	461a      	mov	r2, r3
 8006a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a46:	6093      	str	r3, [r2, #8]
 8006a48:	e07e      	b.n	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	0159      	lsls	r1, r3, #5
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	440b      	add	r3, r1
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a76:	1ad2      	subs	r2, r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d114      	bne.n	8006aac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a94:	461a      	mov	r2, r3
 8006a96:	2101      	movs	r1, #1
 8006a98:	f003 ffde 	bl	800aa58 <USB_EP0_OutStart>
 8006a9c:	e006      	b.n	8006aac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	441a      	add	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f008 fc8e 	bl	800f3d4 <HAL_PCD_DataOutStageCallback>
 8006ab8:	e046      	b.n	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4a26      	ldr	r2, [pc, #152]	@ (8006b58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d124      	bne.n	8006b0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ade:	6093      	str	r3, [r2, #8]
 8006ae0:	e032      	b.n	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af8:	461a      	mov	r2, r3
 8006afa:	2320      	movs	r3, #32
 8006afc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f008 fc65 	bl	800f3d4 <HAL_PCD_DataOutStageCallback>
 8006b0a:	e01d      	b.n	8006b48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d114      	bne.n	8006b3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	4613      	mov	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d108      	bne.n	8006b3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b34:	461a      	mov	r2, r3
 8006b36:	2100      	movs	r1, #0
 8006b38:	f003 ff8e 	bl	800aa58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f008 fc46 	bl	800f3d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	4f54300a 	.word	0x4f54300a
 8006b58:	4f54310a 	.word	0x4f54310a

08006b5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	333c      	adds	r3, #60	@ 0x3c
 8006b74:	3304      	adds	r3, #4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a15      	ldr	r2, [pc, #84]	@ (8006be4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d90e      	bls.n	8006bb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f008 fbfd 	bl	800f3b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8006be4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d90c      	bls.n	8006bd8 <PCD_EP_OutSetupPacket_int+0x7c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	799b      	ldrb	r3, [r3, #6]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d108      	bne.n	8006bd8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	f003 ff40 	bl	800aa58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	4f54300a 	.word	0x4f54300a

08006be8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d107      	bne.n	8006c16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c06:	883b      	ldrh	r3, [r7, #0]
 8006c08:	0419      	lsls	r1, r3, #16
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c14:	e028      	b.n	8006c68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	0c1b      	lsrs	r3, r3, #16
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
 8006c28:	e00d      	b.n	8006c46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	3340      	adds	r3, #64	@ 0x40
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	0c1b      	lsrs	r3, r3, #16
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	3301      	adds	r3, #1
 8006c44:	73fb      	strb	r3, [r7, #15]
 8006c46:	7bfa      	ldrb	r2, [r7, #15]
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d3ec      	bcc.n	8006c2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c50:	883b      	ldrh	r3, [r7, #0]
 8006c52:	0418      	lsls	r0, r3, #16
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6819      	ldr	r1, [r3, #0]
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	4302      	orrs	r2, r0
 8006c60:	3340      	adds	r3, #64	@ 0x40
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	887a      	ldrh	r2, [r7, #2]
 8006c88:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e267      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d075      	beq.n	8006dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006cce:	4b88      	ldr	r3, [pc, #544]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 030c 	and.w	r3, r3, #12
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cda:	4b85      	ldr	r3, [pc, #532]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d112      	bne.n	8006d0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ce6:	4b82      	ldr	r3, [pc, #520]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf2:	d10b      	bne.n	8006d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05b      	beq.n	8006db8 <HAL_RCC_OscConfig+0x108>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d157      	bne.n	8006db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e242      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d14:	d106      	bne.n	8006d24 <HAL_RCC_OscConfig+0x74>
 8006d16:	4b76      	ldr	r3, [pc, #472]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a75      	ldr	r2, [pc, #468]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	e01d      	b.n	8006d60 <HAL_RCC_OscConfig+0xb0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d2c:	d10c      	bne.n	8006d48 <HAL_RCC_OscConfig+0x98>
 8006d2e:	4b70      	ldr	r3, [pc, #448]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a6f      	ldr	r2, [pc, #444]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	e00b      	b.n	8006d60 <HAL_RCC_OscConfig+0xb0>
 8006d48:	4b69      	ldr	r3, [pc, #420]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a68      	ldr	r2, [pc, #416]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4b66      	ldr	r3, [pc, #408]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a65      	ldr	r2, [pc, #404]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d013      	beq.n	8006d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d68:	f7fd fec6 	bl	8004af8 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d70:	f7fd fec2 	bl	8004af8 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b64      	cmp	r3, #100	@ 0x64
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e207      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d82:	4b5b      	ldr	r3, [pc, #364]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0xc0>
 8006d8e:	e014      	b.n	8006dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d90:	f7fd feb2 	bl	8004af8 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d98:	f7fd feae 	bl	8004af8 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b64      	cmp	r3, #100	@ 0x64
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e1f3      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006daa:	4b51      	ldr	r3, [pc, #324]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0xe8>
 8006db6:	e000      	b.n	8006dba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d063      	beq.n	8006e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00b      	beq.n	8006dea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dd2:	4b47      	ldr	r3, [pc, #284]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d11c      	bne.n	8006e18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dde:	4b44      	ldr	r3, [pc, #272]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d116      	bne.n	8006e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dea:	4b41      	ldr	r3, [pc, #260]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_RCC_OscConfig+0x152>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d001      	beq.n	8006e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e1c7      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e02:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4937      	ldr	r1, [pc, #220]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e16:	e03a      	b.n	8006e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d020      	beq.n	8006e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e20:	4b34      	ldr	r3, [pc, #208]	@ (8006ef4 <HAL_RCC_OscConfig+0x244>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e26:	f7fd fe67 	bl	8004af8 <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e2c:	e008      	b.n	8006e40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e2e:	f7fd fe63 	bl	8004af8 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e1a8      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e40:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0f0      	beq.n	8006e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4c:	4b28      	ldr	r3, [pc, #160]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	4925      	ldr	r1, [pc, #148]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	600b      	str	r3, [r1, #0]
 8006e60:	e015      	b.n	8006e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e62:	4b24      	ldr	r3, [pc, #144]	@ (8006ef4 <HAL_RCC_OscConfig+0x244>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fd fe46 	bl	8004af8 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e70:	f7fd fe42 	bl	8004af8 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e187      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e82:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d036      	beq.n	8006f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d016      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ea2:	4b15      	ldr	r3, [pc, #84]	@ (8006ef8 <HAL_RCC_OscConfig+0x248>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fd fe26 	bl	8004af8 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eb0:	f7fd fe22 	bl	8004af8 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e167      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x200>
 8006ece:	e01b      	b.n	8006f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ed0:	4b09      	ldr	r3, [pc, #36]	@ (8006ef8 <HAL_RCC_OscConfig+0x248>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ed6:	f7fd fe0f 	bl	8004af8 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006edc:	e00e      	b.n	8006efc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ede:	f7fd fe0b 	bl	8004af8 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d907      	bls.n	8006efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e150      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	42470000 	.word	0x42470000
 8006ef8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006efc:	4b88      	ldr	r3, [pc, #544]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1ea      	bne.n	8006ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8097 	beq.w	8007044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f1a:	4b81      	ldr	r3, [pc, #516]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10f      	bne.n	8006f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f36:	4b7a      	ldr	r3, [pc, #488]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f46:	4b77      	ldr	r3, [pc, #476]	@ (8007124 <HAL_RCC_OscConfig+0x474>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d118      	bne.n	8006f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f52:	4b74      	ldr	r3, [pc, #464]	@ (8007124 <HAL_RCC_OscConfig+0x474>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a73      	ldr	r2, [pc, #460]	@ (8007124 <HAL_RCC_OscConfig+0x474>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f5e:	f7fd fdcb 	bl	8004af8 <HAL_GetTick>
 8006f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f66:	f7fd fdc7 	bl	8004af8 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e10c      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f78:	4b6a      	ldr	r3, [pc, #424]	@ (8007124 <HAL_RCC_OscConfig+0x474>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0f0      	beq.n	8006f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d106      	bne.n	8006f9a <HAL_RCC_OscConfig+0x2ea>
 8006f8c:	4b64      	ldr	r3, [pc, #400]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f90:	4a63      	ldr	r2, [pc, #396]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f98:	e01c      	b.n	8006fd4 <HAL_RCC_OscConfig+0x324>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCC_OscConfig+0x30c>
 8006fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	f043 0304 	orr.w	r3, r3, #4
 8006fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fae:	4b5c      	ldr	r3, [pc, #368]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fba:	e00b      	b.n	8006fd4 <HAL_RCC_OscConfig+0x324>
 8006fbc:	4b58      	ldr	r3, [pc, #352]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc0:	4a57      	ldr	r2, [pc, #348]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fc8:	4b55      	ldr	r3, [pc, #340]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fcc:	4a54      	ldr	r2, [pc, #336]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fce:	f023 0304 	bic.w	r3, r3, #4
 8006fd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d015      	beq.n	8007008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fdc:	f7fd fd8c 	bl	8004af8 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe2:	e00a      	b.n	8006ffa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe4:	f7fd fd88 	bl	8004af8 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e0cb      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ffa:	4b49      	ldr	r3, [pc, #292]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0ee      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x334>
 8007006:	e014      	b.n	8007032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007008:	f7fd fd76 	bl	8004af8 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800700e:	e00a      	b.n	8007026 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007010:	f7fd fd72 	bl	8004af8 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800701e:	4293      	cmp	r3, r2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e0b5      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007026:	4b3e      	ldr	r3, [pc, #248]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1ee      	bne.n	8007010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d105      	bne.n	8007044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007038:	4b39      	ldr	r3, [pc, #228]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 800703a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703c:	4a38      	ldr	r2, [pc, #224]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 800703e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007042:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80a1 	beq.w	8007190 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800704e:	4b34      	ldr	r3, [pc, #208]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 030c 	and.w	r3, r3, #12
 8007056:	2b08      	cmp	r3, #8
 8007058:	d05c      	beq.n	8007114 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d141      	bne.n	80070e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007062:	4b31      	ldr	r3, [pc, #196]	@ (8007128 <HAL_RCC_OscConfig+0x478>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007068:	f7fd fd46 	bl	8004af8 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007070:	f7fd fd42 	bl	8004af8 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e087      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007082:	4b27      	ldr	r3, [pc, #156]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	019b      	lsls	r3, r3, #6
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	3b01      	subs	r3, #1
 80070a8:	041b      	lsls	r3, r3, #16
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	061b      	lsls	r3, r3, #24
 80070b2:	491b      	ldr	r1, [pc, #108]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <HAL_RCC_OscConfig+0x478>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070be:	f7fd fd1b 	bl	8004af8 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c6:	f7fd fd17 	bl	8004af8 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e05c      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d8:	4b11      	ldr	r3, [pc, #68]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f0      	beq.n	80070c6 <HAL_RCC_OscConfig+0x416>
 80070e4:	e054      	b.n	8007190 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070e6:	4b10      	ldr	r3, [pc, #64]	@ (8007128 <HAL_RCC_OscConfig+0x478>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ec:	f7fd fd04 	bl	8004af8 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f4:	f7fd fd00 	bl	8004af8 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e045      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007106:	4b06      	ldr	r3, [pc, #24]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x444>
 8007112:	e03d      	b.n	8007190 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d107      	bne.n	800712c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e038      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
 8007120:	40023800 	.word	0x40023800
 8007124:	40007000 	.word	0x40007000
 8007128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800712c:	4b1b      	ldr	r3, [pc, #108]	@ (800719c <HAL_RCC_OscConfig+0x4ec>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d028      	beq.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007144:	429a      	cmp	r2, r3
 8007146:	d121      	bne.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007152:	429a      	cmp	r2, r3
 8007154:	d11a      	bne.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007164:	4293      	cmp	r3, r2
 8007166:	d111      	bne.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	3b01      	subs	r3, #1
 8007176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007178:	429a      	cmp	r2, r3
 800717a:	d107      	bne.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40023800 	.word	0x40023800

080071a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0cc      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071b4:	4b68      	ldr	r3, [pc, #416]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d90c      	bls.n	80071dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c2:	4b65      	ldr	r3, [pc, #404]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	4b63      	ldr	r3, [pc, #396]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e0b8      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d020      	beq.n	800722a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071f4:	4b59      	ldr	r3, [pc, #356]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	4a58      	ldr	r2, [pc, #352]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 80071fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80071fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800720c:	4b53      	ldr	r3, [pc, #332]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4a52      	ldr	r2, [pc, #328]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007218:	4b50      	ldr	r3, [pc, #320]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	494d      	ldr	r1, [pc, #308]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	4313      	orrs	r3, r2
 8007228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d044      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d107      	bne.n	800724e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723e:	4b47      	ldr	r3, [pc, #284]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d119      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e07f      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d003      	beq.n	800725e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800725a:	2b03      	cmp	r3, #3
 800725c:	d107      	bne.n	800726e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800725e:	4b3f      	ldr	r3, [pc, #252]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e06f      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726e:	4b3b      	ldr	r3, [pc, #236]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e067      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800727e:	4b37      	ldr	r3, [pc, #220]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f023 0203 	bic.w	r2, r3, #3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	4934      	ldr	r1, [pc, #208]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 800728c:	4313      	orrs	r3, r2
 800728e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007290:	f7fd fc32 	bl	8004af8 <HAL_GetTick>
 8007294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007296:	e00a      	b.n	80072ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007298:	f7fd fc2e 	bl	8004af8 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e04f      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ae:	4b2b      	ldr	r3, [pc, #172]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 020c 	and.w	r2, r3, #12
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	429a      	cmp	r2, r3
 80072be:	d1eb      	bne.n	8007298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072c0:	4b25      	ldr	r3, [pc, #148]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d20c      	bcs.n	80072e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ce:	4b22      	ldr	r3, [pc, #136]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d6:	4b20      	ldr	r3, [pc, #128]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d001      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e032      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072f4:	4b19      	ldr	r3, [pc, #100]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4916      	ldr	r1, [pc, #88]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007302:	4313      	orrs	r3, r2
 8007304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007312:	4b12      	ldr	r3, [pc, #72]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	490e      	ldr	r1, [pc, #56]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	4313      	orrs	r3, r2
 8007324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007326:	f000 f821 	bl	800736c <HAL_RCC_GetSysClockFreq>
 800732a:	4602      	mov	r2, r0
 800732c:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	490a      	ldr	r1, [pc, #40]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 8007338:	5ccb      	ldrb	r3, [r1, r3]
 800733a:	fa22 f303 	lsr.w	r3, r2, r3
 800733e:	4a09      	ldr	r2, [pc, #36]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007342:	4b09      	ldr	r3, [pc, #36]	@ (8007368 <HAL_RCC_ClockConfig+0x1c8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f7fd fb92 	bl	8004a70 <HAL_InitTick>

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40023c00 	.word	0x40023c00
 800735c:	40023800 	.word	0x40023800
 8007360:	080106b4 	.word	0x080106b4
 8007364:	20000004 	.word	0x20000004
 8007368:	20000030 	.word	0x20000030

0800736c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800736c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007370:	b090      	sub	sp, #64	@ 0x40
 8007372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007384:	4b59      	ldr	r3, [pc, #356]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 030c 	and.w	r3, r3, #12
 800738c:	2b08      	cmp	r3, #8
 800738e:	d00d      	beq.n	80073ac <HAL_RCC_GetSysClockFreq+0x40>
 8007390:	2b08      	cmp	r3, #8
 8007392:	f200 80a1 	bhi.w	80074d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_RCC_GetSysClockFreq+0x34>
 800739a:	2b04      	cmp	r3, #4
 800739c:	d003      	beq.n	80073a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800739e:	e09b      	b.n	80074d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073a0:	4b53      	ldr	r3, [pc, #332]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80073a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073a4:	e09b      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073a6:	4b53      	ldr	r3, [pc, #332]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80073a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073aa:	e098      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073ac:	4b4f      	ldr	r3, [pc, #316]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073b6:	4b4d      	ldr	r3, [pc, #308]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d028      	beq.n	8007414 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073c2:	4b4a      	ldr	r3, [pc, #296]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	099b      	lsrs	r3, r3, #6
 80073c8:	2200      	movs	r2, #0
 80073ca:	623b      	str	r3, [r7, #32]
 80073cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80073d4:	2100      	movs	r1, #0
 80073d6:	4b47      	ldr	r3, [pc, #284]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80073d8:	fb03 f201 	mul.w	r2, r3, r1
 80073dc:	2300      	movs	r3, #0
 80073de:	fb00 f303 	mul.w	r3, r0, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	4a43      	ldr	r2, [pc, #268]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80073e6:	fba0 1202 	umull	r1, r2, r0, r2
 80073ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ec:	460a      	mov	r2, r1
 80073ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80073f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f2:	4413      	add	r3, r2
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f8:	2200      	movs	r2, #0
 80073fa:	61bb      	str	r3, [r7, #24]
 80073fc:	61fa      	str	r2, [r7, #28]
 80073fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007402:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007406:	f7f8 ff43 	bl	8000290 <__aeabi_uldivmod>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4613      	mov	r3, r2
 8007410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007412:	e053      	b.n	80074bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007414:	4b35      	ldr	r3, [pc, #212]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	099b      	lsrs	r3, r3, #6
 800741a:	2200      	movs	r2, #0
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	617a      	str	r2, [r7, #20]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007426:	f04f 0b00 	mov.w	fp, #0
 800742a:	4652      	mov	r2, sl
 800742c:	465b      	mov	r3, fp
 800742e:	f04f 0000 	mov.w	r0, #0
 8007432:	f04f 0100 	mov.w	r1, #0
 8007436:	0159      	lsls	r1, r3, #5
 8007438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800743c:	0150      	lsls	r0, r2, #5
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	ebb2 080a 	subs.w	r8, r2, sl
 8007446:	eb63 090b 	sbc.w	r9, r3, fp
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007456:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800745a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800745e:	ebb2 0408 	subs.w	r4, r2, r8
 8007462:	eb63 0509 	sbc.w	r5, r3, r9
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	f04f 0300 	mov.w	r3, #0
 800746e:	00eb      	lsls	r3, r5, #3
 8007470:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007474:	00e2      	lsls	r2, r4, #3
 8007476:	4614      	mov	r4, r2
 8007478:	461d      	mov	r5, r3
 800747a:	eb14 030a 	adds.w	r3, r4, sl
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	eb45 030b 	adc.w	r3, r5, fp
 8007484:	607b      	str	r3, [r7, #4]
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007492:	4629      	mov	r1, r5
 8007494:	028b      	lsls	r3, r1, #10
 8007496:	4621      	mov	r1, r4
 8007498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800749c:	4621      	mov	r1, r4
 800749e:	028a      	lsls	r2, r1, #10
 80074a0:	4610      	mov	r0, r2
 80074a2:	4619      	mov	r1, r3
 80074a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a6:	2200      	movs	r2, #0
 80074a8:	60bb      	str	r3, [r7, #8]
 80074aa:	60fa      	str	r2, [r7, #12]
 80074ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074b0:	f7f8 feee 	bl	8000290 <__aeabi_uldivmod>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4613      	mov	r3, r2
 80074ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80074bc:	4b0b      	ldr	r3, [pc, #44]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	3301      	adds	r3, #1
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80074cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074d6:	e002      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074d8:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80074da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3740      	adds	r7, #64	@ 0x40
 80074e4:	46bd      	mov	sp, r7
 80074e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800
 80074f0:	00f42400 	.word	0x00f42400
 80074f4:	017d7840 	.word	0x017d7840

080074f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074fc:	4b03      	ldr	r3, [pc, #12]	@ (800750c <HAL_RCC_GetHCLKFreq+0x14>)
 80074fe:	681b      	ldr	r3, [r3, #0]
}
 8007500:	4618      	mov	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000004 	.word	0x20000004

08007510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e07b      	b.n	800761a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d108      	bne.n	800753c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007532:	d009      	beq.n	8007548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	61da      	str	r2, [r3, #28]
 800753a:	e005      	b.n	8007548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fa fc4a 	bl	8001dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800757e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075cc:	ea42 0103 	orr.w	r1, r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	0c1b      	lsrs	r3, r3, #16
 80075e6:	f003 0104 	and.w	r1, r3, #4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ee:	f003 0210 	and.w	r2, r3, #16
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b088      	sub	sp, #32
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	603b      	str	r3, [r7, #0]
 800762e:	4613      	mov	r3, r2
 8007630:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007632:	f7fd fa61 	bl	8004af8 <HAL_GetTick>
 8007636:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b01      	cmp	r3, #1
 8007646:	d001      	beq.n	800764c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007648:	2302      	movs	r3, #2
 800764a:	e12a      	b.n	80078a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_SPI_Transmit+0x36>
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e122      	b.n	80078a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_SPI_Transmit+0x48>
 8007666:	2302      	movs	r3, #2
 8007668:	e11b      	b.n	80078a2 <HAL_SPI_Transmit+0x280>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2203      	movs	r2, #3
 8007676:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b8:	d10f      	bne.n	80076da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e4:	2b40      	cmp	r3, #64	@ 0x40
 80076e6:	d007      	beq.n	80076f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007700:	d152      	bne.n	80077a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SPI_Transmit+0xee>
 800770a:	8b7b      	ldrh	r3, [r7, #26]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d145      	bne.n	800779c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	881a      	ldrh	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007720:	1c9a      	adds	r2, r3, #2
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007734:	e032      	b.n	800779c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b02      	cmp	r3, #2
 8007742:	d112      	bne.n	800776a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007748:	881a      	ldrh	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007754:	1c9a      	adds	r2, r3, #2
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007768:	e018      	b.n	800779c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800776a:	f7fd f9c5 	bl	8004af8 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d803      	bhi.n	8007782 <HAL_SPI_Transmit+0x160>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d102      	bne.n	8007788 <HAL_SPI_Transmit+0x166>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e082      	b.n	80078a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1c7      	bne.n	8007736 <HAL_SPI_Transmit+0x114>
 80077a6:	e053      	b.n	8007850 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <HAL_SPI_Transmit+0x194>
 80077b0:	8b7b      	ldrh	r3, [r7, #26]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d147      	bne.n	8007846 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	330c      	adds	r3, #12
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077dc:	e033      	b.n	8007846 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d113      	bne.n	8007814 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	330c      	adds	r3, #12
 80077f6:	7812      	ldrb	r2, [r2, #0]
 80077f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007812:	e018      	b.n	8007846 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007814:	f7fd f970 	bl	8004af8 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d803      	bhi.n	800782c <HAL_SPI_Transmit+0x20a>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d102      	bne.n	8007832 <HAL_SPI_Transmit+0x210>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e02d      	b.n	80078a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1c6      	bne.n	80077de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fd21 	bl	800829c <SPI_EndRxTxTransaction>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2220      	movs	r2, #32
 8007864:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800786e:	2300      	movs	r3, #0
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80078a0:	2300      	movs	r3, #0
  }
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b088      	sub	sp, #32
 80078ae:	af02      	add	r7, sp, #8
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	603b      	str	r3, [r7, #0]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d001      	beq.n	80078ca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80078c6:	2302      	movs	r3, #2
 80078c8:	e104      	b.n	8007ad4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078d2:	d112      	bne.n	80078fa <HAL_SPI_Receive+0x50>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10e      	bne.n	80078fa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2204      	movs	r2, #4
 80078e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078e4:	88fa      	ldrh	r2, [r7, #6]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	4613      	mov	r3, r2
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f8f3 	bl	8007adc <HAL_SPI_TransmitReceive>
 80078f6:	4603      	mov	r3, r0
 80078f8:	e0ec      	b.n	8007ad4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078fa:	f7fd f8fd 	bl	8004af8 <HAL_GetTick>
 80078fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_SPI_Receive+0x62>
 8007906:	88fb      	ldrh	r3, [r7, #6]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e0e1      	b.n	8007ad4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007916:	2b01      	cmp	r3, #1
 8007918:	d101      	bne.n	800791e <HAL_SPI_Receive+0x74>
 800791a:	2302      	movs	r3, #2
 800791c:	e0da      	b.n	8007ad4 <HAL_SPI_Receive+0x22a>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2204      	movs	r2, #4
 800792a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800796c:	d10f      	bne.n	800798e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800797c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800798c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007998:	2b40      	cmp	r3, #64	@ 0x40
 800799a:	d007      	beq.n	80079ac <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d170      	bne.n	8007a96 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079b4:	e035      	b.n	8007a22 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d115      	bne.n	80079f0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f103 020c 	add.w	r2, r3, #12
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d0:	7812      	ldrb	r2, [r2, #0]
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079ee:	e018      	b.n	8007a22 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079f0:	f7fd f882 	bl	8004af8 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d803      	bhi.n	8007a08 <HAL_SPI_Receive+0x15e>
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a06:	d102      	bne.n	8007a0e <HAL_SPI_Receive+0x164>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e058      	b.n	8007ad4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1c4      	bne.n	80079b6 <HAL_SPI_Receive+0x10c>
 8007a2c:	e038      	b.n	8007aa0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d113      	bne.n	8007a64 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a46:	b292      	uxth	r2, r2
 8007a48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4e:	1c9a      	adds	r2, r3, #2
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a62:	e018      	b.n	8007a96 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a64:	f7fd f848 	bl	8004af8 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d803      	bhi.n	8007a7c <HAL_SPI_Receive+0x1d2>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d102      	bne.n	8007a82 <HAL_SPI_Receive+0x1d8>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e01e      	b.n	8007ad4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1c6      	bne.n	8007a2e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fb93 	bl	80081d0 <SPI_EndRxTransaction>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
  }
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	@ 0x28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007aea:	2301      	movs	r3, #1
 8007aec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aee:	f7fd f803 	bl	8004af8 <HAL_GetTick>
 8007af2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007afa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007b02:	887b      	ldrh	r3, [r7, #2]
 8007b04:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b06:	7ffb      	ldrb	r3, [r7, #31]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d00c      	beq.n	8007b26 <HAL_SPI_TransmitReceive+0x4a>
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b12:	d106      	bne.n	8007b22 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <HAL_SPI_TransmitReceive+0x46>
 8007b1c:	7ffb      	ldrb	r3, [r7, #31]
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d001      	beq.n	8007b26 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
 8007b24:	e17f      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x5c>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x5c>
 8007b32:	887b      	ldrh	r3, [r7, #2]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e174      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_SPI_TransmitReceive+0x6e>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e16d      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x34a>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d003      	beq.n	8007b66 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2205      	movs	r2, #5
 8007b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	887a      	ldrh	r2, [r7, #2]
 8007b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	887a      	ldrh	r2, [r7, #2]
 8007b7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	887a      	ldrh	r2, [r7, #2]
 8007b88:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	887a      	ldrh	r2, [r7, #2]
 8007b8e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d007      	beq.n	8007bba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bc2:	d17e      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <HAL_SPI_TransmitReceive+0xf6>
 8007bcc:	8afb      	ldrh	r3, [r7, #22]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d16c      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd6:	881a      	ldrh	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be2:	1c9a      	adds	r2, r3, #2
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf6:	e059      	b.n	8007cac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d11b      	bne.n	8007c3e <HAL_SPI_TransmitReceive+0x162>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d016      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x162>
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d113      	bne.n	8007c3e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1a:	881a      	ldrh	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c26:	1c9a      	adds	r2, r3, #2
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d119      	bne.n	8007c80 <HAL_SPI_TransmitReceive+0x1a4>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d014      	beq.n	8007c80 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c60:	b292      	uxth	r2, r2
 8007c62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c68:	1c9a      	adds	r2, r3, #2
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	3b01      	subs	r3, #1
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c80:	f7fc ff3a 	bl	8004af8 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d80d      	bhi.n	8007cac <HAL_SPI_TransmitReceive+0x1d0>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c96:	d009      	beq.n	8007cac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e0bc      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1a0      	bne.n	8007bf8 <HAL_SPI_TransmitReceive+0x11c>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d19b      	bne.n	8007bf8 <HAL_SPI_TransmitReceive+0x11c>
 8007cc0:	e082      	b.n	8007dc8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_SPI_TransmitReceive+0x1f4>
 8007cca:	8afb      	ldrh	r3, [r7, #22]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d171      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	330c      	adds	r3, #12
 8007cda:	7812      	ldrb	r2, [r2, #0]
 8007cdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf6:	e05d      	b.n	8007db4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d11c      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x264>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d017      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x264>
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d114      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	330c      	adds	r3, #12
 8007d20:	7812      	ldrb	r2, [r2, #0]
 8007d22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d119      	bne.n	8007d82 <HAL_SPI_TransmitReceive+0x2a6>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d014      	beq.n	8007d82 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d82:	f7fc feb9 	bl	8004af8 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d803      	bhi.n	8007d9a <HAL_SPI_TransmitReceive+0x2be>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d98:	d102      	bne.n	8007da0 <HAL_SPI_TransmitReceive+0x2c4>
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e038      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d19c      	bne.n	8007cf8 <HAL_SPI_TransmitReceive+0x21c>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d197      	bne.n	8007cf8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dc8:	6a3a      	ldr	r2, [r7, #32]
 8007dca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fa65 	bl	800829c <SPI_EndRxTxTransaction>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d008      	beq.n	8007dea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e01d      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007df2:	2300      	movs	r3, #0
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	613b      	str	r3, [r7, #16]
 8007e06:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007e24:	2300      	movs	r3, #0
  }
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3728      	adds	r7, #40	@ 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d001      	beq.n	8007e4e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e097      	b.n	8007f7e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_SPI_Transmit_DMA+0x2a>
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e08f      	b.n	8007f7e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_SPI_Transmit_DMA+0x3c>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e088      	b.n	8007f7e <HAL_SPI_Transmit_DMA+0x14e>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2203      	movs	r2, #3
 8007e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	88fa      	ldrh	r2, [r7, #6]
 8007e8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	88fa      	ldrh	r2, [r7, #6]
 8007e92:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eba:	d10f      	bne.n	8007edc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007eda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee0:	4a29      	ldr	r2, [pc, #164]	@ (8007f88 <HAL_SPI_Transmit_DMA+0x158>)
 8007ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee8:	4a28      	ldr	r2, [pc, #160]	@ (8007f8c <HAL_SPI_Transmit_DMA+0x15c>)
 8007eea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef0:	4a27      	ldr	r2, [pc, #156]	@ (8007f90 <HAL_SPI_Transmit_DMA+0x160>)
 8007ef2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef8:	2200      	movs	r2, #0
 8007efa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f04:	4619      	mov	r1, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007f14:	f7fc ffe0 	bl	8004ed8 <HAL_DMA_Start_IT>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f22:	f043 0210 	orr.w	r2, r3, #16
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e023      	b.n	8007f7e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f40:	2b40      	cmp	r3, #64	@ 0x40
 8007f42:	d007      	beq.n	8007f54 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f52:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0220 	orr.w	r2, r2, #32
 8007f6a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0202 	orr.w	r2, r2, #2
 8007f7a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	08008065 	.word	0x08008065
 8007f8c:	08007fbd 	.word	0x08007fbd
 8007f90:	08008081 	.word	0x08008081

08007f94 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fca:	f7fc fd95 	bl	8004af8 <HAL_GetTick>
 8007fce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fde:	d03b      	beq.n	8008058 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0220 	bic.w	r2, r2, #32
 8007fee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0202 	bic.w	r2, r2, #2
 8007ffe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	2164      	movs	r1, #100	@ 0x64
 8008004:	6978      	ldr	r0, [r7, #20]
 8008006:	f000 f949 	bl	800829c <SPI_EndRxTxTransaction>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008014:	f043 0220 	orr.w	r2, r3, #32
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2200      	movs	r2, #0
 800803e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008050:	6978      	ldr	r0, [r7, #20]
 8008052:	f7ff ffa9 	bl	8007fa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008056:	e002      	b.n	800805e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008058:	6978      	ldr	r0, [r7, #20]
 800805a:	f7fa f9f1 	bl	8002440 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008070:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f7ff ff8e 	bl	8007f94 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0203 	bic.w	r2, r2, #3
 800809c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a2:	f043 0210 	orr.w	r2, r3, #16
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7ff ff78 	bl	8007fa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080d0:	f7fc fd12 	bl	8004af8 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	1a9b      	subs	r3, r3, r2
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4413      	add	r3, r2
 80080de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080e0:	f7fc fd0a 	bl	8004af8 <HAL_GetTick>
 80080e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080e6:	4b39      	ldr	r3, [pc, #228]	@ (80081cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	015b      	lsls	r3, r3, #5
 80080ec:	0d1b      	lsrs	r3, r3, #20
 80080ee:	69fa      	ldr	r2, [r7, #28]
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080f6:	e054      	b.n	80081a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d050      	beq.n	80081a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008100:	f7fc fcfa 	bl	8004af8 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	429a      	cmp	r2, r3
 800810e:	d902      	bls.n	8008116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d13d      	bne.n	8008192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800812e:	d111      	bne.n	8008154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008138:	d004      	beq.n	8008144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008142:	d107      	bne.n	8008154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800815c:	d10f      	bne.n	800817e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800817c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e017      	b.n	80081c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	3b01      	subs	r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	4013      	ands	r3, r2
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	bf0c      	ite	eq
 80081b2:	2301      	moveq	r3, #1
 80081b4:	2300      	movne	r3, #0
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	461a      	mov	r2, r3
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d19b      	bne.n	80080f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000004 	.word	0x20000004

080081d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081e4:	d111      	bne.n	800820a <SPI_EndRxTransaction+0x3a>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081ee:	d004      	beq.n	80081fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f8:	d107      	bne.n	800820a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008208:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008212:	d12a      	bne.n	800826a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800821c:	d012      	beq.n	8008244 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	2180      	movs	r1, #128	@ 0x80
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff ff49 	bl	80080c0 <SPI_WaitFlagStateUntilTimeout>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02d      	beq.n	8008290 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008238:	f043 0220 	orr.w	r2, r3, #32
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e026      	b.n	8008292 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	2101      	movs	r1, #1
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff ff36 	bl	80080c0 <SPI_WaitFlagStateUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01a      	beq.n	8008290 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825e:	f043 0220 	orr.w	r2, r3, #32
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e013      	b.n	8008292 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2200      	movs	r2, #0
 8008272:	2101      	movs	r1, #1
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff ff23 	bl	80080c0 <SPI_WaitFlagStateUntilTimeout>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008284:	f043 0220 	orr.w	r2, r3, #32
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e000      	b.n	8008292 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af02      	add	r7, sp, #8
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2201      	movs	r2, #1
 80082b0:	2102      	movs	r1, #2
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7ff ff04 	bl	80080c0 <SPI_WaitFlagStateUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d007      	beq.n	80082ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c2:	f043 0220 	orr.w	r2, r3, #32
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e032      	b.n	8008334 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082ce:	4b1b      	ldr	r3, [pc, #108]	@ (800833c <SPI_EndRxTxTransaction+0xa0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008340 <SPI_EndRxTxTransaction+0xa4>)
 80082d4:	fba2 2303 	umull	r2, r3, r2, r3
 80082d8:	0d5b      	lsrs	r3, r3, #21
 80082da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80082de:	fb02 f303 	mul.w	r3, r2, r3
 80082e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082ec:	d112      	bne.n	8008314 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	2180      	movs	r1, #128	@ 0x80
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7ff fee1 	bl	80080c0 <SPI_WaitFlagStateUntilTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d016      	beq.n	8008332 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008308:	f043 0220 	orr.w	r2, r3, #32
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e00f      	b.n	8008334 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	3b01      	subs	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832a:	2b80      	cmp	r3, #128	@ 0x80
 800832c:	d0f2      	beq.n	8008314 <SPI_EndRxTxTransaction+0x78>
 800832e:	e000      	b.n	8008332 <SPI_EndRxTxTransaction+0x96>
        break;
 8008330:	bf00      	nop
  }

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20000004 	.word	0x20000004
 8008340:	165e9f81 	.word	0x165e9f81

08008344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e041      	b.n	80083da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7f9 ffa0 	bl	80022b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f000 fd6a 	bl	8008e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e041      	b.n	8008478 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f839 	bl	8008480 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3304      	adds	r3, #4
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f000 fd1b 	bl	8008e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	bf0c      	ite	eq
 80084b8:	2301      	moveq	r3, #1
 80084ba:	2300      	movne	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	e022      	b.n	8008506 <HAL_TIM_PWM_Start_DMA+0x72>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d109      	bne.n	80084da <HAL_TIM_PWM_Start_DMA+0x46>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	bf0c      	ite	eq
 80084d2:	2301      	moveq	r3, #1
 80084d4:	2300      	movne	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	e015      	b.n	8008506 <HAL_TIM_PWM_Start_DMA+0x72>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d109      	bne.n	80084f4 <HAL_TIM_PWM_Start_DMA+0x60>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	bf0c      	ite	eq
 80084ec:	2301      	moveq	r3, #1
 80084ee:	2300      	movne	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	e008      	b.n	8008506 <HAL_TIM_PWM_Start_DMA+0x72>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800850a:	2302      	movs	r3, #2
 800850c:	e15d      	b.n	80087ca <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d109      	bne.n	8008528 <HAL_TIM_PWM_Start_DMA+0x94>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	bf0c      	ite	eq
 8008520:	2301      	moveq	r3, #1
 8008522:	2300      	movne	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	e022      	b.n	800856e <HAL_TIM_PWM_Start_DMA+0xda>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d109      	bne.n	8008542 <HAL_TIM_PWM_Start_DMA+0xae>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b01      	cmp	r3, #1
 8008538:	bf0c      	ite	eq
 800853a:	2301      	moveq	r3, #1
 800853c:	2300      	movne	r3, #0
 800853e:	b2db      	uxtb	r3, r3
 8008540:	e015      	b.n	800856e <HAL_TIM_PWM_Start_DMA+0xda>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b08      	cmp	r3, #8
 8008546:	d109      	bne.n	800855c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	bf0c      	ite	eq
 8008554:	2301      	moveq	r3, #1
 8008556:	2300      	movne	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	e008      	b.n	800856e <HAL_TIM_PWM_Start_DMA+0xda>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b01      	cmp	r3, #1
 8008566:	bf0c      	ite	eq
 8008568:	2301      	moveq	r3, #1
 800856a:	2300      	movne	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d024      	beq.n	80085bc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <HAL_TIM_PWM_Start_DMA+0xea>
 8008578:	887b      	ldrh	r3, [r7, #2]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e123      	b.n	80087ca <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2202      	movs	r2, #2
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008590:	e016      	b.n	80085c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b04      	cmp	r3, #4
 8008596:	d104      	bne.n	80085a2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085a0:	e00e      	b.n	80085c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d104      	bne.n	80085b2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085b0:	e006      	b.n	80085c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2202      	movs	r2, #2
 80085b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085ba:	e001      	b.n	80085c0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e104      	b.n	80087ca <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2b0c      	cmp	r3, #12
 80085c4:	f200 80ae 	bhi.w	8008724 <HAL_TIM_PWM_Start_DMA+0x290>
 80085c8:	a201      	add	r2, pc, #4	@ (adr r2, 80085d0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	08008605 	.word	0x08008605
 80085d4:	08008725 	.word	0x08008725
 80085d8:	08008725 	.word	0x08008725
 80085dc:	08008725 	.word	0x08008725
 80085e0:	0800864d 	.word	0x0800864d
 80085e4:	08008725 	.word	0x08008725
 80085e8:	08008725 	.word	0x08008725
 80085ec:	08008725 	.word	0x08008725
 80085f0:	08008695 	.word	0x08008695
 80085f4:	08008725 	.word	0x08008725
 80085f8:	08008725 	.word	0x08008725
 80085fc:	08008725 	.word	0x08008725
 8008600:	080086dd 	.word	0x080086dd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008608:	4a72      	ldr	r2, [pc, #456]	@ (80087d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800860a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008610:	4a71      	ldr	r2, [pc, #452]	@ (80087d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008612:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008618:	4a70      	ldr	r2, [pc, #448]	@ (80087dc <HAL_TIM_PWM_Start_DMA+0x348>)
 800861a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3334      	adds	r3, #52	@ 0x34
 8008628:	461a      	mov	r2, r3
 800862a:	887b      	ldrh	r3, [r7, #2]
 800862c:	f7fc fc54 	bl	8004ed8 <HAL_DMA_Start_IT>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e0c7      	b.n	80087ca <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008648:	60da      	str	r2, [r3, #12]
      break;
 800864a:	e06e      	b.n	800872a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	4a60      	ldr	r2, [pc, #384]	@ (80087d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008652:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008658:	4a5f      	ldr	r2, [pc, #380]	@ (80087d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800865a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008660:	4a5e      	ldr	r2, [pc, #376]	@ (80087dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8008662:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3338      	adds	r3, #56	@ 0x38
 8008670:	461a      	mov	r2, r3
 8008672:	887b      	ldrh	r3, [r7, #2]
 8008674:	f7fc fc30 	bl	8004ed8 <HAL_DMA_Start_IT>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e0a3      	b.n	80087ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008690:	60da      	str	r2, [r3, #12]
      break;
 8008692:	e04a      	b.n	800872a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008698:	4a4e      	ldr	r2, [pc, #312]	@ (80087d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800869a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a0:	4a4d      	ldr	r2, [pc, #308]	@ (80087d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80086a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a8:	4a4c      	ldr	r2, [pc, #304]	@ (80087dc <HAL_TIM_PWM_Start_DMA+0x348>)
 80086aa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	333c      	adds	r3, #60	@ 0x3c
 80086b8:	461a      	mov	r2, r3
 80086ba:	887b      	ldrh	r3, [r7, #2]
 80086bc:	f7fc fc0c 	bl	8004ed8 <HAL_DMA_Start_IT>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e07f      	b.n	80087ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086d8:	60da      	str	r2, [r3, #12]
      break;
 80086da:	e026      	b.n	800872a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e0:	4a3c      	ldr	r2, [pc, #240]	@ (80087d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80086e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e8:	4a3b      	ldr	r2, [pc, #236]	@ (80087d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80086ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	4a3a      	ldr	r2, [pc, #232]	@ (80087dc <HAL_TIM_PWM_Start_DMA+0x348>)
 80086f2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3340      	adds	r3, #64	@ 0x40
 8008700:	461a      	mov	r2, r3
 8008702:	887b      	ldrh	r3, [r7, #2]
 8008704:	f7fc fbe8 	bl	8004ed8 <HAL_DMA_Start_IT>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e05b      	b.n	80087ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008720:	60da      	str	r2, [r3, #12]
      break;
 8008722:	e002      	b.n	800872a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]
      break;
 8008728:	bf00      	nop
  }

  if (status == HAL_OK)
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d14b      	bne.n	80087c8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2201      	movs	r2, #1
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fe41 	bl	80093c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a27      	ldr	r2, [pc, #156]	@ (80087e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d107      	bne.n	8008758 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008756:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a20      	ldr	r2, [pc, #128]	@ (80087e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d018      	beq.n	8008794 <HAL_TIM_PWM_Start_DMA+0x300>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876a:	d013      	beq.n	8008794 <HAL_TIM_PWM_Start_DMA+0x300>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1c      	ldr	r2, [pc, #112]	@ (80087e4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00e      	beq.n	8008794 <HAL_TIM_PWM_Start_DMA+0x300>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a1b      	ldr	r2, [pc, #108]	@ (80087e8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d009      	beq.n	8008794 <HAL_TIM_PWM_Start_DMA+0x300>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a19      	ldr	r2, [pc, #100]	@ (80087ec <HAL_TIM_PWM_Start_DMA+0x358>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <HAL_TIM_PWM_Start_DMA+0x300>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a18      	ldr	r2, [pc, #96]	@ (80087f0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d111      	bne.n	80087b8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2b06      	cmp	r3, #6
 80087a4:	d010      	beq.n	80087c8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0201 	orr.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b6:	e007      	b.n	80087c8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0201 	orr.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	08008d4d 	.word	0x08008d4d
 80087d8:	08008df5 	.word	0x08008df5
 80087dc:	08008cbb 	.word	0x08008cbb
 80087e0:	40010000 	.word	0x40010000
 80087e4:	40000400 	.word	0x40000400
 80087e8:	40000800 	.word	0x40000800
 80087ec:	40000c00 	.word	0x40000c00
 80087f0:	40014000 	.word	0x40014000

080087f4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b0c      	cmp	r3, #12
 8008806:	d855      	bhi.n	80088b4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008808:	a201      	add	r2, pc, #4	@ (adr r2, 8008810 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880e:	bf00      	nop
 8008810:	08008845 	.word	0x08008845
 8008814:	080088b5 	.word	0x080088b5
 8008818:	080088b5 	.word	0x080088b5
 800881c:	080088b5 	.word	0x080088b5
 8008820:	08008861 	.word	0x08008861
 8008824:	080088b5 	.word	0x080088b5
 8008828:	080088b5 	.word	0x080088b5
 800882c:	080088b5 	.word	0x080088b5
 8008830:	0800887d 	.word	0x0800887d
 8008834:	080088b5 	.word	0x080088b5
 8008838:	080088b5 	.word	0x080088b5
 800883c:	080088b5 	.word	0x080088b5
 8008840:	08008899 	.word	0x08008899
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008852:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	4618      	mov	r0, r3
 800885a:	f7fc fb95 	bl	8004f88 <HAL_DMA_Abort_IT>
      break;
 800885e:	e02c      	b.n	80088ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800886e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	4618      	mov	r0, r3
 8008876:	f7fc fb87 	bl	8004f88 <HAL_DMA_Abort_IT>
      break;
 800887a:	e01e      	b.n	80088ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800888a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008890:	4618      	mov	r0, r3
 8008892:	f7fc fb79 	bl	8004f88 <HAL_DMA_Abort_IT>
      break;
 8008896:	e010      	b.n	80088ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80088a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fc fb6b 	bl	8004f88 <HAL_DMA_Abort_IT>
      break;
 80088b2:	e002      	b.n	80088ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
      break;
 80088b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d157      	bne.n	8008970 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2200      	movs	r2, #0
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fd79 	bl	80093c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a2a      	ldr	r2, [pc, #168]	@ (800897c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d117      	bne.n	8008908 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6a1a      	ldr	r2, [r3, #32]
 80088de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80088e2:	4013      	ands	r3, r2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10f      	bne.n	8008908 <HAL_TIM_PWM_Stop_DMA+0x114>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6a1a      	ldr	r2, [r3, #32]
 80088ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80088f2:	4013      	ands	r3, r2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d107      	bne.n	8008908 <HAL_TIM_PWM_Stop_DMA+0x114>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008906:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6a1a      	ldr	r2, [r3, #32]
 800890e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008912:	4013      	ands	r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10f      	bne.n	8008938 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6a1a      	ldr	r2, [r3, #32]
 800891e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d107      	bne.n	8008938 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f022 0201 	bic.w	r2, r2, #1
 8008936:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d104      	bne.n	8008948 <HAL_TIM_PWM_Stop_DMA+0x154>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008946:	e013      	b.n	8008970 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b04      	cmp	r3, #4
 800894c:	d104      	bne.n	8008958 <HAL_TIM_PWM_Stop_DMA+0x164>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008956:	e00b      	b.n	8008970 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b08      	cmp	r3, #8
 800895c:	d104      	bne.n	8008968 <HAL_TIM_PWM_Stop_DMA+0x174>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008966:	e003      	b.n	8008970 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	40010000 	.word	0x40010000

08008980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800899a:	2302      	movs	r3, #2
 800899c:	e0ae      	b.n	8008afc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b0c      	cmp	r3, #12
 80089aa:	f200 809f 	bhi.w	8008aec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80089ae:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089e9 	.word	0x080089e9
 80089b8:	08008aed 	.word	0x08008aed
 80089bc:	08008aed 	.word	0x08008aed
 80089c0:	08008aed 	.word	0x08008aed
 80089c4:	08008a29 	.word	0x08008a29
 80089c8:	08008aed 	.word	0x08008aed
 80089cc:	08008aed 	.word	0x08008aed
 80089d0:	08008aed 	.word	0x08008aed
 80089d4:	08008a6b 	.word	0x08008a6b
 80089d8:	08008aed 	.word	0x08008aed
 80089dc:	08008aed 	.word	0x08008aed
 80089e0:	08008aed 	.word	0x08008aed
 80089e4:	08008aab 	.word	0x08008aab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fac0 	bl	8008f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0208 	orr.w	r2, r2, #8
 8008a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0204 	bic.w	r2, r2, #4
 8008a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6999      	ldr	r1, [r3, #24]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	691a      	ldr	r2, [r3, #16]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	619a      	str	r2, [r3, #24]
      break;
 8008a26:	e064      	b.n	8008af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fb06 	bl	8009040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699a      	ldr	r2, [r3, #24]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	699a      	ldr	r2, [r3, #24]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6999      	ldr	r1, [r3, #24]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	021a      	lsls	r2, r3, #8
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	619a      	str	r2, [r3, #24]
      break;
 8008a68:	e043      	b.n	8008af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68b9      	ldr	r1, [r7, #8]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fb51 	bl	8009118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69da      	ldr	r2, [r3, #28]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f042 0208 	orr.w	r2, r2, #8
 8008a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69da      	ldr	r2, [r3, #28]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0204 	bic.w	r2, r2, #4
 8008a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	69d9      	ldr	r1, [r3, #28]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	61da      	str	r2, [r3, #28]
      break;
 8008aa8:	e023      	b.n	8008af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68b9      	ldr	r1, [r7, #8]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fb9b 	bl	80091ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69da      	ldr	r2, [r3, #28]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	69da      	ldr	r2, [r3, #28]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69d9      	ldr	r1, [r3, #28]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	021a      	lsls	r2, r3, #8
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	61da      	str	r2, [r3, #28]
      break;
 8008aea:	e002      	b.n	8008af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	75fb      	strb	r3, [r7, #23]
      break;
 8008af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_TIM_ConfigClockSource+0x1c>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e0b4      	b.n	8008c8a <HAL_TIM_ConfigClockSource+0x186>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b58:	d03e      	beq.n	8008bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8008b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b5e:	f200 8087 	bhi.w	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
 8008b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b66:	f000 8086 	beq.w	8008c76 <HAL_TIM_ConfigClockSource+0x172>
 8008b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b6e:	d87f      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
 8008b70:	2b70      	cmp	r3, #112	@ 0x70
 8008b72:	d01a      	beq.n	8008baa <HAL_TIM_ConfigClockSource+0xa6>
 8008b74:	2b70      	cmp	r3, #112	@ 0x70
 8008b76:	d87b      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
 8008b78:	2b60      	cmp	r3, #96	@ 0x60
 8008b7a:	d050      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x11a>
 8008b7c:	2b60      	cmp	r3, #96	@ 0x60
 8008b7e:	d877      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
 8008b80:	2b50      	cmp	r3, #80	@ 0x50
 8008b82:	d03c      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0xfa>
 8008b84:	2b50      	cmp	r3, #80	@ 0x50
 8008b86:	d873      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
 8008b88:	2b40      	cmp	r3, #64	@ 0x40
 8008b8a:	d058      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x13a>
 8008b8c:	2b40      	cmp	r3, #64	@ 0x40
 8008b8e:	d86f      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
 8008b90:	2b30      	cmp	r3, #48	@ 0x30
 8008b92:	d064      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x15a>
 8008b94:	2b30      	cmp	r3, #48	@ 0x30
 8008b96:	d86b      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
 8008b98:	2b20      	cmp	r3, #32
 8008b9a:	d060      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x15a>
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	d867      	bhi.n	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d05c      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x15a>
 8008ba4:	2b10      	cmp	r3, #16
 8008ba6:	d05a      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x15a>
 8008ba8:	e062      	b.n	8008c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bba:	f000 fbe1 	bl	8009380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	609a      	str	r2, [r3, #8]
      break;
 8008bd6:	e04f      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008be8:	f000 fbca 	bl	8009380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bfa:	609a      	str	r2, [r3, #8]
      break;
 8008bfc:	e03c      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f000 fb3e 	bl	800928c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2150      	movs	r1, #80	@ 0x50
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fb97 	bl	800934a <TIM_ITRx_SetConfig>
      break;
 8008c1c:	e02c      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f000 fb5d 	bl	80092ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2160      	movs	r1, #96	@ 0x60
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fb87 	bl	800934a <TIM_ITRx_SetConfig>
      break;
 8008c3c:	e01c      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f000 fb1e 	bl	800928c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2140      	movs	r1, #64	@ 0x40
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fb77 	bl	800934a <TIM_ITRx_SetConfig>
      break;
 8008c5c:	e00c      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f000 fb6e 	bl	800934a <TIM_ITRx_SetConfig>
      break;
 8008c6e:	e003      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
      break;
 8008c74:	e000      	b.n	8008c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d107      	bne.n	8008ce2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ce0:	e02a      	b.n	8008d38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d107      	bne.n	8008cfc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cfa:	e01d      	b.n	8008d38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d107      	bne.n	8008d16 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2204      	movs	r2, #4
 8008d0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d14:	e010      	b.n	8008d38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d107      	bne.n	8008d30 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2208      	movs	r2, #8
 8008d24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d2e:	e003      	b.n	8008d38 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f7ff ffb4 	bl	8008ca6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	771a      	strb	r2, [r3, #28]
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d10b      	bne.n	8008d7c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d136      	bne.n	8008de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d7a:	e031      	b.n	8008de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d10b      	bne.n	8008d9e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d125      	bne.n	8008de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d9c:	e020      	b.n	8008de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d10b      	bne.n	8008dc0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2204      	movs	r2, #4
 8008dac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d114      	bne.n	8008de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008dbe:	e00f      	b.n	8008de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d10a      	bne.n	8008de0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2208      	movs	r2, #8
 8008dce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7f8 fe59 	bl	8001a98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	771a      	strb	r2, [r3, #28]
}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e00:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d103      	bne.n	8008e14 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	771a      	strb	r2, [r3, #28]
 8008e12:	e019      	b.n	8008e48 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d103      	bne.n	8008e26 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2202      	movs	r2, #2
 8008e22:	771a      	strb	r2, [r3, #28]
 8008e24:	e010      	b.n	8008e48 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d103      	bne.n	8008e38 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2204      	movs	r2, #4
 8008e34:	771a      	strb	r2, [r3, #28]
 8008e36:	e007      	b.n	8008e48 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d102      	bne.n	8008e48 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2208      	movs	r2, #8
 8008e46:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff ff22 	bl	8008c92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	771a      	strb	r2, [r3, #28]
}
 8008e54:	bf00      	nop
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8008f58 <TIM_Base_SetConfig+0xfc>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d00f      	beq.n	8008e94 <TIM_Base_SetConfig+0x38>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7a:	d00b      	beq.n	8008e94 <TIM_Base_SetConfig+0x38>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a37      	ldr	r2, [pc, #220]	@ (8008f5c <TIM_Base_SetConfig+0x100>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d007      	beq.n	8008e94 <TIM_Base_SetConfig+0x38>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a36      	ldr	r2, [pc, #216]	@ (8008f60 <TIM_Base_SetConfig+0x104>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_Base_SetConfig+0x38>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a35      	ldr	r2, [pc, #212]	@ (8008f64 <TIM_Base_SetConfig+0x108>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d108      	bne.n	8008ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8008f58 <TIM_Base_SetConfig+0xfc>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d01b      	beq.n	8008ee6 <TIM_Base_SetConfig+0x8a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb4:	d017      	beq.n	8008ee6 <TIM_Base_SetConfig+0x8a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a28      	ldr	r2, [pc, #160]	@ (8008f5c <TIM_Base_SetConfig+0x100>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d013      	beq.n	8008ee6 <TIM_Base_SetConfig+0x8a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a27      	ldr	r2, [pc, #156]	@ (8008f60 <TIM_Base_SetConfig+0x104>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d00f      	beq.n	8008ee6 <TIM_Base_SetConfig+0x8a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a26      	ldr	r2, [pc, #152]	@ (8008f64 <TIM_Base_SetConfig+0x108>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00b      	beq.n	8008ee6 <TIM_Base_SetConfig+0x8a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a25      	ldr	r2, [pc, #148]	@ (8008f68 <TIM_Base_SetConfig+0x10c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d007      	beq.n	8008ee6 <TIM_Base_SetConfig+0x8a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a24      	ldr	r2, [pc, #144]	@ (8008f6c <TIM_Base_SetConfig+0x110>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d003      	beq.n	8008ee6 <TIM_Base_SetConfig+0x8a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a23      	ldr	r2, [pc, #140]	@ (8008f70 <TIM_Base_SetConfig+0x114>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d108      	bne.n	8008ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8008f58 <TIM_Base_SetConfig+0xfc>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d103      	bne.n	8008f2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	691a      	ldr	r2, [r3, #16]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d105      	bne.n	8008f4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f023 0201 	bic.w	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	611a      	str	r2, [r3, #16]
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	40010000 	.word	0x40010000
 8008f5c:	40000400 	.word	0x40000400
 8008f60:	40000800 	.word	0x40000800
 8008f64:	40000c00 	.word	0x40000c00
 8008f68:	40014000 	.word	0x40014000
 8008f6c:	40014400 	.word	0x40014400
 8008f70:	40014800 	.word	0x40014800

08008f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f023 0201 	bic.w	r2, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f023 0302 	bic.w	r3, r3, #2
 8008fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a1c      	ldr	r2, [pc, #112]	@ (800903c <TIM_OC1_SetConfig+0xc8>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d10c      	bne.n	8008fea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f023 0308 	bic.w	r3, r3, #8
 8008fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f023 0304 	bic.w	r3, r3, #4
 8008fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a13      	ldr	r2, [pc, #76]	@ (800903c <TIM_OC1_SetConfig+0xc8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d111      	bne.n	8009016 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	621a      	str	r2, [r3, #32]
}
 8009030:	bf00      	nop
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	40010000 	.word	0x40010000

08009040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	f023 0210 	bic.w	r2, r3, #16
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800906e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f023 0320 	bic.w	r3, r3, #32
 800908a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	011b      	lsls	r3, r3, #4
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a1e      	ldr	r2, [pc, #120]	@ (8009114 <TIM_OC2_SetConfig+0xd4>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10d      	bne.n	80090bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	011b      	lsls	r3, r3, #4
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a15      	ldr	r2, [pc, #84]	@ (8009114 <TIM_OC2_SetConfig+0xd4>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d113      	bne.n	80090ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	4313      	orrs	r3, r2
 80090de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	621a      	str	r2, [r3, #32]
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	40010000 	.word	0x40010000

08009118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0303 	bic.w	r3, r3, #3
 800914e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	021b      	lsls	r3, r3, #8
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	4313      	orrs	r3, r2
 800916c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a1d      	ldr	r2, [pc, #116]	@ (80091e8 <TIM_OC3_SetConfig+0xd0>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d10d      	bne.n	8009192 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800917c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	021b      	lsls	r3, r3, #8
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a14      	ldr	r2, [pc, #80]	@ (80091e8 <TIM_OC3_SetConfig+0xd0>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d113      	bne.n	80091c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	011b      	lsls	r3, r3, #4
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	4313      	orrs	r3, r2
 80091c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	621a      	str	r2, [r3, #32]
}
 80091dc:	bf00      	nop
 80091de:	371c      	adds	r7, #28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	40010000 	.word	0x40010000

080091ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800921a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	031b      	lsls	r3, r3, #12
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4313      	orrs	r3, r2
 8009242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a10      	ldr	r2, [pc, #64]	@ (8009288 <TIM_OC4_SetConfig+0x9c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d109      	bne.n	8009260 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	019b      	lsls	r3, r3, #6
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4313      	orrs	r3, r2
 800925e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	621a      	str	r2, [r3, #32]
}
 800927a:	bf00      	nop
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	40010000 	.word	0x40010000

0800928c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	f023 0201 	bic.w	r2, r3, #1
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	4313      	orrs	r3, r2
 80092c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f023 030a 	bic.w	r3, r3, #10
 80092c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	621a      	str	r2, [r3, #32]
}
 80092de:	bf00      	nop
 80092e0:	371c      	adds	r7, #28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b087      	sub	sp, #28
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	f023 0210 	bic.w	r2, r3, #16
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	031b      	lsls	r3, r3, #12
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	4313      	orrs	r3, r2
 800931e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009326:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	011b      	lsls	r3, r3, #4
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	621a      	str	r2, [r3, #32]
}
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4313      	orrs	r3, r2
 8009368:	f043 0307 	orr.w	r3, r3, #7
 800936c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	609a      	str	r2, [r3, #8]
}
 8009374:	bf00      	nop
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800939a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	021a      	lsls	r2, r3, #8
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	431a      	orrs	r2, r3
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	609a      	str	r2, [r3, #8]
}
 80093b4:	bf00      	nop
 80093b6:	371c      	adds	r7, #28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f003 031f 	and.w	r3, r3, #31
 80093d2:	2201      	movs	r2, #1
 80093d4:	fa02 f303 	lsl.w	r3, r2, r3
 80093d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a1a      	ldr	r2, [r3, #32]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	43db      	mvns	r3, r3
 80093e2:	401a      	ands	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a1a      	ldr	r2, [r3, #32]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 031f 	and.w	r3, r3, #31
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	fa01 f303 	lsl.w	r3, r1, r3
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	621a      	str	r2, [r3, #32]
}
 80093fe:	bf00      	nop
 8009400:	371c      	adds	r7, #28
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800941c:	2b01      	cmp	r3, #1
 800941e:	d101      	bne.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009420:	2302      	movs	r3, #2
 8009422:	e050      	b.n	80094c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800944a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a1c      	ldr	r2, [pc, #112]	@ (80094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d018      	beq.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009470:	d013      	beq.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a18      	ldr	r2, [pc, #96]	@ (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00e      	beq.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a16      	ldr	r2, [pc, #88]	@ (80094dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d009      	beq.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a15      	ldr	r2, [pc, #84]	@ (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d004      	beq.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a13      	ldr	r2, [pc, #76]	@ (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d10c      	bne.n	80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40010000 	.word	0x40010000
 80094d8:	40000400 	.word	0x40000400
 80094dc:	40000800 	.word	0x40000800
 80094e0:	40000c00 	.word	0x40000c00
 80094e4:	40014000 	.word	0x40014000

080094e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094e8:	b084      	sub	sp, #16
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	f107 001c 	add.w	r0, r7, #28
 80094f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d123      	bne.n	800954a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009506:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800952a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800952e:	2b01      	cmp	r3, #1
 8009530:	d105      	bne.n	800953e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fae8 	bl	800ab14 <USB_CoreReset>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]
 8009548:	e01b      	b.n	8009582 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 fadc 	bl	800ab14 <USB_CoreReset>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009560:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	639a      	str	r2, [r3, #56]	@ 0x38
 8009574:	e005      	b.n	8009582 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009582:	7fbb      	ldrb	r3, [r7, #30]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d10b      	bne.n	80095a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f043 0206 	orr.w	r2, r3, #6
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095ac:	b004      	add	sp, #16
 80095ae:	4770      	bx	lr

080095b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	4613      	mov	r3, r2
 80095bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d165      	bne.n	8009690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4a41      	ldr	r2, [pc, #260]	@ (80096cc <USB_SetTurnaroundTime+0x11c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d906      	bls.n	80095da <USB_SetTurnaroundTime+0x2a>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4a40      	ldr	r2, [pc, #256]	@ (80096d0 <USB_SetTurnaroundTime+0x120>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d202      	bcs.n	80095da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095d4:	230f      	movs	r3, #15
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e062      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4a3c      	ldr	r2, [pc, #240]	@ (80096d0 <USB_SetTurnaroundTime+0x120>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d306      	bcc.n	80095f0 <USB_SetTurnaroundTime+0x40>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	4a3b      	ldr	r2, [pc, #236]	@ (80096d4 <USB_SetTurnaroundTime+0x124>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d202      	bcs.n	80095f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095ea:	230e      	movs	r3, #14
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	e057      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4a38      	ldr	r2, [pc, #224]	@ (80096d4 <USB_SetTurnaroundTime+0x124>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d306      	bcc.n	8009606 <USB_SetTurnaroundTime+0x56>
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4a37      	ldr	r2, [pc, #220]	@ (80096d8 <USB_SetTurnaroundTime+0x128>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d202      	bcs.n	8009606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009600:	230d      	movs	r3, #13
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	e04c      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4a33      	ldr	r2, [pc, #204]	@ (80096d8 <USB_SetTurnaroundTime+0x128>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d306      	bcc.n	800961c <USB_SetTurnaroundTime+0x6c>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	4a32      	ldr	r2, [pc, #200]	@ (80096dc <USB_SetTurnaroundTime+0x12c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d802      	bhi.n	800961c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009616:	230c      	movs	r3, #12
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	e041      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4a2f      	ldr	r2, [pc, #188]	@ (80096dc <USB_SetTurnaroundTime+0x12c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d906      	bls.n	8009632 <USB_SetTurnaroundTime+0x82>
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4a2e      	ldr	r2, [pc, #184]	@ (80096e0 <USB_SetTurnaroundTime+0x130>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d802      	bhi.n	8009632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800962c:	230b      	movs	r3, #11
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	e036      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	4a2a      	ldr	r2, [pc, #168]	@ (80096e0 <USB_SetTurnaroundTime+0x130>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d906      	bls.n	8009648 <USB_SetTurnaroundTime+0x98>
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	4a29      	ldr	r2, [pc, #164]	@ (80096e4 <USB_SetTurnaroundTime+0x134>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d802      	bhi.n	8009648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009642:	230a      	movs	r3, #10
 8009644:	617b      	str	r3, [r7, #20]
 8009646:	e02b      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4a26      	ldr	r2, [pc, #152]	@ (80096e4 <USB_SetTurnaroundTime+0x134>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d906      	bls.n	800965e <USB_SetTurnaroundTime+0xae>
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4a25      	ldr	r2, [pc, #148]	@ (80096e8 <USB_SetTurnaroundTime+0x138>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d202      	bcs.n	800965e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009658:	2309      	movs	r3, #9
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	e020      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	4a21      	ldr	r2, [pc, #132]	@ (80096e8 <USB_SetTurnaroundTime+0x138>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d306      	bcc.n	8009674 <USB_SetTurnaroundTime+0xc4>
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	4a20      	ldr	r2, [pc, #128]	@ (80096ec <USB_SetTurnaroundTime+0x13c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d802      	bhi.n	8009674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800966e:	2308      	movs	r3, #8
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	e015      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	4a1d      	ldr	r2, [pc, #116]	@ (80096ec <USB_SetTurnaroundTime+0x13c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d906      	bls.n	800968a <USB_SetTurnaroundTime+0xda>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	4a1c      	ldr	r2, [pc, #112]	@ (80096f0 <USB_SetTurnaroundTime+0x140>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d202      	bcs.n	800968a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009684:	2307      	movs	r3, #7
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	e00a      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800968a:	2306      	movs	r3, #6
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e007      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d102      	bne.n	800969c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009696:	2309      	movs	r3, #9
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	e001      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800969c:	2309      	movs	r3, #9
 800969e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	029b      	lsls	r3, r3, #10
 80096b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80096b8:	431a      	orrs	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	00d8acbf 	.word	0x00d8acbf
 80096d0:	00e4e1c0 	.word	0x00e4e1c0
 80096d4:	00f42400 	.word	0x00f42400
 80096d8:	01067380 	.word	0x01067380
 80096dc:	011a499f 	.word	0x011a499f
 80096e0:	01312cff 	.word	0x01312cff
 80096e4:	014ca43f 	.word	0x014ca43f
 80096e8:	016e3600 	.word	0x016e3600
 80096ec:	01a6ab1f 	.word	0x01a6ab1f
 80096f0:	01e84800 	.word	0x01e84800

080096f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f043 0201 	orr.w	r2, r3, #1
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f023 0201 	bic.w	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d115      	bne.n	8009786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009766:	200a      	movs	r0, #10
 8009768:	f7fb f9d2 	bl	8004b10 <HAL_Delay>
      ms += 10U;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	330a      	adds	r3, #10
 8009770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 f93f 	bl	800a9f6 <USB_GetMode>
 8009778:	4603      	mov	r3, r0
 800977a:	2b01      	cmp	r3, #1
 800977c:	d01e      	beq.n	80097bc <USB_SetCurrentMode+0x84>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2bc7      	cmp	r3, #199	@ 0xc7
 8009782:	d9f0      	bls.n	8009766 <USB_SetCurrentMode+0x2e>
 8009784:	e01a      	b.n	80097bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d115      	bne.n	80097b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009798:	200a      	movs	r0, #10
 800979a:	f7fb f9b9 	bl	8004b10 <HAL_Delay>
      ms += 10U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	330a      	adds	r3, #10
 80097a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 f926 	bl	800a9f6 <USB_GetMode>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <USB_SetCurrentMode+0x84>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80097b4:	d9f0      	bls.n	8009798 <USB_SetCurrentMode+0x60>
 80097b6:	e001      	b.n	80097bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e005      	b.n	80097c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2bc8      	cmp	r3, #200	@ 0xc8
 80097c0:	d101      	bne.n	80097c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e000      	b.n	80097c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097d0:	b084      	sub	sp, #16
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b086      	sub	sp, #24
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80097de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097ea:	2300      	movs	r3, #0
 80097ec:	613b      	str	r3, [r7, #16]
 80097ee:	e009      	b.n	8009804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	3340      	adds	r3, #64	@ 0x40
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	2200      	movs	r2, #0
 80097fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3301      	adds	r3, #1
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	2b0e      	cmp	r3, #14
 8009808:	d9f2      	bls.n	80097f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800980a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800980e:	2b00      	cmp	r3, #0
 8009810:	d11c      	bne.n	800984c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009820:	f043 0302 	orr.w	r3, r3, #2
 8009824:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009836:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	639a      	str	r2, [r3, #56]	@ 0x38
 800984a:	e00b      	b.n	8009864 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009850:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800986a:	461a      	mov	r2, r3
 800986c:	2300      	movs	r3, #0
 800986e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009870:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009874:	2b01      	cmp	r3, #1
 8009876:	d10d      	bne.n	8009894 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800987c:	2b00      	cmp	r3, #0
 800987e:	d104      	bne.n	800988a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009880:	2100      	movs	r1, #0
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f968 	bl	8009b58 <USB_SetDevSpeed>
 8009888:	e008      	b.n	800989c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800988a:	2101      	movs	r1, #1
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f963 	bl	8009b58 <USB_SetDevSpeed>
 8009892:	e003      	b.n	800989c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009894:	2103      	movs	r1, #3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f95e 	bl	8009b58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800989c:	2110      	movs	r1, #16
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f8fa 	bl	8009a98 <USB_FlushTxFifo>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f924 	bl	8009afc <USB_FlushRxFifo>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d001      	beq.n	80098be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c4:	461a      	mov	r2, r3
 80098c6:	2300      	movs	r3, #0
 80098c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d0:	461a      	mov	r2, r3
 80098d2:	2300      	movs	r3, #0
 80098d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098dc:	461a      	mov	r2, r3
 80098de:	2300      	movs	r3, #0
 80098e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098e2:	2300      	movs	r3, #0
 80098e4:	613b      	str	r3, [r7, #16]
 80098e6:	e043      	b.n	8009970 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098fe:	d118      	bne.n	8009932 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009912:	461a      	mov	r2, r3
 8009914:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	e013      	b.n	8009944 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009928:	461a      	mov	r2, r3
 800992a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	e008      	b.n	8009944 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800993e:	461a      	mov	r2, r3
 8009940:	2300      	movs	r3, #0
 8009942:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009950:	461a      	mov	r2, r3
 8009952:	2300      	movs	r3, #0
 8009954:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009962:	461a      	mov	r2, r3
 8009964:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	3301      	adds	r3, #1
 800996e:	613b      	str	r3, [r7, #16]
 8009970:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009974:	461a      	mov	r2, r3
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	4293      	cmp	r3, r2
 800997a:	d3b5      	bcc.n	80098e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800997c:	2300      	movs	r3, #0
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	e043      	b.n	8009a0a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009994:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009998:	d118      	bne.n	80099cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ac:	461a      	mov	r2, r3
 80099ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	e013      	b.n	80099de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c2:	461a      	mov	r2, r3
 80099c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	e008      	b.n	80099de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d8:	461a      	mov	r2, r3
 80099da:	2300      	movs	r3, #0
 80099dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ea:	461a      	mov	r2, r3
 80099ec:	2300      	movs	r3, #0
 80099ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fc:	461a      	mov	r2, r3
 80099fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	3301      	adds	r3, #1
 8009a08:	613b      	str	r3, [r7, #16]
 8009a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a0e:	461a      	mov	r2, r3
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d3b5      	bcc.n	8009982 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	f043 0210 	orr.w	r2, r3, #16
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699a      	ldr	r2, [r3, #24]
 8009a50:	4b10      	ldr	r3, [pc, #64]	@ (8009a94 <USB_DevInit+0x2c4>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	f043 0208 	orr.w	r2, r3, #8
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d107      	bne.n	8009a84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a7c:	f043 0304 	orr.w	r3, r3, #4
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a90:	b004      	add	sp, #16
 8009a92:	4770      	bx	lr
 8009a94:	803c3800 	.word	0x803c3800

08009a98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ab2:	d901      	bls.n	8009ab8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e01b      	b.n	8009af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	daf2      	bge.n	8009aa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	019b      	lsls	r3, r3, #6
 8009ac8:	f043 0220 	orr.w	r2, r3, #32
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009adc:	d901      	bls.n	8009ae2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e006      	b.n	8009af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d0f0      	beq.n	8009ad0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b14:	d901      	bls.n	8009b1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e018      	b.n	8009b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	daf2      	bge.n	8009b08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2210      	movs	r2, #16
 8009b2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b38:	d901      	bls.n	8009b3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e006      	b.n	8009b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	2b10      	cmp	r3, #16
 8009b48:	d0f0      	beq.n	8009b2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b087      	sub	sp, #28
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 0306 	and.w	r3, r3, #6
 8009ba2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d102      	bne.n	8009bb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009baa:	2300      	movs	r3, #0
 8009bac:	75fb      	strb	r3, [r7, #23]
 8009bae:	e00a      	b.n	8009bc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d002      	beq.n	8009bbc <USB_GetDevSpeed+0x32>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	d102      	bne.n	8009bc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	75fb      	strb	r3, [r7, #23]
 8009bc0:	e001      	b.n	8009bc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009bc2:	230f      	movs	r3, #15
 8009bc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	371c      	adds	r7, #28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	785b      	ldrb	r3, [r3, #1]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d13a      	bne.n	8009c66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf6:	69da      	ldr	r2, [r3, #28]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	2101      	movs	r1, #1
 8009c02:	fa01 f303 	lsl.w	r3, r1, r3
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	68f9      	ldr	r1, [r7, #12]
 8009c0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d155      	bne.n	8009cd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	791b      	ldrb	r3, [r3, #4]
 8009c42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	059b      	lsls	r3, r3, #22
 8009c4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	0151      	lsls	r1, r2, #5
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	440a      	add	r2, r1
 8009c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	e036      	b.n	8009cd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c6c:	69da      	ldr	r2, [r3, #28]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	2101      	movs	r1, #1
 8009c78:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7c:	041b      	lsls	r3, r3, #16
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c84:	4313      	orrs	r3, r2
 8009c86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d11a      	bne.n	8009cd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	015a      	lsls	r2, r3, #5
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	791b      	ldrb	r3, [r3, #4]
 8009cb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	0151      	lsls	r1, r2, #5
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
	...

08009ce4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d161      	bne.n	8009dc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d16:	d11f      	bne.n	8009d58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	0151      	lsls	r1, r2, #5
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	440a      	add	r2, r1
 8009d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	0151      	lsls	r1, r2, #5
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	440a      	add	r2, r1
 8009d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	f003 030f 	and.w	r3, r3, #15
 8009d68:	2101      	movs	r1, #1
 8009d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	43db      	mvns	r3, r3
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d78:	4013      	ands	r3, r2
 8009d7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d82:	69da      	ldr	r2, [r3, #28]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	f003 030f 	and.w	r3, r3, #15
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	43db      	mvns	r3, r3
 8009d96:	68f9      	ldr	r1, [r7, #12]
 8009d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	0159      	lsls	r1, r3, #5
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	440b      	add	r3, r1
 8009db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4b35      	ldr	r3, [pc, #212]	@ (8009e94 <USB_DeactivateEndpoint+0x1b0>)
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	600b      	str	r3, [r1, #0]
 8009dc2:	e060      	b.n	8009e86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dda:	d11f      	bne.n	8009e1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	0151      	lsls	r1, r2, #5
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	440a      	add	r2, r1
 8009df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009dfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	0151      	lsls	r1, r2, #5
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	440a      	add	r2, r1
 8009e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	f003 030f 	and.w	r3, r3, #15
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e32:	041b      	lsls	r3, r3, #16
 8009e34:	43db      	mvns	r3, r3
 8009e36:	68f9      	ldr	r1, [r7, #12]
 8009e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e46:	69da      	ldr	r2, [r3, #28]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	f003 030f 	and.w	r3, r3, #15
 8009e50:	2101      	movs	r1, #1
 8009e52:	fa01 f303 	lsl.w	r3, r1, r3
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	43db      	mvns	r3, r3
 8009e5a:	68f9      	ldr	r1, [r7, #12]
 8009e5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e60:	4013      	ands	r3, r2
 8009e62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	0159      	lsls	r1, r3, #5
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	440b      	add	r3, r1
 8009e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <USB_DeactivateEndpoint+0x1b4>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	ec337800 	.word	0xec337800
 8009e98:	eff37800 	.word	0xeff37800

08009e9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	@ 0x28
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	f040 817f 	bne.w	800a1bc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d132      	bne.n	8009f2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ee0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009ee4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009ee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	69ba      	ldr	r2, [r7, #24]
 8009efa:	0151      	lsls	r1, r2, #5
 8009efc:	69fa      	ldr	r2, [r7, #28]
 8009efe:	440a      	add	r2, r1
 8009f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	69ba      	ldr	r2, [r7, #24]
 8009f1a:	0151      	lsls	r1, r2, #5
 8009f1c:	69fa      	ldr	r2, [r7, #28]
 8009f1e:	440a      	add	r2, r1
 8009f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f24:	0cdb      	lsrs	r3, r3, #19
 8009f26:	04db      	lsls	r3, r3, #19
 8009f28:	6113      	str	r3, [r2, #16]
 8009f2a:	e097      	b.n	800a05c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f46:	0cdb      	lsrs	r3, r3, #19
 8009f48:	04db      	lsls	r3, r3, #19
 8009f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	69ba      	ldr	r2, [r7, #24]
 8009f5c:	0151      	lsls	r1, r2, #5
 8009f5e:	69fa      	ldr	r2, [r7, #28]
 8009f60:	440a      	add	r2, r1
 8009f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f66:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f6a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f6e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d11a      	bne.n	8009fac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	691a      	ldr	r2, [r3, #16]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d903      	bls.n	8009f8a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fa8:	6113      	str	r3, [r2, #16]
 8009faa:	e044      	b.n	800a036 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	691a      	ldr	r2, [r3, #16]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	1e5a      	subs	r2, r3, #1
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	8afb      	ldrh	r3, [r7, #22]
 8009fd2:	04d9      	lsls	r1, r3, #19
 8009fd4:	4ba4      	ldr	r3, [pc, #656]	@ (800a268 <USB_EPStartXfer+0x3cc>)
 8009fd6:	400b      	ands	r3, r1
 8009fd8:	69b9      	ldr	r1, [r7, #24]
 8009fda:	0148      	lsls	r0, r1, #5
 8009fdc:	69f9      	ldr	r1, [r7, #28]
 8009fde:	4401      	add	r1, r0
 8009fe0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	791b      	ldrb	r3, [r3, #4]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d122      	bne.n	800a036 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	0151      	lsls	r1, r2, #5
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	440a      	add	r2, r1
 800a006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a00a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a00e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	8afb      	ldrh	r3, [r7, #22]
 800a020:	075b      	lsls	r3, r3, #29
 800a022:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a026:	69b9      	ldr	r1, [r7, #24]
 800a028:	0148      	lsls	r0, r1, #5
 800a02a:	69f9      	ldr	r1, [r7, #28]
 800a02c:	4401      	add	r1, r0
 800a02e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a032:	4313      	orrs	r3, r2
 800a034:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a042:	691a      	ldr	r2, [r3, #16]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a04c:	69b9      	ldr	r1, [r7, #24]
 800a04e:	0148      	lsls	r0, r1, #5
 800a050:	69f9      	ldr	r1, [r7, #28]
 800a052:	4401      	add	r1, r0
 800a054:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a058:	4313      	orrs	r3, r2
 800a05a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d14b      	bne.n	800a0fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d009      	beq.n	800a07e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a076:	461a      	mov	r2, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	791b      	ldrb	r3, [r3, #4]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d128      	bne.n	800a0d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a092:	2b00      	cmp	r3, #0
 800a094:	d110      	bne.n	800a0b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	e00f      	b.n	800a0d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	0151      	lsls	r1, r2, #5
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	440a      	add	r2, r1
 800a0ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	e166      	b.n	800a3c8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	015a      	lsls	r2, r3, #5
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	4413      	add	r3, r2
 800a102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	0151      	lsls	r1, r2, #5
 800a10c:	69fa      	ldr	r2, [r7, #28]
 800a10e:	440a      	add	r2, r1
 800a110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a114:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a118:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	791b      	ldrb	r3, [r3, #4]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d015      	beq.n	800a14e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 814e 	beq.w	800a3c8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	f003 030f 	and.w	r3, r3, #15
 800a13c:	2101      	movs	r1, #1
 800a13e:	fa01 f303 	lsl.w	r3, r1, r3
 800a142:	69f9      	ldr	r1, [r7, #28]
 800a144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a148:	4313      	orrs	r3, r2
 800a14a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a14c:	e13c      	b.n	800a3c8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d110      	bne.n	800a180 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	69ba      	ldr	r2, [r7, #24]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a178:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	e00f      	b.n	800a1a0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	69ba      	ldr	r2, [r7, #24]
 800a190:	0151      	lsls	r1, r2, #5
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	440a      	add	r2, r1
 800a196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a19a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a19e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	68d9      	ldr	r1, [r3, #12]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	781a      	ldrb	r2, [r3, #0]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	b298      	uxth	r0, r3
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 f9b9 	bl	800a52c <USB_WritePacket>
 800a1ba:	e105      	b.n	800a3c8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	0151      	lsls	r1, r2, #5
 800a1ce:	69fa      	ldr	r2, [r7, #28]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1d6:	0cdb      	lsrs	r3, r3, #19
 800a1d8:	04db      	lsls	r3, r3, #19
 800a1da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	0151      	lsls	r1, r2, #5
 800a1ee:	69fa      	ldr	r2, [r7, #28]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a1fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a1fe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d132      	bne.n	800a26c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	689a      	ldr	r2, [r3, #8]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a234:	69b9      	ldr	r1, [r7, #24]
 800a236:	0148      	lsls	r0, r1, #5
 800a238:	69f9      	ldr	r1, [r7, #28]
 800a23a:	4401      	add	r1, r0
 800a23c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a240:	4313      	orrs	r3, r2
 800a242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	0151      	lsls	r1, r2, #5
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	440a      	add	r2, r1
 800a25a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a25e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a262:	6113      	str	r3, [r2, #16]
 800a264:	e062      	b.n	800a32c <USB_EPStartXfer+0x490>
 800a266:	bf00      	nop
 800a268:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d123      	bne.n	800a2bc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a280:	691a      	ldr	r2, [r3, #16]
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a28a:	69b9      	ldr	r1, [r7, #24]
 800a28c:	0148      	lsls	r0, r1, #5
 800a28e:	69f9      	ldr	r1, [r7, #28]
 800a290:	4401      	add	r1, r0
 800a292:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a296:	4313      	orrs	r3, r2
 800a298:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	015a      	lsls	r2, r3, #5
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	0151      	lsls	r1, r2, #5
 800a2ac:	69fa      	ldr	r2, [r7, #28]
 800a2ae:	440a      	add	r2, r1
 800a2b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2b8:	6113      	str	r3, [r2, #16]
 800a2ba:	e037      	b.n	800a32c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	691a      	ldr	r2, [r3, #16]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	1e5a      	subs	r2, r3, #1
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	8afa      	ldrh	r2, [r7, #22]
 800a2d8:	fb03 f202 	mul.w	r2, r3, r2
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ec:	691a      	ldr	r2, [r3, #16]
 800a2ee:	8afb      	ldrh	r3, [r7, #22]
 800a2f0:	04d9      	lsls	r1, r3, #19
 800a2f2:	4b38      	ldr	r3, [pc, #224]	@ (800a3d4 <USB_EPStartXfer+0x538>)
 800a2f4:	400b      	ands	r3, r1
 800a2f6:	69b9      	ldr	r1, [r7, #24]
 800a2f8:	0148      	lsls	r0, r1, #5
 800a2fa:	69f9      	ldr	r1, [r7, #28]
 800a2fc:	4401      	add	r1, r0
 800a2fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a302:	4313      	orrs	r3, r2
 800a304:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a312:	691a      	ldr	r2, [r3, #16]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a31c:	69b9      	ldr	r1, [r7, #24]
 800a31e:	0148      	lsls	r0, r1, #5
 800a320:	69f9      	ldr	r1, [r7, #28]
 800a322:	4401      	add	r1, r0
 800a324:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a328:	4313      	orrs	r3, r2
 800a32a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d10d      	bne.n	800a34e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d009      	beq.n	800a34e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	68d9      	ldr	r1, [r3, #12]
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	4413      	add	r3, r2
 800a346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a34a:	460a      	mov	r2, r1
 800a34c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	791b      	ldrb	r3, [r3, #4]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d128      	bne.n	800a3a8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a362:	2b00      	cmp	r3, #0
 800a364:	d110      	bne.n	800a388 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	69fa      	ldr	r2, [r7, #28]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a380:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	e00f      	b.n	800a3a8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	0151      	lsls	r1, r2, #5
 800a39a:	69fa      	ldr	r2, [r7, #28]
 800a39c:	440a      	add	r2, r1
 800a39e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	0151      	lsls	r1, r2, #5
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	440a      	add	r2, r1
 800a3be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3720      	adds	r7, #32
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	1ff80000 	.word	0x1ff80000

0800a3d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	785b      	ldrb	r3, [r3, #1]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d14a      	bne.n	800a48c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a40a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a40e:	f040 8086 	bne.w	800a51e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	015a      	lsls	r2, r3, #5
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	4413      	add	r3, r2
 800a41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	7812      	ldrb	r2, [r2, #0]
 800a426:	0151      	lsls	r1, r2, #5
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	440a      	add	r2, r1
 800a42c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a430:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a434:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	7812      	ldrb	r2, [r2, #0]
 800a44a:	0151      	lsls	r1, r2, #5
 800a44c:	693a      	ldr	r2, [r7, #16]
 800a44e:	440a      	add	r2, r1
 800a450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a458:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3301      	adds	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a466:	4293      	cmp	r3, r2
 800a468:	d902      	bls.n	800a470 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	75fb      	strb	r3, [r7, #23]
          break;
 800a46e:	e056      	b.n	800a51e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a488:	d0e7      	beq.n	800a45a <USB_EPStopXfer+0x82>
 800a48a:	e048      	b.n	800a51e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4a4:	d13b      	bne.n	800a51e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	7812      	ldrb	r2, [r2, #0]
 800a4ba:	0151      	lsls	r1, r2, #5
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	440a      	add	r2, r1
 800a4c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	7812      	ldrb	r2, [r2, #0]
 800a4de:	0151      	lsls	r1, r2, #5
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	440a      	add	r2, r1
 800a4e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d902      	bls.n	800a504 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]
          break;
 800a502:	e00c      	b.n	800a51e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	015a      	lsls	r2, r3, #5
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	4413      	add	r3, r2
 800a50e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a51c:	d0e7      	beq.n	800a4ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a520:	4618      	mov	r0, r3
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b089      	sub	sp, #36	@ 0x24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4611      	mov	r1, r2
 800a538:	461a      	mov	r2, r3
 800a53a:	460b      	mov	r3, r1
 800a53c:	71fb      	strb	r3, [r7, #7]
 800a53e:	4613      	mov	r3, r2
 800a540:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a54a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d123      	bne.n	800a59a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a552:	88bb      	ldrh	r3, [r7, #4]
 800a554:	3303      	adds	r3, #3
 800a556:	089b      	lsrs	r3, r3, #2
 800a558:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	e018      	b.n	800a592 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	031a      	lsls	r2, r3, #12
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	4413      	add	r3, r2
 800a568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a56c:	461a      	mov	r2, r3
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	3301      	adds	r3, #1
 800a578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	3301      	adds	r3, #1
 800a57e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	3301      	adds	r3, #1
 800a584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	3301      	adds	r3, #1
 800a58a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	3301      	adds	r3, #1
 800a590:	61bb      	str	r3, [r7, #24]
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	429a      	cmp	r2, r3
 800a598:	d3e2      	bcc.n	800a560 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3724      	adds	r7, #36	@ 0x24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b08b      	sub	sp, #44	@ 0x2c
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	089b      	lsrs	r3, r3, #2
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5c6:	88fb      	ldrh	r3, [r7, #6]
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	623b      	str	r3, [r7, #32]
 800a5d2:	e014      	b.n	800a5fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5de:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	623b      	str	r3, [r7, #32]
 800a5fe:	6a3a      	ldr	r2, [r7, #32]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	429a      	cmp	r2, r3
 800a604:	d3e6      	bcc.n	800a5d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a606:	8bfb      	ldrh	r3, [r7, #30]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d01e      	beq.n	800a64a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a60c:	2300      	movs	r3, #0
 800a60e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a616:	461a      	mov	r2, r3
 800a618:	f107 0310 	add.w	r3, r7, #16
 800a61c:	6812      	ldr	r2, [r2, #0]
 800a61e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	b2db      	uxtb	r3, r3
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	fa22 f303 	lsr.w	r3, r2, r3
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a630:	701a      	strb	r2, [r3, #0]
      i++;
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	3301      	adds	r3, #1
 800a636:	623b      	str	r3, [r7, #32]
      pDest++;
 800a638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63a:	3301      	adds	r3, #1
 800a63c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a63e:	8bfb      	ldrh	r3, [r7, #30]
 800a640:	3b01      	subs	r3, #1
 800a642:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a644:	8bfb      	ldrh	r3, [r7, #30]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1ea      	bne.n	800a620 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	372c      	adds	r7, #44	@ 0x2c
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	785b      	ldrb	r3, [r3, #1]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d12c      	bne.n	800a6ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	db12      	blt.n	800a6ac <USB_EPSetStall+0x54>
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00f      	beq.n	800a6ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	0151      	lsls	r1, r2, #5
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	440a      	add	r2, r1
 800a6c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	e02b      	b.n	800a726 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	015a      	lsls	r2, r3, #5
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	db12      	blt.n	800a706 <USB_EPSetStall+0xae>
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00f      	beq.n	800a706 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	0151      	lsls	r1, r2, #5
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	440a      	add	r2, r1
 800a6fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a700:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a704:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a724:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	785b      	ldrb	r3, [r3, #1]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d128      	bne.n	800a7a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	0151      	lsls	r1, r2, #5
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	440a      	add	r2, r1
 800a766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a76a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a76e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	791b      	ldrb	r3, [r3, #4]
 800a774:	2b03      	cmp	r3, #3
 800a776:	d003      	beq.n	800a780 <USB_EPClearStall+0x4c>
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	791b      	ldrb	r3, [r3, #4]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d138      	bne.n	800a7f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	440a      	add	r2, r1
 800a796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a79a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	e027      	b.n	800a7f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	0151      	lsls	r1, r2, #5
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	440a      	add	r2, r1
 800a7b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	791b      	ldrb	r3, [r3, #4]
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d003      	beq.n	800a7d2 <USB_EPClearStall+0x9e>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	791b      	ldrb	r3, [r3, #4]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d10f      	bne.n	800a7f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a81e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a822:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a834:	68f9      	ldr	r1, [r7, #12]
 800a836:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a83a:	4313      	orrs	r3, r2
 800a83c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a87a:	f023 0302 	bic.w	r3, r3, #2
 800a87e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8a8:	f023 0303 	bic.w	r3, r3, #3
 800a8ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8bc:	f043 0302 	orr.w	r3, r3, #2
 800a8c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b085      	sub	sp, #20
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	4013      	ands	r3, r2
 800a918:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	0c1b      	lsrs	r3, r3, #16
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	4013      	ands	r3, r2
 800a94c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	b29b      	uxth	r3, r3
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a95e:	b480      	push	{r7}
 800a960:	b085      	sub	sp, #20
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	460b      	mov	r3, r1
 800a968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a96e:	78fb      	ldrb	r3, [r7, #3]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	4013      	ands	r3, r2
 800a98a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a98c:	68bb      	ldr	r3, [r7, #8]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b087      	sub	sp, #28
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	f003 030f 	and.w	r3, r3, #15
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ca:	01db      	lsls	r3, r3, #7
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	371c      	adds	r7, #28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	f003 0301 	and.w	r3, r3, #1
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa30:	f023 0307 	bic.w	r3, r3, #7
 800aa34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	460b      	mov	r3, r1
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	333c      	adds	r3, #60	@ 0x3c
 800aa6e:	3304      	adds	r3, #4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	4a26      	ldr	r2, [pc, #152]	@ (800ab10 <USB_EP0_OutStart+0xb8>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d90a      	bls.n	800aa92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa8c:	d101      	bne.n	800aa92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e037      	b.n	800ab02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa98:	461a      	mov	r2, r3
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac0:	f043 0318 	orr.w	r3, r3, #24
 800aac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aad4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aad8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d10f      	bne.n	800ab00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae6:	461a      	mov	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aafa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aafe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	371c      	adds	r7, #28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	4f54300a 	.word	0x4f54300a

0800ab14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3301      	adds	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab2c:	d901      	bls.n	800ab32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e01b      	b.n	800ab6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	daf2      	bge.n	800ab20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	f043 0201 	orr.w	r2, r3, #1
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab56:	d901      	bls.n	800ab5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e006      	b.n	800ab6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d0f0      	beq.n	800ab4a <USB_CoreReset+0x36>

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
	...

0800ab78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ab7c:	4904      	ldr	r1, [pc, #16]	@ (800ab90 <MX_FATFS_Init+0x18>)
 800ab7e:	4805      	ldr	r0, [pc, #20]	@ (800ab94 <MX_FATFS_Init+0x1c>)
 800ab80:	f004 f9ac 	bl	800eedc <FATFS_LinkDriver>
 800ab84:	4603      	mov	r3, r0
 800ab86:	461a      	mov	r2, r3
 800ab88:	4b03      	ldr	r3, [pc, #12]	@ (800ab98 <MX_FATFS_Init+0x20>)
 800ab8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab8c:	bf00      	nop
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20000434 	.word	0x20000434
 800ab94:	20000038 	.word	0x20000038
 800ab98:	20000430 	.word	0x20000430

0800ab9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aba0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7f5 fecb 	bl	8000954 <SD_disk_initialize>
 800abbe:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4603      	mov	r3, r0
 800abd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7f5 ffa3 	bl	8000b20 <SD_disk_status>
 800abda:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
 800abee:	603b      	str	r3, [r7, #0]
 800abf0:	4603      	mov	r3, r0
 800abf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800abf4:	7bf8      	ldrb	r0, [r7, #15]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	68b9      	ldr	r1, [r7, #8]
 800abfc:	f7f5 ffa6 	bl	8000b4c <SD_disk_read>
 800ac00:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	603b      	str	r3, [r7, #0]
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800ac1a:	7bf8      	ldrb	r0, [r7, #15]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	68b9      	ldr	r1, [r7, #8]
 800ac22:	f7f5 fffd 	bl	8000c20 <SD_disk_write>
 800ac26:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	603a      	str	r2, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800ac40:	79b9      	ldrb	r1, [r7, #6]
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7f6 f86e 	bl	8000d28 <SD_disk_ioctl>
 800ac4c:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac64:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ac68:	f004 fe14 	bl	800f894 <USBD_static_malloc>
 800ac6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d109      	bne.n	800ac88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	32b0      	adds	r2, #176	@ 0xb0
 800ac7e:	2100      	movs	r1, #0
 800ac80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac84:	2302      	movs	r3, #2
 800ac86:	e0d4      	b.n	800ae32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac88:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f004 ffbe 	bl	800fc10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	32b0      	adds	r2, #176	@ 0xb0
 800ac9e:	68f9      	ldr	r1, [r7, #12]
 800aca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	32b0      	adds	r2, #176	@ 0xb0
 800acae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	7c1b      	ldrb	r3, [r3, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d138      	bne.n	800ad32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acc0:	4b5e      	ldr	r3, [pc, #376]	@ (800ae3c <USBD_CDC_Init+0x1e4>)
 800acc2:	7819      	ldrb	r1, [r3, #0]
 800acc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acc8:	2202      	movs	r2, #2
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f004 fcbf 	bl	800f64e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800acd0:	4b5a      	ldr	r3, [pc, #360]	@ (800ae3c <USBD_CDC_Init+0x1e4>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 020f 	and.w	r2, r3, #15
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	4613      	mov	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	440b      	add	r3, r1
 800ace4:	3324      	adds	r3, #36	@ 0x24
 800ace6:	2201      	movs	r2, #1
 800ace8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acea:	4b55      	ldr	r3, [pc, #340]	@ (800ae40 <USBD_CDC_Init+0x1e8>)
 800acec:	7819      	ldrb	r1, [r3, #0]
 800acee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acf2:	2202      	movs	r2, #2
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f004 fcaa 	bl	800f64e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acfa:	4b51      	ldr	r3, [pc, #324]	@ (800ae40 <USBD_CDC_Init+0x1e8>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	f003 020f 	and.w	r2, r3, #15
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	4613      	mov	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	440b      	add	r3, r1
 800ad0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad12:	2201      	movs	r2, #1
 800ad14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad16:	4b4b      	ldr	r3, [pc, #300]	@ (800ae44 <USBD_CDC_Init+0x1ec>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	f003 020f 	and.w	r2, r3, #15
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	3326      	adds	r3, #38	@ 0x26
 800ad2c:	2210      	movs	r2, #16
 800ad2e:	801a      	strh	r2, [r3, #0]
 800ad30:	e035      	b.n	800ad9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad32:	4b42      	ldr	r3, [pc, #264]	@ (800ae3c <USBD_CDC_Init+0x1e4>)
 800ad34:	7819      	ldrb	r1, [r3, #0]
 800ad36:	2340      	movs	r3, #64	@ 0x40
 800ad38:	2202      	movs	r2, #2
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f004 fc87 	bl	800f64e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad40:	4b3e      	ldr	r3, [pc, #248]	@ (800ae3c <USBD_CDC_Init+0x1e4>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	f003 020f 	and.w	r2, r3, #15
 800ad48:	6879      	ldr	r1, [r7, #4]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	440b      	add	r3, r1
 800ad54:	3324      	adds	r3, #36	@ 0x24
 800ad56:	2201      	movs	r2, #1
 800ad58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad5a:	4b39      	ldr	r3, [pc, #228]	@ (800ae40 <USBD_CDC_Init+0x1e8>)
 800ad5c:	7819      	ldrb	r1, [r3, #0]
 800ad5e:	2340      	movs	r3, #64	@ 0x40
 800ad60:	2202      	movs	r2, #2
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f004 fc73 	bl	800f64e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad68:	4b35      	ldr	r3, [pc, #212]	@ (800ae40 <USBD_CDC_Init+0x1e8>)
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	f003 020f 	and.w	r2, r3, #15
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	4613      	mov	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad80:	2201      	movs	r2, #1
 800ad82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad84:	4b2f      	ldr	r3, [pc, #188]	@ (800ae44 <USBD_CDC_Init+0x1ec>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f003 020f 	and.w	r2, r3, #15
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	440b      	add	r3, r1
 800ad98:	3326      	adds	r3, #38	@ 0x26
 800ad9a:	2210      	movs	r2, #16
 800ad9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad9e:	4b29      	ldr	r3, [pc, #164]	@ (800ae44 <USBD_CDC_Init+0x1ec>)
 800ada0:	7819      	ldrb	r1, [r3, #0]
 800ada2:	2308      	movs	r3, #8
 800ada4:	2203      	movs	r2, #3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f004 fc51 	bl	800f64e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800adac:	4b25      	ldr	r3, [pc, #148]	@ (800ae44 <USBD_CDC_Init+0x1ec>)
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	f003 020f 	and.w	r2, r3, #15
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	440b      	add	r3, r1
 800adc0:	3324      	adds	r3, #36	@ 0x24
 800adc2:	2201      	movs	r2, #1
 800adc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	33b0      	adds	r3, #176	@ 0xb0
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2200      	movs	r2, #0
 800adee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800adfc:	2302      	movs	r3, #2
 800adfe:	e018      	b.n	800ae32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7c1b      	ldrb	r3, [r3, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10a      	bne.n	800ae1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae08:	4b0d      	ldr	r3, [pc, #52]	@ (800ae40 <USBD_CDC_Init+0x1e8>)
 800ae0a:	7819      	ldrb	r1, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f004 fd08 	bl	800f82c <USBD_LL_PrepareReceive>
 800ae1c:	e008      	b.n	800ae30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae1e:	4b08      	ldr	r3, [pc, #32]	@ (800ae40 <USBD_CDC_Init+0x1e8>)
 800ae20:	7819      	ldrb	r1, [r3, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae28:	2340      	movs	r3, #64	@ 0x40
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f004 fcfe 	bl	800f82c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	200000d3 	.word	0x200000d3
 800ae40:	200000d4 	.word	0x200000d4
 800ae44:	200000d5 	.word	0x200000d5

0800ae48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ae54:	4b3a      	ldr	r3, [pc, #232]	@ (800af40 <USBD_CDC_DeInit+0xf8>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f004 fc1d 	bl	800f69a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ae60:	4b37      	ldr	r3, [pc, #220]	@ (800af40 <USBD_CDC_DeInit+0xf8>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	f003 020f 	and.w	r2, r3, #15
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	440b      	add	r3, r1
 800ae74:	3324      	adds	r3, #36	@ 0x24
 800ae76:	2200      	movs	r2, #0
 800ae78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ae7a:	4b32      	ldr	r3, [pc, #200]	@ (800af44 <USBD_CDC_DeInit+0xfc>)
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f004 fc0a 	bl	800f69a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae86:	4b2f      	ldr	r3, [pc, #188]	@ (800af44 <USBD_CDC_DeInit+0xfc>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	f003 020f 	and.w	r2, r3, #15
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae9e:	2200      	movs	r2, #0
 800aea0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aea2:	4b29      	ldr	r3, [pc, #164]	@ (800af48 <USBD_CDC_DeInit+0x100>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f004 fbf6 	bl	800f69a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aeae:	4b26      	ldr	r3, [pc, #152]	@ (800af48 <USBD_CDC_DeInit+0x100>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	f003 020f 	and.w	r2, r3, #15
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	440b      	add	r3, r1
 800aec2:	3324      	adds	r3, #36	@ 0x24
 800aec4:	2200      	movs	r2, #0
 800aec6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aec8:	4b1f      	ldr	r3, [pc, #124]	@ (800af48 <USBD_CDC_DeInit+0x100>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	f003 020f 	and.w	r2, r3, #15
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	4613      	mov	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	440b      	add	r3, r1
 800aedc:	3326      	adds	r3, #38	@ 0x26
 800aede:	2200      	movs	r2, #0
 800aee0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	32b0      	adds	r2, #176	@ 0xb0
 800aeec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d01f      	beq.n	800af34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	33b0      	adds	r3, #176	@ 0xb0
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	32b0      	adds	r2, #176	@ 0xb0
 800af12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af16:	4618      	mov	r0, r3
 800af18:	f004 fcca 	bl	800f8b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	32b0      	adds	r2, #176	@ 0xb0
 800af26:	2100      	movs	r1, #0
 800af28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	200000d3 	.word	0x200000d3
 800af44:	200000d4 	.word	0x200000d4
 800af48:	200000d5 	.word	0x200000d5

0800af4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	32b0      	adds	r2, #176	@ 0xb0
 800af60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800af78:	2303      	movs	r3, #3
 800af7a:	e0bf      	b.n	800b0fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af84:	2b00      	cmp	r3, #0
 800af86:	d050      	beq.n	800b02a <USBD_CDC_Setup+0xde>
 800af88:	2b20      	cmp	r3, #32
 800af8a:	f040 80af 	bne.w	800b0ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	88db      	ldrh	r3, [r3, #6]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d03a      	beq.n	800b00c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	b25b      	sxtb	r3, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	da1b      	bge.n	800afd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	33b0      	adds	r3, #176	@ 0xb0
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800afb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	88d2      	ldrh	r2, [r2, #6]
 800afbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	88db      	ldrh	r3, [r3, #6]
 800afc2:	2b07      	cmp	r3, #7
 800afc4:	bf28      	it	cs
 800afc6:	2307      	movcs	r3, #7
 800afc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	89fa      	ldrh	r2, [r7, #14]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 fd93 	bl	800cafc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800afd6:	e090      	b.n	800b0fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	785a      	ldrb	r2, [r3, #1]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	88db      	ldrh	r3, [r3, #6]
 800afe6:	2b3f      	cmp	r3, #63	@ 0x3f
 800afe8:	d803      	bhi.n	800aff2 <USBD_CDC_Setup+0xa6>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	88db      	ldrh	r3, [r3, #6]
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	e000      	b.n	800aff4 <USBD_CDC_Setup+0xa8>
 800aff2:	2240      	movs	r2, #64	@ 0x40
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800affa:	6939      	ldr	r1, [r7, #16]
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b002:	461a      	mov	r2, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 fda5 	bl	800cb54 <USBD_CtlPrepareRx>
      break;
 800b00a:	e076      	b.n	800b0fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	33b0      	adds	r3, #176	@ 0xb0
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	7850      	ldrb	r0, [r2, #1]
 800b022:	2200      	movs	r2, #0
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	4798      	blx	r3
      break;
 800b028:	e067      	b.n	800b0fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	2b0b      	cmp	r3, #11
 800b030:	d851      	bhi.n	800b0d6 <USBD_CDC_Setup+0x18a>
 800b032:	a201      	add	r2, pc, #4	@ (adr r2, 800b038 <USBD_CDC_Setup+0xec>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b069 	.word	0x0800b069
 800b03c:	0800b0e5 	.word	0x0800b0e5
 800b040:	0800b0d7 	.word	0x0800b0d7
 800b044:	0800b0d7 	.word	0x0800b0d7
 800b048:	0800b0d7 	.word	0x0800b0d7
 800b04c:	0800b0d7 	.word	0x0800b0d7
 800b050:	0800b0d7 	.word	0x0800b0d7
 800b054:	0800b0d7 	.word	0x0800b0d7
 800b058:	0800b0d7 	.word	0x0800b0d7
 800b05c:	0800b0d7 	.word	0x0800b0d7
 800b060:	0800b093 	.word	0x0800b093
 800b064:	0800b0bd 	.word	0x0800b0bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b03      	cmp	r3, #3
 800b072:	d107      	bne.n	800b084 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b074:	f107 030a 	add.w	r3, r7, #10
 800b078:	2202      	movs	r2, #2
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 fd3d 	bl	800cafc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b082:	e032      	b.n	800b0ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f001 fcbb 	bl	800ca02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b08c:	2303      	movs	r3, #3
 800b08e:	75fb      	strb	r3, [r7, #23]
          break;
 800b090:	e02b      	b.n	800b0ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	d107      	bne.n	800b0ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b09e:	f107 030d 	add.w	r3, r7, #13
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f001 fd28 	bl	800cafc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0ac:	e01d      	b.n	800b0ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f001 fca6 	bl	800ca02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b0ba:	e016      	b.n	800b0ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b03      	cmp	r3, #3
 800b0c6:	d00f      	beq.n	800b0e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 fc99 	bl	800ca02 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b0d4:	e008      	b.n	800b0e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f001 fc92 	bl	800ca02 <USBD_CtlError>
          ret = USBD_FAIL;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b0e2:	e002      	b.n	800b0ea <USBD_CDC_Setup+0x19e>
          break;
 800b0e4:	bf00      	nop
 800b0e6:	e008      	b.n	800b0fa <USBD_CDC_Setup+0x1ae>
          break;
 800b0e8:	bf00      	nop
      }
      break;
 800b0ea:	e006      	b.n	800b0fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 fc87 	bl	800ca02 <USBD_CtlError>
      ret = USBD_FAIL;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	460b      	mov	r3, r1
 800b10e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b116:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	32b0      	adds	r2, #176	@ 0xb0
 800b122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e065      	b.n	800b1fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	32b0      	adds	r2, #176	@ 0xb0
 800b138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	f003 020f 	and.w	r2, r3, #15
 800b144:	6879      	ldr	r1, [r7, #4]
 800b146:	4613      	mov	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	440b      	add	r3, r1
 800b150:	3318      	adds	r3, #24
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d02f      	beq.n	800b1b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b158:	78fb      	ldrb	r3, [r7, #3]
 800b15a:	f003 020f 	and.w	r2, r3, #15
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	440b      	add	r3, r1
 800b16a:	3318      	adds	r3, #24
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	78fb      	ldrb	r3, [r7, #3]
 800b170:	f003 010f 	and.w	r1, r3, #15
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	460b      	mov	r3, r1
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	440b      	add	r3, r1
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4403      	add	r3, r0
 800b180:	331c      	adds	r3, #28
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	fbb2 f1f3 	udiv	r1, r2, r3
 800b188:	fb01 f303 	mul.w	r3, r1, r3
 800b18c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d112      	bne.n	800b1b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b192:	78fb      	ldrb	r3, [r7, #3]
 800b194:	f003 020f 	and.w	r2, r3, #15
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3318      	adds	r3, #24
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1aa:	78f9      	ldrb	r1, [r7, #3]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f004 fb1a 	bl	800f7ea <USBD_LL_Transmit>
 800b1b6:	e01f      	b.n	800b1f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	33b0      	adds	r3, #176	@ 0xb0
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d010      	beq.n	800b1f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	33b0      	adds	r3, #176	@ 0xb0
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b1f4:	78fa      	ldrb	r2, [r7, #3]
 800b1f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	32b0      	adds	r2, #176	@ 0xb0
 800b218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	32b0      	adds	r2, #176	@ 0xb0
 800b228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b230:	2303      	movs	r3, #3
 800b232:	e01a      	b.n	800b26a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f004 fb18 	bl	800f86e <USBD_LL_GetRxDataSize>
 800b23e:	4602      	mov	r2, r0
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	33b0      	adds	r3, #176	@ 0xb0
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4413      	add	r3, r2
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b264:	4611      	mov	r1, r2
 800b266:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	32b0      	adds	r2, #176	@ 0xb0
 800b284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b288:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b290:	2303      	movs	r3, #3
 800b292:	e024      	b.n	800b2de <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	33b0      	adds	r3, #176	@ 0xb0
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d019      	beq.n	800b2dc <USBD_CDC_EP0_RxReady+0x6a>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b2ae:	2bff      	cmp	r3, #255	@ 0xff
 800b2b0:	d014      	beq.n	800b2dc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	33b0      	adds	r3, #176	@ 0xb0
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b2ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	22ff      	movs	r2, #255	@ 0xff
 800b2d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2f0:	2182      	movs	r1, #130	@ 0x82
 800b2f2:	4818      	ldr	r0, [pc, #96]	@ (800b354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2f4:	f000 fd4f 	bl	800bd96 <USBD_GetEpDesc>
 800b2f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	4815      	ldr	r0, [pc, #84]	@ (800b354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2fe:	f000 fd4a 	bl	800bd96 <USBD_GetEpDesc>
 800b302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b304:	2181      	movs	r1, #129	@ 0x81
 800b306:	4813      	ldr	r0, [pc, #76]	@ (800b354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b308:	f000 fd45 	bl	800bd96 <USBD_GetEpDesc>
 800b30c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2210      	movs	r2, #16
 800b318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d006      	beq.n	800b32e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	2200      	movs	r2, #0
 800b324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b328:	711a      	strb	r2, [r3, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d006      	beq.n	800b342 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b33c:	711a      	strb	r2, [r3, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2243      	movs	r2, #67	@ 0x43
 800b346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b348:	4b02      	ldr	r3, [pc, #8]	@ (800b354 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	20000090 	.word	0x20000090

0800b358 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b360:	2182      	movs	r1, #130	@ 0x82
 800b362:	4818      	ldr	r0, [pc, #96]	@ (800b3c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b364:	f000 fd17 	bl	800bd96 <USBD_GetEpDesc>
 800b368:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b36a:	2101      	movs	r1, #1
 800b36c:	4815      	ldr	r0, [pc, #84]	@ (800b3c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b36e:	f000 fd12 	bl	800bd96 <USBD_GetEpDesc>
 800b372:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b374:	2181      	movs	r1, #129	@ 0x81
 800b376:	4813      	ldr	r0, [pc, #76]	@ (800b3c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b378:	f000 fd0d 	bl	800bd96 <USBD_GetEpDesc>
 800b37c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2210      	movs	r2, #16
 800b388:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d006      	beq.n	800b39e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	2200      	movs	r2, #0
 800b394:	711a      	strb	r2, [r3, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	f042 0202 	orr.w	r2, r2, #2
 800b39c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d006      	beq.n	800b3b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	711a      	strb	r2, [r3, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f042 0202 	orr.w	r2, r2, #2
 800b3b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2243      	movs	r2, #67	@ 0x43
 800b3b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3b8:	4b02      	ldr	r3, [pc, #8]	@ (800b3c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000090 	.word	0x20000090

0800b3c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3d0:	2182      	movs	r1, #130	@ 0x82
 800b3d2:	4818      	ldr	r0, [pc, #96]	@ (800b434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3d4:	f000 fcdf 	bl	800bd96 <USBD_GetEpDesc>
 800b3d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3da:	2101      	movs	r1, #1
 800b3dc:	4815      	ldr	r0, [pc, #84]	@ (800b434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3de:	f000 fcda 	bl	800bd96 <USBD_GetEpDesc>
 800b3e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3e4:	2181      	movs	r1, #129	@ 0x81
 800b3e6:	4813      	ldr	r0, [pc, #76]	@ (800b434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3e8:	f000 fcd5 	bl	800bd96 <USBD_GetEpDesc>
 800b3ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	2210      	movs	r2, #16
 800b3f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d006      	beq.n	800b40e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	2200      	movs	r2, #0
 800b404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b408:	711a      	strb	r2, [r3, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d006      	beq.n	800b422 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b41c:	711a      	strb	r2, [r3, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2243      	movs	r2, #67	@ 0x43
 800b426:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b428:	4b02      	ldr	r3, [pc, #8]	@ (800b434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20000090 	.word	0x20000090

0800b438 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	220a      	movs	r2, #10
 800b444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b446:	4b03      	ldr	r3, [pc, #12]	@ (800b454 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	2000004c 	.word	0x2000004c

0800b458 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b468:	2303      	movs	r3, #3
 800b46a:	e009      	b.n	800b480 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	33b0      	adds	r3, #176	@ 0xb0
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	32b0      	adds	r2, #176	@ 0xb0
 800b4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	e008      	b.n	800b4c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	371c      	adds	r7, #28
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	32b0      	adds	r2, #176	@ 0xb0
 800b4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e004      	b.n	800b4fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
	...

0800b50c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	32b0      	adds	r2, #176	@ 0xb0
 800b51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b522:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b524:	2301      	movs	r3, #1
 800b526:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b52e:	2303      	movs	r3, #3
 800b530:	e025      	b.n	800b57e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d11f      	bne.n	800b57c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2201      	movs	r2, #1
 800b540:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b544:	4b10      	ldr	r3, [pc, #64]	@ (800b588 <USBD_CDC_TransmitPacket+0x7c>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	f003 020f 	and.w	r2, r3, #15
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	4613      	mov	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	4413      	add	r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4403      	add	r3, r0
 800b55e:	3318      	adds	r3, #24
 800b560:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b562:	4b09      	ldr	r3, [pc, #36]	@ (800b588 <USBD_CDC_TransmitPacket+0x7c>)
 800b564:	7819      	ldrb	r1, [r3, #0]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f004 f939 	bl	800f7ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	200000d3 	.word	0x200000d3

0800b58c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	32b0      	adds	r2, #176	@ 0xb0
 800b59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	32b0      	adds	r2, #176	@ 0xb0
 800b5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e018      	b.n	800b5ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	7c1b      	ldrb	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10a      	bne.n	800b5d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f4 <USBD_CDC_ReceivePacket+0x68>)
 800b5c4:	7819      	ldrb	r1, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f004 f92b 	bl	800f82c <USBD_LL_PrepareReceive>
 800b5d6:	e008      	b.n	800b5ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5d8:	4b06      	ldr	r3, [pc, #24]	@ (800b5f4 <USBD_CDC_ReceivePacket+0x68>)
 800b5da:	7819      	ldrb	r1, [r3, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5e2:	2340      	movs	r3, #64	@ 0x40
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f004 f921 	bl	800f82c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	200000d4 	.word	0x200000d4

0800b5f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	4613      	mov	r3, r2
 800b604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e01f      	b.n	800b650 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	79fa      	ldrb	r2, [r7, #7]
 800b642:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f003 ff9b 	bl	800f580 <USBD_LL_Init>
 800b64a:	4603      	mov	r3, r0
 800b64c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b662:	2300      	movs	r3, #0
 800b664:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b66c:	2303      	movs	r3, #3
 800b66e:	e025      	b.n	800b6bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	32ae      	adds	r2, #174	@ 0xae
 800b682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00f      	beq.n	800b6ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	32ae      	adds	r2, #174	@ 0xae
 800b696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69c:	f107 020e 	add.w	r2, r7, #14
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	4798      	blx	r3
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f003 ffa3 	bl	800f618 <USBD_LL_Start>
 800b6d2:	4603      	mov	r3, r0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d009      	beq.n	800b720 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	78fa      	ldrb	r2, [r7, #3]
 800b716:	4611      	mov	r1, r2
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	4798      	blx	r3
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b720:	7bfb      	ldrb	r3, [r7, #15]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b084      	sub	sp, #16
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	78fa      	ldrb	r2, [r7, #3]
 800b744:	4611      	mov	r1, r2
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	4798      	blx	r3
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b750:	2303      	movs	r3, #3
 800b752:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b754:	7bfb      	ldrb	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	4618      	mov	r0, r3
 800b772:	f001 f90c 	bl	800c98e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b784:	461a      	mov	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b792:	f003 031f 	and.w	r3, r3, #31
 800b796:	2b02      	cmp	r3, #2
 800b798:	d01a      	beq.n	800b7d0 <USBD_LL_SetupStage+0x72>
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d822      	bhi.n	800b7e4 <USBD_LL_SetupStage+0x86>
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d002      	beq.n	800b7a8 <USBD_LL_SetupStage+0x4a>
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d00a      	beq.n	800b7bc <USBD_LL_SetupStage+0x5e>
 800b7a6:	e01d      	b.n	800b7e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fb63 	bl	800be7c <USBD_StdDevReq>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ba:	e020      	b.n	800b7fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fbcb 	bl	800bf60 <USBD_StdItfReq>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ce:	e016      	b.n	800b7fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fc2d 	bl	800c038 <USBD_StdEPReq>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7e2:	e00c      	b.n	800b7fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f003 ff70 	bl	800f6d8 <USBD_LL_StallEP>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b7fc:	bf00      	nop
  }

  return ret;
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	460b      	mov	r3, r1
 800b812:	607a      	str	r2, [r7, #4]
 800b814:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b81a:	7afb      	ldrb	r3, [r7, #11]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d16e      	bne.n	800b8fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b826:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b82e:	2b03      	cmp	r3, #3
 800b830:	f040 8098 	bne.w	800b964 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d913      	bls.n	800b868 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	689a      	ldr	r2, [r3, #8]
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	1ad2      	subs	r2, r2, r3
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	4293      	cmp	r3, r2
 800b858:	bf28      	it	cs
 800b85a:	4613      	movcs	r3, r2
 800b85c:	461a      	mov	r2, r3
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f001 f994 	bl	800cb8e <USBD_CtlContinueRx>
 800b866:	e07d      	b.n	800b964 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b86e:	f003 031f 	and.w	r3, r3, #31
 800b872:	2b02      	cmp	r3, #2
 800b874:	d014      	beq.n	800b8a0 <USBD_LL_DataOutStage+0x98>
 800b876:	2b02      	cmp	r3, #2
 800b878:	d81d      	bhi.n	800b8b6 <USBD_LL_DataOutStage+0xae>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <USBD_LL_DataOutStage+0x7c>
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d003      	beq.n	800b88a <USBD_LL_DataOutStage+0x82>
 800b882:	e018      	b.n	800b8b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b884:	2300      	movs	r3, #0
 800b886:	75bb      	strb	r3, [r7, #22]
            break;
 800b888:	e018      	b.n	800b8bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b890:	b2db      	uxtb	r3, r3
 800b892:	4619      	mov	r1, r3
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f000 fa64 	bl	800bd62 <USBD_CoreFindIF>
 800b89a:	4603      	mov	r3, r0
 800b89c:	75bb      	strb	r3, [r7, #22]
            break;
 800b89e:	e00d      	b.n	800b8bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f000 fa66 	bl	800bd7c <USBD_CoreFindEP>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	75bb      	strb	r3, [r7, #22]
            break;
 800b8b4:	e002      	b.n	800b8bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75bb      	strb	r3, [r7, #22]
            break;
 800b8ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b8bc:	7dbb      	ldrb	r3, [r7, #22]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d119      	bne.n	800b8f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	d113      	bne.n	800b8f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b8ce:	7dba      	ldrb	r2, [r7, #22]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	32ae      	adds	r2, #174	@ 0xae
 800b8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00b      	beq.n	800b8f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b8de:	7dba      	ldrb	r2, [r7, #22]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b8e6:	7dba      	ldrb	r2, [r7, #22]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	32ae      	adds	r2, #174	@ 0xae
 800b8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f001 f95a 	bl	800cbb0 <USBD_CtlSendStatus>
 800b8fc:	e032      	b.n	800b964 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b8fe:	7afb      	ldrb	r3, [r7, #11]
 800b900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b904:	b2db      	uxtb	r3, r3
 800b906:	4619      	mov	r1, r3
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 fa37 	bl	800bd7c <USBD_CoreFindEP>
 800b90e:	4603      	mov	r3, r0
 800b910:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b912:	7dbb      	ldrb	r3, [r7, #22]
 800b914:	2bff      	cmp	r3, #255	@ 0xff
 800b916:	d025      	beq.n	800b964 <USBD_LL_DataOutStage+0x15c>
 800b918:	7dbb      	ldrb	r3, [r7, #22]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d122      	bne.n	800b964 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b03      	cmp	r3, #3
 800b928:	d117      	bne.n	800b95a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b92a:	7dba      	ldrb	r2, [r7, #22]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	32ae      	adds	r2, #174	@ 0xae
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00f      	beq.n	800b95a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b93a:	7dba      	ldrb	r2, [r7, #22]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b942:	7dba      	ldrb	r2, [r7, #22]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	32ae      	adds	r2, #174	@ 0xae
 800b948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	7afa      	ldrb	r2, [r7, #11]
 800b950:	4611      	mov	r1, r2
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	4798      	blx	r3
 800b956:	4603      	mov	r3, r0
 800b958:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d001      	beq.n	800b964 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b960:	7dfb      	ldrb	r3, [r7, #23]
 800b962:	e000      	b.n	800b966 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b086      	sub	sp, #24
 800b972:	af00      	add	r7, sp, #0
 800b974:	60f8      	str	r0, [r7, #12]
 800b976:	460b      	mov	r3, r1
 800b978:	607a      	str	r2, [r7, #4]
 800b97a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b97c:	7afb      	ldrb	r3, [r7, #11]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d16f      	bne.n	800ba62 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	3314      	adds	r3, #20
 800b986:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d15a      	bne.n	800ba48 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	689a      	ldr	r2, [r3, #8]
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d914      	bls.n	800b9c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	689a      	ldr	r2, [r3, #8]
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	1ad2      	subs	r2, r2, r3
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f001 f8bc 	bl	800cb32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2100      	movs	r1, #0
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f003 ff33 	bl	800f82c <USBD_LL_PrepareReceive>
 800b9c6:	e03f      	b.n	800ba48 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d11c      	bne.n	800ba0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d316      	bcc.n	800ba0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d20f      	bcs.n	800ba0e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f001 f89d 	bl	800cb32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba00:	2300      	movs	r3, #0
 800ba02:	2200      	movs	r2, #0
 800ba04:	2100      	movs	r1, #0
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f003 ff10 	bl	800f82c <USBD_LL_PrepareReceive>
 800ba0c:	e01c      	b.n	800ba48 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d10f      	bne.n	800ba3a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d009      	beq.n	800ba3a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba3a:	2180      	movs	r1, #128	@ 0x80
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f003 fe4b 	bl	800f6d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f001 f8c7 	bl	800cbd6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d03a      	beq.n	800bac8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fe42 	bl	800b6dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ba60:	e032      	b.n	800bac8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 f985 	bl	800bd7c <USBD_CoreFindEP>
 800ba72:	4603      	mov	r3, r0
 800ba74:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
 800ba78:	2bff      	cmp	r3, #255	@ 0xff
 800ba7a:	d025      	beq.n	800bac8 <USBD_LL_DataInStage+0x15a>
 800ba7c:	7dfb      	ldrb	r3, [r7, #23]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d122      	bne.n	800bac8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d11c      	bne.n	800bac8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba8e:	7dfa      	ldrb	r2, [r7, #23]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	32ae      	adds	r2, #174	@ 0xae
 800ba94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d014      	beq.n	800bac8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba9e:	7dfa      	ldrb	r2, [r7, #23]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800baa6:	7dfa      	ldrb	r2, [r7, #23]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	32ae      	adds	r2, #174	@ 0xae
 800baac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	7afa      	ldrb	r2, [r7, #11]
 800bab4:	4611      	mov	r1, r2
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	4798      	blx	r3
 800baba:	4603      	mov	r3, r0
 800babc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800babe:	7dbb      	ldrb	r3, [r7, #22]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bac4:	7dbb      	ldrb	r3, [r7, #22]
 800bac6:	e000      	b.n	800baca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d014      	beq.n	800bb38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00e      	beq.n	800bb38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	6852      	ldr	r2, [r2, #4]
 800bb26:	b2d2      	uxtb	r2, r2
 800bb28:	4611      	mov	r1, r2
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	4798      	blx	r3
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb34:	2303      	movs	r3, #3
 800bb36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb38:	2340      	movs	r3, #64	@ 0x40
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f003 fd85 	bl	800f64e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2240      	movs	r2, #64	@ 0x40
 800bb50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb54:	2340      	movs	r3, #64	@ 0x40
 800bb56:	2200      	movs	r2, #0
 800bb58:	2180      	movs	r1, #128	@ 0x80
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f003 fd77 	bl	800f64e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2240      	movs	r2, #64	@ 0x40
 800bb6a:	621a      	str	r2, [r3, #32]

  return ret;
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	460b      	mov	r3, r1
 800bb80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	78fa      	ldrb	r2, [r7, #3]
 800bb86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b04      	cmp	r3, #4
 800bba8:	d006      	beq.n	800bbb8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2204      	movs	r2, #4
 800bbbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d106      	bne.n	800bbf0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d110      	bne.n	800bc34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00b      	beq.n	800bc34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d005      	beq.n	800bc34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc2e:	69db      	ldr	r3, [r3, #28]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	460b      	mov	r3, r1
 800bc48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	32ae      	adds	r2, #174	@ 0xae
 800bc54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e01c      	b.n	800bc9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b03      	cmp	r3, #3
 800bc6a:	d115      	bne.n	800bc98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	32ae      	adds	r2, #174	@ 0xae
 800bc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00b      	beq.n	800bc98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	32ae      	adds	r2, #174	@ 0xae
 800bc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8e:	6a1b      	ldr	r3, [r3, #32]
 800bc90:	78fa      	ldrb	r2, [r7, #3]
 800bc92:	4611      	mov	r1, r2
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b082      	sub	sp, #8
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	32ae      	adds	r2, #174	@ 0xae
 800bcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	e01c      	b.n	800bcfe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d115      	bne.n	800bcfc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	32ae      	adds	r2, #174	@ 0xae
 800bcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00b      	beq.n	800bcfc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	32ae      	adds	r2, #174	@ 0xae
 800bcee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00e      	beq.n	800bd58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6852      	ldr	r2, [r2, #4]
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	4611      	mov	r1, r2
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	4798      	blx	r3
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b083      	sub	sp, #12
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b086      	sub	sp, #24
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	460b      	mov	r3, r1
 800bda0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	885b      	ldrh	r3, [r3, #2]
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	7812      	ldrb	r2, [r2, #0]
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d91f      	bls.n	800bdfc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bdc2:	e013      	b.n	800bdec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bdc4:	f107 030a 	add.w	r3, r7, #10
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6978      	ldr	r0, [r7, #20]
 800bdcc:	f000 f81b 	bl	800be06 <USBD_GetNextDesc>
 800bdd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2b05      	cmp	r3, #5
 800bdd8:	d108      	bne.n	800bdec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	789b      	ldrb	r3, [r3, #2]
 800bde2:	78fa      	ldrb	r2, [r7, #3]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d008      	beq.n	800bdfa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	885b      	ldrh	r3, [r3, #2]
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	897b      	ldrh	r3, [r7, #10]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d8e5      	bhi.n	800bdc4 <USBD_GetEpDesc+0x2e>
 800bdf8:	e000      	b.n	800bdfc <USBD_GetEpDesc+0x66>
          break;
 800bdfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bdfc:	693b      	ldr	r3, [r7, #16]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3718      	adds	r7, #24
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be06:	b480      	push	{r7}
 800be08:	b085      	sub	sp, #20
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	7812      	ldrb	r2, [r2, #0]
 800be1c:	4413      	add	r3, r2
 800be1e:	b29a      	uxth	r2, r3
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4413      	add	r3, r2
 800be2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be30:	68fb      	ldr	r3, [r7, #12]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be3e:	b480      	push	{r7}
 800be40:	b087      	sub	sp, #28
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	3301      	adds	r3, #1
 800be54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be5c:	8a3b      	ldrh	r3, [r7, #16]
 800be5e:	021b      	lsls	r3, r3, #8
 800be60:	b21a      	sxth	r2, r3
 800be62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be66:	4313      	orrs	r3, r2
 800be68:	b21b      	sxth	r3, r3
 800be6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be6c:	89fb      	ldrh	r3, [r7, #14]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	371c      	adds	r7, #28
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
	...

0800be7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be92:	2b40      	cmp	r3, #64	@ 0x40
 800be94:	d005      	beq.n	800bea2 <USBD_StdDevReq+0x26>
 800be96:	2b40      	cmp	r3, #64	@ 0x40
 800be98:	d857      	bhi.n	800bf4a <USBD_StdDevReq+0xce>
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00f      	beq.n	800bebe <USBD_StdDevReq+0x42>
 800be9e:	2b20      	cmp	r3, #32
 800bea0:	d153      	bne.n	800bf4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	32ae      	adds	r2, #174	@ 0xae
 800beac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	4798      	blx	r3
 800beb8:	4603      	mov	r3, r0
 800beba:	73fb      	strb	r3, [r7, #15]
      break;
 800bebc:	e04a      	b.n	800bf54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	785b      	ldrb	r3, [r3, #1]
 800bec2:	2b09      	cmp	r3, #9
 800bec4:	d83b      	bhi.n	800bf3e <USBD_StdDevReq+0xc2>
 800bec6:	a201      	add	r2, pc, #4	@ (adr r2, 800becc <USBD_StdDevReq+0x50>)
 800bec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800becc:	0800bf21 	.word	0x0800bf21
 800bed0:	0800bf35 	.word	0x0800bf35
 800bed4:	0800bf3f 	.word	0x0800bf3f
 800bed8:	0800bf2b 	.word	0x0800bf2b
 800bedc:	0800bf3f 	.word	0x0800bf3f
 800bee0:	0800beff 	.word	0x0800beff
 800bee4:	0800bef5 	.word	0x0800bef5
 800bee8:	0800bf3f 	.word	0x0800bf3f
 800beec:	0800bf17 	.word	0x0800bf17
 800bef0:	0800bf09 	.word	0x0800bf09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fa3c 	bl	800c374 <USBD_GetDescriptor>
          break;
 800befc:	e024      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fba1 	bl	800c648 <USBD_SetAddress>
          break;
 800bf06:	e01f      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fbe0 	bl	800c6d0 <USBD_SetConfig>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73fb      	strb	r3, [r7, #15]
          break;
 800bf14:	e018      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fc83 	bl	800c824 <USBD_GetConfig>
          break;
 800bf1e:	e013      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fcb4 	bl	800c890 <USBD_GetStatus>
          break;
 800bf28:	e00e      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fce3 	bl	800c8f8 <USBD_SetFeature>
          break;
 800bf32:	e009      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fd07 	bl	800c94a <USBD_ClrFeature>
          break;
 800bf3c:	e004      	b.n	800bf48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf3e:	6839      	ldr	r1, [r7, #0]
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fd5e 	bl	800ca02 <USBD_CtlError>
          break;
 800bf46:	bf00      	nop
      }
      break;
 800bf48:	e004      	b.n	800bf54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fd58 	bl	800ca02 <USBD_CtlError>
      break;
 800bf52:	bf00      	nop
  }

  return ret;
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop

0800bf60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf76:	2b40      	cmp	r3, #64	@ 0x40
 800bf78:	d005      	beq.n	800bf86 <USBD_StdItfReq+0x26>
 800bf7a:	2b40      	cmp	r3, #64	@ 0x40
 800bf7c:	d852      	bhi.n	800c024 <USBD_StdItfReq+0xc4>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <USBD_StdItfReq+0x26>
 800bf82:	2b20      	cmp	r3, #32
 800bf84:	d14e      	bne.n	800c024 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d840      	bhi.n	800c016 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	889b      	ldrh	r3, [r3, #4]
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d836      	bhi.n	800c00c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	889b      	ldrh	r3, [r3, #4]
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff fedb 	bl	800bd62 <USBD_CoreFindIF>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfb0:	7bbb      	ldrb	r3, [r7, #14]
 800bfb2:	2bff      	cmp	r3, #255	@ 0xff
 800bfb4:	d01d      	beq.n	800bff2 <USBD_StdItfReq+0x92>
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d11a      	bne.n	800bff2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bfbc:	7bba      	ldrb	r2, [r7, #14]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	32ae      	adds	r2, #174	@ 0xae
 800bfc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00f      	beq.n	800bfec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bfcc:	7bba      	ldrb	r2, [r7, #14]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfd4:	7bba      	ldrb	r2, [r7, #14]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	32ae      	adds	r2, #174	@ 0xae
 800bfda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	4798      	blx	r3
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bfea:	e004      	b.n	800bff6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bfec:	2303      	movs	r3, #3
 800bfee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bff0:	e001      	b.n	800bff6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bff2:	2303      	movs	r3, #3
 800bff4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	88db      	ldrh	r3, [r3, #6]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d110      	bne.n	800c020 <USBD_StdItfReq+0xc0>
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10d      	bne.n	800c020 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fdd3 	bl	800cbb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c00a:	e009      	b.n	800c020 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fcf7 	bl	800ca02 <USBD_CtlError>
          break;
 800c014:	e004      	b.n	800c020 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fcf2 	bl	800ca02 <USBD_CtlError>
          break;
 800c01e:	e000      	b.n	800c022 <USBD_StdItfReq+0xc2>
          break;
 800c020:	bf00      	nop
      }
      break;
 800c022:	e004      	b.n	800c02e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fceb 	bl	800ca02 <USBD_CtlError>
      break;
 800c02c:	bf00      	nop
  }

  return ret;
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	889b      	ldrh	r3, [r3, #4]
 800c04a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c054:	2b40      	cmp	r3, #64	@ 0x40
 800c056:	d007      	beq.n	800c068 <USBD_StdEPReq+0x30>
 800c058:	2b40      	cmp	r3, #64	@ 0x40
 800c05a:	f200 817f 	bhi.w	800c35c <USBD_StdEPReq+0x324>
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d02a      	beq.n	800c0b8 <USBD_StdEPReq+0x80>
 800c062:	2b20      	cmp	r3, #32
 800c064:	f040 817a 	bne.w	800c35c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7ff fe85 	bl	800bd7c <USBD_CoreFindEP>
 800c072:	4603      	mov	r3, r0
 800c074:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c076:	7b7b      	ldrb	r3, [r7, #13]
 800c078:	2bff      	cmp	r3, #255	@ 0xff
 800c07a:	f000 8174 	beq.w	800c366 <USBD_StdEPReq+0x32e>
 800c07e:	7b7b      	ldrb	r3, [r7, #13]
 800c080:	2b00      	cmp	r3, #0
 800c082:	f040 8170 	bne.w	800c366 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c086:	7b7a      	ldrb	r2, [r7, #13]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c08e:	7b7a      	ldrb	r2, [r7, #13]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	32ae      	adds	r2, #174	@ 0xae
 800c094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 8163 	beq.w	800c366 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c0a0:	7b7a      	ldrb	r2, [r7, #13]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	32ae      	adds	r2, #174	@ 0xae
 800c0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	4798      	blx	r3
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c0b6:	e156      	b.n	800c366 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	785b      	ldrb	r3, [r3, #1]
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d008      	beq.n	800c0d2 <USBD_StdEPReq+0x9a>
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	f300 8145 	bgt.w	800c350 <USBD_StdEPReq+0x318>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 809b 	beq.w	800c202 <USBD_StdEPReq+0x1ca>
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d03c      	beq.n	800c14a <USBD_StdEPReq+0x112>
 800c0d0:	e13e      	b.n	800c350 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d002      	beq.n	800c0e4 <USBD_StdEPReq+0xac>
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d016      	beq.n	800c110 <USBD_StdEPReq+0xd8>
 800c0e2:	e02c      	b.n	800c13e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00d      	beq.n	800c106 <USBD_StdEPReq+0xce>
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	2b80      	cmp	r3, #128	@ 0x80
 800c0ee:	d00a      	beq.n	800c106 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f003 faef 	bl	800f6d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0fa:	2180      	movs	r1, #128	@ 0x80
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f003 faeb 	bl	800f6d8 <USBD_LL_StallEP>
 800c102:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c104:	e020      	b.n	800c148 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fc7a 	bl	800ca02 <USBD_CtlError>
              break;
 800c10e:	e01b      	b.n	800c148 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	885b      	ldrh	r3, [r3, #2]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10e      	bne.n	800c136 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00b      	beq.n	800c136 <USBD_StdEPReq+0xfe>
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
 800c120:	2b80      	cmp	r3, #128	@ 0x80
 800c122:	d008      	beq.n	800c136 <USBD_StdEPReq+0xfe>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	88db      	ldrh	r3, [r3, #6]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d104      	bne.n	800c136 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f003 fad1 	bl	800f6d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fd3a 	bl	800cbb0 <USBD_CtlSendStatus>

              break;
 800c13c:	e004      	b.n	800c148 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fc5e 	bl	800ca02 <USBD_CtlError>
              break;
 800c146:	bf00      	nop
          }
          break;
 800c148:	e107      	b.n	800c35a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d002      	beq.n	800c15c <USBD_StdEPReq+0x124>
 800c156:	2b03      	cmp	r3, #3
 800c158:	d016      	beq.n	800c188 <USBD_StdEPReq+0x150>
 800c15a:	e04b      	b.n	800c1f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00d      	beq.n	800c17e <USBD_StdEPReq+0x146>
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	2b80      	cmp	r3, #128	@ 0x80
 800c166:	d00a      	beq.n	800c17e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f003 fab3 	bl	800f6d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c172:	2180      	movs	r1, #128	@ 0x80
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f003 faaf 	bl	800f6d8 <USBD_LL_StallEP>
 800c17a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c17c:	e040      	b.n	800c200 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fc3e 	bl	800ca02 <USBD_CtlError>
              break;
 800c186:	e03b      	b.n	800c200 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	885b      	ldrh	r3, [r3, #2]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d136      	bne.n	800c1fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f003 fab9 	bl	800f716 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fd03 	bl	800cbb0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff fde4 	bl	800bd7c <USBD_CoreFindEP>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1b8:	7b7b      	ldrb	r3, [r7, #13]
 800c1ba:	2bff      	cmp	r3, #255	@ 0xff
 800c1bc:	d01f      	beq.n	800c1fe <USBD_StdEPReq+0x1c6>
 800c1be:	7b7b      	ldrb	r3, [r7, #13]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d11c      	bne.n	800c1fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c1c4:	7b7a      	ldrb	r2, [r7, #13]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c1cc:	7b7a      	ldrb	r2, [r7, #13]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	32ae      	adds	r2, #174	@ 0xae
 800c1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d010      	beq.n	800c1fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1dc:	7b7a      	ldrb	r2, [r7, #13]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	32ae      	adds	r2, #174	@ 0xae
 800c1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	4798      	blx	r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c1f2:	e004      	b.n	800c1fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fc03 	bl	800ca02 <USBD_CtlError>
              break;
 800c1fc:	e000      	b.n	800c200 <USBD_StdEPReq+0x1c8>
              break;
 800c1fe:	bf00      	nop
          }
          break;
 800c200:	e0ab      	b.n	800c35a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d002      	beq.n	800c214 <USBD_StdEPReq+0x1dc>
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d032      	beq.n	800c278 <USBD_StdEPReq+0x240>
 800c212:	e097      	b.n	800c344 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d007      	beq.n	800c22a <USBD_StdEPReq+0x1f2>
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	2b80      	cmp	r3, #128	@ 0x80
 800c21e:	d004      	beq.n	800c22a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fbed 	bl	800ca02 <USBD_CtlError>
                break;
 800c228:	e091      	b.n	800c34e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c22a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da0b      	bge.n	800c24a <USBD_StdEPReq+0x212>
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	3310      	adds	r3, #16
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	e00b      	b.n	800c262 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	4413      	add	r3, r2
 800c260:	3304      	adds	r3, #4
 800c262:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2200      	movs	r2, #0
 800c268:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2202      	movs	r2, #2
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fc43 	bl	800cafc <USBD_CtlSendData>
              break;
 800c276:	e06a      	b.n	800c34e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	da11      	bge.n	800c2a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c280:	7bbb      	ldrb	r3, [r7, #14]
 800c282:	f003 020f 	and.w	r2, r3, #15
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	440b      	add	r3, r1
 800c292:	3324      	adds	r3, #36	@ 0x24
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d117      	bne.n	800c2ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fbb0 	bl	800ca02 <USBD_CtlError>
                  break;
 800c2a2:	e054      	b.n	800c34e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2a4:	7bbb      	ldrb	r3, [r7, #14]
 800c2a6:	f003 020f 	and.w	r2, r3, #15
 800c2aa:	6879      	ldr	r1, [r7, #4]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	440b      	add	r3, r1
 800c2b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d104      	bne.n	800c2ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fb9d 	bl	800ca02 <USBD_CtlError>
                  break;
 800c2c8:	e041      	b.n	800c34e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	da0b      	bge.n	800c2ea <USBD_StdEPReq+0x2b2>
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2d8:	4613      	mov	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4413      	add	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	3310      	adds	r3, #16
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	e00b      	b.n	800c302 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	4413      	add	r3, r2
 800c300:	3304      	adds	r3, #4
 800c302:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <USBD_StdEPReq+0x2d8>
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
 800c30c:	2b80      	cmp	r3, #128	@ 0x80
 800c30e:	d103      	bne.n	800c318 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2200      	movs	r2, #0
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	e00e      	b.n	800c336 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c318:	7bbb      	ldrb	r3, [r7, #14]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f003 fa19 	bl	800f754 <USBD_LL_IsStallEP>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d003      	beq.n	800c330 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2201      	movs	r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
 800c32e:	e002      	b.n	800c336 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2202      	movs	r2, #2
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fbdd 	bl	800cafc <USBD_CtlSendData>
              break;
 800c342:	e004      	b.n	800c34e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c344:	6839      	ldr	r1, [r7, #0]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fb5b 	bl	800ca02 <USBD_CtlError>
              break;
 800c34c:	bf00      	nop
          }
          break;
 800c34e:	e004      	b.n	800c35a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fb55 	bl	800ca02 <USBD_CtlError>
          break;
 800c358:	bf00      	nop
      }
      break;
 800c35a:	e005      	b.n	800c368 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fb4f 	bl	800ca02 <USBD_CtlError>
      break;
 800c364:	e000      	b.n	800c368 <USBD_StdEPReq+0x330>
      break;
 800c366:	bf00      	nop
  }

  return ret;
 800c368:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
	...

0800c374 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c37e:	2300      	movs	r3, #0
 800c380:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c386:	2300      	movs	r3, #0
 800c388:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	885b      	ldrh	r3, [r3, #2]
 800c38e:	0a1b      	lsrs	r3, r3, #8
 800c390:	b29b      	uxth	r3, r3
 800c392:	3b01      	subs	r3, #1
 800c394:	2b06      	cmp	r3, #6
 800c396:	f200 8128 	bhi.w	800c5ea <USBD_GetDescriptor+0x276>
 800c39a:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a0 <USBD_GetDescriptor+0x2c>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c3bd 	.word	0x0800c3bd
 800c3a4:	0800c3d5 	.word	0x0800c3d5
 800c3a8:	0800c415 	.word	0x0800c415
 800c3ac:	0800c5eb 	.word	0x0800c5eb
 800c3b0:	0800c5eb 	.word	0x0800c5eb
 800c3b4:	0800c58b 	.word	0x0800c58b
 800c3b8:	0800c5b7 	.word	0x0800c5b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
      break;
 800c3d2:	e112      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	7c1b      	ldrb	r3, [r3, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10d      	bne.n	800c3f8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e4:	f107 0208 	add.w	r2, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3f6:	e100      	b.n	800c5fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c400:	f107 0208 	add.w	r2, r7, #8
 800c404:	4610      	mov	r0, r2
 800c406:	4798      	blx	r3
 800c408:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3301      	adds	r3, #1
 800c40e:	2202      	movs	r2, #2
 800c410:	701a      	strb	r2, [r3, #0]
      break;
 800c412:	e0f2      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	885b      	ldrh	r3, [r3, #2]
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	f200 80ac 	bhi.w	800c578 <USBD_GetDescriptor+0x204>
 800c420:	a201      	add	r2, pc, #4	@ (adr r2, 800c428 <USBD_GetDescriptor+0xb4>)
 800c422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c426:	bf00      	nop
 800c428:	0800c441 	.word	0x0800c441
 800c42c:	0800c475 	.word	0x0800c475
 800c430:	0800c4a9 	.word	0x0800c4a9
 800c434:	0800c4dd 	.word	0x0800c4dd
 800c438:	0800c511 	.word	0x0800c511
 800c43c:	0800c545 	.word	0x0800c545
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00b      	beq.n	800c464 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	7c12      	ldrb	r2, [r2, #16]
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	4610      	mov	r0, r2
 800c45e:	4798      	blx	r3
 800c460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c462:	e091      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 facb 	bl	800ca02 <USBD_CtlError>
            err++;
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	3301      	adds	r3, #1
 800c470:	72fb      	strb	r3, [r7, #11]
          break;
 800c472:	e089      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7c12      	ldrb	r2, [r2, #16]
 800c48c:	f107 0108 	add.w	r1, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c496:	e077      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fab1 	bl	800ca02 <USBD_CtlError>
            err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a6:	e06f      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	7c12      	ldrb	r2, [r2, #16]
 800c4c0:	f107 0108 	add.w	r1, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ca:	e05d      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa97 	bl	800ca02 <USBD_CtlError>
            err++;
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4da:	e055      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00b      	beq.n	800c500 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7c12      	ldrb	r2, [r2, #16]
 800c4f4:	f107 0108 	add.w	r1, r7, #8
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fe:	e043      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fa7d 	bl	800ca02 <USBD_CtlError>
            err++;
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	3301      	adds	r3, #1
 800c50c:	72fb      	strb	r3, [r7, #11]
          break;
 800c50e:	e03b      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	7c12      	ldrb	r2, [r2, #16]
 800c528:	f107 0108 	add.w	r1, r7, #8
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c532:	e029      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fa63 	bl	800ca02 <USBD_CtlError>
            err++;
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	3301      	adds	r3, #1
 800c540:	72fb      	strb	r3, [r7, #11]
          break;
 800c542:	e021      	b.n	800c588 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00b      	beq.n	800c568 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	7c12      	ldrb	r2, [r2, #16]
 800c55c:	f107 0108 	add.w	r1, r7, #8
 800c560:	4610      	mov	r0, r2
 800c562:	4798      	blx	r3
 800c564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c566:	e00f      	b.n	800c588 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fa49 	bl	800ca02 <USBD_CtlError>
            err++;
 800c570:	7afb      	ldrb	r3, [r7, #11]
 800c572:	3301      	adds	r3, #1
 800c574:	72fb      	strb	r3, [r7, #11]
          break;
 800c576:	e007      	b.n	800c588 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa41 	bl	800ca02 <USBD_CtlError>
          err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c586:	bf00      	nop
      }
      break;
 800c588:	e037      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7c1b      	ldrb	r3, [r3, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c59a:	f107 0208 	add.w	r2, r7, #8
 800c59e:	4610      	mov	r0, r2
 800c5a0:	4798      	blx	r3
 800c5a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5a4:	e029      	b.n	800c5fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fa2a 	bl	800ca02 <USBD_CtlError>
        err++;
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b4:	e021      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7c1b      	ldrb	r3, [r3, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10d      	bne.n	800c5da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5c6:	f107 0208 	add.w	r2, r7, #8
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	4798      	blx	r3
 800c5ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	2207      	movs	r2, #7
 800c5d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5d8:	e00f      	b.n	800c5fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fa10 	bl	800ca02 <USBD_CtlError>
        err++;
 800c5e2:	7afb      	ldrb	r3, [r7, #11]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5e8:	e007      	b.n	800c5fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fa08 	bl	800ca02 <USBD_CtlError>
      err++;
 800c5f2:	7afb      	ldrb	r3, [r7, #11]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5f8:	bf00      	nop
  }

  if (err != 0U)
 800c5fa:	7afb      	ldrb	r3, [r7, #11]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d11e      	bne.n	800c63e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	88db      	ldrh	r3, [r3, #6]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d016      	beq.n	800c636 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c608:	893b      	ldrh	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00e      	beq.n	800c62c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	88da      	ldrh	r2, [r3, #6]
 800c612:	893b      	ldrh	r3, [r7, #8]
 800c614:	4293      	cmp	r3, r2
 800c616:	bf28      	it	cs
 800c618:	4613      	movcs	r3, r2
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c61e:	893b      	ldrh	r3, [r7, #8]
 800c620:	461a      	mov	r2, r3
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fa69 	bl	800cafc <USBD_CtlSendData>
 800c62a:	e009      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f9e7 	bl	800ca02 <USBD_CtlError>
 800c634:	e004      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 faba 	bl	800cbb0 <USBD_CtlSendStatus>
 800c63c:	e000      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
    return;
 800c63e:	bf00      	nop
  }
}
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop

0800c648 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	889b      	ldrh	r3, [r3, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d131      	bne.n	800c6be <USBD_SetAddress+0x76>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d12d      	bne.n	800c6be <USBD_SetAddress+0x76>
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	885b      	ldrh	r3, [r3, #2]
 800c666:	2b7f      	cmp	r3, #127	@ 0x7f
 800c668:	d829      	bhi.n	800c6be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	885b      	ldrh	r3, [r3, #2]
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c674:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b03      	cmp	r3, #3
 800c680:	d104      	bne.n	800c68c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f9bc 	bl	800ca02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c68a:	e01d      	b.n	800c6c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	7bfa      	ldrb	r2, [r7, #15]
 800c690:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f003 f887 	bl	800f7ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fa86 	bl	800cbb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d004      	beq.n	800c6b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b2:	e009      	b.n	800c6c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6bc:	e004      	b.n	800c6c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f99e 	bl	800ca02 <USBD_CtlError>
  }
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	885b      	ldrh	r3, [r3, #2]
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	4b4e      	ldr	r3, [pc, #312]	@ (800c820 <USBD_SetConfig+0x150>)
 800c6e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6e8:	4b4d      	ldr	r3, [pc, #308]	@ (800c820 <USBD_SetConfig+0x150>)
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d905      	bls.n	800c6fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f985 	bl	800ca02 <USBD_CtlError>
    return USBD_FAIL;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e08c      	b.n	800c816 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b02      	cmp	r3, #2
 800c706:	d002      	beq.n	800c70e <USBD_SetConfig+0x3e>
 800c708:	2b03      	cmp	r3, #3
 800c70a:	d029      	beq.n	800c760 <USBD_SetConfig+0x90>
 800c70c:	e075      	b.n	800c7fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c70e:	4b44      	ldr	r3, [pc, #272]	@ (800c820 <USBD_SetConfig+0x150>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d020      	beq.n	800c758 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c716:	4b42      	ldr	r3, [pc, #264]	@ (800c820 <USBD_SetConfig+0x150>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c720:	4b3f      	ldr	r3, [pc, #252]	@ (800c820 <USBD_SetConfig+0x150>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7fe ffe3 	bl	800b6f2 <USBD_SetClassConfig>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d008      	beq.n	800c748 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f962 	bl	800ca02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2202      	movs	r2, #2
 800c742:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c746:	e065      	b.n	800c814 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fa31 	bl	800cbb0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2203      	movs	r2, #3
 800c752:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c756:	e05d      	b.n	800c814 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fa29 	bl	800cbb0 <USBD_CtlSendStatus>
      break;
 800c75e:	e059      	b.n	800c814 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c760:	4b2f      	ldr	r3, [pc, #188]	@ (800c820 <USBD_SetConfig+0x150>)
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d112      	bne.n	800c78e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2202      	movs	r2, #2
 800c76c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c770:	4b2b      	ldr	r3, [pc, #172]	@ (800c820 <USBD_SetConfig+0x150>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c77a:	4b29      	ldr	r3, [pc, #164]	@ (800c820 <USBD_SetConfig+0x150>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7fe ffd2 	bl	800b72a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fa12 	bl	800cbb0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c78c:	e042      	b.n	800c814 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c78e:	4b24      	ldr	r3, [pc, #144]	@ (800c820 <USBD_SetConfig+0x150>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d02a      	beq.n	800c7f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7fe ffc0 	bl	800b72a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c7aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c820 <USBD_SetConfig+0x150>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c820 <USBD_SetConfig+0x150>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f7fe ff99 	bl	800b6f2 <USBD_SetClassConfig>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00f      	beq.n	800c7ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 f918 	bl	800ca02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7fe ffa5 	bl	800b72a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c7e8:	e014      	b.n	800c814 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f9e0 	bl	800cbb0 <USBD_CtlSendStatus>
      break;
 800c7f0:	e010      	b.n	800c814 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f9dc 	bl	800cbb0 <USBD_CtlSendStatus>
      break;
 800c7f8:	e00c      	b.n	800c814 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f900 	bl	800ca02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c802:	4b07      	ldr	r3, [pc, #28]	@ (800c820 <USBD_SetConfig+0x150>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7fe ff8e 	bl	800b72a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c80e:	2303      	movs	r3, #3
 800c810:	73fb      	strb	r3, [r7, #15]
      break;
 800c812:	bf00      	nop
  }

  return ret;
 800c814:	7bfb      	ldrb	r3, [r7, #15]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	20000438 	.word	0x20000438

0800c824 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	88db      	ldrh	r3, [r3, #6]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d004      	beq.n	800c840 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c836:	6839      	ldr	r1, [r7, #0]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f8e2 	bl	800ca02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c83e:	e023      	b.n	800c888 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b02      	cmp	r3, #2
 800c84a:	dc02      	bgt.n	800c852 <USBD_GetConfig+0x2e>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	dc03      	bgt.n	800c858 <USBD_GetConfig+0x34>
 800c850:	e015      	b.n	800c87e <USBD_GetConfig+0x5a>
 800c852:	2b03      	cmp	r3, #3
 800c854:	d00b      	beq.n	800c86e <USBD_GetConfig+0x4a>
 800c856:	e012      	b.n	800c87e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	3308      	adds	r3, #8
 800c862:	2201      	movs	r2, #1
 800c864:	4619      	mov	r1, r3
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f948 	bl	800cafc <USBD_CtlSendData>
        break;
 800c86c:	e00c      	b.n	800c888 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3304      	adds	r3, #4
 800c872:	2201      	movs	r2, #1
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f940 	bl	800cafc <USBD_CtlSendData>
        break;
 800c87c:	e004      	b.n	800c888 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f8be 	bl	800ca02 <USBD_CtlError>
        break;
 800c886:	bf00      	nop
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d81e      	bhi.n	800c8e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	88db      	ldrh	r3, [r3, #6]
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d004      	beq.n	800c8ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c8b0:	6839      	ldr	r1, [r7, #0]
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f8a5 	bl	800ca02 <USBD_CtlError>
        break;
 800c8b8:	e01a      	b.n	800c8f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d005      	beq.n	800c8d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f043 0202 	orr.w	r2, r3, #2
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	330c      	adds	r3, #12
 800c8da:	2202      	movs	r2, #2
 800c8dc:	4619      	mov	r1, r3
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f90c 	bl	800cafc <USBD_CtlSendData>
      break;
 800c8e4:	e004      	b.n	800c8f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f88a 	bl	800ca02 <USBD_CtlError>
      break;
 800c8ee:	bf00      	nop
  }
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	885b      	ldrh	r3, [r3, #2]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d107      	bne.n	800c91a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2201      	movs	r2, #1
 800c90e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f94c 	bl	800cbb0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c918:	e013      	b.n	800c942 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	885b      	ldrh	r3, [r3, #2]
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d10b      	bne.n	800c93a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	889b      	ldrh	r3, [r3, #4]
 800c926:	0a1b      	lsrs	r3, r3, #8
 800c928:	b29b      	uxth	r3, r3
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f93c 	bl	800cbb0 <USBD_CtlSendStatus>
}
 800c938:	e003      	b.n	800c942 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f860 	bl	800ca02 <USBD_CtlError>
}
 800c942:	bf00      	nop
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	3b01      	subs	r3, #1
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d80b      	bhi.n	800c97a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	885b      	ldrh	r3, [r3, #2]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d10c      	bne.n	800c984 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f91c 	bl	800cbb0 <USBD_CtlSendStatus>
      }
      break;
 800c978:	e004      	b.n	800c984 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c97a:	6839      	ldr	r1, [r7, #0]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f840 	bl	800ca02 <USBD_CtlError>
      break;
 800c982:	e000      	b.n	800c986 <USBD_ClrFeature+0x3c>
      break;
 800c984:	bf00      	nop
  }
}
 800c986:	bf00      	nop
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b084      	sub	sp, #16
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	781a      	ldrb	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	781a      	ldrb	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff fa40 	bl	800be3e <SWAPBYTE>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f7ff fa33 	bl	800be3e <SWAPBYTE>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	461a      	mov	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f7ff fa26 	bl	800be3e <SWAPBYTE>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	80da      	strh	r2, [r3, #6]
}
 800c9fa:	bf00      	nop
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b082      	sub	sp, #8
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca0c:	2180      	movs	r1, #128	@ 0x80
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f002 fe62 	bl	800f6d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca14:	2100      	movs	r1, #0
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f002 fe5e 	bl	800f6d8 <USBD_LL_StallEP>
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca30:	2300      	movs	r3, #0
 800ca32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d042      	beq.n	800cac0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ca3e:	6938      	ldr	r0, [r7, #16]
 800ca40:	f000 f842 	bl	800cac8 <USBD_GetLen>
 800ca44:	4603      	mov	r3, r0
 800ca46:	3301      	adds	r3, #1
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca4e:	d808      	bhi.n	800ca62 <USBD_GetString+0x3e>
 800ca50:	6938      	ldr	r0, [r7, #16]
 800ca52:	f000 f839 	bl	800cac8 <USBD_GetLen>
 800ca56:	4603      	mov	r3, r0
 800ca58:	3301      	adds	r3, #1
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	e001      	b.n	800ca66 <USBD_GetString+0x42>
 800ca62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	4413      	add	r3, r2
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	7812      	ldrb	r2, [r2, #0]
 800ca74:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca76:	7dfb      	ldrb	r3, [r7, #23]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	4413      	add	r3, r2
 800ca82:	2203      	movs	r2, #3
 800ca84:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca86:	7dfb      	ldrb	r3, [r7, #23]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca8c:	e013      	b.n	800cab6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	4413      	add	r3, r2
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	7812      	ldrb	r2, [r2, #0]
 800ca98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	613b      	str	r3, [r7, #16]
    idx++;
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
 800caa2:	3301      	adds	r3, #1
 800caa4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	4413      	add	r3, r2
 800caac:	2200      	movs	r2, #0
 800caae:	701a      	strb	r2, [r3, #0]
    idx++;
 800cab0:	7dfb      	ldrb	r3, [r7, #23]
 800cab2:	3301      	adds	r3, #1
 800cab4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1e7      	bne.n	800ca8e <USBD_GetString+0x6a>
 800cabe:	e000      	b.n	800cac2 <USBD_GetString+0x9e>
    return;
 800cac0:	bf00      	nop
  }
}
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cad8:	e005      	b.n	800cae6 <USBD_GetLen+0x1e>
  {
    len++;
 800cada:	7bfb      	ldrb	r3, [r7, #15]
 800cadc:	3301      	adds	r3, #1
 800cade:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	3301      	adds	r3, #1
 800cae4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1f5      	bne.n	800cada <USBD_GetLen+0x12>
  }

  return len;
 800caee:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2202      	movs	r2, #2
 800cb0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	2100      	movs	r1, #0
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f002 fe61 	bl	800f7ea <USBD_LL_Transmit>

  return USBD_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	2100      	movs	r1, #0
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f002 fe50 	bl	800f7ea <USBD_LL_Transmit>

  return USBD_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3710      	adds	r7, #16
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2203      	movs	r2, #3
 800cb64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f002 fe54 	bl	800f82c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b084      	sub	sp, #16
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	2100      	movs	r1, #0
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f002 fe43 	bl	800f82c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2204      	movs	r2, #4
 800cbbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f002 fe0f 	bl	800f7ea <USBD_LL_Transmit>

  return USBD_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b082      	sub	sp, #8
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2205      	movs	r2, #5
 800cbe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2100      	movs	r1, #0
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f002 fe1d 	bl	800f82c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cc06:	79fb      	ldrb	r3, [r7, #7]
 800cc08:	4a08      	ldr	r2, [pc, #32]	@ (800cc2c <disk_status+0x30>)
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	79fa      	ldrb	r2, [r7, #7]
 800cc14:	4905      	ldr	r1, [pc, #20]	@ (800cc2c <disk_status+0x30>)
 800cc16:	440a      	add	r2, r1
 800cc18:	7a12      	ldrb	r2, [r2, #8]
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	4798      	blx	r3
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	20000464 	.word	0x20000464

0800cc30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cc3e:	79fb      	ldrb	r3, [r7, #7]
 800cc40:	4a0e      	ldr	r2, [pc, #56]	@ (800cc7c <disk_initialize+0x4c>)
 800cc42:	5cd3      	ldrb	r3, [r2, r3]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d114      	bne.n	800cc72 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cc48:	79fb      	ldrb	r3, [r7, #7]
 800cc4a:	4a0c      	ldr	r2, [pc, #48]	@ (800cc7c <disk_initialize+0x4c>)
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	79fa      	ldrb	r2, [r7, #7]
 800cc56:	4909      	ldr	r1, [pc, #36]	@ (800cc7c <disk_initialize+0x4c>)
 800cc58:	440a      	add	r2, r1
 800cc5a:	7a12      	ldrb	r2, [r2, #8]
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4798      	blx	r3
 800cc60:	4603      	mov	r3, r0
 800cc62:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d103      	bne.n	800cc72 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cc6a:	79fb      	ldrb	r3, [r7, #7]
 800cc6c:	4a03      	ldr	r2, [pc, #12]	@ (800cc7c <disk_initialize+0x4c>)
 800cc6e:	2101      	movs	r1, #1
 800cc70:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	20000464 	.word	0x20000464

0800cc80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc80:	b590      	push	{r4, r7, lr}
 800cc82:	b087      	sub	sp, #28
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60b9      	str	r1, [r7, #8]
 800cc88:	607a      	str	r2, [r7, #4]
 800cc8a:	603b      	str	r3, [r7, #0]
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	4a0a      	ldr	r2, [pc, #40]	@ (800ccbc <disk_read+0x3c>)
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	689c      	ldr	r4, [r3, #8]
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	4a07      	ldr	r2, [pc, #28]	@ (800ccbc <disk_read+0x3c>)
 800cca0:	4413      	add	r3, r2
 800cca2:	7a18      	ldrb	r0, [r3, #8]
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	68b9      	ldr	r1, [r7, #8]
 800ccaa:	47a0      	blx	r4
 800ccac:	4603      	mov	r3, r0
 800ccae:	75fb      	strb	r3, [r7, #23]
  return res;
 800ccb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	371c      	adds	r7, #28
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd90      	pop	{r4, r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	20000464 	.word	0x20000464

0800ccc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ccc0:	b590      	push	{r4, r7, lr}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60b9      	str	r1, [r7, #8]
 800ccc8:	607a      	str	r2, [r7, #4]
 800ccca:	603b      	str	r3, [r7, #0]
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	4a0a      	ldr	r2, [pc, #40]	@ (800ccfc <disk_write+0x3c>)
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	4413      	add	r3, r2
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	68dc      	ldr	r4, [r3, #12]
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
 800ccde:	4a07      	ldr	r2, [pc, #28]	@ (800ccfc <disk_write+0x3c>)
 800cce0:	4413      	add	r3, r2
 800cce2:	7a18      	ldrb	r0, [r3, #8]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	68b9      	ldr	r1, [r7, #8]
 800ccea:	47a0      	blx	r4
 800ccec:	4603      	mov	r3, r0
 800ccee:	75fb      	strb	r3, [r7, #23]
  return res;
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	371c      	adds	r7, #28
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd90      	pop	{r4, r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20000464 	.word	0x20000464

0800cd00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	4603      	mov	r3, r0
 800cd08:	603a      	str	r2, [r7, #0]
 800cd0a:	71fb      	strb	r3, [r7, #7]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	4a09      	ldr	r2, [pc, #36]	@ (800cd38 <disk_ioctl+0x38>)
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	79fa      	ldrb	r2, [r7, #7]
 800cd1e:	4906      	ldr	r1, [pc, #24]	@ (800cd38 <disk_ioctl+0x38>)
 800cd20:	440a      	add	r2, r1
 800cd22:	7a10      	ldrb	r0, [r2, #8]
 800cd24:	79b9      	ldrb	r1, [r7, #6]
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4798      	blx	r3
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	73fb      	strb	r3, [r7, #15]
  return res;
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20000464 	.word	0x20000464

0800cd3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	3301      	adds	r3, #1
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cd4c:	89fb      	ldrh	r3, [r7, #14]
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	b21a      	sxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	b21b      	sxth	r3, r3
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	b21b      	sxth	r3, r3
 800cd5c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cd5e:	89fb      	ldrh	r3, [r7, #14]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	3303      	adds	r3, #3
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	021b      	lsls	r3, r3, #8
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	3202      	adds	r2, #2
 800cd84:	7812      	ldrb	r2, [r2, #0]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	021b      	lsls	r3, r3, #8
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	3201      	adds	r2, #1
 800cd92:	7812      	ldrb	r2, [r2, #0]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	021b      	lsls	r3, r3, #8
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	7812      	ldrb	r2, [r2, #0]
 800cda0:	4313      	orrs	r3, r2
 800cda2:	60fb      	str	r3, [r7, #12]
	return rv;
 800cda4:	68fb      	ldr	r3, [r7, #12]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr

0800cdb2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cdb2:	b480      	push	{r7}
 800cdb4:	b083      	sub	sp, #12
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	460b      	mov	r3, r1
 800cdbc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	887a      	ldrh	r2, [r7, #2]
 800cdc6:	b2d2      	uxtb	r2, r2
 800cdc8:	701a      	strb	r2, [r3, #0]
 800cdca:	887b      	ldrh	r3, [r7, #2]
 800cdcc:	0a1b      	lsrs	r3, r3, #8
 800cdce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	607a      	str	r2, [r7, #4]
 800cdd6:	887a      	ldrh	r2, [r7, #2]
 800cdd8:	b2d2      	uxtb	r2, r2
 800cdda:	701a      	strb	r2, [r3, #0]
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	683a      	ldr	r2, [r7, #0]
 800cdfa:	b2d2      	uxtb	r2, r2
 800cdfc:	701a      	strb	r2, [r3, #0]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	0a1b      	lsrs	r3, r3, #8
 800ce02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	1c5a      	adds	r2, r3, #1
 800ce08:	607a      	str	r2, [r7, #4]
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	b2d2      	uxtb	r2, r2
 800ce0e:	701a      	strb	r2, [r3, #0]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	0a1b      	lsrs	r3, r3, #8
 800ce14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	1c5a      	adds	r2, r3, #1
 800ce1a:	607a      	str	r2, [r7, #4]
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	b2d2      	uxtb	r2, r2
 800ce20:	701a      	strb	r2, [r3, #0]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	0a1b      	lsrs	r3, r3, #8
 800ce26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	1c5a      	adds	r2, r3, #1
 800ce2c:	607a      	str	r2, [r7, #4]
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	b2d2      	uxtb	r2, r2
 800ce32:	701a      	strb	r2, [r3, #0]
}
 800ce34:	bf00      	nop
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ce40:	b480      	push	{r7}
 800ce42:	b087      	sub	sp, #28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00d      	beq.n	800ce76 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ce5a:	693a      	ldr	r2, [r7, #16]
 800ce5c:	1c53      	adds	r3, r2, #1
 800ce5e:	613b      	str	r3, [r7, #16]
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	1c59      	adds	r1, r3, #1
 800ce64:	6179      	str	r1, [r7, #20]
 800ce66:	7812      	ldrb	r2, [r2, #0]
 800ce68:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	607b      	str	r3, [r7, #4]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1f1      	bne.n	800ce5a <mem_cpy+0x1a>
	}
}
 800ce76:	bf00      	nop
 800ce78:	371c      	adds	r7, #28
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce82:	b480      	push	{r7}
 800ce84:	b087      	sub	sp, #28
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	60f8      	str	r0, [r7, #12]
 800ce8a:	60b9      	str	r1, [r7, #8]
 800ce8c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	1c5a      	adds	r2, r3, #1
 800ce96:	617a      	str	r2, [r7, #20]
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	607b      	str	r3, [r7, #4]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1f3      	bne.n	800ce92 <mem_set+0x10>
}
 800ceaa:	bf00      	nop
 800ceac:	bf00      	nop
 800ceae:	371c      	adds	r7, #28
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ceb8:	b480      	push	{r7}
 800ceba:	b089      	sub	sp, #36	@ 0x24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	61fb      	str	r3, [r7, #28]
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	61fa      	str	r2, [r7, #28]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	4619      	mov	r1, r3
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	1c5a      	adds	r2, r3, #1
 800cede:	61ba      	str	r2, [r7, #24]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	1acb      	subs	r3, r1, r3
 800cee4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	607b      	str	r3, [r7, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <mem_cmp+0x40>
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0eb      	beq.n	800ced0 <mem_cmp+0x18>

	return r;
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3724      	adds	r7, #36	@ 0x24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cf10:	e002      	b.n	800cf18 <chk_chr+0x12>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3301      	adds	r3, #1
 800cf16:	607b      	str	r3, [r7, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d005      	beq.n	800cf2c <chk_chr+0x26>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	461a      	mov	r2, r3
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d1f2      	bne.n	800cf12 <chk_chr+0xc>
	return *str;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf46:	2300      	movs	r3, #0
 800cf48:	60bb      	str	r3, [r7, #8]
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	e029      	b.n	800cfa4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cf50:	4a27      	ldr	r2, [pc, #156]	@ (800cff0 <chk_lock+0xb4>)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	011b      	lsls	r3, r3, #4
 800cf56:	4413      	add	r3, r2
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d01d      	beq.n	800cf9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf5e:	4a24      	ldr	r2, [pc, #144]	@ (800cff0 <chk_lock+0xb4>)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	011b      	lsls	r3, r3, #4
 800cf64:	4413      	add	r3, r2
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d116      	bne.n	800cf9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cf70:	4a1f      	ldr	r2, [pc, #124]	@ (800cff0 <chk_lock+0xb4>)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	011b      	lsls	r3, r3, #4
 800cf76:	4413      	add	r3, r2
 800cf78:	3304      	adds	r3, #4
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d10c      	bne.n	800cf9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf84:	4a1a      	ldr	r2, [pc, #104]	@ (800cff0 <chk_lock+0xb4>)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	011b      	lsls	r3, r3, #4
 800cf8a:	4413      	add	r3, r2
 800cf8c:	3308      	adds	r3, #8
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d102      	bne.n	800cf9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf98:	e007      	b.n	800cfaa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	60fb      	str	r3, [r7, #12]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d9d2      	bls.n	800cf50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d109      	bne.n	800cfc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d102      	bne.n	800cfbc <chk_lock+0x80>
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d101      	bne.n	800cfc0 <chk_lock+0x84>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e010      	b.n	800cfe2 <chk_lock+0xa6>
 800cfc0:	2312      	movs	r3, #18
 800cfc2:	e00e      	b.n	800cfe2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d108      	bne.n	800cfdc <chk_lock+0xa0>
 800cfca:	4a09      	ldr	r2, [pc, #36]	@ (800cff0 <chk_lock+0xb4>)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	011b      	lsls	r3, r3, #4
 800cfd0:	4413      	add	r3, r2
 800cfd2:	330c      	adds	r3, #12
 800cfd4:	881b      	ldrh	r3, [r3, #0]
 800cfd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfda:	d101      	bne.n	800cfe0 <chk_lock+0xa4>
 800cfdc:	2310      	movs	r3, #16
 800cfde:	e000      	b.n	800cfe2 <chk_lock+0xa6>
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	20000444 	.word	0x20000444

0800cff4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cffa:	2300      	movs	r3, #0
 800cffc:	607b      	str	r3, [r7, #4]
 800cffe:	e002      	b.n	800d006 <enq_lock+0x12>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	3301      	adds	r3, #1
 800d004:	607b      	str	r3, [r7, #4]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d806      	bhi.n	800d01a <enq_lock+0x26>
 800d00c:	4a09      	ldr	r2, [pc, #36]	@ (800d034 <enq_lock+0x40>)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	011b      	lsls	r3, r3, #4
 800d012:	4413      	add	r3, r2
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1f2      	bne.n	800d000 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	bf14      	ite	ne
 800d020:	2301      	movne	r3, #1
 800d022:	2300      	moveq	r3, #0
 800d024:	b2db      	uxtb	r3, r3
}
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	20000444 	.word	0x20000444

0800d038 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d042:	2300      	movs	r3, #0
 800d044:	60fb      	str	r3, [r7, #12]
 800d046:	e01f      	b.n	800d088 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d048:	4a41      	ldr	r2, [pc, #260]	@ (800d150 <inc_lock+0x118>)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	011b      	lsls	r3, r3, #4
 800d04e:	4413      	add	r3, r2
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	d113      	bne.n	800d082 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d05a:	4a3d      	ldr	r2, [pc, #244]	@ (800d150 <inc_lock+0x118>)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	4413      	add	r3, r2
 800d062:	3304      	adds	r3, #4
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d109      	bne.n	800d082 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d06e:	4a38      	ldr	r2, [pc, #224]	@ (800d150 <inc_lock+0x118>)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	3308      	adds	r3, #8
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d07e:	429a      	cmp	r2, r3
 800d080:	d006      	beq.n	800d090 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3301      	adds	r3, #1
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d9dc      	bls.n	800d048 <inc_lock+0x10>
 800d08e:	e000      	b.n	800d092 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d090:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d132      	bne.n	800d0fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d098:	2300      	movs	r3, #0
 800d09a:	60fb      	str	r3, [r7, #12]
 800d09c:	e002      	b.n	800d0a4 <inc_lock+0x6c>
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	60fb      	str	r3, [r7, #12]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d806      	bhi.n	800d0b8 <inc_lock+0x80>
 800d0aa:	4a29      	ldr	r2, [pc, #164]	@ (800d150 <inc_lock+0x118>)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	011b      	lsls	r3, r3, #4
 800d0b0:	4413      	add	r3, r2
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1f2      	bne.n	800d09e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d101      	bne.n	800d0c2 <inc_lock+0x8a>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	e040      	b.n	800d144 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	4922      	ldr	r1, [pc, #136]	@ (800d150 <inc_lock+0x118>)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	440b      	add	r3, r1
 800d0ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	689a      	ldr	r2, [r3, #8]
 800d0d4:	491e      	ldr	r1, [pc, #120]	@ (800d150 <inc_lock+0x118>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	440b      	add	r3, r1
 800d0dc:	3304      	adds	r3, #4
 800d0de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	695a      	ldr	r2, [r3, #20]
 800d0e4:	491a      	ldr	r1, [pc, #104]	@ (800d150 <inc_lock+0x118>)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	011b      	lsls	r3, r3, #4
 800d0ea:	440b      	add	r3, r1
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d0f0:	4a17      	ldr	r2, [pc, #92]	@ (800d150 <inc_lock+0x118>)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	011b      	lsls	r3, r3, #4
 800d0f6:	4413      	add	r3, r2
 800d0f8:	330c      	adds	r3, #12
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d009      	beq.n	800d118 <inc_lock+0xe0>
 800d104:	4a12      	ldr	r2, [pc, #72]	@ (800d150 <inc_lock+0x118>)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	011b      	lsls	r3, r3, #4
 800d10a:	4413      	add	r3, r2
 800d10c:	330c      	adds	r3, #12
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d001      	beq.n	800d118 <inc_lock+0xe0>
 800d114:	2300      	movs	r3, #0
 800d116:	e015      	b.n	800d144 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d108      	bne.n	800d130 <inc_lock+0xf8>
 800d11e:	4a0c      	ldr	r2, [pc, #48]	@ (800d150 <inc_lock+0x118>)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	011b      	lsls	r3, r3, #4
 800d124:	4413      	add	r3, r2
 800d126:	330c      	adds	r3, #12
 800d128:	881b      	ldrh	r3, [r3, #0]
 800d12a:	3301      	adds	r3, #1
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	e001      	b.n	800d134 <inc_lock+0xfc>
 800d130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d134:	4906      	ldr	r1, [pc, #24]	@ (800d150 <inc_lock+0x118>)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	011b      	lsls	r3, r3, #4
 800d13a:	440b      	add	r3, r1
 800d13c:	330c      	adds	r3, #12
 800d13e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	3301      	adds	r3, #1
}
 800d144:	4618      	mov	r0, r3
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	20000444 	.word	0x20000444

0800d154 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	3b01      	subs	r3, #1
 800d160:	607b      	str	r3, [r7, #4]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d825      	bhi.n	800d1b4 <dec_lock+0x60>
		n = Files[i].ctr;
 800d168:	4a17      	ldr	r2, [pc, #92]	@ (800d1c8 <dec_lock+0x74>)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	011b      	lsls	r3, r3, #4
 800d16e:	4413      	add	r3, r2
 800d170:	330c      	adds	r3, #12
 800d172:	881b      	ldrh	r3, [r3, #0]
 800d174:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d176:	89fb      	ldrh	r3, [r7, #14]
 800d178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d17c:	d101      	bne.n	800d182 <dec_lock+0x2e>
 800d17e:	2300      	movs	r3, #0
 800d180:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d182:	89fb      	ldrh	r3, [r7, #14]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d002      	beq.n	800d18e <dec_lock+0x3a>
 800d188:	89fb      	ldrh	r3, [r7, #14]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d18e:	4a0e      	ldr	r2, [pc, #56]	@ (800d1c8 <dec_lock+0x74>)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	011b      	lsls	r3, r3, #4
 800d194:	4413      	add	r3, r2
 800d196:	330c      	adds	r3, #12
 800d198:	89fa      	ldrh	r2, [r7, #14]
 800d19a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d19c:	89fb      	ldrh	r3, [r7, #14]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d105      	bne.n	800d1ae <dec_lock+0x5a>
 800d1a2:	4a09      	ldr	r2, [pc, #36]	@ (800d1c8 <dec_lock+0x74>)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	011b      	lsls	r3, r3, #4
 800d1a8:	4413      	add	r3, r2
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	737b      	strb	r3, [r7, #13]
 800d1b2:	e001      	b.n	800d1b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d1b8:	7b7b      	ldrb	r3, [r7, #13]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	20000444 	.word	0x20000444

0800d1cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	e010      	b.n	800d1fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d1da:	4a0d      	ldr	r2, [pc, #52]	@ (800d210 <clear_lock+0x44>)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	011b      	lsls	r3, r3, #4
 800d1e0:	4413      	add	r3, r2
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d105      	bne.n	800d1f6 <clear_lock+0x2a>
 800d1ea:	4a09      	ldr	r2, [pc, #36]	@ (800d210 <clear_lock+0x44>)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	011b      	lsls	r3, r3, #4
 800d1f0:	4413      	add	r3, r2
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d9eb      	bls.n	800d1da <clear_lock+0xe>
	}
}
 800d202:	bf00      	nop
 800d204:	bf00      	nop
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	20000444 	.word	0x20000444

0800d214 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	78db      	ldrb	r3, [r3, #3]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d034      	beq.n	800d292 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d22c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	7858      	ldrb	r0, [r3, #1]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d238:	2301      	movs	r3, #1
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	f7ff fd40 	bl	800ccc0 <disk_write>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d246:	2301      	movs	r3, #1
 800d248:	73fb      	strb	r3, [r7, #15]
 800d24a:	e022      	b.n	800d292 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	1ad2      	subs	r2, r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	699b      	ldr	r3, [r3, #24]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d217      	bcs.n	800d292 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	789b      	ldrb	r3, [r3, #2]
 800d266:	613b      	str	r3, [r7, #16]
 800d268:	e010      	b.n	800d28c <sync_window+0x78>
					wsect += fs->fsize;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	699b      	ldr	r3, [r3, #24]
 800d26e:	697a      	ldr	r2, [r7, #20]
 800d270:	4413      	add	r3, r2
 800d272:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7858      	ldrb	r0, [r3, #1]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d27e:	2301      	movs	r3, #1
 800d280:	697a      	ldr	r2, [r7, #20]
 800d282:	f7ff fd1d 	bl	800ccc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	3b01      	subs	r3, #1
 800d28a:	613b      	str	r3, [r7, #16]
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d8eb      	bhi.n	800d26a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d292:	7bfb      	ldrb	r3, [r7, #15]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3718      	adds	r7, #24
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d01b      	beq.n	800d2ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7ff ffad 	bl	800d214 <sync_window>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d113      	bne.n	800d2ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7858      	ldrb	r0, [r3, #1]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	683a      	ldr	r2, [r7, #0]
 800d2d2:	f7ff fcd5 	bl	800cc80 <disk_read>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d004      	beq.n	800d2e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
	...

0800d2f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7ff ff87 	bl	800d214 <sync_window>
 800d306:	4603      	mov	r3, r0
 800d308:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d158      	bne.n	800d3c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b03      	cmp	r3, #3
 800d316:	d148      	bne.n	800d3aa <sync_fs+0xb2>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	791b      	ldrb	r3, [r3, #4]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d144      	bne.n	800d3aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	3330      	adds	r3, #48	@ 0x30
 800d324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d328:	2100      	movs	r1, #0
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff fda9 	bl	800ce82 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	3330      	adds	r3, #48	@ 0x30
 800d334:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d338:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7ff fd38 	bl	800cdb2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3330      	adds	r3, #48	@ 0x30
 800d346:	4921      	ldr	r1, [pc, #132]	@ (800d3cc <sync_fs+0xd4>)
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff fd4d 	bl	800cde8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	3330      	adds	r3, #48	@ 0x30
 800d352:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d356:	491e      	ldr	r1, [pc, #120]	@ (800d3d0 <sync_fs+0xd8>)
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff fd45 	bl	800cde8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3330      	adds	r3, #48	@ 0x30
 800d362:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	4619      	mov	r1, r3
 800d36c:	4610      	mov	r0, r2
 800d36e:	f7ff fd3b 	bl	800cde8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	3330      	adds	r3, #48	@ 0x30
 800d376:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	4619      	mov	r1, r3
 800d380:	4610      	mov	r0, r2
 800d382:	f7ff fd31 	bl	800cde8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	69db      	ldr	r3, [r3, #28]
 800d38a:	1c5a      	adds	r2, r3, #1
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	7858      	ldrb	r0, [r3, #1]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d39e:	2301      	movs	r3, #1
 800d3a0:	f7ff fc8e 	bl	800ccc0 <disk_write>
			fs->fsi_flag = 0;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	785b      	ldrb	r3, [r3, #1]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff fca4 	bl	800cd00 <disk_ioctl>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d001      	beq.n	800d3c2 <sync_fs+0xca>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	41615252 	.word	0x41615252
 800d3d0:	61417272 	.word	0x61417272

0800d3d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	3b02      	subs	r3, #2
 800d3e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	695b      	ldr	r3, [r3, #20]
 800d3e8:	3b02      	subs	r3, #2
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d301      	bcc.n	800d3f4 <clust2sect+0x20>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	e008      	b.n	800d406 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	895b      	ldrh	r3, [r3, #10]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	fb03 f202 	mul.w	r2, r3, r2
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d404:	4413      	add	r3, r2
}
 800d406:	4618      	mov	r0, r3
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b086      	sub	sp, #24
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d904      	bls.n	800d432 <get_fat+0x20>
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d302      	bcc.n	800d438 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d432:	2301      	movs	r3, #1
 800d434:	617b      	str	r3, [r7, #20]
 800d436:	e08e      	b.n	800d556 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d438:	f04f 33ff 	mov.w	r3, #4294967295
 800d43c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	2b03      	cmp	r3, #3
 800d444:	d061      	beq.n	800d50a <get_fat+0xf8>
 800d446:	2b03      	cmp	r3, #3
 800d448:	dc7b      	bgt.n	800d542 <get_fat+0x130>
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d002      	beq.n	800d454 <get_fat+0x42>
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d041      	beq.n	800d4d6 <get_fat+0xc4>
 800d452:	e076      	b.n	800d542 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	60fb      	str	r3, [r7, #12]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	085b      	lsrs	r3, r3, #1
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	4413      	add	r3, r2
 800d460:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	6a1a      	ldr	r2, [r3, #32]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	0a5b      	lsrs	r3, r3, #9
 800d46a:	4413      	add	r3, r2
 800d46c:	4619      	mov	r1, r3
 800d46e:	6938      	ldr	r0, [r7, #16]
 800d470:	f7ff ff14 	bl	800d29c <move_window>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d166      	bne.n	800d548 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	1c5a      	adds	r2, r3, #1
 800d47e:	60fa      	str	r2, [r7, #12]
 800d480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	4413      	add	r3, r2
 800d488:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d48c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	6a1a      	ldr	r2, [r3, #32]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	0a5b      	lsrs	r3, r3, #9
 800d496:	4413      	add	r3, r2
 800d498:	4619      	mov	r1, r3
 800d49a:	6938      	ldr	r0, [r7, #16]
 800d49c:	f7ff fefe 	bl	800d29c <move_window>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d152      	bne.n	800d54c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4b4:	021b      	lsls	r3, r3, #8
 800d4b6:	68ba      	ldr	r2, [r7, #8]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d002      	beq.n	800d4cc <get_fat+0xba>
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	091b      	lsrs	r3, r3, #4
 800d4ca:	e002      	b.n	800d4d2 <get_fat+0xc0>
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4d2:	617b      	str	r3, [r7, #20]
			break;
 800d4d4:	e03f      	b.n	800d556 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	6a1a      	ldr	r2, [r3, #32]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	0a1b      	lsrs	r3, r3, #8
 800d4de:	4413      	add	r3, r2
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	6938      	ldr	r0, [r7, #16]
 800d4e4:	f7ff feda 	bl	800d29c <move_window>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d130      	bne.n	800d550 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d4fc:	4413      	add	r3, r2
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7ff fc1c 	bl	800cd3c <ld_word>
 800d504:	4603      	mov	r3, r0
 800d506:	617b      	str	r3, [r7, #20]
			break;
 800d508:	e025      	b.n	800d556 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	6a1a      	ldr	r2, [r3, #32]
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	09db      	lsrs	r3, r3, #7
 800d512:	4413      	add	r3, r2
 800d514:	4619      	mov	r1, r3
 800d516:	6938      	ldr	r0, [r7, #16]
 800d518:	f7ff fec0 	bl	800d29c <move_window>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d118      	bne.n	800d554 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d530:	4413      	add	r3, r2
 800d532:	4618      	mov	r0, r3
 800d534:	f7ff fc1a 	bl	800cd6c <ld_dword>
 800d538:	4603      	mov	r3, r0
 800d53a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d53e:	617b      	str	r3, [r7, #20]
			break;
 800d540:	e009      	b.n	800d556 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d542:	2301      	movs	r3, #1
 800d544:	617b      	str	r3, [r7, #20]
 800d546:	e006      	b.n	800d556 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d548:	bf00      	nop
 800d54a:	e004      	b.n	800d556 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d54c:	bf00      	nop
 800d54e:	e002      	b.n	800d556 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d550:	bf00      	nop
 800d552:	e000      	b.n	800d556 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d554:	bf00      	nop
		}
	}

	return val;
 800d556:	697b      	ldr	r3, [r7, #20]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d560:	b590      	push	{r4, r7, lr}
 800d562:	b089      	sub	sp, #36	@ 0x24
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d56c:	2302      	movs	r3, #2
 800d56e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2b01      	cmp	r3, #1
 800d574:	f240 80d9 	bls.w	800d72a <put_fat+0x1ca>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	68ba      	ldr	r2, [r7, #8]
 800d57e:	429a      	cmp	r2, r3
 800d580:	f080 80d3 	bcs.w	800d72a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	2b03      	cmp	r3, #3
 800d58a:	f000 8096 	beq.w	800d6ba <put_fat+0x15a>
 800d58e:	2b03      	cmp	r3, #3
 800d590:	f300 80cb 	bgt.w	800d72a <put_fat+0x1ca>
 800d594:	2b01      	cmp	r3, #1
 800d596:	d002      	beq.n	800d59e <put_fat+0x3e>
 800d598:	2b02      	cmp	r3, #2
 800d59a:	d06e      	beq.n	800d67a <put_fat+0x11a>
 800d59c:	e0c5      	b.n	800d72a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	61bb      	str	r3, [r7, #24]
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	085b      	lsrs	r3, r3, #1
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6a1a      	ldr	r2, [r3, #32]
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	0a5b      	lsrs	r3, r3, #9
 800d5b4:	4413      	add	r3, r2
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f7ff fe6f 	bl	800d29c <move_window>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5c2:	7ffb      	ldrb	r3, [r7, #31]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f040 80a9 	bne.w	800d71c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	1c59      	adds	r1, r3, #1
 800d5d4:	61b9      	str	r1, [r7, #24]
 800d5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5da:	4413      	add	r3, r2
 800d5dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	f003 0301 	and.w	r3, r3, #1
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00d      	beq.n	800d604 <put_fat+0xa4>
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	b25b      	sxtb	r3, r3
 800d5ee:	f003 030f 	and.w	r3, r3, #15
 800d5f2:	b25a      	sxtb	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	011b      	lsls	r3, r3, #4
 800d5fa:	b25b      	sxtb	r3, r3
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	b25b      	sxtb	r3, r3
 800d600:	b2db      	uxtb	r3, r3
 800d602:	e001      	b.n	800d608 <put_fat+0xa8>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	b2db      	uxtb	r3, r3
 800d608:	697a      	ldr	r2, [r7, #20]
 800d60a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2201      	movs	r2, #1
 800d610:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6a1a      	ldr	r2, [r3, #32]
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	0a5b      	lsrs	r3, r3, #9
 800d61a:	4413      	add	r3, r2
 800d61c:	4619      	mov	r1, r3
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f7ff fe3c 	bl	800d29c <move_window>
 800d624:	4603      	mov	r3, r0
 800d626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d628:	7ffb      	ldrb	r3, [r7, #31]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d178      	bne.n	800d720 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d63a:	4413      	add	r3, r2
 800d63c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	2b00      	cmp	r3, #0
 800d646:	d003      	beq.n	800d650 <put_fat+0xf0>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	091b      	lsrs	r3, r3, #4
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	e00e      	b.n	800d66e <put_fat+0x10e>
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	b25b      	sxtb	r3, r3
 800d656:	f023 030f 	bic.w	r3, r3, #15
 800d65a:	b25a      	sxtb	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	0a1b      	lsrs	r3, r3, #8
 800d660:	b25b      	sxtb	r3, r3
 800d662:	f003 030f 	and.w	r3, r3, #15
 800d666:	b25b      	sxtb	r3, r3
 800d668:	4313      	orrs	r3, r2
 800d66a:	b25b      	sxtb	r3, r3
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	697a      	ldr	r2, [r7, #20]
 800d670:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2201      	movs	r2, #1
 800d676:	70da      	strb	r2, [r3, #3]
			break;
 800d678:	e057      	b.n	800d72a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6a1a      	ldr	r2, [r3, #32]
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	0a1b      	lsrs	r3, r3, #8
 800d682:	4413      	add	r3, r2
 800d684:	4619      	mov	r1, r3
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f7ff fe08 	bl	800d29c <move_window>
 800d68c:	4603      	mov	r3, r0
 800d68e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d690:	7ffb      	ldrb	r3, [r7, #31]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d146      	bne.n	800d724 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	005b      	lsls	r3, r3, #1
 800d6a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d6a4:	4413      	add	r3, r2
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	b292      	uxth	r2, r2
 800d6aa:	4611      	mov	r1, r2
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7ff fb80 	bl	800cdb2 <st_word>
			fs->wflag = 1;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	70da      	strb	r2, [r3, #3]
			break;
 800d6b8:	e037      	b.n	800d72a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6a1a      	ldr	r2, [r3, #32]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	09db      	lsrs	r3, r3, #7
 800d6c2:	4413      	add	r3, r2
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7ff fde8 	bl	800d29c <move_window>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6d0:	7ffb      	ldrb	r3, [r7, #31]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d128      	bne.n	800d728 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d6ea:	4413      	add	r3, r2
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff fb3d 	bl	800cd6c <ld_dword>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d6f8:	4323      	orrs	r3, r4
 800d6fa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d70a:	4413      	add	r3, r2
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	4618      	mov	r0, r3
 800d710:	f7ff fb6a 	bl	800cde8 <st_dword>
			fs->wflag = 1;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2201      	movs	r2, #1
 800d718:	70da      	strb	r2, [r3, #3]
			break;
 800d71a:	e006      	b.n	800d72a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d71c:	bf00      	nop
 800d71e:	e004      	b.n	800d72a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d720:	bf00      	nop
 800d722:	e002      	b.n	800d72a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d724:	bf00      	nop
 800d726:	e000      	b.n	800d72a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d728:	bf00      	nop
		}
	}
	return res;
 800d72a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3724      	adds	r7, #36	@ 0x24
 800d730:	46bd      	mov	sp, r7
 800d732:	bd90      	pop	{r4, r7, pc}

0800d734 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d904      	bls.n	800d75a <remove_chain+0x26>
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	695b      	ldr	r3, [r3, #20]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	429a      	cmp	r2, r3
 800d758:	d301      	bcc.n	800d75e <remove_chain+0x2a>
 800d75a:	2302      	movs	r3, #2
 800d75c:	e04b      	b.n	800d7f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00c      	beq.n	800d77e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d764:	f04f 32ff 	mov.w	r2, #4294967295
 800d768:	6879      	ldr	r1, [r7, #4]
 800d76a:	69b8      	ldr	r0, [r7, #24]
 800d76c:	f7ff fef8 	bl	800d560 <put_fat>
 800d770:	4603      	mov	r3, r0
 800d772:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d774:	7ffb      	ldrb	r3, [r7, #31]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <remove_chain+0x4a>
 800d77a:	7ffb      	ldrb	r3, [r7, #31]
 800d77c:	e03b      	b.n	800d7f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d77e:	68b9      	ldr	r1, [r7, #8]
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f7ff fe46 	bl	800d412 <get_fat>
 800d786:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d031      	beq.n	800d7f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	2b01      	cmp	r3, #1
 800d792:	d101      	bne.n	800d798 <remove_chain+0x64>
 800d794:	2302      	movs	r3, #2
 800d796:	e02e      	b.n	800d7f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79e:	d101      	bne.n	800d7a4 <remove_chain+0x70>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e028      	b.n	800d7f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	68b9      	ldr	r1, [r7, #8]
 800d7a8:	69b8      	ldr	r0, [r7, #24]
 800d7aa:	f7ff fed9 	bl	800d560 <put_fat>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d7b2:	7ffb      	ldrb	r3, [r7, #31]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <remove_chain+0x88>
 800d7b8:	7ffb      	ldrb	r3, [r7, #31]
 800d7ba:	e01c      	b.n	800d7f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	691a      	ldr	r2, [r3, #16]
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	695b      	ldr	r3, [r3, #20]
 800d7c4:	3b02      	subs	r3, #2
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d20b      	bcs.n	800d7e2 <remove_chain+0xae>
			fs->free_clst++;
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	69bb      	ldr	r3, [r7, #24]
 800d7d2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	791b      	ldrb	r3, [r3, #4]
 800d7d8:	f043 0301 	orr.w	r3, r3, #1
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	695b      	ldr	r3, [r3, #20]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d3c6      	bcc.n	800d77e <remove_chain+0x4a>
 800d7f0:	e000      	b.n	800d7f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d7f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3720      	adds	r7, #32
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b088      	sub	sp, #32
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10d      	bne.n	800d830 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d004      	beq.n	800d82a <create_chain+0x2c>
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	69ba      	ldr	r2, [r7, #24]
 800d826:	429a      	cmp	r2, r3
 800d828:	d31b      	bcc.n	800d862 <create_chain+0x64>
 800d82a:	2301      	movs	r3, #1
 800d82c:	61bb      	str	r3, [r7, #24]
 800d82e:	e018      	b.n	800d862 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d830:	6839      	ldr	r1, [r7, #0]
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7ff fded 	bl	800d412 <get_fat>
 800d838:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d801      	bhi.n	800d844 <create_chain+0x46>
 800d840:	2301      	movs	r3, #1
 800d842:	e070      	b.n	800d926 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84a:	d101      	bne.n	800d850 <create_chain+0x52>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	e06a      	b.n	800d926 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	429a      	cmp	r2, r3
 800d858:	d201      	bcs.n	800d85e <create_chain+0x60>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	e063      	b.n	800d926 <create_chain+0x128>
		scl = clst;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	3301      	adds	r3, #1
 800d86a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	695b      	ldr	r3, [r3, #20]
 800d870:	69fa      	ldr	r2, [r7, #28]
 800d872:	429a      	cmp	r2, r3
 800d874:	d307      	bcc.n	800d886 <create_chain+0x88>
				ncl = 2;
 800d876:	2302      	movs	r3, #2
 800d878:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d87a:	69fa      	ldr	r2, [r7, #28]
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d901      	bls.n	800d886 <create_chain+0x88>
 800d882:	2300      	movs	r3, #0
 800d884:	e04f      	b.n	800d926 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d886:	69f9      	ldr	r1, [r7, #28]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7ff fdc2 	bl	800d412 <get_fat>
 800d88e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00e      	beq.n	800d8b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d003      	beq.n	800d8a4 <create_chain+0xa6>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a2:	d101      	bne.n	800d8a8 <create_chain+0xaa>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	e03e      	b.n	800d926 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d8a8:	69fa      	ldr	r2, [r7, #28]
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d1da      	bne.n	800d866 <create_chain+0x68>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	e038      	b.n	800d926 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d8b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ba:	69f9      	ldr	r1, [r7, #28]
 800d8bc:	6938      	ldr	r0, [r7, #16]
 800d8be:	f7ff fe4f 	bl	800d560 <put_fat>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d109      	bne.n	800d8e0 <create_chain+0xe2>
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d006      	beq.n	800d8e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d8d2:	69fa      	ldr	r2, [r7, #28]
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	6938      	ldr	r0, [r7, #16]
 800d8d8:	f7ff fe42 	bl	800d560 <put_fat>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d8e0:	7dfb      	ldrb	r3, [r7, #23]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d116      	bne.n	800d914 <create_chain+0x116>
		fs->last_clst = ncl;
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	69fa      	ldr	r2, [r7, #28]
 800d8ea:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	691a      	ldr	r2, [r3, #16]
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	695b      	ldr	r3, [r3, #20]
 800d8f4:	3b02      	subs	r3, #2
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d804      	bhi.n	800d904 <create_chain+0x106>
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	1e5a      	subs	r2, r3, #1
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	791b      	ldrb	r3, [r3, #4]
 800d908:	f043 0301 	orr.w	r3, r3, #1
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	711a      	strb	r2, [r3, #4]
 800d912:	e007      	b.n	800d924 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d914:	7dfb      	ldrb	r3, [r7, #23]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d102      	bne.n	800d920 <create_chain+0x122>
 800d91a:	f04f 33ff 	mov.w	r3, #4294967295
 800d91e:	e000      	b.n	800d922 <create_chain+0x124>
 800d920:	2301      	movs	r3, #1
 800d922:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d924:	69fb      	ldr	r3, [r7, #28]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3720      	adds	r7, #32
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d92e:	b480      	push	{r7}
 800d930:	b087      	sub	sp, #28
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	3304      	adds	r3, #4
 800d944:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	0a5b      	lsrs	r3, r3, #9
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	8952      	ldrh	r2, [r2, #10]
 800d94e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d952:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	1d1a      	adds	r2, r3, #4
 800d958:	613a      	str	r2, [r7, #16]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d101      	bne.n	800d968 <clmt_clust+0x3a>
 800d964:	2300      	movs	r3, #0
 800d966:	e010      	b.n	800d98a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d307      	bcc.n	800d980 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d970:	697a      	ldr	r2, [r7, #20]
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	617b      	str	r3, [r7, #20]
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	3304      	adds	r3, #4
 800d97c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d97e:	e7e9      	b.n	800d954 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d980:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	4413      	add	r3, r2
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	371c      	adds	r7, #28
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b086      	sub	sp, #24
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9ac:	d204      	bcs.n	800d9b8 <dir_sdi+0x22>
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	f003 031f 	and.w	r3, r3, #31
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <dir_sdi+0x26>
		return FR_INT_ERR;
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	e063      	b.n	800da84 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	683a      	ldr	r2, [r7, #0]
 800d9c0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <dir_sdi+0x46>
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d902      	bls.n	800d9dc <dir_sdi+0x46>
		clst = fs->dirbase;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9da:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10c      	bne.n	800d9fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	095b      	lsrs	r3, r3, #5
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	8912      	ldrh	r2, [r2, #8]
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d301      	bcc.n	800d9f2 <dir_sdi+0x5c>
 800d9ee:	2302      	movs	r3, #2
 800d9f0:	e048      	b.n	800da84 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	61da      	str	r2, [r3, #28]
 800d9fa:	e029      	b.n	800da50 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	895b      	ldrh	r3, [r3, #10]
 800da00:	025b      	lsls	r3, r3, #9
 800da02:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800da04:	e019      	b.n	800da3a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6979      	ldr	r1, [r7, #20]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7ff fd01 	bl	800d412 <get_fat>
 800da10:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d101      	bne.n	800da1e <dir_sdi+0x88>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e032      	b.n	800da84 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d904      	bls.n	800da2e <dir_sdi+0x98>
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	695b      	ldr	r3, [r3, #20]
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d301      	bcc.n	800da32 <dir_sdi+0x9c>
 800da2e:	2302      	movs	r3, #2
 800da30:	e028      	b.n	800da84 <dir_sdi+0xee>
			ofs -= csz;
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d2e1      	bcs.n	800da06 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800da42:	6979      	ldr	r1, [r7, #20]
 800da44:	6938      	ldr	r0, [r7, #16]
 800da46:	f7ff fcc5 	bl	800d3d4 <clust2sect>
 800da4a:	4602      	mov	r2, r0
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	697a      	ldr	r2, [r7, #20]
 800da54:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d101      	bne.n	800da62 <dir_sdi+0xcc>
 800da5e:	2302      	movs	r3, #2
 800da60:	e010      	b.n	800da84 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	69da      	ldr	r2, [r3, #28]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	0a5b      	lsrs	r3, r3, #9
 800da6a:	441a      	add	r2, r3
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da7c:	441a      	add	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	695b      	ldr	r3, [r3, #20]
 800daa0:	3320      	adds	r3, #32
 800daa2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d003      	beq.n	800dab4 <dir_next+0x28>
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dab2:	d301      	bcc.n	800dab8 <dir_next+0x2c>
 800dab4:	2304      	movs	r3, #4
 800dab6:	e0aa      	b.n	800dc0e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f040 8098 	bne.w	800dbf4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	69db      	ldr	r3, [r3, #28]
 800dac8:	1c5a      	adds	r2, r3, #1
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	699b      	ldr	r3, [r3, #24]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10b      	bne.n	800daee <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	095b      	lsrs	r3, r3, #5
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	8912      	ldrh	r2, [r2, #8]
 800dade:	4293      	cmp	r3, r2
 800dae0:	f0c0 8088 	bcc.w	800dbf4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	61da      	str	r2, [r3, #28]
 800daea:	2304      	movs	r3, #4
 800daec:	e08f      	b.n	800dc0e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	0a5b      	lsrs	r3, r3, #9
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	8952      	ldrh	r2, [r2, #10]
 800daf6:	3a01      	subs	r2, #1
 800daf8:	4013      	ands	r3, r2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d17a      	bne.n	800dbf4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	4619      	mov	r1, r3
 800db06:	4610      	mov	r0, r2
 800db08:	f7ff fc83 	bl	800d412 <get_fat>
 800db0c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d801      	bhi.n	800db18 <dir_next+0x8c>
 800db14:	2302      	movs	r3, #2
 800db16:	e07a      	b.n	800dc0e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1e:	d101      	bne.n	800db24 <dir_next+0x98>
 800db20:	2301      	movs	r3, #1
 800db22:	e074      	b.n	800dc0e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	695b      	ldr	r3, [r3, #20]
 800db28:	697a      	ldr	r2, [r7, #20]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d358      	bcc.n	800dbe0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d104      	bne.n	800db3e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	61da      	str	r2, [r3, #28]
 800db3a:	2304      	movs	r3, #4
 800db3c:	e067      	b.n	800dc0e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	699b      	ldr	r3, [r3, #24]
 800db44:	4619      	mov	r1, r3
 800db46:	4610      	mov	r0, r2
 800db48:	f7ff fe59 	bl	800d7fe <create_chain>
 800db4c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d101      	bne.n	800db58 <dir_next+0xcc>
 800db54:	2307      	movs	r3, #7
 800db56:	e05a      	b.n	800dc0e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d101      	bne.n	800db62 <dir_next+0xd6>
 800db5e:	2302      	movs	r3, #2
 800db60:	e055      	b.n	800dc0e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db68:	d101      	bne.n	800db6e <dir_next+0xe2>
 800db6a:	2301      	movs	r3, #1
 800db6c:	e04f      	b.n	800dc0e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f7ff fb50 	bl	800d214 <sync_window>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <dir_next+0xf2>
 800db7a:	2301      	movs	r3, #1
 800db7c:	e047      	b.n	800dc0e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3330      	adds	r3, #48	@ 0x30
 800db82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db86:	2100      	movs	r1, #0
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff f97a 	bl	800ce82 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db8e:	2300      	movs	r3, #0
 800db90:	613b      	str	r3, [r7, #16]
 800db92:	6979      	ldr	r1, [r7, #20]
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f7ff fc1d 	bl	800d3d4 <clust2sect>
 800db9a:	4602      	mov	r2, r0
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dba0:	e012      	b.n	800dbc8 <dir_next+0x13c>
						fs->wflag = 1;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2201      	movs	r2, #1
 800dba6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f7ff fb33 	bl	800d214 <sync_window>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <dir_next+0x12c>
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e02a      	b.n	800dc0e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	613b      	str	r3, [r7, #16]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc2:	1c5a      	adds	r2, r3, #1
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	895b      	ldrh	r3, [r3, #10]
 800dbcc:	461a      	mov	r2, r3
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d3e6      	bcc.n	800dba2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	1ad2      	subs	r2, r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	697a      	ldr	r2, [r7, #20]
 800dbe4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dbe6:	6979      	ldr	r1, [r7, #20]
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7ff fbf3 	bl	800d3d4 <clust2sect>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc06:	441a      	add	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b086      	sub	sp, #24
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dc26:	2100      	movs	r1, #0
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f7ff feb4 	bl	800d996 <dir_sdi>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc32:	7dfb      	ldrb	r3, [r7, #23]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d12b      	bne.n	800dc90 <dir_alloc+0x7a>
		n = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	4619      	mov	r1, r3
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f7ff fb2a 	bl	800d29c <move_window>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc4c:	7dfb      	ldrb	r3, [r7, #23]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d11d      	bne.n	800dc8e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	2be5      	cmp	r3, #229	@ 0xe5
 800dc5a:	d004      	beq.n	800dc66 <dir_alloc+0x50>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d107      	bne.n	800dc76 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	613b      	str	r3, [r7, #16]
 800dc6c:	693a      	ldr	r2, [r7, #16]
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d102      	bne.n	800dc7a <dir_alloc+0x64>
 800dc74:	e00c      	b.n	800dc90 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc76:	2300      	movs	r3, #0
 800dc78:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc7a:	2101      	movs	r1, #1
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f7ff ff05 	bl	800da8c <dir_next>
 800dc82:	4603      	mov	r3, r0
 800dc84:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc86:	7dfb      	ldrb	r3, [r7, #23]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d0d7      	beq.n	800dc3c <dir_alloc+0x26>
 800dc8c:	e000      	b.n	800dc90 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc8e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc90:	7dfb      	ldrb	r3, [r7, #23]
 800dc92:	2b04      	cmp	r3, #4
 800dc94:	d101      	bne.n	800dc9a <dir_alloc+0x84>
 800dc96:	2307      	movs	r3, #7
 800dc98:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	331a      	adds	r3, #26
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff f842 	bl	800cd3c <ld_word>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	2b03      	cmp	r3, #3
 800dcc2:	d109      	bne.n	800dcd8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	3314      	adds	r3, #20
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7ff f837 	bl	800cd3c <ld_word>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	041b      	lsls	r3, r3, #16
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b084      	sub	sp, #16
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	60f8      	str	r0, [r7, #12]
 800dcea:	60b9      	str	r1, [r7, #8]
 800dcec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	331a      	adds	r3, #26
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	b292      	uxth	r2, r2
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7ff f85a 	bl	800cdb2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d109      	bne.n	800dd1a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	f103 0214 	add.w	r2, r3, #20
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	0c1b      	lsrs	r3, r3, #16
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7ff f84c 	bl	800cdb2 <st_word>
	}
}
 800dd1a:	bf00      	nop
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b086      	sub	sp, #24
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dd30:	2100      	movs	r1, #0
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff fe2f 	bl	800d996 <dir_sdi>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dd3c:	7dfb      	ldrb	r3, [r7, #23]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d001      	beq.n	800dd46 <dir_find+0x24>
 800dd42:	7dfb      	ldrb	r3, [r7, #23]
 800dd44:	e03e      	b.n	800ddc4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	69db      	ldr	r3, [r3, #28]
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	6938      	ldr	r0, [r7, #16]
 800dd4e:	f7ff faa5 	bl	800d29c <move_window>
 800dd52:	4603      	mov	r3, r0
 800dd54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dd56:	7dfb      	ldrb	r3, [r7, #23]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d12f      	bne.n	800ddbc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a1b      	ldr	r3, [r3, #32]
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d102      	bne.n	800dd70 <dir_find+0x4e>
 800dd6a:	2304      	movs	r3, #4
 800dd6c:	75fb      	strb	r3, [r7, #23]
 800dd6e:	e028      	b.n	800ddc2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a1b      	ldr	r3, [r3, #32]
 800dd74:	330b      	adds	r3, #11
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	330b      	adds	r3, #11
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	f003 0308 	and.w	r3, r3, #8
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10a      	bne.n	800dda8 <dir_find+0x86>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a18      	ldr	r0, [r3, #32]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	3324      	adds	r3, #36	@ 0x24
 800dd9a:	220b      	movs	r2, #11
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	f7ff f88b 	bl	800ceb8 <mem_cmp>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00b      	beq.n	800ddc0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dda8:	2100      	movs	r1, #0
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7ff fe6e 	bl	800da8c <dir_next>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d0c5      	beq.n	800dd46 <dir_find+0x24>
 800ddba:	e002      	b.n	800ddc2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ddbc:	bf00      	nop
 800ddbe:	e000      	b.n	800ddc2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ddc0:	bf00      	nop

	return res;
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ddda:	2101      	movs	r1, #1
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f7ff ff1a 	bl	800dc16 <dir_alloc>
 800dde2:	4603      	mov	r3, r0
 800dde4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d11c      	bne.n	800de26 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	69db      	ldr	r3, [r3, #28]
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	68b8      	ldr	r0, [r7, #8]
 800ddf4:	f7ff fa52 	bl	800d29c <move_window>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d111      	bne.n	800de26 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	2220      	movs	r2, #32
 800de08:	2100      	movs	r1, #0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7ff f839 	bl	800ce82 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6a18      	ldr	r0, [r3, #32]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3324      	adds	r3, #36	@ 0x24
 800de18:	220b      	movs	r2, #11
 800de1a:	4619      	mov	r1, r3
 800de1c:	f7ff f810 	bl	800ce40 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2201      	movs	r2, #1
 800de24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800de26:	7bfb      	ldrb	r3, [r7, #15]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	60fb      	str	r3, [r7, #12]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	3324      	adds	r3, #36	@ 0x24
 800de44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800de46:	220b      	movs	r2, #11
 800de48:	2120      	movs	r1, #32
 800de4a:	68b8      	ldr	r0, [r7, #8]
 800de4c:	f7ff f819 	bl	800ce82 <mem_set>
	si = i = 0; ni = 8;
 800de50:	2300      	movs	r3, #0
 800de52:	613b      	str	r3, [r7, #16]
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	61fb      	str	r3, [r7, #28]
 800de58:	2308      	movs	r3, #8
 800de5a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	61fa      	str	r2, [r7, #28]
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	4413      	add	r3, r2
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800de6a:	7efb      	ldrb	r3, [r7, #27]
 800de6c:	2b20      	cmp	r3, #32
 800de6e:	d94e      	bls.n	800df0e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800de70:	7efb      	ldrb	r3, [r7, #27]
 800de72:	2b2f      	cmp	r3, #47	@ 0x2f
 800de74:	d006      	beq.n	800de84 <create_name+0x54>
 800de76:	7efb      	ldrb	r3, [r7, #27]
 800de78:	2b5c      	cmp	r3, #92	@ 0x5c
 800de7a:	d110      	bne.n	800de9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de7c:	e002      	b.n	800de84 <create_name+0x54>
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	3301      	adds	r3, #1
 800de82:	61fb      	str	r3, [r7, #28]
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	4413      	add	r3, r2
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	2b2f      	cmp	r3, #47	@ 0x2f
 800de8e:	d0f6      	beq.n	800de7e <create_name+0x4e>
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	4413      	add	r3, r2
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	2b5c      	cmp	r3, #92	@ 0x5c
 800de9a:	d0f0      	beq.n	800de7e <create_name+0x4e>
			break;
 800de9c:	e038      	b.n	800df10 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800de9e:	7efb      	ldrb	r3, [r7, #27]
 800dea0:	2b2e      	cmp	r3, #46	@ 0x2e
 800dea2:	d003      	beq.n	800deac <create_name+0x7c>
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d30c      	bcc.n	800dec6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	2b0b      	cmp	r3, #11
 800deb0:	d002      	beq.n	800deb8 <create_name+0x88>
 800deb2:	7efb      	ldrb	r3, [r7, #27]
 800deb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800deb6:	d001      	beq.n	800debc <create_name+0x8c>
 800deb8:	2306      	movs	r3, #6
 800deba:	e044      	b.n	800df46 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800debc:	2308      	movs	r3, #8
 800debe:	613b      	str	r3, [r7, #16]
 800dec0:	230b      	movs	r3, #11
 800dec2:	617b      	str	r3, [r7, #20]
			continue;
 800dec4:	e022      	b.n	800df0c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dec6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800deca:	2b00      	cmp	r3, #0
 800decc:	da04      	bge.n	800ded8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dece:	7efb      	ldrb	r3, [r7, #27]
 800ded0:	3b80      	subs	r3, #128	@ 0x80
 800ded2:	4a1f      	ldr	r2, [pc, #124]	@ (800df50 <create_name+0x120>)
 800ded4:	5cd3      	ldrb	r3, [r2, r3]
 800ded6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ded8:	7efb      	ldrb	r3, [r7, #27]
 800deda:	4619      	mov	r1, r3
 800dedc:	481d      	ldr	r0, [pc, #116]	@ (800df54 <create_name+0x124>)
 800dede:	f7ff f812 	bl	800cf06 <chk_chr>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <create_name+0xbc>
 800dee8:	2306      	movs	r3, #6
 800deea:	e02c      	b.n	800df46 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800deec:	7efb      	ldrb	r3, [r7, #27]
 800deee:	2b60      	cmp	r3, #96	@ 0x60
 800def0:	d905      	bls.n	800defe <create_name+0xce>
 800def2:	7efb      	ldrb	r3, [r7, #27]
 800def4:	2b7a      	cmp	r3, #122	@ 0x7a
 800def6:	d802      	bhi.n	800defe <create_name+0xce>
 800def8:	7efb      	ldrb	r3, [r7, #27]
 800defa:	3b20      	subs	r3, #32
 800defc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	1c5a      	adds	r2, r3, #1
 800df02:	613a      	str	r2, [r7, #16]
 800df04:	68ba      	ldr	r2, [r7, #8]
 800df06:	4413      	add	r3, r2
 800df08:	7efa      	ldrb	r2, [r7, #27]
 800df0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800df0c:	e7a6      	b.n	800de5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800df0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	441a      	add	r2, r3
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d101      	bne.n	800df24 <create_name+0xf4>
 800df20:	2306      	movs	r3, #6
 800df22:	e010      	b.n	800df46 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2be5      	cmp	r3, #229	@ 0xe5
 800df2a:	d102      	bne.n	800df32 <create_name+0x102>
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2205      	movs	r2, #5
 800df30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df32:	7efb      	ldrb	r3, [r7, #27]
 800df34:	2b20      	cmp	r3, #32
 800df36:	d801      	bhi.n	800df3c <create_name+0x10c>
 800df38:	2204      	movs	r2, #4
 800df3a:	e000      	b.n	800df3e <create_name+0x10e>
 800df3c:	2200      	movs	r2, #0
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	330b      	adds	r3, #11
 800df42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800df44:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800df46:	4618      	mov	r0, r3
 800df48:	3720      	adds	r7, #32
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	08018158 	.word	0x08018158
 800df54:	08010628 	.word	0x08010628

0800df58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df6c:	e002      	b.n	800df74 <follow_path+0x1c>
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	3301      	adds	r3, #1
 800df72:	603b      	str	r3, [r7, #0]
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	2b2f      	cmp	r3, #47	@ 0x2f
 800df7a:	d0f8      	beq.n	800df6e <follow_path+0x16>
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	2b5c      	cmp	r3, #92	@ 0x5c
 800df82:	d0f4      	beq.n	800df6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	2200      	movs	r2, #0
 800df88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	2b1f      	cmp	r3, #31
 800df90:	d80a      	bhi.n	800dfa8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2280      	movs	r2, #128	@ 0x80
 800df96:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800df9a:	2100      	movs	r1, #0
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff fcfa 	bl	800d996 <dir_sdi>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	75fb      	strb	r3, [r7, #23]
 800dfa6:	e043      	b.n	800e030 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dfa8:	463b      	mov	r3, r7
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff ff3f 	bl	800de30 <create_name>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfb6:	7dfb      	ldrb	r3, [r7, #23]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d134      	bne.n	800e026 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7ff feb0 	bl	800dd22 <dir_find>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dfcc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dfce:	7dfb      	ldrb	r3, [r7, #23]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00a      	beq.n	800dfea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dfd4:	7dfb      	ldrb	r3, [r7, #23]
 800dfd6:	2b04      	cmp	r3, #4
 800dfd8:	d127      	bne.n	800e02a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dfda:	7afb      	ldrb	r3, [r7, #11]
 800dfdc:	f003 0304 	and.w	r3, r3, #4
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d122      	bne.n	800e02a <follow_path+0xd2>
 800dfe4:	2305      	movs	r3, #5
 800dfe6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dfe8:	e01f      	b.n	800e02a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dfea:	7afb      	ldrb	r3, [r7, #11]
 800dfec:	f003 0304 	and.w	r3, r3, #4
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d11c      	bne.n	800e02e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	799b      	ldrb	r3, [r3, #6]
 800dff8:	f003 0310 	and.w	r3, r3, #16
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d102      	bne.n	800e006 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e000:	2305      	movs	r3, #5
 800e002:	75fb      	strb	r3, [r7, #23]
 800e004:	e014      	b.n	800e030 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e014:	4413      	add	r3, r2
 800e016:	4619      	mov	r1, r3
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f7ff fe43 	bl	800dca4 <ld_clust>
 800e01e:	4602      	mov	r2, r0
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e024:	e7c0      	b.n	800dfa8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e026:	bf00      	nop
 800e028:	e002      	b.n	800e030 <follow_path+0xd8>
				break;
 800e02a:	bf00      	nop
 800e02c:	e000      	b.n	800e030 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e02e:	bf00      	nop
			}
		}
	}

	return res;
 800e030:	7dfb      	ldrb	r3, [r7, #23]
}
 800e032:	4618      	mov	r0, r3
 800e034:	3718      	adds	r7, #24
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e03a:	b480      	push	{r7}
 800e03c:	b087      	sub	sp, #28
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e042:	f04f 33ff 	mov.w	r3, #4294967295
 800e046:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d031      	beq.n	800e0b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	617b      	str	r3, [r7, #20]
 800e056:	e002      	b.n	800e05e <get_ldnumber+0x24>
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	3301      	adds	r3, #1
 800e05c:	617b      	str	r3, [r7, #20]
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	2b20      	cmp	r3, #32
 800e064:	d903      	bls.n	800e06e <get_ldnumber+0x34>
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	2b3a      	cmp	r3, #58	@ 0x3a
 800e06c:	d1f4      	bne.n	800e058 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b3a      	cmp	r3, #58	@ 0x3a
 800e074:	d11c      	bne.n	800e0b0 <get_ldnumber+0x76>
			tp = *path;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	1c5a      	adds	r2, r3, #1
 800e080:	60fa      	str	r2, [r7, #12]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	3b30      	subs	r3, #48	@ 0x30
 800e086:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	2b09      	cmp	r3, #9
 800e08c:	d80e      	bhi.n	800e0ac <get_ldnumber+0x72>
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	429a      	cmp	r2, r3
 800e094:	d10a      	bne.n	800e0ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d107      	bne.n	800e0ac <get_ldnumber+0x72>
					vol = (int)i;
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	617b      	str	r3, [r7, #20]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	697a      	ldr	r2, [r7, #20]
 800e0aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	e002      	b.n	800e0b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e0b4:	693b      	ldr	r3, [r7, #16]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	371c      	adds	r7, #28
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
	...

0800e0c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	70da      	strb	r2, [r3, #3]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0da:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e0dc:	6839      	ldr	r1, [r7, #0]
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f7ff f8dc 	bl	800d29c <move_window>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <check_fs+0x2a>
 800e0ea:	2304      	movs	r3, #4
 800e0ec:	e038      	b.n	800e160 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3330      	adds	r3, #48	@ 0x30
 800e0f2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fe fe20 	bl	800cd3c <ld_word>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	461a      	mov	r2, r3
 800e100:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e104:	429a      	cmp	r2, r3
 800e106:	d001      	beq.n	800e10c <check_fs+0x48>
 800e108:	2303      	movs	r3, #3
 800e10a:	e029      	b.n	800e160 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e112:	2be9      	cmp	r3, #233	@ 0xe9
 800e114:	d009      	beq.n	800e12a <check_fs+0x66>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e11c:	2beb      	cmp	r3, #235	@ 0xeb
 800e11e:	d11e      	bne.n	800e15e <check_fs+0x9a>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e126:	2b90      	cmp	r3, #144	@ 0x90
 800e128:	d119      	bne.n	800e15e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3330      	adds	r3, #48	@ 0x30
 800e12e:	3336      	adds	r3, #54	@ 0x36
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe fe1b 	bl	800cd6c <ld_dword>
 800e136:	4603      	mov	r3, r0
 800e138:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e13c:	4a0a      	ldr	r2, [pc, #40]	@ (800e168 <check_fs+0xa4>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d101      	bne.n	800e146 <check_fs+0x82>
 800e142:	2300      	movs	r3, #0
 800e144:	e00c      	b.n	800e160 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	3330      	adds	r3, #48	@ 0x30
 800e14a:	3352      	adds	r3, #82	@ 0x52
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe fe0d 	bl	800cd6c <ld_dword>
 800e152:	4603      	mov	r3, r0
 800e154:	4a05      	ldr	r2, [pc, #20]	@ (800e16c <check_fs+0xa8>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d101      	bne.n	800e15e <check_fs+0x9a>
 800e15a:	2300      	movs	r3, #0
 800e15c:	e000      	b.n	800e160 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e15e:	2302      	movs	r3, #2
}
 800e160:	4618      	mov	r0, r3
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	00544146 	.word	0x00544146
 800e16c:	33544146 	.word	0x33544146

0800e170 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b096      	sub	sp, #88	@ 0x58
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	4613      	mov	r3, r2
 800e17c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	2200      	movs	r2, #0
 800e182:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff ff58 	bl	800e03a <get_ldnumber>
 800e18a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e18e:	2b00      	cmp	r3, #0
 800e190:	da01      	bge.n	800e196 <find_volume+0x26>
 800e192:	230b      	movs	r3, #11
 800e194:	e22d      	b.n	800e5f2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e196:	4aa1      	ldr	r2, [pc, #644]	@ (800e41c <find_volume+0x2ac>)
 800e198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e19e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <find_volume+0x3a>
 800e1a6:	230c      	movs	r3, #12
 800e1a8:	e223      	b.n	800e5f2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e1b0:	79fb      	ldrb	r3, [r7, #7]
 800e1b2:	f023 0301 	bic.w	r3, r3, #1
 800e1b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d01a      	beq.n	800e1f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c2:	785b      	ldrb	r3, [r3, #1]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe fd19 	bl	800cbfc <disk_status>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e1d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10c      	bne.n	800e1f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e1dc:	79fb      	ldrb	r3, [r7, #7]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d007      	beq.n	800e1f2 <find_volume+0x82>
 800e1e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1e6:	f003 0304 	and.w	r3, r3, #4
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d001      	beq.n	800e1f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e1ee:	230a      	movs	r3, #10
 800e1f0:	e1ff      	b.n	800e5f2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	e1fd      	b.n	800e5f2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e1fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e202:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e206:	785b      	ldrb	r3, [r3, #1]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fe fd11 	bl	800cc30 <disk_initialize>
 800e20e:	4603      	mov	r3, r0
 800e210:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e214:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e218:	f003 0301 	and.w	r3, r3, #1
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e220:	2303      	movs	r3, #3
 800e222:	e1e6      	b.n	800e5f2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e224:	79fb      	ldrb	r3, [r7, #7]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d007      	beq.n	800e23a <find_volume+0xca>
 800e22a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e22e:	f003 0304 	and.w	r3, r3, #4
 800e232:	2b00      	cmp	r3, #0
 800e234:	d001      	beq.n	800e23a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e236:	230a      	movs	r3, #10
 800e238:	e1db      	b.n	800e5f2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e23e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e240:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e242:	f7ff ff3f 	bl	800e0c4 <check_fs>
 800e246:	4603      	mov	r3, r0
 800e248:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e24c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e250:	2b02      	cmp	r3, #2
 800e252:	d149      	bne.n	800e2e8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e254:	2300      	movs	r3, #0
 800e256:	643b      	str	r3, [r7, #64]	@ 0x40
 800e258:	e01e      	b.n	800e298 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e262:	011b      	lsls	r3, r3, #4
 800e264:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e268:	4413      	add	r3, r2
 800e26a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26e:	3304      	adds	r3, #4
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d006      	beq.n	800e284 <find_volume+0x114>
 800e276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e278:	3308      	adds	r3, #8
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe fd76 	bl	800cd6c <ld_dword>
 800e280:	4602      	mov	r2, r0
 800e282:	e000      	b.n	800e286 <find_volume+0x116>
 800e284:	2200      	movs	r2, #0
 800e286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	3358      	adds	r3, #88	@ 0x58
 800e28c:	443b      	add	r3, r7
 800e28e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e294:	3301      	adds	r3, #1
 800e296:	643b      	str	r3, [r7, #64]	@ 0x40
 800e298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e29a:	2b03      	cmp	r3, #3
 800e29c:	d9dd      	bls.n	800e25a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e29e:	2300      	movs	r3, #0
 800e2a0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e2a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <find_volume+0x13e>
 800e2a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	3358      	adds	r3, #88	@ 0x58
 800e2b4:	443b      	add	r3, r7
 800e2b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e2ba:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e2bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d005      	beq.n	800e2ce <find_volume+0x15e>
 800e2c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e2c6:	f7ff fefd 	bl	800e0c4 <check_fs>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	e000      	b.n	800e2d0 <find_volume+0x160>
 800e2ce:	2303      	movs	r3, #3
 800e2d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d905      	bls.n	800e2e8 <find_volume+0x178>
 800e2dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2de:	3301      	adds	r3, #1
 800e2e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2e4:	2b03      	cmp	r3, #3
 800e2e6:	d9e2      	bls.n	800e2ae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e2e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2ec:	2b04      	cmp	r3, #4
 800e2ee:	d101      	bne.n	800e2f4 <find_volume+0x184>
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e17e      	b.n	800e5f2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e2f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d901      	bls.n	800e300 <find_volume+0x190>
 800e2fc:	230d      	movs	r3, #13
 800e2fe:	e178      	b.n	800e5f2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e302:	3330      	adds	r3, #48	@ 0x30
 800e304:	330b      	adds	r3, #11
 800e306:	4618      	mov	r0, r3
 800e308:	f7fe fd18 	bl	800cd3c <ld_word>
 800e30c:	4603      	mov	r3, r0
 800e30e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e312:	d001      	beq.n	800e318 <find_volume+0x1a8>
 800e314:	230d      	movs	r3, #13
 800e316:	e16c      	b.n	800e5f2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31a:	3330      	adds	r3, #48	@ 0x30
 800e31c:	3316      	adds	r3, #22
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fe fd0c 	bl	800cd3c <ld_word>
 800e324:	4603      	mov	r3, r0
 800e326:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d106      	bne.n	800e33c <find_volume+0x1cc>
 800e32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e330:	3330      	adds	r3, #48	@ 0x30
 800e332:	3324      	adds	r3, #36	@ 0x24
 800e334:	4618      	mov	r0, r3
 800e336:	f7fe fd19 	bl	800cd6c <ld_dword>
 800e33a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e340:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e344:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34e:	789b      	ldrb	r3, [r3, #2]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d005      	beq.n	800e360 <find_volume+0x1f0>
 800e354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e356:	789b      	ldrb	r3, [r3, #2]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d001      	beq.n	800e360 <find_volume+0x1f0>
 800e35c:	230d      	movs	r3, #13
 800e35e:	e148      	b.n	800e5f2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e362:	789b      	ldrb	r3, [r3, #2]
 800e364:	461a      	mov	r2, r3
 800e366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e368:	fb02 f303 	mul.w	r3, r2, r3
 800e36c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e374:	461a      	mov	r2, r3
 800e376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e378:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37c:	895b      	ldrh	r3, [r3, #10]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d008      	beq.n	800e394 <find_volume+0x224>
 800e382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e384:	895b      	ldrh	r3, [r3, #10]
 800e386:	461a      	mov	r2, r3
 800e388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38a:	895b      	ldrh	r3, [r3, #10]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	4013      	ands	r3, r2
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <find_volume+0x228>
 800e394:	230d      	movs	r3, #13
 800e396:	e12c      	b.n	800e5f2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e39a:	3330      	adds	r3, #48	@ 0x30
 800e39c:	3311      	adds	r3, #17
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fe fccc 	bl	800cd3c <ld_word>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ae:	891b      	ldrh	r3, [r3, #8]
 800e3b0:	f003 030f 	and.w	r3, r3, #15
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d001      	beq.n	800e3be <find_volume+0x24e>
 800e3ba:	230d      	movs	r3, #13
 800e3bc:	e119      	b.n	800e5f2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c0:	3330      	adds	r3, #48	@ 0x30
 800e3c2:	3313      	adds	r3, #19
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fe fcb9 	bl	800cd3c <ld_word>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e3ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d106      	bne.n	800e3e2 <find_volume+0x272>
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d6:	3330      	adds	r3, #48	@ 0x30
 800e3d8:	3320      	adds	r3, #32
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fe fcc6 	bl	800cd6c <ld_dword>
 800e3e0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e4:	3330      	adds	r3, #48	@ 0x30
 800e3e6:	330e      	adds	r3, #14
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe fca7 	bl	800cd3c <ld_word>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e3f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <find_volume+0x28c>
 800e3f8:	230d      	movs	r3, #13
 800e3fa:	e0fa      	b.n	800e5f2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e3fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e3fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e400:	4413      	add	r3, r2
 800e402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e404:	8912      	ldrh	r2, [r2, #8]
 800e406:	0912      	lsrs	r2, r2, #4
 800e408:	b292      	uxth	r2, r2
 800e40a:	4413      	add	r3, r2
 800e40c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e40e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e412:	429a      	cmp	r2, r3
 800e414:	d204      	bcs.n	800e420 <find_volume+0x2b0>
 800e416:	230d      	movs	r3, #13
 800e418:	e0eb      	b.n	800e5f2 <find_volume+0x482>
 800e41a:	bf00      	nop
 800e41c:	2000043c 	.word	0x2000043c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e420:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e424:	1ad3      	subs	r3, r2, r3
 800e426:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e428:	8952      	ldrh	r2, [r2, #10]
 800e42a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e42e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <find_volume+0x2ca>
 800e436:	230d      	movs	r3, #13
 800e438:	e0db      	b.n	800e5f2 <find_volume+0x482>
		fmt = FS_FAT32;
 800e43a:	2303      	movs	r3, #3
 800e43c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e442:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e446:	4293      	cmp	r3, r2
 800e448:	d802      	bhi.n	800e450 <find_volume+0x2e0>
 800e44a:	2302      	movs	r3, #2
 800e44c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e452:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e456:	4293      	cmp	r3, r2
 800e458:	d802      	bhi.n	800e460 <find_volume+0x2f0>
 800e45a:	2301      	movs	r3, #1
 800e45c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e462:	1c9a      	adds	r2, r3, #2
 800e464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e466:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e46c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e46e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e472:	441a      	add	r2, r3
 800e474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e476:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e478:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47c:	441a      	add	r2, r3
 800e47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e480:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e482:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e486:	2b03      	cmp	r3, #3
 800e488:	d11e      	bne.n	800e4c8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48c:	3330      	adds	r3, #48	@ 0x30
 800e48e:	332a      	adds	r3, #42	@ 0x2a
 800e490:	4618      	mov	r0, r3
 800e492:	f7fe fc53 	bl	800cd3c <ld_word>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d001      	beq.n	800e4a0 <find_volume+0x330>
 800e49c:	230d      	movs	r3, #13
 800e49e:	e0a8      	b.n	800e5f2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a2:	891b      	ldrh	r3, [r3, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d001      	beq.n	800e4ac <find_volume+0x33c>
 800e4a8:	230d      	movs	r3, #13
 800e4aa:	e0a2      	b.n	800e5f2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ae:	3330      	adds	r3, #48	@ 0x30
 800e4b0:	332c      	adds	r3, #44	@ 0x2c
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fe fc5a 	bl	800cd6c <ld_dword>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4bc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4c6:	e01f      	b.n	800e508 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ca:	891b      	ldrh	r3, [r3, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d101      	bne.n	800e4d4 <find_volume+0x364>
 800e4d0:	230d      	movs	r3, #13
 800e4d2:	e08e      	b.n	800e5f2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d6:	6a1a      	ldr	r2, [r3, #32]
 800e4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4da:	441a      	add	r2, r3
 800e4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4de:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e4e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d103      	bne.n	800e4f0 <find_volume+0x380>
 800e4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ea:	695b      	ldr	r3, [r3, #20]
 800e4ec:	005b      	lsls	r3, r3, #1
 800e4ee:	e00a      	b.n	800e506 <find_volume+0x396>
 800e4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f2:	695a      	ldr	r2, [r3, #20]
 800e4f4:	4613      	mov	r3, r2
 800e4f6:	005b      	lsls	r3, r3, #1
 800e4f8:	4413      	add	r3, r2
 800e4fa:	085a      	lsrs	r2, r3, #1
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fe:	695b      	ldr	r3, [r3, #20]
 800e500:	f003 0301 	and.w	r3, r3, #1
 800e504:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e506:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e50a:	699a      	ldr	r2, [r3, #24]
 800e50c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e50e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e512:	0a5b      	lsrs	r3, r3, #9
 800e514:	429a      	cmp	r2, r3
 800e516:	d201      	bcs.n	800e51c <find_volume+0x3ac>
 800e518:	230d      	movs	r3, #13
 800e51a:	e06a      	b.n	800e5f2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51e:	f04f 32ff 	mov.w	r2, #4294967295
 800e522:	611a      	str	r2, [r3, #16]
 800e524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e526:	691a      	ldr	r2, [r3, #16]
 800e528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e52a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e52e:	2280      	movs	r2, #128	@ 0x80
 800e530:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e532:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e536:	2b03      	cmp	r3, #3
 800e538:	d149      	bne.n	800e5ce <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e53c:	3330      	adds	r3, #48	@ 0x30
 800e53e:	3330      	adds	r3, #48	@ 0x30
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fbfb 	bl	800cd3c <ld_word>
 800e546:	4603      	mov	r3, r0
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d140      	bne.n	800e5ce <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e54c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e54e:	3301      	adds	r3, #1
 800e550:	4619      	mov	r1, r3
 800e552:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e554:	f7fe fea2 	bl	800d29c <move_window>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d137      	bne.n	800e5ce <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e560:	2200      	movs	r2, #0
 800e562:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e566:	3330      	adds	r3, #48	@ 0x30
 800e568:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fe fbe5 	bl	800cd3c <ld_word>
 800e572:	4603      	mov	r3, r0
 800e574:	461a      	mov	r2, r3
 800e576:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d127      	bne.n	800e5ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e580:	3330      	adds	r3, #48	@ 0x30
 800e582:	4618      	mov	r0, r3
 800e584:	f7fe fbf2 	bl	800cd6c <ld_dword>
 800e588:	4603      	mov	r3, r0
 800e58a:	4a1c      	ldr	r2, [pc, #112]	@ (800e5fc <find_volume+0x48c>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d11e      	bne.n	800e5ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e592:	3330      	adds	r3, #48	@ 0x30
 800e594:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe fbe7 	bl	800cd6c <ld_dword>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	4a17      	ldr	r2, [pc, #92]	@ (800e600 <find_volume+0x490>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d113      	bne.n	800e5ce <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a8:	3330      	adds	r3, #48	@ 0x30
 800e5aa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe fbdc 	bl	800cd6c <ld_dword>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5bc:	3330      	adds	r3, #48	@ 0x30
 800e5be:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fe fbd2 	bl	800cd6c <ld_dword>
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5cc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e5d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e5d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e604 <find_volume+0x494>)
 800e5d8:	881b      	ldrh	r3, [r3, #0]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	b29a      	uxth	r2, r3
 800e5de:	4b09      	ldr	r3, [pc, #36]	@ (800e604 <find_volume+0x494>)
 800e5e0:	801a      	strh	r2, [r3, #0]
 800e5e2:	4b08      	ldr	r3, [pc, #32]	@ (800e604 <find_volume+0x494>)
 800e5e4:	881a      	ldrh	r2, [r3, #0]
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e5ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5ec:	f7fe fdee 	bl	800d1cc <clear_lock>
#endif
	return FR_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3758      	adds	r7, #88	@ 0x58
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	41615252 	.word	0x41615252
 800e600:	61417272 	.word	0x61417272
 800e604:	20000440 	.word	0x20000440

0800e608 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e612:	2309      	movs	r3, #9
 800e614:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d01c      	beq.n	800e656 <validate+0x4e>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d018      	beq.n	800e656 <validate+0x4e>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d013      	beq.n	800e656 <validate+0x4e>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	889a      	ldrh	r2, [r3, #4]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	88db      	ldrh	r3, [r3, #6]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d10c      	bne.n	800e656 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	785b      	ldrb	r3, [r3, #1]
 800e642:	4618      	mov	r0, r3
 800e644:	f7fe fada 	bl	800cbfc <disk_status>
 800e648:	4603      	mov	r3, r0
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d101      	bne.n	800e656 <validate+0x4e>
			res = FR_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e656:	7bfb      	ldrb	r3, [r7, #15]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d102      	bne.n	800e662 <validate+0x5a>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	e000      	b.n	800e664 <validate+0x5c>
 800e662:	2300      	movs	r3, #0
 800e664:	683a      	ldr	r2, [r7, #0]
 800e666:	6013      	str	r3, [r2, #0]
	return res;
 800e668:	7bfb      	ldrb	r3, [r7, #15]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
	...

0800e674 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b088      	sub	sp, #32
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	4613      	mov	r3, r2
 800e680:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e686:	f107 0310 	add.w	r3, r7, #16
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7ff fcd5 	bl	800e03a <get_ldnumber>
 800e690:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	2b00      	cmp	r3, #0
 800e696:	da01      	bge.n	800e69c <f_mount+0x28>
 800e698:	230b      	movs	r3, #11
 800e69a:	e02b      	b.n	800e6f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e69c:	4a17      	ldr	r2, [pc, #92]	@ (800e6fc <f_mount+0x88>)
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d005      	beq.n	800e6b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e6ac:	69b8      	ldr	r0, [r7, #24]
 800e6ae:	f7fe fd8d 	bl	800d1cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d002      	beq.n	800e6c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e6c4:	68fa      	ldr	r2, [r7, #12]
 800e6c6:	490d      	ldr	r1, [pc, #52]	@ (800e6fc <f_mount+0x88>)
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d002      	beq.n	800e6da <f_mount+0x66>
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d001      	beq.n	800e6de <f_mount+0x6a>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e00a      	b.n	800e6f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e6de:	f107 010c 	add.w	r1, r7, #12
 800e6e2:	f107 0308 	add.w	r3, r7, #8
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff fd41 	bl	800e170 <find_volume>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3720      	adds	r7, #32
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	2000043c 	.word	0x2000043c

0800e700 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b098      	sub	sp, #96	@ 0x60
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	4613      	mov	r3, r2
 800e70c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <f_open+0x18>
 800e714:	2309      	movs	r3, #9
 800e716:	e1a9      	b.n	800ea6c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e718:	79fb      	ldrb	r3, [r7, #7]
 800e71a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e71e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e720:	79fa      	ldrb	r2, [r7, #7]
 800e722:	f107 0110 	add.w	r1, r7, #16
 800e726:	f107 0308 	add.w	r3, r7, #8
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff fd20 	bl	800e170 <find_volume>
 800e730:	4603      	mov	r3, r0
 800e732:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e736:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	f040 818d 	bne.w	800ea5a <f_open+0x35a>
		dj.obj.fs = fs;
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	f107 0314 	add.w	r3, r7, #20
 800e74a:	4611      	mov	r1, r2
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7ff fc03 	bl	800df58 <follow_path>
 800e752:	4603      	mov	r3, r0
 800e754:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e758:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d118      	bne.n	800e792 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e760:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e764:	b25b      	sxtb	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	da03      	bge.n	800e772 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e76a:	2306      	movs	r3, #6
 800e76c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e770:	e00f      	b.n	800e792 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e772:	79fb      	ldrb	r3, [r7, #7]
 800e774:	2b01      	cmp	r3, #1
 800e776:	bf8c      	ite	hi
 800e778:	2301      	movhi	r3, #1
 800e77a:	2300      	movls	r3, #0
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	461a      	mov	r2, r3
 800e780:	f107 0314 	add.w	r3, r7, #20
 800e784:	4611      	mov	r1, r2
 800e786:	4618      	mov	r0, r3
 800e788:	f7fe fbd8 	bl	800cf3c <chk_lock>
 800e78c:	4603      	mov	r3, r0
 800e78e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e792:	79fb      	ldrb	r3, [r7, #7]
 800e794:	f003 031c 	and.w	r3, r3, #28
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d07f      	beq.n	800e89c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e79c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d017      	beq.n	800e7d4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e7a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7a8:	2b04      	cmp	r3, #4
 800e7aa:	d10e      	bne.n	800e7ca <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e7ac:	f7fe fc22 	bl	800cff4 <enq_lock>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d006      	beq.n	800e7c4 <f_open+0xc4>
 800e7b6:	f107 0314 	add.w	r3, r7, #20
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7ff fb06 	bl	800ddcc <dir_register>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	e000      	b.n	800e7c6 <f_open+0xc6>
 800e7c4:	2312      	movs	r3, #18
 800e7c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	f043 0308 	orr.w	r3, r3, #8
 800e7d0:	71fb      	strb	r3, [r7, #7]
 800e7d2:	e010      	b.n	800e7f6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e7d4:	7ebb      	ldrb	r3, [r7, #26]
 800e7d6:	f003 0311 	and.w	r3, r3, #17
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <f_open+0xe6>
					res = FR_DENIED;
 800e7de:	2307      	movs	r3, #7
 800e7e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e7e4:	e007      	b.n	800e7f6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	f003 0304 	and.w	r3, r3, #4
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <f_open+0xf6>
 800e7f0:	2308      	movs	r3, #8
 800e7f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e7f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d168      	bne.n	800e8d0 <f_open+0x1d0>
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	f003 0308 	and.w	r3, r3, #8
 800e804:	2b00      	cmp	r3, #0
 800e806:	d063      	beq.n	800e8d0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e808:	f7fc f9c8 	bl	800ab9c <get_fattime>
 800e80c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e810:	330e      	adds	r3, #14
 800e812:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e814:	4618      	mov	r0, r3
 800e816:	f7fe fae7 	bl	800cde8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e81c:	3316      	adds	r3, #22
 800e81e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e820:	4618      	mov	r0, r3
 800e822:	f7fe fae1 	bl	800cde8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e828:	330b      	adds	r3, #11
 800e82a:	2220      	movs	r2, #32
 800e82c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e832:	4611      	mov	r1, r2
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fa35 	bl	800dca4 <ld_clust>
 800e83a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e840:	2200      	movs	r2, #0
 800e842:	4618      	mov	r0, r3
 800e844:	f7ff fa4d 	bl	800dce2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e84a:	331c      	adds	r3, #28
 800e84c:	2100      	movs	r1, #0
 800e84e:	4618      	mov	r0, r3
 800e850:	f7fe faca 	bl	800cde8 <st_dword>
					fs->wflag = 1;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	2201      	movs	r2, #1
 800e858:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d037      	beq.n	800e8d0 <f_open+0x1d0>
						dw = fs->winsect;
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e864:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e866:	f107 0314 	add.w	r3, r7, #20
 800e86a:	2200      	movs	r2, #0
 800e86c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fe ff60 	bl	800d734 <remove_chain>
 800e874:	4603      	mov	r3, r0
 800e876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e87a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d126      	bne.n	800e8d0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e886:	4618      	mov	r0, r3
 800e888:	f7fe fd08 	bl	800d29c <move_window>
 800e88c:	4603      	mov	r3, r0
 800e88e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e896:	3a01      	subs	r2, #1
 800e898:	60da      	str	r2, [r3, #12]
 800e89a:	e019      	b.n	800e8d0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e89c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d115      	bne.n	800e8d0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e8a4:	7ebb      	ldrb	r3, [r7, #26]
 800e8a6:	f003 0310 	and.w	r3, r3, #16
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d003      	beq.n	800e8b6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e8ae:	2304      	movs	r3, #4
 800e8b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e8b4:	e00c      	b.n	800e8d0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e8b6:	79fb      	ldrb	r3, [r7, #7]
 800e8b8:	f003 0302 	and.w	r3, r3, #2
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d007      	beq.n	800e8d0 <f_open+0x1d0>
 800e8c0:	7ebb      	ldrb	r3, [r7, #26]
 800e8c2:	f003 0301 	and.w	r3, r3, #1
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d002      	beq.n	800e8d0 <f_open+0x1d0>
						res = FR_DENIED;
 800e8ca:	2307      	movs	r3, #7
 800e8cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d126      	bne.n	800e926 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e8d8:	79fb      	ldrb	r3, [r7, #7]
 800e8da:	f003 0308 	and.w	r3, r3, #8
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d003      	beq.n	800e8ea <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e8e2:	79fb      	ldrb	r3, [r7, #7]
 800e8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e8f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	bf8c      	ite	hi
 800e8fe:	2301      	movhi	r3, #1
 800e900:	2300      	movls	r3, #0
 800e902:	b2db      	uxtb	r3, r3
 800e904:	461a      	mov	r2, r3
 800e906:	f107 0314 	add.w	r3, r7, #20
 800e90a:	4611      	mov	r1, r2
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fb93 	bl	800d038 <inc_lock>
 800e912:	4602      	mov	r2, r0
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	691b      	ldr	r3, [r3, #16]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d102      	bne.n	800e926 <f_open+0x226>
 800e920:	2302      	movs	r3, #2
 800e922:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e926:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f040 8095 	bne.w	800ea5a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e934:	4611      	mov	r1, r2
 800e936:	4618      	mov	r0, r3
 800e938:	f7ff f9b4 	bl	800dca4 <ld_clust>
 800e93c:	4602      	mov	r2, r0
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e944:	331c      	adds	r3, #28
 800e946:	4618      	mov	r0, r3
 800e948:	f7fe fa10 	bl	800cd6c <ld_dword>
 800e94c:	4602      	mov	r2, r0
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e958:	693a      	ldr	r2, [r7, #16]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	88da      	ldrh	r2, [r3, #6]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	79fa      	ldrb	r2, [r7, #7]
 800e96a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2200      	movs	r2, #0
 800e970:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2200      	movs	r2, #0
 800e97c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	3330      	adds	r3, #48	@ 0x30
 800e982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e986:	2100      	movs	r1, #0
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fe fa7a 	bl	800ce82 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e98e:	79fb      	ldrb	r3, [r7, #7]
 800e990:	f003 0320 	and.w	r3, r3, #32
 800e994:	2b00      	cmp	r3, #0
 800e996:	d060      	beq.n	800ea5a <f_open+0x35a>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d05c      	beq.n	800ea5a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	68da      	ldr	r2, [r3, #12]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	895b      	ldrh	r3, [r3, #10]
 800e9ac:	025b      	lsls	r3, r3, #9
 800e9ae:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9bc:	e016      	b.n	800e9ec <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fe fd25 	bl	800d412 <get_fat>
 800e9c8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e9ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d802      	bhi.n	800e9d6 <f_open+0x2d6>
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e9d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9dc:	d102      	bne.n	800e9e4 <f_open+0x2e4>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e9e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d103      	bne.n	800e9fc <f_open+0x2fc>
 800e9f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d8e0      	bhi.n	800e9be <f_open+0x2be>
				}
				fp->clust = clst;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d127      	bne.n	800ea5a <f_open+0x35a>
 800ea0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d022      	beq.n	800ea5a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7fe fcdb 	bl	800d3d4 <clust2sect>
 800ea1e:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d103      	bne.n	800ea2e <f_open+0x32e>
						res = FR_INT_ERR;
 800ea26:	2302      	movs	r3, #2
 800ea28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ea2c:	e015      	b.n	800ea5a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ea2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea30:	0a5a      	lsrs	r2, r3, #9
 800ea32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea34:	441a      	add	r2, r3
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	7858      	ldrb	r0, [r3, #1]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6a1a      	ldr	r2, [r3, #32]
 800ea48:	2301      	movs	r3, #1
 800ea4a:	f7fe f919 	bl	800cc80 <disk_read>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d002      	beq.n	800ea5a <f_open+0x35a>
 800ea54:	2301      	movs	r3, #1
 800ea56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ea5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <f_open+0x368>
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3760      	adds	r7, #96	@ 0x60
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08e      	sub	sp, #56	@ 0x38
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
 800ea80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f107 0214 	add.w	r2, r7, #20
 800ea92:	4611      	mov	r1, r2
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7ff fdb7 	bl	800e608 <validate>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eaa0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d107      	bne.n	800eab8 <f_read+0x44>
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	7d5b      	ldrb	r3, [r3, #21]
 800eaac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800eab0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <f_read+0x4a>
 800eab8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eabc:	e115      	b.n	800ecea <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	7d1b      	ldrb	r3, [r3, #20]
 800eac2:	f003 0301 	and.w	r3, r3, #1
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d101      	bne.n	800eace <f_read+0x5a>
 800eaca:	2307      	movs	r3, #7
 800eacc:	e10d      	b.n	800ecea <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	68da      	ldr	r2, [r3, #12]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	6a3b      	ldr	r3, [r7, #32]
 800eade:	429a      	cmp	r2, r3
 800eae0:	f240 80fe 	bls.w	800ece0 <f_read+0x26c>
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eae8:	e0fa      	b.n	800ece0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	699b      	ldr	r3, [r3, #24]
 800eaee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f040 80c6 	bne.w	800ec84 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	699b      	ldr	r3, [r3, #24]
 800eafc:	0a5b      	lsrs	r3, r3, #9
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	8952      	ldrh	r2, [r2, #10]
 800eb02:	3a01      	subs	r2, #1
 800eb04:	4013      	ands	r3, r2
 800eb06:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d12f      	bne.n	800eb6e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	699b      	ldr	r3, [r3, #24]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d103      	bne.n	800eb1e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb1c:	e013      	b.n	800eb46 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d007      	beq.n	800eb36 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f7fe fefe 	bl	800d92e <clmt_clust>
 800eb32:	6338      	str	r0, [r7, #48]	@ 0x30
 800eb34:	e007      	b.n	800eb46 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	69db      	ldr	r3, [r3, #28]
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	4610      	mov	r0, r2
 800eb40:	f7fe fc67 	bl	800d412 <get_fat>
 800eb44:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d804      	bhi.n	800eb56 <f_read+0xe2>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2202      	movs	r2, #2
 800eb50:	755a      	strb	r2, [r3, #21]
 800eb52:	2302      	movs	r3, #2
 800eb54:	e0c9      	b.n	800ecea <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5c:	d104      	bne.n	800eb68 <f_read+0xf4>
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2201      	movs	r2, #1
 800eb62:	755a      	strb	r2, [r3, #21]
 800eb64:	2301      	movs	r3, #1
 800eb66:	e0c0      	b.n	800ecea <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	69db      	ldr	r3, [r3, #28]
 800eb74:	4619      	mov	r1, r3
 800eb76:	4610      	mov	r0, r2
 800eb78:	f7fe fc2c 	bl	800d3d4 <clust2sect>
 800eb7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eb7e:	69bb      	ldr	r3, [r7, #24]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d104      	bne.n	800eb8e <f_read+0x11a>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2202      	movs	r2, #2
 800eb88:	755a      	strb	r2, [r3, #21]
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	e0ad      	b.n	800ecea <f_read+0x276>
			sect += csect;
 800eb8e:	69ba      	ldr	r2, [r7, #24]
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	4413      	add	r3, r2
 800eb94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	0a5b      	lsrs	r3, r3, #9
 800eb9a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d039      	beq.n	800ec16 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eba2:	69fa      	ldr	r2, [r7, #28]
 800eba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba6:	4413      	add	r3, r2
 800eba8:	697a      	ldr	r2, [r7, #20]
 800ebaa:	8952      	ldrh	r2, [r2, #10]
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d905      	bls.n	800ebbc <f_read+0x148>
					cc = fs->csize - csect;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	895b      	ldrh	r3, [r3, #10]
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	7858      	ldrb	r0, [r3, #1]
 800ebc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc2:	69ba      	ldr	r2, [r7, #24]
 800ebc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ebc6:	f7fe f85b 	bl	800cc80 <disk_read>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d004      	beq.n	800ebda <f_read+0x166>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	755a      	strb	r2, [r3, #21]
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e087      	b.n	800ecea <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	7d1b      	ldrb	r3, [r3, #20]
 800ebde:	b25b      	sxtb	r3, r3
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da14      	bge.n	800ec0e <f_read+0x19a>
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6a1a      	ldr	r2, [r3, #32]
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d90d      	bls.n	800ec0e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6a1a      	ldr	r2, [r3, #32]
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	025b      	lsls	r3, r3, #9
 800ebfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebfe:	18d0      	adds	r0, r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	3330      	adds	r3, #48	@ 0x30
 800ec04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec08:	4619      	mov	r1, r3
 800ec0a:	f7fe f919 	bl	800ce40 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ec0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec10:	025b      	lsls	r3, r3, #9
 800ec12:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ec14:	e050      	b.n	800ecb8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	69ba      	ldr	r2, [r7, #24]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d02e      	beq.n	800ec7e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	7d1b      	ldrb	r3, [r3, #20]
 800ec24:	b25b      	sxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	da18      	bge.n	800ec5c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	7858      	ldrb	r0, [r3, #1]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6a1a      	ldr	r2, [r3, #32]
 800ec38:	2301      	movs	r3, #1
 800ec3a:	f7fe f841 	bl	800ccc0 <disk_write>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d004      	beq.n	800ec4e <f_read+0x1da>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2201      	movs	r2, #1
 800ec48:	755a      	strb	r2, [r3, #21]
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e04d      	b.n	800ecea <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	7d1b      	ldrb	r3, [r3, #20]
 800ec52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec56:	b2da      	uxtb	r2, r3
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	7858      	ldrb	r0, [r3, #1]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec66:	2301      	movs	r3, #1
 800ec68:	69ba      	ldr	r2, [r7, #24]
 800ec6a:	f7fe f809 	bl	800cc80 <disk_read>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <f_read+0x20a>
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2201      	movs	r2, #1
 800ec78:	755a      	strb	r2, [r3, #21]
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e035      	b.n	800ecea <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	69ba      	ldr	r2, [r7, #24]
 800ec82:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	699b      	ldr	r3, [r3, #24]
 800ec88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec8c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ec90:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ec92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d901      	bls.n	800ec9e <f_read+0x22a>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	699b      	ldr	r3, [r3, #24]
 800eca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecac:	4413      	add	r3, r2
 800ecae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecb4:	f7fe f8c4 	bl	800ce40 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ecb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecbc:	4413      	add	r3, r2
 800ecbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	699a      	ldr	r2, [r3, #24]
 800ecc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc6:	441a      	add	r2, r3
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	619a      	str	r2, [r3, #24]
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd2:	441a      	add	r2, r3
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	601a      	str	r2, [r3, #0]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecdc:	1ad3      	subs	r3, r2, r3
 800ecde:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f47f af01 	bne.w	800eaea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3738      	adds	r7, #56	@ 0x38
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b086      	sub	sp, #24
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f107 0208 	add.w	r2, r7, #8
 800ed00:	4611      	mov	r1, r2
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff fc80 	bl	800e608 <validate>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed0c:	7dfb      	ldrb	r3, [r7, #23]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d168      	bne.n	800ede4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	7d1b      	ldrb	r3, [r3, #20]
 800ed16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d062      	beq.n	800ede4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	7d1b      	ldrb	r3, [r3, #20]
 800ed22:	b25b      	sxtb	r3, r3
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	da15      	bge.n	800ed54 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	7858      	ldrb	r0, [r3, #1]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a1a      	ldr	r2, [r3, #32]
 800ed36:	2301      	movs	r3, #1
 800ed38:	f7fd ffc2 	bl	800ccc0 <disk_write>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <f_sync+0x54>
 800ed42:	2301      	movs	r3, #1
 800ed44:	e04f      	b.n	800ede6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	7d1b      	ldrb	r3, [r3, #20]
 800ed4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ed54:	f7fb ff22 	bl	800ab9c <get_fattime>
 800ed58:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed60:	4619      	mov	r1, r3
 800ed62:	4610      	mov	r0, r2
 800ed64:	f7fe fa9a 	bl	800d29c <move_window>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d138      	bne.n	800ede4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	330b      	adds	r3, #11
 800ed7c:	781a      	ldrb	r2, [r3, #0]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	330b      	adds	r3, #11
 800ed82:	f042 0220 	orr.w	r2, r2, #32
 800ed86:	b2d2      	uxtb	r2, r2
 800ed88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	461a      	mov	r2, r3
 800ed94:	68f9      	ldr	r1, [r7, #12]
 800ed96:	f7fe ffa4 	bl	800dce2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f103 021c 	add.w	r2, r3, #28
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	4619      	mov	r1, r3
 800eda6:	4610      	mov	r0, r2
 800eda8:	f7fe f81e 	bl	800cde8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	3316      	adds	r3, #22
 800edb0:	6939      	ldr	r1, [r7, #16]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe f818 	bl	800cde8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	3312      	adds	r3, #18
 800edbc:	2100      	movs	r1, #0
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fd fff7 	bl	800cdb2 <st_word>
					fs->wflag = 1;
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2201      	movs	r2, #1
 800edc8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fe fa93 	bl	800d2f8 <sync_fs>
 800edd2:	4603      	mov	r3, r0
 800edd4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	7d1b      	ldrb	r3, [r3, #20]
 800edda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ede4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3718      	adds	r7, #24
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff ff7b 	bl	800ecf2 <f_sync>
 800edfc:	4603      	mov	r3, r0
 800edfe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ee00:	7bfb      	ldrb	r3, [r7, #15]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d118      	bne.n	800ee38 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f107 0208 	add.w	r2, r7, #8
 800ee0c:	4611      	mov	r1, r2
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7ff fbfa 	bl	800e608 <validate>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ee18:	7bfb      	ldrb	r3, [r7, #15]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10c      	bne.n	800ee38 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	691b      	ldr	r3, [r3, #16]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe f996 	bl	800d154 <dec_lock>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d102      	bne.n	800ee38 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
	...

0800ee44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b087      	sub	sp, #28
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ee52:	2301      	movs	r3, #1
 800ee54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ee56:	2300      	movs	r3, #0
 800ee58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ee5a:	4b1f      	ldr	r3, [pc, #124]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee5c:	7a5b      	ldrb	r3, [r3, #9]
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d131      	bne.n	800eec8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ee64:	4b1c      	ldr	r3, [pc, #112]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee66:	7a5b      	ldrb	r3, [r3, #9]
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	4b1a      	ldr	r3, [pc, #104]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee6e:	2100      	movs	r1, #0
 800ee70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ee72:	4b19      	ldr	r3, [pc, #100]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee74:	7a5b      	ldrb	r3, [r3, #9]
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	4a17      	ldr	r2, [pc, #92]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	4413      	add	r3, r2
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ee82:	4b15      	ldr	r3, [pc, #84]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee84:	7a5b      	ldrb	r3, [r3, #9]
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	461a      	mov	r2, r3
 800ee8a:	4b13      	ldr	r3, [pc, #76]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee8c:	4413      	add	r3, r2
 800ee8e:	79fa      	ldrb	r2, [r7, #7]
 800ee90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ee92:	4b11      	ldr	r3, [pc, #68]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee94:	7a5b      	ldrb	r3, [r3, #9]
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	1c5a      	adds	r2, r3, #1
 800ee9a:	b2d1      	uxtb	r1, r2
 800ee9c:	4a0e      	ldr	r2, [pc, #56]	@ (800eed8 <FATFS_LinkDriverEx+0x94>)
 800ee9e:	7251      	strb	r1, [r2, #9]
 800eea0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eea2:	7dbb      	ldrb	r3, [r7, #22]
 800eea4:	3330      	adds	r3, #48	@ 0x30
 800eea6:	b2da      	uxtb	r2, r3
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	223a      	movs	r2, #58	@ 0x3a
 800eeb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	3302      	adds	r3, #2
 800eeb8:	222f      	movs	r2, #47	@ 0x2f
 800eeba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	3303      	adds	r3, #3
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eec4:	2300      	movs	r3, #0
 800eec6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	371c      	adds	r7, #28
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	20000464 	.word	0x20000464

0800eedc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eee6:	2200      	movs	r2, #0
 800eee8:	6839      	ldr	r1, [r7, #0]
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7ff ffaa 	bl	800ee44 <FATFS_LinkDriverEx>
 800eef0:	4603      	mov	r3, r0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
	...

0800eefc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef00:	2200      	movs	r2, #0
 800ef02:	4912      	ldr	r1, [pc, #72]	@ (800ef4c <MX_USB_DEVICE_Init+0x50>)
 800ef04:	4812      	ldr	r0, [pc, #72]	@ (800ef50 <MX_USB_DEVICE_Init+0x54>)
 800ef06:	f7fc fb77 	bl	800b5f8 <USBD_Init>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ef10:	f7f2 fc6a 	bl	80017e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ef14:	490f      	ldr	r1, [pc, #60]	@ (800ef54 <MX_USB_DEVICE_Init+0x58>)
 800ef16:	480e      	ldr	r0, [pc, #56]	@ (800ef50 <MX_USB_DEVICE_Init+0x54>)
 800ef18:	f7fc fb9e 	bl	800b658 <USBD_RegisterClass>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ef22:	f7f2 fc61 	bl	80017e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ef26:	490c      	ldr	r1, [pc, #48]	@ (800ef58 <MX_USB_DEVICE_Init+0x5c>)
 800ef28:	4809      	ldr	r0, [pc, #36]	@ (800ef50 <MX_USB_DEVICE_Init+0x54>)
 800ef2a:	f7fc fa95 	bl	800b458 <USBD_CDC_RegisterInterface>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef34:	f7f2 fc58 	bl	80017e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef38:	4805      	ldr	r0, [pc, #20]	@ (800ef50 <MX_USB_DEVICE_Init+0x54>)
 800ef3a:	f7fc fbc3 	bl	800b6c4 <USBD_Start>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef44:	f7f2 fc50 	bl	80017e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef48:	bf00      	nop
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	200000ec 	.word	0x200000ec
 800ef50:	20000470 	.word	0x20000470
 800ef54:	20000058 	.word	0x20000058
 800ef58:	200000d8 	.word	0x200000d8

0800ef5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ef60:	2200      	movs	r2, #0
 800ef62:	4905      	ldr	r1, [pc, #20]	@ (800ef78 <CDC_Init_FS+0x1c>)
 800ef64:	4805      	ldr	r0, [pc, #20]	@ (800ef7c <CDC_Init_FS+0x20>)
 800ef66:	f7fc fa91 	bl	800b48c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ef6a:	4905      	ldr	r1, [pc, #20]	@ (800ef80 <CDC_Init_FS+0x24>)
 800ef6c:	4803      	ldr	r0, [pc, #12]	@ (800ef7c <CDC_Init_FS+0x20>)
 800ef6e:	f7fc faaf 	bl	800b4d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ef72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	20000b4c 	.word	0x20000b4c
 800ef7c:	20000470 	.word	0x20000470
 800ef80:	2000074c 	.word	0x2000074c

0800ef84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ef84:	b480      	push	{r7}
 800ef86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ef88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	6039      	str	r1, [r7, #0]
 800ef9e:	71fb      	strb	r3, [r7, #7]
 800efa0:	4613      	mov	r3, r2
 800efa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800efa4:	79fb      	ldrb	r3, [r7, #7]
 800efa6:	2b23      	cmp	r3, #35	@ 0x23
 800efa8:	d84a      	bhi.n	800f040 <CDC_Control_FS+0xac>
 800efaa:	a201      	add	r2, pc, #4	@ (adr r2, 800efb0 <CDC_Control_FS+0x1c>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800f041 	.word	0x0800f041
 800efb4:	0800f041 	.word	0x0800f041
 800efb8:	0800f041 	.word	0x0800f041
 800efbc:	0800f041 	.word	0x0800f041
 800efc0:	0800f041 	.word	0x0800f041
 800efc4:	0800f041 	.word	0x0800f041
 800efc8:	0800f041 	.word	0x0800f041
 800efcc:	0800f041 	.word	0x0800f041
 800efd0:	0800f041 	.word	0x0800f041
 800efd4:	0800f041 	.word	0x0800f041
 800efd8:	0800f041 	.word	0x0800f041
 800efdc:	0800f041 	.word	0x0800f041
 800efe0:	0800f041 	.word	0x0800f041
 800efe4:	0800f041 	.word	0x0800f041
 800efe8:	0800f041 	.word	0x0800f041
 800efec:	0800f041 	.word	0x0800f041
 800eff0:	0800f041 	.word	0x0800f041
 800eff4:	0800f041 	.word	0x0800f041
 800eff8:	0800f041 	.word	0x0800f041
 800effc:	0800f041 	.word	0x0800f041
 800f000:	0800f041 	.word	0x0800f041
 800f004:	0800f041 	.word	0x0800f041
 800f008:	0800f041 	.word	0x0800f041
 800f00c:	0800f041 	.word	0x0800f041
 800f010:	0800f041 	.word	0x0800f041
 800f014:	0800f041 	.word	0x0800f041
 800f018:	0800f041 	.word	0x0800f041
 800f01c:	0800f041 	.word	0x0800f041
 800f020:	0800f041 	.word	0x0800f041
 800f024:	0800f041 	.word	0x0800f041
 800f028:	0800f041 	.word	0x0800f041
 800f02c:	0800f041 	.word	0x0800f041
 800f030:	0800f041 	.word	0x0800f041
 800f034:	0800f041 	.word	0x0800f041
 800f038:	0800f041 	.word	0x0800f041
 800f03c:	0800f041 	.word	0x0800f041
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f040:	bf00      	nop
  }

  return (USBD_OK);
 800f042:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f044:	4618      	mov	r0, r3
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f05a:	6879      	ldr	r1, [r7, #4]
 800f05c:	4805      	ldr	r0, [pc, #20]	@ (800f074 <CDC_Receive_FS+0x24>)
 800f05e:	f7fc fa37 	bl	800b4d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f062:	4804      	ldr	r0, [pc, #16]	@ (800f074 <CDC_Receive_FS+0x24>)
 800f064:	f7fc fa92 	bl	800b58c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f068:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	20000470 	.word	0x20000470

0800f078 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	460b      	mov	r3, r1
 800f082:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f088:	4b0d      	ldr	r3, [pc, #52]	@ (800f0c0 <CDC_Transmit_FS+0x48>)
 800f08a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f08e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f096:	2b00      	cmp	r3, #0
 800f098:	d001      	beq.n	800f09e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f09a:	2301      	movs	r3, #1
 800f09c:	e00b      	b.n	800f0b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f09e:	887b      	ldrh	r3, [r7, #2]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	6879      	ldr	r1, [r7, #4]
 800f0a4:	4806      	ldr	r0, [pc, #24]	@ (800f0c0 <CDC_Transmit_FS+0x48>)
 800f0a6:	f7fc f9f1 	bl	800b48c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f0aa:	4805      	ldr	r0, [pc, #20]	@ (800f0c0 <CDC_Transmit_FS+0x48>)
 800f0ac:	f7fc fa2e 	bl	800b50c <USBD_CDC_TransmitPacket>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	20000470 	.word	0x20000470

0800f0c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b087      	sub	sp, #28
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f0d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	371c      	adds	r7, #28
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr
	...

0800f0e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	6039      	str	r1, [r7, #0]
 800f0f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2212      	movs	r2, #18
 800f0f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f0fa:	4b03      	ldr	r3, [pc, #12]	@ (800f108 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	20000108 	.word	0x20000108

0800f10c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b083      	sub	sp, #12
 800f110:	af00      	add	r7, sp, #0
 800f112:	4603      	mov	r3, r0
 800f114:	6039      	str	r1, [r7, #0]
 800f116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	2204      	movs	r2, #4
 800f11c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f11e:	4b03      	ldr	r3, [pc, #12]	@ (800f12c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f120:	4618      	mov	r0, r3
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	2000011c 	.word	0x2000011c

0800f130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	4603      	mov	r3, r0
 800f138:	6039      	str	r1, [r7, #0]
 800f13a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d105      	bne.n	800f14e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	4907      	ldr	r1, [pc, #28]	@ (800f164 <USBD_FS_ProductStrDescriptor+0x34>)
 800f146:	4808      	ldr	r0, [pc, #32]	@ (800f168 <USBD_FS_ProductStrDescriptor+0x38>)
 800f148:	f7fd fc6c 	bl	800ca24 <USBD_GetString>
 800f14c:	e004      	b.n	800f158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f14e:	683a      	ldr	r2, [r7, #0]
 800f150:	4904      	ldr	r1, [pc, #16]	@ (800f164 <USBD_FS_ProductStrDescriptor+0x34>)
 800f152:	4805      	ldr	r0, [pc, #20]	@ (800f168 <USBD_FS_ProductStrDescriptor+0x38>)
 800f154:	f7fd fc66 	bl	800ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f158:	4b02      	ldr	r3, [pc, #8]	@ (800f164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3708      	adds	r7, #8
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	20000f4c 	.word	0x20000f4c
 800f168:	0801066c 	.word	0x0801066c

0800f16c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	4603      	mov	r3, r0
 800f174:	6039      	str	r1, [r7, #0]
 800f176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	4904      	ldr	r1, [pc, #16]	@ (800f18c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f17c:	4804      	ldr	r0, [pc, #16]	@ (800f190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f17e:	f7fd fc51 	bl	800ca24 <USBD_GetString>
  return USBD_StrDesc;
 800f182:	4b02      	ldr	r3, [pc, #8]	@ (800f18c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	20000f4c 	.word	0x20000f4c
 800f190:	08010684 	.word	0x08010684

0800f194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	4603      	mov	r3, r0
 800f19c:	6039      	str	r1, [r7, #0]
 800f19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	221a      	movs	r2, #26
 800f1a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f1a6:	f000 f843 	bl	800f230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f1aa:	4b02      	ldr	r3, [pc, #8]	@ (800f1b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	20000120 	.word	0x20000120

0800f1b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	4603      	mov	r3, r0
 800f1c0:	6039      	str	r1, [r7, #0]
 800f1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f1c4:	79fb      	ldrb	r3, [r7, #7]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d105      	bne.n	800f1d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	4907      	ldr	r1, [pc, #28]	@ (800f1ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1ce:	4808      	ldr	r0, [pc, #32]	@ (800f1f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1d0:	f7fd fc28 	bl	800ca24 <USBD_GetString>
 800f1d4:	e004      	b.n	800f1e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	4904      	ldr	r1, [pc, #16]	@ (800f1ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1da:	4805      	ldr	r0, [pc, #20]	@ (800f1f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1dc:	f7fd fc22 	bl	800ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1e0:	4b02      	ldr	r3, [pc, #8]	@ (800f1ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	20000f4c 	.word	0x20000f4c
 800f1f0:	08010698 	.word	0x08010698

0800f1f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	6039      	str	r1, [r7, #0]
 800f1fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f200:	79fb      	ldrb	r3, [r7, #7]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d105      	bne.n	800f212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	4907      	ldr	r1, [pc, #28]	@ (800f228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f20a:	4808      	ldr	r0, [pc, #32]	@ (800f22c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f20c:	f7fd fc0a 	bl	800ca24 <USBD_GetString>
 800f210:	e004      	b.n	800f21c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	4904      	ldr	r1, [pc, #16]	@ (800f228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f216:	4805      	ldr	r0, [pc, #20]	@ (800f22c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f218:	f7fd fc04 	bl	800ca24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f21c:	4b02      	ldr	r3, [pc, #8]	@ (800f228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	20000f4c 	.word	0x20000f4c
 800f22c:	080106a4 	.word	0x080106a4

0800f230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f236:	4b0f      	ldr	r3, [pc, #60]	@ (800f274 <Get_SerialNum+0x44>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f23c:	4b0e      	ldr	r3, [pc, #56]	@ (800f278 <Get_SerialNum+0x48>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f242:	4b0e      	ldr	r3, [pc, #56]	@ (800f27c <Get_SerialNum+0x4c>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4413      	add	r3, r2
 800f24e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d009      	beq.n	800f26a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f256:	2208      	movs	r2, #8
 800f258:	4909      	ldr	r1, [pc, #36]	@ (800f280 <Get_SerialNum+0x50>)
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f000 f814 	bl	800f288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f260:	2204      	movs	r2, #4
 800f262:	4908      	ldr	r1, [pc, #32]	@ (800f284 <Get_SerialNum+0x54>)
 800f264:	68b8      	ldr	r0, [r7, #8]
 800f266:	f000 f80f 	bl	800f288 <IntToUnicode>
  }
}
 800f26a:	bf00      	nop
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	1fff7a10 	.word	0x1fff7a10
 800f278:	1fff7a14 	.word	0x1fff7a14
 800f27c:	1fff7a18 	.word	0x1fff7a18
 800f280:	20000122 	.word	0x20000122
 800f284:	20000132 	.word	0x20000132

0800f288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f288:	b480      	push	{r7}
 800f28a:	b087      	sub	sp, #28
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	4613      	mov	r3, r2
 800f294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f296:	2300      	movs	r3, #0
 800f298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f29a:	2300      	movs	r3, #0
 800f29c:	75fb      	strb	r3, [r7, #23]
 800f29e:	e027      	b.n	800f2f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	0f1b      	lsrs	r3, r3, #28
 800f2a4:	2b09      	cmp	r3, #9
 800f2a6:	d80b      	bhi.n	800f2c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	0f1b      	lsrs	r3, r3, #28
 800f2ac:	b2da      	uxtb	r2, r3
 800f2ae:	7dfb      	ldrb	r3, [r7, #23]
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	440b      	add	r3, r1
 800f2b8:	3230      	adds	r2, #48	@ 0x30
 800f2ba:	b2d2      	uxtb	r2, r2
 800f2bc:	701a      	strb	r2, [r3, #0]
 800f2be:	e00a      	b.n	800f2d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	0f1b      	lsrs	r3, r3, #28
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	7dfb      	ldrb	r3, [r7, #23]
 800f2c8:	005b      	lsls	r3, r3, #1
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	440b      	add	r3, r1
 800f2d0:	3237      	adds	r2, #55	@ 0x37
 800f2d2:	b2d2      	uxtb	r2, r2
 800f2d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	011b      	lsls	r3, r3, #4
 800f2da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f2dc:	7dfb      	ldrb	r3, [r7, #23]
 800f2de:	005b      	lsls	r3, r3, #1
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f2ea:	7dfb      	ldrb	r3, [r7, #23]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	75fb      	strb	r3, [r7, #23]
 800f2f0:	7dfa      	ldrb	r2, [r7, #23]
 800f2f2:	79fb      	ldrb	r3, [r7, #7]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d3d3      	bcc.n	800f2a0 <IntToUnicode+0x18>
  }
}
 800f2f8:	bf00      	nop
 800f2fa:	bf00      	nop
 800f2fc:	371c      	adds	r7, #28
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
	...

0800f308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b08a      	sub	sp, #40	@ 0x28
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f310:	f107 0314 	add.w	r3, r7, #20
 800f314:	2200      	movs	r2, #0
 800f316:	601a      	str	r2, [r3, #0]
 800f318:	605a      	str	r2, [r3, #4]
 800f31a:	609a      	str	r2, [r3, #8]
 800f31c:	60da      	str	r2, [r3, #12]
 800f31e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f328:	d13a      	bne.n	800f3a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f32a:	2300      	movs	r3, #0
 800f32c:	613b      	str	r3, [r7, #16]
 800f32e:	4b1e      	ldr	r3, [pc, #120]	@ (800f3a8 <HAL_PCD_MspInit+0xa0>)
 800f330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f332:	4a1d      	ldr	r2, [pc, #116]	@ (800f3a8 <HAL_PCD_MspInit+0xa0>)
 800f334:	f043 0301 	orr.w	r3, r3, #1
 800f338:	6313      	str	r3, [r2, #48]	@ 0x30
 800f33a:	4b1b      	ldr	r3, [pc, #108]	@ (800f3a8 <HAL_PCD_MspInit+0xa0>)
 800f33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f33e:	f003 0301 	and.w	r3, r3, #1
 800f342:	613b      	str	r3, [r7, #16]
 800f344:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f346:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f34a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f34c:	2302      	movs	r3, #2
 800f34e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f350:	2300      	movs	r3, #0
 800f352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f354:	2303      	movs	r3, #3
 800f356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f358:	230a      	movs	r3, #10
 800f35a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f35c:	f107 0314 	add.w	r3, r7, #20
 800f360:	4619      	mov	r1, r3
 800f362:	4812      	ldr	r0, [pc, #72]	@ (800f3ac <HAL_PCD_MspInit+0xa4>)
 800f364:	f7f6 f89c 	bl	80054a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f368:	4b0f      	ldr	r3, [pc, #60]	@ (800f3a8 <HAL_PCD_MspInit+0xa0>)
 800f36a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f36c:	4a0e      	ldr	r2, [pc, #56]	@ (800f3a8 <HAL_PCD_MspInit+0xa0>)
 800f36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f372:	6353      	str	r3, [r2, #52]	@ 0x34
 800f374:	2300      	movs	r3, #0
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	4b0b      	ldr	r3, [pc, #44]	@ (800f3a8 <HAL_PCD_MspInit+0xa0>)
 800f37a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f37c:	4a0a      	ldr	r2, [pc, #40]	@ (800f3a8 <HAL_PCD_MspInit+0xa0>)
 800f37e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f382:	6453      	str	r3, [r2, #68]	@ 0x44
 800f384:	4b08      	ldr	r3, [pc, #32]	@ (800f3a8 <HAL_PCD_MspInit+0xa0>)
 800f386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f390:	2200      	movs	r2, #0
 800f392:	2100      	movs	r1, #0
 800f394:	2043      	movs	r0, #67	@ 0x43
 800f396:	f7f5 fcba 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f39a:	2043      	movs	r0, #67	@ 0x43
 800f39c:	f7f5 fcd3 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f3a0:	bf00      	nop
 800f3a2:	3728      	adds	r7, #40	@ 0x28
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	40023800 	.word	0x40023800
 800f3ac:	40020000 	.word	0x40020000

0800f3b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4610      	mov	r0, r2
 800f3c8:	f7fc f9c9 	bl	800b75e <USBD_LL_SetupStage>
}
 800f3cc:	bf00      	nop
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	460b      	mov	r3, r1
 800f3de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f3e6:	78fa      	ldrb	r2, [r7, #3]
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	4413      	add	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	440b      	add	r3, r1
 800f3f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	78fb      	ldrb	r3, [r7, #3]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	f7fc fa03 	bl	800b808 <USBD_LL_DataOutStage>
}
 800f402:	bf00      	nop
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b082      	sub	sp, #8
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	460b      	mov	r3, r1
 800f414:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f41c:	78fa      	ldrb	r2, [r7, #3]
 800f41e:	6879      	ldr	r1, [r7, #4]
 800f420:	4613      	mov	r3, r2
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	4413      	add	r3, r2
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	440b      	add	r3, r1
 800f42a:	3320      	adds	r3, #32
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	78fb      	ldrb	r3, [r7, #3]
 800f430:	4619      	mov	r1, r3
 800f432:	f7fc fa9c 	bl	800b96e <USBD_LL_DataInStage>
}
 800f436:	bf00      	nop
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f43e:	b580      	push	{r7, lr}
 800f440:	b082      	sub	sp, #8
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fc fbd6 	bl	800bbfe <USBD_LL_SOF>
}
 800f452:	bf00      	nop
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b084      	sub	sp, #16
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f462:	2301      	movs	r3, #1
 800f464:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	79db      	ldrb	r3, [r3, #7]
 800f46a:	2b02      	cmp	r3, #2
 800f46c:	d001      	beq.n	800f472 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f46e:	f7f2 f9bb 	bl	80017e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f478:	7bfa      	ldrb	r2, [r7, #15]
 800f47a:	4611      	mov	r1, r2
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7fc fb7a 	bl	800bb76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fc fb22 	bl	800bad2 <USBD_LL_Reset>
}
 800f48e:	bf00      	nop
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
	...

0800f498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fc fb75 	bl	800bb96 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	6812      	ldr	r2, [r2, #0]
 800f4ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f4be:	f043 0301 	orr.w	r3, r3, #1
 800f4c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	7adb      	ldrb	r3, [r3, #11]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d005      	beq.n	800f4d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f4cc:	4b04      	ldr	r3, [pc, #16]	@ (800f4e0 <HAL_PCD_SuspendCallback+0x48>)
 800f4ce:	691b      	ldr	r3, [r3, #16]
 800f4d0:	4a03      	ldr	r2, [pc, #12]	@ (800f4e0 <HAL_PCD_SuspendCallback+0x48>)
 800f4d2:	f043 0306 	orr.w	r3, r3, #6
 800f4d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f4d8:	bf00      	nop
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	e000ed00 	.word	0xe000ed00

0800f4e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fc fb6b 	bl	800bbce <USBD_LL_Resume>
}
 800f4f8:	bf00      	nop
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	460b      	mov	r3, r1
 800f50a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f512:	78fa      	ldrb	r2, [r7, #3]
 800f514:	4611      	mov	r1, r2
 800f516:	4618      	mov	r0, r3
 800f518:	f7fc fbc3 	bl	800bca2 <USBD_LL_IsoOUTIncomplete>
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	460b      	mov	r3, r1
 800f52e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f536:	78fa      	ldrb	r2, [r7, #3]
 800f538:	4611      	mov	r1, r2
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fc fb7f 	bl	800bc3e <USBD_LL_IsoINIncomplete>
}
 800f540:	bf00      	nop
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f556:	4618      	mov	r0, r3
 800f558:	f7fc fbd5 	bl	800bd06 <USBD_LL_DevConnected>
}
 800f55c:	bf00      	nop
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f572:	4618      	mov	r0, r3
 800f574:	f7fc fbd2 	bl	800bd1c <USBD_LL_DevDisconnected>
}
 800f578:	bf00      	nop
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d13c      	bne.n	800f60a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f590:	4a20      	ldr	r2, [pc, #128]	@ (800f614 <USBD_LL_Init+0x94>)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a1e      	ldr	r2, [pc, #120]	@ (800f614 <USBD_LL_Init+0x94>)
 800f59c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f5a0:	4b1c      	ldr	r3, [pc, #112]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f5a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f5a8:	4b1a      	ldr	r3, [pc, #104]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5aa:	2204      	movs	r2, #4
 800f5ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f5ae:	4b19      	ldr	r3, [pc, #100]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5b0:	2202      	movs	r2, #2
 800f5b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f5b4:	4b17      	ldr	r3, [pc, #92]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f5ba:	4b16      	ldr	r3, [pc, #88]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5bc:	2202      	movs	r2, #2
 800f5be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f5c0:	4b14      	ldr	r3, [pc, #80]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f5c6:	4b13      	ldr	r3, [pc, #76]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f5cc:	4b11      	ldr	r3, [pc, #68]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f5d2:	4b10      	ldr	r3, [pc, #64]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f5d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f5de:	480d      	ldr	r0, [pc, #52]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5e0:	f7f6 f914 	bl	800580c <HAL_PCD_Init>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d001      	beq.n	800f5ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f5ea:	f7f2 f8fd 	bl	80017e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f5ee:	2180      	movs	r1, #128	@ 0x80
 800f5f0:	4808      	ldr	r0, [pc, #32]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5f2:	f7f7 fb40 	bl	8006c76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f5f6:	2240      	movs	r2, #64	@ 0x40
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	4806      	ldr	r0, [pc, #24]	@ (800f614 <USBD_LL_Init+0x94>)
 800f5fc:	f7f7 faf4 	bl	8006be8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f600:	2280      	movs	r2, #128	@ 0x80
 800f602:	2101      	movs	r1, #1
 800f604:	4803      	ldr	r0, [pc, #12]	@ (800f614 <USBD_LL_Init+0x94>)
 800f606:	f7f7 faef 	bl	8006be8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f60a:	2300      	movs	r3, #0
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	2000114c 	.word	0x2000114c

0800f618 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f620:	2300      	movs	r3, #0
 800f622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f624:	2300      	movs	r3, #0
 800f626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f62e:	4618      	mov	r0, r3
 800f630:	f7f6 f9fb 	bl	8005a2a <HAL_PCD_Start>
 800f634:	4603      	mov	r3, r0
 800f636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f638:	7bfb      	ldrb	r3, [r7, #15]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 f942 	bl	800f8c4 <USBD_Get_USB_Status>
 800f640:	4603      	mov	r3, r0
 800f642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f644:	7bbb      	ldrb	r3, [r7, #14]
}
 800f646:	4618      	mov	r0, r3
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b084      	sub	sp, #16
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
 800f656:	4608      	mov	r0, r1
 800f658:	4611      	mov	r1, r2
 800f65a:	461a      	mov	r2, r3
 800f65c:	4603      	mov	r3, r0
 800f65e:	70fb      	strb	r3, [r7, #3]
 800f660:	460b      	mov	r3, r1
 800f662:	70bb      	strb	r3, [r7, #2]
 800f664:	4613      	mov	r3, r2
 800f666:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f66c:	2300      	movs	r3, #0
 800f66e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f676:	78bb      	ldrb	r3, [r7, #2]
 800f678:	883a      	ldrh	r2, [r7, #0]
 800f67a:	78f9      	ldrb	r1, [r7, #3]
 800f67c:	f7f6 fecf 	bl	800641e <HAL_PCD_EP_Open>
 800f680:	4603      	mov	r3, r0
 800f682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f684:	7bfb      	ldrb	r3, [r7, #15]
 800f686:	4618      	mov	r0, r3
 800f688:	f000 f91c 	bl	800f8c4 <USBD_Get_USB_Status>
 800f68c:	4603      	mov	r3, r0
 800f68e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f690:	7bbb      	ldrb	r3, [r7, #14]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b084      	sub	sp, #16
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6b4:	78fa      	ldrb	r2, [r7, #3]
 800f6b6:	4611      	mov	r1, r2
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7f6 ff1a 	bl	80064f2 <HAL_PCD_EP_Close>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f000 f8fd 	bl	800f8c4 <USBD_Get_USB_Status>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3710      	adds	r7, #16
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6f2:	78fa      	ldrb	r2, [r7, #3]
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7f6 ffd2 	bl	80066a0 <HAL_PCD_EP_SetStall>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f700:	7bfb      	ldrb	r3, [r7, #15]
 800f702:	4618      	mov	r0, r3
 800f704:	f000 f8de 	bl	800f8c4 <USBD_Get_USB_Status>
 800f708:	4603      	mov	r3, r0
 800f70a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f70c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}

0800f716 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f716:	b580      	push	{r7, lr}
 800f718:	b084      	sub	sp, #16
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
 800f71e:	460b      	mov	r3, r1
 800f720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f722:	2300      	movs	r3, #0
 800f724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f726:	2300      	movs	r3, #0
 800f728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f730:	78fa      	ldrb	r2, [r7, #3]
 800f732:	4611      	mov	r1, r2
 800f734:	4618      	mov	r0, r3
 800f736:	f7f7 f816 	bl	8006766 <HAL_PCD_EP_ClrStall>
 800f73a:	4603      	mov	r3, r0
 800f73c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f73e:	7bfb      	ldrb	r3, [r7, #15]
 800f740:	4618      	mov	r0, r3
 800f742:	f000 f8bf 	bl	800f8c4 <USBD_Get_USB_Status>
 800f746:	4603      	mov	r3, r0
 800f748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f74a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	460b      	mov	r3, r1
 800f75e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f766:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	da0b      	bge.n	800f788 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f770:	78fb      	ldrb	r3, [r7, #3]
 800f772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f776:	68f9      	ldr	r1, [r7, #12]
 800f778:	4613      	mov	r3, r2
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	4413      	add	r3, r2
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	440b      	add	r3, r1
 800f782:	3316      	adds	r3, #22
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	e00b      	b.n	800f7a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f788:	78fb      	ldrb	r3, [r7, #3]
 800f78a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f78e:	68f9      	ldr	r1, [r7, #12]
 800f790:	4613      	mov	r3, r2
 800f792:	00db      	lsls	r3, r3, #3
 800f794:	4413      	add	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	440b      	add	r3, r1
 800f79a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f79e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3714      	adds	r7, #20
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7c6:	78fa      	ldrb	r2, [r7, #3]
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7f6 fe03 	bl	80063d6 <HAL_PCD_SetAddress>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f000 f874 	bl	800f8c4 <USBD_Get_USB_Status>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}

0800f7ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b086      	sub	sp, #24
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	607a      	str	r2, [r7, #4]
 800f7f4:	603b      	str	r3, [r7, #0]
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f808:	7af9      	ldrb	r1, [r7, #11]
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	f7f6 ff0d 	bl	800662c <HAL_PCD_EP_Transmit>
 800f812:	4603      	mov	r3, r0
 800f814:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f816:	7dfb      	ldrb	r3, [r7, #23]
 800f818:	4618      	mov	r0, r3
 800f81a:	f000 f853 	bl	800f8c4 <USBD_Get_USB_Status>
 800f81e:	4603      	mov	r3, r0
 800f820:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f822:	7dbb      	ldrb	r3, [r7, #22]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	607a      	str	r2, [r7, #4]
 800f836:	603b      	str	r3, [r7, #0]
 800f838:	460b      	mov	r3, r1
 800f83a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f83c:	2300      	movs	r3, #0
 800f83e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f840:	2300      	movs	r3, #0
 800f842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f84a:	7af9      	ldrb	r1, [r7, #11]
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	f7f6 fe99 	bl	8006586 <HAL_PCD_EP_Receive>
 800f854:	4603      	mov	r3, r0
 800f856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f858:	7dfb      	ldrb	r3, [r7, #23]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f000 f832 	bl	800f8c4 <USBD_Get_USB_Status>
 800f860:	4603      	mov	r3, r0
 800f862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f864:	7dbb      	ldrb	r3, [r7, #22]
}
 800f866:	4618      	mov	r0, r3
 800f868:	3718      	adds	r7, #24
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b082      	sub	sp, #8
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
 800f876:	460b      	mov	r3, r1
 800f878:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f880:	78fa      	ldrb	r2, [r7, #3]
 800f882:	4611      	mov	r1, r2
 800f884:	4618      	mov	r0, r3
 800f886:	f7f6 feb9 	bl	80065fc <HAL_PCD_EP_GetRxCount>
 800f88a:	4603      	mov	r3, r0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f89c:	4b03      	ldr	r3, [pc, #12]	@ (800f8ac <USBD_static_malloc+0x18>)
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	370c      	adds	r7, #12
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	20001630 	.word	0x20001630

0800f8b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]

}
 800f8b8:	bf00      	nop
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	2b03      	cmp	r3, #3
 800f8d6:	d817      	bhi.n	800f908 <USBD_Get_USB_Status+0x44>
 800f8d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f8e0 <USBD_Get_USB_Status+0x1c>)
 800f8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8de:	bf00      	nop
 800f8e0:	0800f8f1 	.word	0x0800f8f1
 800f8e4:	0800f8f7 	.word	0x0800f8f7
 800f8e8:	0800f8fd 	.word	0x0800f8fd
 800f8ec:	0800f903 	.word	0x0800f903
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8f4:	e00b      	b.n	800f90e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8f6:	2303      	movs	r3, #3
 800f8f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f8fa:	e008      	b.n	800f90e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f900:	e005      	b.n	800f90e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f902:	2303      	movs	r3, #3
 800f904:	73fb      	strb	r3, [r7, #15]
    break;
 800f906:	e002      	b.n	800f90e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f908:	2303      	movs	r3, #3
 800f90a:	73fb      	strb	r3, [r7, #15]
    break;
 800f90c:	bf00      	nop
  }
  return usb_status;
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f910:	4618      	mov	r0, r3
 800f912:	3714      	adds	r7, #20
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <_ZdlPvj>:
 800f91c:	f000 b811 	b.w	800f942 <_ZdlPv>

0800f920 <_Znwj>:
 800f920:	2801      	cmp	r0, #1
 800f922:	bf38      	it	cc
 800f924:	2001      	movcc	r0, #1
 800f926:	b510      	push	{r4, lr}
 800f928:	4604      	mov	r4, r0
 800f92a:	4620      	mov	r0, r4
 800f92c:	f000 f836 	bl	800f99c <malloc>
 800f930:	b100      	cbz	r0, 800f934 <_Znwj+0x14>
 800f932:	bd10      	pop	{r4, pc}
 800f934:	f000 f808 	bl	800f948 <_ZSt15get_new_handlerv>
 800f938:	b908      	cbnz	r0, 800f93e <_Znwj+0x1e>
 800f93a:	f000 f80d 	bl	800f958 <abort>
 800f93e:	4780      	blx	r0
 800f940:	e7f3      	b.n	800f92a <_Znwj+0xa>

0800f942 <_ZdlPv>:
 800f942:	f000 b833 	b.w	800f9ac <free>
	...

0800f948 <_ZSt15get_new_handlerv>:
 800f948:	4b02      	ldr	r3, [pc, #8]	@ (800f954 <_ZSt15get_new_handlerv+0xc>)
 800f94a:	6818      	ldr	r0, [r3, #0]
 800f94c:	f3bf 8f5b 	dmb	ish
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	20001850 	.word	0x20001850

0800f958 <abort>:
 800f958:	b508      	push	{r3, lr}
 800f95a:	2006      	movs	r0, #6
 800f95c:	f000 f9ae 	bl	800fcbc <raise>
 800f960:	2001      	movs	r0, #1
 800f962:	f7f2 fbdb 	bl	800211c <_exit>

0800f966 <__itoa>:
 800f966:	1e93      	subs	r3, r2, #2
 800f968:	2b22      	cmp	r3, #34	@ 0x22
 800f96a:	b510      	push	{r4, lr}
 800f96c:	460c      	mov	r4, r1
 800f96e:	d904      	bls.n	800f97a <__itoa+0x14>
 800f970:	2300      	movs	r3, #0
 800f972:	700b      	strb	r3, [r1, #0]
 800f974:	461c      	mov	r4, r3
 800f976:	4620      	mov	r0, r4
 800f978:	bd10      	pop	{r4, pc}
 800f97a:	2a0a      	cmp	r2, #10
 800f97c:	d109      	bne.n	800f992 <__itoa+0x2c>
 800f97e:	2800      	cmp	r0, #0
 800f980:	da07      	bge.n	800f992 <__itoa+0x2c>
 800f982:	232d      	movs	r3, #45	@ 0x2d
 800f984:	700b      	strb	r3, [r1, #0]
 800f986:	4240      	negs	r0, r0
 800f988:	2101      	movs	r1, #1
 800f98a:	4421      	add	r1, r4
 800f98c:	f000 f8c4 	bl	800fb18 <__utoa>
 800f990:	e7f1      	b.n	800f976 <__itoa+0x10>
 800f992:	2100      	movs	r1, #0
 800f994:	e7f9      	b.n	800f98a <__itoa+0x24>

0800f996 <itoa>:
 800f996:	f7ff bfe6 	b.w	800f966 <__itoa>
	...

0800f99c <malloc>:
 800f99c:	4b02      	ldr	r3, [pc, #8]	@ (800f9a8 <malloc+0xc>)
 800f99e:	4601      	mov	r1, r0
 800f9a0:	6818      	ldr	r0, [r3, #0]
 800f9a2:	f000 b82d 	b.w	800fa00 <_malloc_r>
 800f9a6:	bf00      	nop
 800f9a8:	2000013c 	.word	0x2000013c

0800f9ac <free>:
 800f9ac:	4b02      	ldr	r3, [pc, #8]	@ (800f9b8 <free+0xc>)
 800f9ae:	4601      	mov	r1, r0
 800f9b0:	6818      	ldr	r0, [r3, #0]
 800f9b2:	f000 b9e9 	b.w	800fd88 <_free_r>
 800f9b6:	bf00      	nop
 800f9b8:	2000013c 	.word	0x2000013c

0800f9bc <sbrk_aligned>:
 800f9bc:	b570      	push	{r4, r5, r6, lr}
 800f9be:	4e0f      	ldr	r6, [pc, #60]	@ (800f9fc <sbrk_aligned+0x40>)
 800f9c0:	460c      	mov	r4, r1
 800f9c2:	6831      	ldr	r1, [r6, #0]
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	b911      	cbnz	r1, 800f9ce <sbrk_aligned+0x12>
 800f9c8:	f000 f994 	bl	800fcf4 <_sbrk_r>
 800f9cc:	6030      	str	r0, [r6, #0]
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f000 f98f 	bl	800fcf4 <_sbrk_r>
 800f9d6:	1c43      	adds	r3, r0, #1
 800f9d8:	d103      	bne.n	800f9e2 <sbrk_aligned+0x26>
 800f9da:	f04f 34ff 	mov.w	r4, #4294967295
 800f9de:	4620      	mov	r0, r4
 800f9e0:	bd70      	pop	{r4, r5, r6, pc}
 800f9e2:	1cc4      	adds	r4, r0, #3
 800f9e4:	f024 0403 	bic.w	r4, r4, #3
 800f9e8:	42a0      	cmp	r0, r4
 800f9ea:	d0f8      	beq.n	800f9de <sbrk_aligned+0x22>
 800f9ec:	1a21      	subs	r1, r4, r0
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f000 f980 	bl	800fcf4 <_sbrk_r>
 800f9f4:	3001      	adds	r0, #1
 800f9f6:	d1f2      	bne.n	800f9de <sbrk_aligned+0x22>
 800f9f8:	e7ef      	b.n	800f9da <sbrk_aligned+0x1e>
 800f9fa:	bf00      	nop
 800f9fc:	20001854 	.word	0x20001854

0800fa00 <_malloc_r>:
 800fa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa04:	1ccd      	adds	r5, r1, #3
 800fa06:	f025 0503 	bic.w	r5, r5, #3
 800fa0a:	3508      	adds	r5, #8
 800fa0c:	2d0c      	cmp	r5, #12
 800fa0e:	bf38      	it	cc
 800fa10:	250c      	movcc	r5, #12
 800fa12:	2d00      	cmp	r5, #0
 800fa14:	4606      	mov	r6, r0
 800fa16:	db01      	blt.n	800fa1c <_malloc_r+0x1c>
 800fa18:	42a9      	cmp	r1, r5
 800fa1a:	d904      	bls.n	800fa26 <_malloc_r+0x26>
 800fa1c:	230c      	movs	r3, #12
 800fa1e:	6033      	str	r3, [r6, #0]
 800fa20:	2000      	movs	r0, #0
 800fa22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fafc <_malloc_r+0xfc>
 800fa2a:	f000 f869 	bl	800fb00 <__malloc_lock>
 800fa2e:	f8d8 3000 	ldr.w	r3, [r8]
 800fa32:	461c      	mov	r4, r3
 800fa34:	bb44      	cbnz	r4, 800fa88 <_malloc_r+0x88>
 800fa36:	4629      	mov	r1, r5
 800fa38:	4630      	mov	r0, r6
 800fa3a:	f7ff ffbf 	bl	800f9bc <sbrk_aligned>
 800fa3e:	1c43      	adds	r3, r0, #1
 800fa40:	4604      	mov	r4, r0
 800fa42:	d158      	bne.n	800faf6 <_malloc_r+0xf6>
 800fa44:	f8d8 4000 	ldr.w	r4, [r8]
 800fa48:	4627      	mov	r7, r4
 800fa4a:	2f00      	cmp	r7, #0
 800fa4c:	d143      	bne.n	800fad6 <_malloc_r+0xd6>
 800fa4e:	2c00      	cmp	r4, #0
 800fa50:	d04b      	beq.n	800faea <_malloc_r+0xea>
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	4639      	mov	r1, r7
 800fa56:	4630      	mov	r0, r6
 800fa58:	eb04 0903 	add.w	r9, r4, r3
 800fa5c:	f000 f94a 	bl	800fcf4 <_sbrk_r>
 800fa60:	4581      	cmp	r9, r0
 800fa62:	d142      	bne.n	800faea <_malloc_r+0xea>
 800fa64:	6821      	ldr	r1, [r4, #0]
 800fa66:	1a6d      	subs	r5, r5, r1
 800fa68:	4629      	mov	r1, r5
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f7ff ffa6 	bl	800f9bc <sbrk_aligned>
 800fa70:	3001      	adds	r0, #1
 800fa72:	d03a      	beq.n	800faea <_malloc_r+0xea>
 800fa74:	6823      	ldr	r3, [r4, #0]
 800fa76:	442b      	add	r3, r5
 800fa78:	6023      	str	r3, [r4, #0]
 800fa7a:	f8d8 3000 	ldr.w	r3, [r8]
 800fa7e:	685a      	ldr	r2, [r3, #4]
 800fa80:	bb62      	cbnz	r2, 800fadc <_malloc_r+0xdc>
 800fa82:	f8c8 7000 	str.w	r7, [r8]
 800fa86:	e00f      	b.n	800faa8 <_malloc_r+0xa8>
 800fa88:	6822      	ldr	r2, [r4, #0]
 800fa8a:	1b52      	subs	r2, r2, r5
 800fa8c:	d420      	bmi.n	800fad0 <_malloc_r+0xd0>
 800fa8e:	2a0b      	cmp	r2, #11
 800fa90:	d917      	bls.n	800fac2 <_malloc_r+0xc2>
 800fa92:	1961      	adds	r1, r4, r5
 800fa94:	42a3      	cmp	r3, r4
 800fa96:	6025      	str	r5, [r4, #0]
 800fa98:	bf18      	it	ne
 800fa9a:	6059      	strne	r1, [r3, #4]
 800fa9c:	6863      	ldr	r3, [r4, #4]
 800fa9e:	bf08      	it	eq
 800faa0:	f8c8 1000 	streq.w	r1, [r8]
 800faa4:	5162      	str	r2, [r4, r5]
 800faa6:	604b      	str	r3, [r1, #4]
 800faa8:	4630      	mov	r0, r6
 800faaa:	f000 f82f 	bl	800fb0c <__malloc_unlock>
 800faae:	f104 000b 	add.w	r0, r4, #11
 800fab2:	1d23      	adds	r3, r4, #4
 800fab4:	f020 0007 	bic.w	r0, r0, #7
 800fab8:	1ac2      	subs	r2, r0, r3
 800faba:	bf1c      	itt	ne
 800fabc:	1a1b      	subne	r3, r3, r0
 800fabe:	50a3      	strne	r3, [r4, r2]
 800fac0:	e7af      	b.n	800fa22 <_malloc_r+0x22>
 800fac2:	6862      	ldr	r2, [r4, #4]
 800fac4:	42a3      	cmp	r3, r4
 800fac6:	bf0c      	ite	eq
 800fac8:	f8c8 2000 	streq.w	r2, [r8]
 800facc:	605a      	strne	r2, [r3, #4]
 800face:	e7eb      	b.n	800faa8 <_malloc_r+0xa8>
 800fad0:	4623      	mov	r3, r4
 800fad2:	6864      	ldr	r4, [r4, #4]
 800fad4:	e7ae      	b.n	800fa34 <_malloc_r+0x34>
 800fad6:	463c      	mov	r4, r7
 800fad8:	687f      	ldr	r7, [r7, #4]
 800fada:	e7b6      	b.n	800fa4a <_malloc_r+0x4a>
 800fadc:	461a      	mov	r2, r3
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	42a3      	cmp	r3, r4
 800fae2:	d1fb      	bne.n	800fadc <_malloc_r+0xdc>
 800fae4:	2300      	movs	r3, #0
 800fae6:	6053      	str	r3, [r2, #4]
 800fae8:	e7de      	b.n	800faa8 <_malloc_r+0xa8>
 800faea:	230c      	movs	r3, #12
 800faec:	6033      	str	r3, [r6, #0]
 800faee:	4630      	mov	r0, r6
 800faf0:	f000 f80c 	bl	800fb0c <__malloc_unlock>
 800faf4:	e794      	b.n	800fa20 <_malloc_r+0x20>
 800faf6:	6005      	str	r5, [r0, #0]
 800faf8:	e7d6      	b.n	800faa8 <_malloc_r+0xa8>
 800fafa:	bf00      	nop
 800fafc:	20001858 	.word	0x20001858

0800fb00 <__malloc_lock>:
 800fb00:	4801      	ldr	r0, [pc, #4]	@ (800fb08 <__malloc_lock+0x8>)
 800fb02:	f000 b931 	b.w	800fd68 <__retarget_lock_acquire_recursive>
 800fb06:	bf00      	nop
 800fb08:	20001998 	.word	0x20001998

0800fb0c <__malloc_unlock>:
 800fb0c:	4801      	ldr	r0, [pc, #4]	@ (800fb14 <__malloc_unlock+0x8>)
 800fb0e:	f000 b92c 	b.w	800fd6a <__retarget_lock_release_recursive>
 800fb12:	bf00      	nop
 800fb14:	20001998 	.word	0x20001998

0800fb18 <__utoa>:
 800fb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb1a:	4c1f      	ldr	r4, [pc, #124]	@ (800fb98 <__utoa+0x80>)
 800fb1c:	b08b      	sub	sp, #44	@ 0x2c
 800fb1e:	4605      	mov	r5, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	466e      	mov	r6, sp
 800fb24:	f104 0c20 	add.w	ip, r4, #32
 800fb28:	6820      	ldr	r0, [r4, #0]
 800fb2a:	6861      	ldr	r1, [r4, #4]
 800fb2c:	4637      	mov	r7, r6
 800fb2e:	c703      	stmia	r7!, {r0, r1}
 800fb30:	3408      	adds	r4, #8
 800fb32:	4564      	cmp	r4, ip
 800fb34:	463e      	mov	r6, r7
 800fb36:	d1f7      	bne.n	800fb28 <__utoa+0x10>
 800fb38:	7921      	ldrb	r1, [r4, #4]
 800fb3a:	7139      	strb	r1, [r7, #4]
 800fb3c:	1e91      	subs	r1, r2, #2
 800fb3e:	6820      	ldr	r0, [r4, #0]
 800fb40:	6038      	str	r0, [r7, #0]
 800fb42:	2922      	cmp	r1, #34	@ 0x22
 800fb44:	f04f 0100 	mov.w	r1, #0
 800fb48:	d904      	bls.n	800fb54 <__utoa+0x3c>
 800fb4a:	7019      	strb	r1, [r3, #0]
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	4618      	mov	r0, r3
 800fb50:	b00b      	add	sp, #44	@ 0x2c
 800fb52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb54:	1e58      	subs	r0, r3, #1
 800fb56:	4684      	mov	ip, r0
 800fb58:	fbb5 f7f2 	udiv	r7, r5, r2
 800fb5c:	fb02 5617 	mls	r6, r2, r7, r5
 800fb60:	3628      	adds	r6, #40	@ 0x28
 800fb62:	446e      	add	r6, sp
 800fb64:	460c      	mov	r4, r1
 800fb66:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800fb6a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800fb6e:	462e      	mov	r6, r5
 800fb70:	42b2      	cmp	r2, r6
 800fb72:	f101 0101 	add.w	r1, r1, #1
 800fb76:	463d      	mov	r5, r7
 800fb78:	d9ee      	bls.n	800fb58 <__utoa+0x40>
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	545a      	strb	r2, [r3, r1]
 800fb7e:	1919      	adds	r1, r3, r4
 800fb80:	1aa5      	subs	r5, r4, r2
 800fb82:	42aa      	cmp	r2, r5
 800fb84:	dae3      	bge.n	800fb4e <__utoa+0x36>
 800fb86:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800fb8a:	780e      	ldrb	r6, [r1, #0]
 800fb8c:	7006      	strb	r6, [r0, #0]
 800fb8e:	3201      	adds	r2, #1
 800fb90:	f801 5901 	strb.w	r5, [r1], #-1
 800fb94:	e7f4      	b.n	800fb80 <__utoa+0x68>
 800fb96:	bf00      	nop
 800fb98:	080181d8 	.word	0x080181d8

0800fb9c <_vsniprintf_r>:
 800fb9c:	b530      	push	{r4, r5, lr}
 800fb9e:	4614      	mov	r4, r2
 800fba0:	2c00      	cmp	r4, #0
 800fba2:	b09b      	sub	sp, #108	@ 0x6c
 800fba4:	4605      	mov	r5, r0
 800fba6:	461a      	mov	r2, r3
 800fba8:	da05      	bge.n	800fbb6 <_vsniprintf_r+0x1a>
 800fbaa:	238b      	movs	r3, #139	@ 0x8b
 800fbac:	6003      	str	r3, [r0, #0]
 800fbae:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb2:	b01b      	add	sp, #108	@ 0x6c
 800fbb4:	bd30      	pop	{r4, r5, pc}
 800fbb6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fbba:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fbbe:	bf14      	ite	ne
 800fbc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fbc4:	4623      	moveq	r3, r4
 800fbc6:	9302      	str	r3, [sp, #8]
 800fbc8:	9305      	str	r3, [sp, #20]
 800fbca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbce:	9100      	str	r1, [sp, #0]
 800fbd0:	9104      	str	r1, [sp, #16]
 800fbd2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fbd6:	4669      	mov	r1, sp
 800fbd8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fbda:	f000 f97b 	bl	800fed4 <_svfiprintf_r>
 800fbde:	1c43      	adds	r3, r0, #1
 800fbe0:	bfbc      	itt	lt
 800fbe2:	238b      	movlt	r3, #139	@ 0x8b
 800fbe4:	602b      	strlt	r3, [r5, #0]
 800fbe6:	2c00      	cmp	r4, #0
 800fbe8:	d0e3      	beq.n	800fbb2 <_vsniprintf_r+0x16>
 800fbea:	9b00      	ldr	r3, [sp, #0]
 800fbec:	2200      	movs	r2, #0
 800fbee:	701a      	strb	r2, [r3, #0]
 800fbf0:	e7df      	b.n	800fbb2 <_vsniprintf_r+0x16>
	...

0800fbf4 <vsniprintf>:
 800fbf4:	b507      	push	{r0, r1, r2, lr}
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	460a      	mov	r2, r1
 800fbfc:	4601      	mov	r1, r0
 800fbfe:	4803      	ldr	r0, [pc, #12]	@ (800fc0c <vsniprintf+0x18>)
 800fc00:	6800      	ldr	r0, [r0, #0]
 800fc02:	f7ff ffcb 	bl	800fb9c <_vsniprintf_r>
 800fc06:	b003      	add	sp, #12
 800fc08:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc0c:	2000013c 	.word	0x2000013c

0800fc10 <memset>:
 800fc10:	4402      	add	r2, r0
 800fc12:	4603      	mov	r3, r0
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d100      	bne.n	800fc1a <memset+0xa>
 800fc18:	4770      	bx	lr
 800fc1a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc1e:	e7f9      	b.n	800fc14 <memset+0x4>

0800fc20 <strncat>:
 800fc20:	b530      	push	{r4, r5, lr}
 800fc22:	4604      	mov	r4, r0
 800fc24:	7825      	ldrb	r5, [r4, #0]
 800fc26:	4623      	mov	r3, r4
 800fc28:	3401      	adds	r4, #1
 800fc2a:	2d00      	cmp	r5, #0
 800fc2c:	d1fa      	bne.n	800fc24 <strncat+0x4>
 800fc2e:	3a01      	subs	r2, #1
 800fc30:	d304      	bcc.n	800fc3c <strncat+0x1c>
 800fc32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc36:	f803 4b01 	strb.w	r4, [r3], #1
 800fc3a:	b904      	cbnz	r4, 800fc3e <strncat+0x1e>
 800fc3c:	bd30      	pop	{r4, r5, pc}
 800fc3e:	2a00      	cmp	r2, #0
 800fc40:	d1f5      	bne.n	800fc2e <strncat+0xe>
 800fc42:	701a      	strb	r2, [r3, #0]
 800fc44:	e7f3      	b.n	800fc2e <strncat+0xe>

0800fc46 <strncpy>:
 800fc46:	b510      	push	{r4, lr}
 800fc48:	3901      	subs	r1, #1
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	b132      	cbz	r2, 800fc5c <strncpy+0x16>
 800fc4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fc52:	f803 4b01 	strb.w	r4, [r3], #1
 800fc56:	3a01      	subs	r2, #1
 800fc58:	2c00      	cmp	r4, #0
 800fc5a:	d1f7      	bne.n	800fc4c <strncpy+0x6>
 800fc5c:	441a      	add	r2, r3
 800fc5e:	2100      	movs	r1, #0
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d100      	bne.n	800fc66 <strncpy+0x20>
 800fc64:	bd10      	pop	{r4, pc}
 800fc66:	f803 1b01 	strb.w	r1, [r3], #1
 800fc6a:	e7f9      	b.n	800fc60 <strncpy+0x1a>

0800fc6c <_raise_r>:
 800fc6c:	291f      	cmp	r1, #31
 800fc6e:	b538      	push	{r3, r4, r5, lr}
 800fc70:	4605      	mov	r5, r0
 800fc72:	460c      	mov	r4, r1
 800fc74:	d904      	bls.n	800fc80 <_raise_r+0x14>
 800fc76:	2316      	movs	r3, #22
 800fc78:	6003      	str	r3, [r0, #0]
 800fc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc7e:	bd38      	pop	{r3, r4, r5, pc}
 800fc80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc82:	b112      	cbz	r2, 800fc8a <_raise_r+0x1e>
 800fc84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc88:	b94b      	cbnz	r3, 800fc9e <_raise_r+0x32>
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	f000 f830 	bl	800fcf0 <_getpid_r>
 800fc90:	4622      	mov	r2, r4
 800fc92:	4601      	mov	r1, r0
 800fc94:	4628      	mov	r0, r5
 800fc96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc9a:	f000 b817 	b.w	800fccc <_kill_r>
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d00a      	beq.n	800fcb8 <_raise_r+0x4c>
 800fca2:	1c59      	adds	r1, r3, #1
 800fca4:	d103      	bne.n	800fcae <_raise_r+0x42>
 800fca6:	2316      	movs	r3, #22
 800fca8:	6003      	str	r3, [r0, #0]
 800fcaa:	2001      	movs	r0, #1
 800fcac:	e7e7      	b.n	800fc7e <_raise_r+0x12>
 800fcae:	2100      	movs	r1, #0
 800fcb0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	4798      	blx	r3
 800fcb8:	2000      	movs	r0, #0
 800fcba:	e7e0      	b.n	800fc7e <_raise_r+0x12>

0800fcbc <raise>:
 800fcbc:	4b02      	ldr	r3, [pc, #8]	@ (800fcc8 <raise+0xc>)
 800fcbe:	4601      	mov	r1, r0
 800fcc0:	6818      	ldr	r0, [r3, #0]
 800fcc2:	f7ff bfd3 	b.w	800fc6c <_raise_r>
 800fcc6:	bf00      	nop
 800fcc8:	2000013c 	.word	0x2000013c

0800fccc <_kill_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d07      	ldr	r5, [pc, #28]	@ (800fcec <_kill_r+0x20>)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	602b      	str	r3, [r5, #0]
 800fcda:	f7f2 fa0f 	bl	80020fc <_kill>
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	d102      	bne.n	800fce8 <_kill_r+0x1c>
 800fce2:	682b      	ldr	r3, [r5, #0]
 800fce4:	b103      	cbz	r3, 800fce8 <_kill_r+0x1c>
 800fce6:	6023      	str	r3, [r4, #0]
 800fce8:	bd38      	pop	{r3, r4, r5, pc}
 800fcea:	bf00      	nop
 800fcec:	20001994 	.word	0x20001994

0800fcf0 <_getpid_r>:
 800fcf0:	f7f2 b9fc 	b.w	80020ec <_getpid>

0800fcf4 <_sbrk_r>:
 800fcf4:	b538      	push	{r3, r4, r5, lr}
 800fcf6:	4d06      	ldr	r5, [pc, #24]	@ (800fd10 <_sbrk_r+0x1c>)
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	4608      	mov	r0, r1
 800fcfe:	602b      	str	r3, [r5, #0]
 800fd00:	f7f2 fa18 	bl	8002134 <_sbrk>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <_sbrk_r+0x1a>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	b103      	cbz	r3, 800fd0e <_sbrk_r+0x1a>
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	bd38      	pop	{r3, r4, r5, pc}
 800fd10:	20001994 	.word	0x20001994

0800fd14 <__errno>:
 800fd14:	4b01      	ldr	r3, [pc, #4]	@ (800fd1c <__errno+0x8>)
 800fd16:	6818      	ldr	r0, [r3, #0]
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	2000013c 	.word	0x2000013c

0800fd20 <__libc_init_array>:
 800fd20:	b570      	push	{r4, r5, r6, lr}
 800fd22:	4d0d      	ldr	r5, [pc, #52]	@ (800fd58 <__libc_init_array+0x38>)
 800fd24:	4c0d      	ldr	r4, [pc, #52]	@ (800fd5c <__libc_init_array+0x3c>)
 800fd26:	1b64      	subs	r4, r4, r5
 800fd28:	10a4      	asrs	r4, r4, #2
 800fd2a:	2600      	movs	r6, #0
 800fd2c:	42a6      	cmp	r6, r4
 800fd2e:	d109      	bne.n	800fd44 <__libc_init_array+0x24>
 800fd30:	4d0b      	ldr	r5, [pc, #44]	@ (800fd60 <__libc_init_array+0x40>)
 800fd32:	4c0c      	ldr	r4, [pc, #48]	@ (800fd64 <__libc_init_array+0x44>)
 800fd34:	f000 fba8 	bl	8010488 <_init>
 800fd38:	1b64      	subs	r4, r4, r5
 800fd3a:	10a4      	asrs	r4, r4, #2
 800fd3c:	2600      	movs	r6, #0
 800fd3e:	42a6      	cmp	r6, r4
 800fd40:	d105      	bne.n	800fd4e <__libc_init_array+0x2e>
 800fd42:	bd70      	pop	{r4, r5, r6, pc}
 800fd44:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd48:	4798      	blx	r3
 800fd4a:	3601      	adds	r6, #1
 800fd4c:	e7ee      	b.n	800fd2c <__libc_init_array+0xc>
 800fd4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd52:	4798      	blx	r3
 800fd54:	3601      	adds	r6, #1
 800fd56:	e7f2      	b.n	800fd3e <__libc_init_array+0x1e>
 800fd58:	08018238 	.word	0x08018238
 800fd5c:	08018238 	.word	0x08018238
 800fd60:	08018238 	.word	0x08018238
 800fd64:	08018244 	.word	0x08018244

0800fd68 <__retarget_lock_acquire_recursive>:
 800fd68:	4770      	bx	lr

0800fd6a <__retarget_lock_release_recursive>:
 800fd6a:	4770      	bx	lr

0800fd6c <memcpy>:
 800fd6c:	440a      	add	r2, r1
 800fd6e:	4291      	cmp	r1, r2
 800fd70:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd74:	d100      	bne.n	800fd78 <memcpy+0xc>
 800fd76:	4770      	bx	lr
 800fd78:	b510      	push	{r4, lr}
 800fd7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd82:	4291      	cmp	r1, r2
 800fd84:	d1f9      	bne.n	800fd7a <memcpy+0xe>
 800fd86:	bd10      	pop	{r4, pc}

0800fd88 <_free_r>:
 800fd88:	b538      	push	{r3, r4, r5, lr}
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	2900      	cmp	r1, #0
 800fd8e:	d041      	beq.n	800fe14 <_free_r+0x8c>
 800fd90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd94:	1f0c      	subs	r4, r1, #4
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	bfb8      	it	lt
 800fd9a:	18e4      	addlt	r4, r4, r3
 800fd9c:	f7ff feb0 	bl	800fb00 <__malloc_lock>
 800fda0:	4a1d      	ldr	r2, [pc, #116]	@ (800fe18 <_free_r+0x90>)
 800fda2:	6813      	ldr	r3, [r2, #0]
 800fda4:	b933      	cbnz	r3, 800fdb4 <_free_r+0x2c>
 800fda6:	6063      	str	r3, [r4, #4]
 800fda8:	6014      	str	r4, [r2, #0]
 800fdaa:	4628      	mov	r0, r5
 800fdac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdb0:	f7ff beac 	b.w	800fb0c <__malloc_unlock>
 800fdb4:	42a3      	cmp	r3, r4
 800fdb6:	d908      	bls.n	800fdca <_free_r+0x42>
 800fdb8:	6820      	ldr	r0, [r4, #0]
 800fdba:	1821      	adds	r1, r4, r0
 800fdbc:	428b      	cmp	r3, r1
 800fdbe:	bf01      	itttt	eq
 800fdc0:	6819      	ldreq	r1, [r3, #0]
 800fdc2:	685b      	ldreq	r3, [r3, #4]
 800fdc4:	1809      	addeq	r1, r1, r0
 800fdc6:	6021      	streq	r1, [r4, #0]
 800fdc8:	e7ed      	b.n	800fda6 <_free_r+0x1e>
 800fdca:	461a      	mov	r2, r3
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	b10b      	cbz	r3, 800fdd4 <_free_r+0x4c>
 800fdd0:	42a3      	cmp	r3, r4
 800fdd2:	d9fa      	bls.n	800fdca <_free_r+0x42>
 800fdd4:	6811      	ldr	r1, [r2, #0]
 800fdd6:	1850      	adds	r0, r2, r1
 800fdd8:	42a0      	cmp	r0, r4
 800fdda:	d10b      	bne.n	800fdf4 <_free_r+0x6c>
 800fddc:	6820      	ldr	r0, [r4, #0]
 800fdde:	4401      	add	r1, r0
 800fde0:	1850      	adds	r0, r2, r1
 800fde2:	4283      	cmp	r3, r0
 800fde4:	6011      	str	r1, [r2, #0]
 800fde6:	d1e0      	bne.n	800fdaa <_free_r+0x22>
 800fde8:	6818      	ldr	r0, [r3, #0]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	6053      	str	r3, [r2, #4]
 800fdee:	4408      	add	r0, r1
 800fdf0:	6010      	str	r0, [r2, #0]
 800fdf2:	e7da      	b.n	800fdaa <_free_r+0x22>
 800fdf4:	d902      	bls.n	800fdfc <_free_r+0x74>
 800fdf6:	230c      	movs	r3, #12
 800fdf8:	602b      	str	r3, [r5, #0]
 800fdfa:	e7d6      	b.n	800fdaa <_free_r+0x22>
 800fdfc:	6820      	ldr	r0, [r4, #0]
 800fdfe:	1821      	adds	r1, r4, r0
 800fe00:	428b      	cmp	r3, r1
 800fe02:	bf04      	itt	eq
 800fe04:	6819      	ldreq	r1, [r3, #0]
 800fe06:	685b      	ldreq	r3, [r3, #4]
 800fe08:	6063      	str	r3, [r4, #4]
 800fe0a:	bf04      	itt	eq
 800fe0c:	1809      	addeq	r1, r1, r0
 800fe0e:	6021      	streq	r1, [r4, #0]
 800fe10:	6054      	str	r4, [r2, #4]
 800fe12:	e7ca      	b.n	800fdaa <_free_r+0x22>
 800fe14:	bd38      	pop	{r3, r4, r5, pc}
 800fe16:	bf00      	nop
 800fe18:	20001858 	.word	0x20001858

0800fe1c <__ssputs_r>:
 800fe1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe20:	688e      	ldr	r6, [r1, #8]
 800fe22:	461f      	mov	r7, r3
 800fe24:	42be      	cmp	r6, r7
 800fe26:	680b      	ldr	r3, [r1, #0]
 800fe28:	4682      	mov	sl, r0
 800fe2a:	460c      	mov	r4, r1
 800fe2c:	4690      	mov	r8, r2
 800fe2e:	d82d      	bhi.n	800fe8c <__ssputs_r+0x70>
 800fe30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe38:	d026      	beq.n	800fe88 <__ssputs_r+0x6c>
 800fe3a:	6965      	ldr	r5, [r4, #20]
 800fe3c:	6909      	ldr	r1, [r1, #16]
 800fe3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe42:	eba3 0901 	sub.w	r9, r3, r1
 800fe46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe4a:	1c7b      	adds	r3, r7, #1
 800fe4c:	444b      	add	r3, r9
 800fe4e:	106d      	asrs	r5, r5, #1
 800fe50:	429d      	cmp	r5, r3
 800fe52:	bf38      	it	cc
 800fe54:	461d      	movcc	r5, r3
 800fe56:	0553      	lsls	r3, r2, #21
 800fe58:	d527      	bpl.n	800feaa <__ssputs_r+0x8e>
 800fe5a:	4629      	mov	r1, r5
 800fe5c:	f7ff fdd0 	bl	800fa00 <_malloc_r>
 800fe60:	4606      	mov	r6, r0
 800fe62:	b360      	cbz	r0, 800febe <__ssputs_r+0xa2>
 800fe64:	6921      	ldr	r1, [r4, #16]
 800fe66:	464a      	mov	r2, r9
 800fe68:	f7ff ff80 	bl	800fd6c <memcpy>
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe76:	81a3      	strh	r3, [r4, #12]
 800fe78:	6126      	str	r6, [r4, #16]
 800fe7a:	6165      	str	r5, [r4, #20]
 800fe7c:	444e      	add	r6, r9
 800fe7e:	eba5 0509 	sub.w	r5, r5, r9
 800fe82:	6026      	str	r6, [r4, #0]
 800fe84:	60a5      	str	r5, [r4, #8]
 800fe86:	463e      	mov	r6, r7
 800fe88:	42be      	cmp	r6, r7
 800fe8a:	d900      	bls.n	800fe8e <__ssputs_r+0x72>
 800fe8c:	463e      	mov	r6, r7
 800fe8e:	6820      	ldr	r0, [r4, #0]
 800fe90:	4632      	mov	r2, r6
 800fe92:	4641      	mov	r1, r8
 800fe94:	f000 faa8 	bl	80103e8 <memmove>
 800fe98:	68a3      	ldr	r3, [r4, #8]
 800fe9a:	1b9b      	subs	r3, r3, r6
 800fe9c:	60a3      	str	r3, [r4, #8]
 800fe9e:	6823      	ldr	r3, [r4, #0]
 800fea0:	4433      	add	r3, r6
 800fea2:	6023      	str	r3, [r4, #0]
 800fea4:	2000      	movs	r0, #0
 800fea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feaa:	462a      	mov	r2, r5
 800feac:	f000 fab6 	bl	801041c <_realloc_r>
 800feb0:	4606      	mov	r6, r0
 800feb2:	2800      	cmp	r0, #0
 800feb4:	d1e0      	bne.n	800fe78 <__ssputs_r+0x5c>
 800feb6:	6921      	ldr	r1, [r4, #16]
 800feb8:	4650      	mov	r0, sl
 800feba:	f7ff ff65 	bl	800fd88 <_free_r>
 800febe:	230c      	movs	r3, #12
 800fec0:	f8ca 3000 	str.w	r3, [sl]
 800fec4:	89a3      	ldrh	r3, [r4, #12]
 800fec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800feca:	81a3      	strh	r3, [r4, #12]
 800fecc:	f04f 30ff 	mov.w	r0, #4294967295
 800fed0:	e7e9      	b.n	800fea6 <__ssputs_r+0x8a>
	...

0800fed4 <_svfiprintf_r>:
 800fed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed8:	4698      	mov	r8, r3
 800feda:	898b      	ldrh	r3, [r1, #12]
 800fedc:	061b      	lsls	r3, r3, #24
 800fede:	b09d      	sub	sp, #116	@ 0x74
 800fee0:	4607      	mov	r7, r0
 800fee2:	460d      	mov	r5, r1
 800fee4:	4614      	mov	r4, r2
 800fee6:	d510      	bpl.n	800ff0a <_svfiprintf_r+0x36>
 800fee8:	690b      	ldr	r3, [r1, #16]
 800feea:	b973      	cbnz	r3, 800ff0a <_svfiprintf_r+0x36>
 800feec:	2140      	movs	r1, #64	@ 0x40
 800feee:	f7ff fd87 	bl	800fa00 <_malloc_r>
 800fef2:	6028      	str	r0, [r5, #0]
 800fef4:	6128      	str	r0, [r5, #16]
 800fef6:	b930      	cbnz	r0, 800ff06 <_svfiprintf_r+0x32>
 800fef8:	230c      	movs	r3, #12
 800fefa:	603b      	str	r3, [r7, #0]
 800fefc:	f04f 30ff 	mov.w	r0, #4294967295
 800ff00:	b01d      	add	sp, #116	@ 0x74
 800ff02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff06:	2340      	movs	r3, #64	@ 0x40
 800ff08:	616b      	str	r3, [r5, #20]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff0e:	2320      	movs	r3, #32
 800ff10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff18:	2330      	movs	r3, #48	@ 0x30
 800ff1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80100b8 <_svfiprintf_r+0x1e4>
 800ff1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff22:	f04f 0901 	mov.w	r9, #1
 800ff26:	4623      	mov	r3, r4
 800ff28:	469a      	mov	sl, r3
 800ff2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff2e:	b10a      	cbz	r2, 800ff34 <_svfiprintf_r+0x60>
 800ff30:	2a25      	cmp	r2, #37	@ 0x25
 800ff32:	d1f9      	bne.n	800ff28 <_svfiprintf_r+0x54>
 800ff34:	ebba 0b04 	subs.w	fp, sl, r4
 800ff38:	d00b      	beq.n	800ff52 <_svfiprintf_r+0x7e>
 800ff3a:	465b      	mov	r3, fp
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	4629      	mov	r1, r5
 800ff40:	4638      	mov	r0, r7
 800ff42:	f7ff ff6b 	bl	800fe1c <__ssputs_r>
 800ff46:	3001      	adds	r0, #1
 800ff48:	f000 80a7 	beq.w	801009a <_svfiprintf_r+0x1c6>
 800ff4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff4e:	445a      	add	r2, fp
 800ff50:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff52:	f89a 3000 	ldrb.w	r3, [sl]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f000 809f 	beq.w	801009a <_svfiprintf_r+0x1c6>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff66:	f10a 0a01 	add.w	sl, sl, #1
 800ff6a:	9304      	str	r3, [sp, #16]
 800ff6c:	9307      	str	r3, [sp, #28]
 800ff6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff72:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff74:	4654      	mov	r4, sl
 800ff76:	2205      	movs	r2, #5
 800ff78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff7c:	484e      	ldr	r0, [pc, #312]	@ (80100b8 <_svfiprintf_r+0x1e4>)
 800ff7e:	f7f0 f937 	bl	80001f0 <memchr>
 800ff82:	9a04      	ldr	r2, [sp, #16]
 800ff84:	b9d8      	cbnz	r0, 800ffbe <_svfiprintf_r+0xea>
 800ff86:	06d0      	lsls	r0, r2, #27
 800ff88:	bf44      	itt	mi
 800ff8a:	2320      	movmi	r3, #32
 800ff8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff90:	0711      	lsls	r1, r2, #28
 800ff92:	bf44      	itt	mi
 800ff94:	232b      	movmi	r3, #43	@ 0x2b
 800ff96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffa0:	d015      	beq.n	800ffce <_svfiprintf_r+0xfa>
 800ffa2:	9a07      	ldr	r2, [sp, #28]
 800ffa4:	4654      	mov	r4, sl
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	f04f 0c0a 	mov.w	ip, #10
 800ffac:	4621      	mov	r1, r4
 800ffae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffb2:	3b30      	subs	r3, #48	@ 0x30
 800ffb4:	2b09      	cmp	r3, #9
 800ffb6:	d94b      	bls.n	8010050 <_svfiprintf_r+0x17c>
 800ffb8:	b1b0      	cbz	r0, 800ffe8 <_svfiprintf_r+0x114>
 800ffba:	9207      	str	r2, [sp, #28]
 800ffbc:	e014      	b.n	800ffe8 <_svfiprintf_r+0x114>
 800ffbe:	eba0 0308 	sub.w	r3, r0, r8
 800ffc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	9304      	str	r3, [sp, #16]
 800ffca:	46a2      	mov	sl, r4
 800ffcc:	e7d2      	b.n	800ff74 <_svfiprintf_r+0xa0>
 800ffce:	9b03      	ldr	r3, [sp, #12]
 800ffd0:	1d19      	adds	r1, r3, #4
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	9103      	str	r1, [sp, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	bfbb      	ittet	lt
 800ffda:	425b      	neglt	r3, r3
 800ffdc:	f042 0202 	orrlt.w	r2, r2, #2
 800ffe0:	9307      	strge	r3, [sp, #28]
 800ffe2:	9307      	strlt	r3, [sp, #28]
 800ffe4:	bfb8      	it	lt
 800ffe6:	9204      	strlt	r2, [sp, #16]
 800ffe8:	7823      	ldrb	r3, [r4, #0]
 800ffea:	2b2e      	cmp	r3, #46	@ 0x2e
 800ffec:	d10a      	bne.n	8010004 <_svfiprintf_r+0x130>
 800ffee:	7863      	ldrb	r3, [r4, #1]
 800fff0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fff2:	d132      	bne.n	801005a <_svfiprintf_r+0x186>
 800fff4:	9b03      	ldr	r3, [sp, #12]
 800fff6:	1d1a      	adds	r2, r3, #4
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	9203      	str	r2, [sp, #12]
 800fffc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010000:	3402      	adds	r4, #2
 8010002:	9305      	str	r3, [sp, #20]
 8010004:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80100c8 <_svfiprintf_r+0x1f4>
 8010008:	7821      	ldrb	r1, [r4, #0]
 801000a:	2203      	movs	r2, #3
 801000c:	4650      	mov	r0, sl
 801000e:	f7f0 f8ef 	bl	80001f0 <memchr>
 8010012:	b138      	cbz	r0, 8010024 <_svfiprintf_r+0x150>
 8010014:	9b04      	ldr	r3, [sp, #16]
 8010016:	eba0 000a 	sub.w	r0, r0, sl
 801001a:	2240      	movs	r2, #64	@ 0x40
 801001c:	4082      	lsls	r2, r0
 801001e:	4313      	orrs	r3, r2
 8010020:	3401      	adds	r4, #1
 8010022:	9304      	str	r3, [sp, #16]
 8010024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010028:	4824      	ldr	r0, [pc, #144]	@ (80100bc <_svfiprintf_r+0x1e8>)
 801002a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801002e:	2206      	movs	r2, #6
 8010030:	f7f0 f8de 	bl	80001f0 <memchr>
 8010034:	2800      	cmp	r0, #0
 8010036:	d036      	beq.n	80100a6 <_svfiprintf_r+0x1d2>
 8010038:	4b21      	ldr	r3, [pc, #132]	@ (80100c0 <_svfiprintf_r+0x1ec>)
 801003a:	bb1b      	cbnz	r3, 8010084 <_svfiprintf_r+0x1b0>
 801003c:	9b03      	ldr	r3, [sp, #12]
 801003e:	3307      	adds	r3, #7
 8010040:	f023 0307 	bic.w	r3, r3, #7
 8010044:	3308      	adds	r3, #8
 8010046:	9303      	str	r3, [sp, #12]
 8010048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801004a:	4433      	add	r3, r6
 801004c:	9309      	str	r3, [sp, #36]	@ 0x24
 801004e:	e76a      	b.n	800ff26 <_svfiprintf_r+0x52>
 8010050:	fb0c 3202 	mla	r2, ip, r2, r3
 8010054:	460c      	mov	r4, r1
 8010056:	2001      	movs	r0, #1
 8010058:	e7a8      	b.n	800ffac <_svfiprintf_r+0xd8>
 801005a:	2300      	movs	r3, #0
 801005c:	3401      	adds	r4, #1
 801005e:	9305      	str	r3, [sp, #20]
 8010060:	4619      	mov	r1, r3
 8010062:	f04f 0c0a 	mov.w	ip, #10
 8010066:	4620      	mov	r0, r4
 8010068:	f810 2b01 	ldrb.w	r2, [r0], #1
 801006c:	3a30      	subs	r2, #48	@ 0x30
 801006e:	2a09      	cmp	r2, #9
 8010070:	d903      	bls.n	801007a <_svfiprintf_r+0x1a6>
 8010072:	2b00      	cmp	r3, #0
 8010074:	d0c6      	beq.n	8010004 <_svfiprintf_r+0x130>
 8010076:	9105      	str	r1, [sp, #20]
 8010078:	e7c4      	b.n	8010004 <_svfiprintf_r+0x130>
 801007a:	fb0c 2101 	mla	r1, ip, r1, r2
 801007e:	4604      	mov	r4, r0
 8010080:	2301      	movs	r3, #1
 8010082:	e7f0      	b.n	8010066 <_svfiprintf_r+0x192>
 8010084:	ab03      	add	r3, sp, #12
 8010086:	9300      	str	r3, [sp, #0]
 8010088:	462a      	mov	r2, r5
 801008a:	4b0e      	ldr	r3, [pc, #56]	@ (80100c4 <_svfiprintf_r+0x1f0>)
 801008c:	a904      	add	r1, sp, #16
 801008e:	4638      	mov	r0, r7
 8010090:	f3af 8000 	nop.w
 8010094:	1c42      	adds	r2, r0, #1
 8010096:	4606      	mov	r6, r0
 8010098:	d1d6      	bne.n	8010048 <_svfiprintf_r+0x174>
 801009a:	89ab      	ldrh	r3, [r5, #12]
 801009c:	065b      	lsls	r3, r3, #25
 801009e:	f53f af2d 	bmi.w	800fefc <_svfiprintf_r+0x28>
 80100a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100a4:	e72c      	b.n	800ff00 <_svfiprintf_r+0x2c>
 80100a6:	ab03      	add	r3, sp, #12
 80100a8:	9300      	str	r3, [sp, #0]
 80100aa:	462a      	mov	r2, r5
 80100ac:	4b05      	ldr	r3, [pc, #20]	@ (80100c4 <_svfiprintf_r+0x1f0>)
 80100ae:	a904      	add	r1, sp, #16
 80100b0:	4638      	mov	r0, r7
 80100b2:	f000 f879 	bl	80101a8 <_printf_i>
 80100b6:	e7ed      	b.n	8010094 <_svfiprintf_r+0x1c0>
 80100b8:	080181fd 	.word	0x080181fd
 80100bc:	08018207 	.word	0x08018207
 80100c0:	00000000 	.word	0x00000000
 80100c4:	0800fe1d 	.word	0x0800fe1d
 80100c8:	08018203 	.word	0x08018203

080100cc <_printf_common>:
 80100cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100d0:	4616      	mov	r6, r2
 80100d2:	4698      	mov	r8, r3
 80100d4:	688a      	ldr	r2, [r1, #8]
 80100d6:	690b      	ldr	r3, [r1, #16]
 80100d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80100dc:	4293      	cmp	r3, r2
 80100de:	bfb8      	it	lt
 80100e0:	4613      	movlt	r3, r2
 80100e2:	6033      	str	r3, [r6, #0]
 80100e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80100e8:	4607      	mov	r7, r0
 80100ea:	460c      	mov	r4, r1
 80100ec:	b10a      	cbz	r2, 80100f2 <_printf_common+0x26>
 80100ee:	3301      	adds	r3, #1
 80100f0:	6033      	str	r3, [r6, #0]
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	0699      	lsls	r1, r3, #26
 80100f6:	bf42      	ittt	mi
 80100f8:	6833      	ldrmi	r3, [r6, #0]
 80100fa:	3302      	addmi	r3, #2
 80100fc:	6033      	strmi	r3, [r6, #0]
 80100fe:	6825      	ldr	r5, [r4, #0]
 8010100:	f015 0506 	ands.w	r5, r5, #6
 8010104:	d106      	bne.n	8010114 <_printf_common+0x48>
 8010106:	f104 0a19 	add.w	sl, r4, #25
 801010a:	68e3      	ldr	r3, [r4, #12]
 801010c:	6832      	ldr	r2, [r6, #0]
 801010e:	1a9b      	subs	r3, r3, r2
 8010110:	42ab      	cmp	r3, r5
 8010112:	dc26      	bgt.n	8010162 <_printf_common+0x96>
 8010114:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010118:	6822      	ldr	r2, [r4, #0]
 801011a:	3b00      	subs	r3, #0
 801011c:	bf18      	it	ne
 801011e:	2301      	movne	r3, #1
 8010120:	0692      	lsls	r2, r2, #26
 8010122:	d42b      	bmi.n	801017c <_printf_common+0xb0>
 8010124:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010128:	4641      	mov	r1, r8
 801012a:	4638      	mov	r0, r7
 801012c:	47c8      	blx	r9
 801012e:	3001      	adds	r0, #1
 8010130:	d01e      	beq.n	8010170 <_printf_common+0xa4>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	6922      	ldr	r2, [r4, #16]
 8010136:	f003 0306 	and.w	r3, r3, #6
 801013a:	2b04      	cmp	r3, #4
 801013c:	bf02      	ittt	eq
 801013e:	68e5      	ldreq	r5, [r4, #12]
 8010140:	6833      	ldreq	r3, [r6, #0]
 8010142:	1aed      	subeq	r5, r5, r3
 8010144:	68a3      	ldr	r3, [r4, #8]
 8010146:	bf0c      	ite	eq
 8010148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801014c:	2500      	movne	r5, #0
 801014e:	4293      	cmp	r3, r2
 8010150:	bfc4      	itt	gt
 8010152:	1a9b      	subgt	r3, r3, r2
 8010154:	18ed      	addgt	r5, r5, r3
 8010156:	2600      	movs	r6, #0
 8010158:	341a      	adds	r4, #26
 801015a:	42b5      	cmp	r5, r6
 801015c:	d11a      	bne.n	8010194 <_printf_common+0xc8>
 801015e:	2000      	movs	r0, #0
 8010160:	e008      	b.n	8010174 <_printf_common+0xa8>
 8010162:	2301      	movs	r3, #1
 8010164:	4652      	mov	r2, sl
 8010166:	4641      	mov	r1, r8
 8010168:	4638      	mov	r0, r7
 801016a:	47c8      	blx	r9
 801016c:	3001      	adds	r0, #1
 801016e:	d103      	bne.n	8010178 <_printf_common+0xac>
 8010170:	f04f 30ff 	mov.w	r0, #4294967295
 8010174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010178:	3501      	adds	r5, #1
 801017a:	e7c6      	b.n	801010a <_printf_common+0x3e>
 801017c:	18e1      	adds	r1, r4, r3
 801017e:	1c5a      	adds	r2, r3, #1
 8010180:	2030      	movs	r0, #48	@ 0x30
 8010182:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010186:	4422      	add	r2, r4
 8010188:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801018c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010190:	3302      	adds	r3, #2
 8010192:	e7c7      	b.n	8010124 <_printf_common+0x58>
 8010194:	2301      	movs	r3, #1
 8010196:	4622      	mov	r2, r4
 8010198:	4641      	mov	r1, r8
 801019a:	4638      	mov	r0, r7
 801019c:	47c8      	blx	r9
 801019e:	3001      	adds	r0, #1
 80101a0:	d0e6      	beq.n	8010170 <_printf_common+0xa4>
 80101a2:	3601      	adds	r6, #1
 80101a4:	e7d9      	b.n	801015a <_printf_common+0x8e>
	...

080101a8 <_printf_i>:
 80101a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101ac:	7e0f      	ldrb	r7, [r1, #24]
 80101ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80101b0:	2f78      	cmp	r7, #120	@ 0x78
 80101b2:	4691      	mov	r9, r2
 80101b4:	4680      	mov	r8, r0
 80101b6:	460c      	mov	r4, r1
 80101b8:	469a      	mov	sl, r3
 80101ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80101be:	d807      	bhi.n	80101d0 <_printf_i+0x28>
 80101c0:	2f62      	cmp	r7, #98	@ 0x62
 80101c2:	d80a      	bhi.n	80101da <_printf_i+0x32>
 80101c4:	2f00      	cmp	r7, #0
 80101c6:	f000 80d2 	beq.w	801036e <_printf_i+0x1c6>
 80101ca:	2f58      	cmp	r7, #88	@ 0x58
 80101cc:	f000 80b9 	beq.w	8010342 <_printf_i+0x19a>
 80101d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80101d8:	e03a      	b.n	8010250 <_printf_i+0xa8>
 80101da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80101de:	2b15      	cmp	r3, #21
 80101e0:	d8f6      	bhi.n	80101d0 <_printf_i+0x28>
 80101e2:	a101      	add	r1, pc, #4	@ (adr r1, 80101e8 <_printf_i+0x40>)
 80101e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101e8:	08010241 	.word	0x08010241
 80101ec:	08010255 	.word	0x08010255
 80101f0:	080101d1 	.word	0x080101d1
 80101f4:	080101d1 	.word	0x080101d1
 80101f8:	080101d1 	.word	0x080101d1
 80101fc:	080101d1 	.word	0x080101d1
 8010200:	08010255 	.word	0x08010255
 8010204:	080101d1 	.word	0x080101d1
 8010208:	080101d1 	.word	0x080101d1
 801020c:	080101d1 	.word	0x080101d1
 8010210:	080101d1 	.word	0x080101d1
 8010214:	08010355 	.word	0x08010355
 8010218:	0801027f 	.word	0x0801027f
 801021c:	0801030f 	.word	0x0801030f
 8010220:	080101d1 	.word	0x080101d1
 8010224:	080101d1 	.word	0x080101d1
 8010228:	08010377 	.word	0x08010377
 801022c:	080101d1 	.word	0x080101d1
 8010230:	0801027f 	.word	0x0801027f
 8010234:	080101d1 	.word	0x080101d1
 8010238:	080101d1 	.word	0x080101d1
 801023c:	08010317 	.word	0x08010317
 8010240:	6833      	ldr	r3, [r6, #0]
 8010242:	1d1a      	adds	r2, r3, #4
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	6032      	str	r2, [r6, #0]
 8010248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801024c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010250:	2301      	movs	r3, #1
 8010252:	e09d      	b.n	8010390 <_printf_i+0x1e8>
 8010254:	6833      	ldr	r3, [r6, #0]
 8010256:	6820      	ldr	r0, [r4, #0]
 8010258:	1d19      	adds	r1, r3, #4
 801025a:	6031      	str	r1, [r6, #0]
 801025c:	0606      	lsls	r6, r0, #24
 801025e:	d501      	bpl.n	8010264 <_printf_i+0xbc>
 8010260:	681d      	ldr	r5, [r3, #0]
 8010262:	e003      	b.n	801026c <_printf_i+0xc4>
 8010264:	0645      	lsls	r5, r0, #25
 8010266:	d5fb      	bpl.n	8010260 <_printf_i+0xb8>
 8010268:	f9b3 5000 	ldrsh.w	r5, [r3]
 801026c:	2d00      	cmp	r5, #0
 801026e:	da03      	bge.n	8010278 <_printf_i+0xd0>
 8010270:	232d      	movs	r3, #45	@ 0x2d
 8010272:	426d      	negs	r5, r5
 8010274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010278:	4859      	ldr	r0, [pc, #356]	@ (80103e0 <_printf_i+0x238>)
 801027a:	230a      	movs	r3, #10
 801027c:	e011      	b.n	80102a2 <_printf_i+0xfa>
 801027e:	6821      	ldr	r1, [r4, #0]
 8010280:	6833      	ldr	r3, [r6, #0]
 8010282:	0608      	lsls	r0, r1, #24
 8010284:	f853 5b04 	ldr.w	r5, [r3], #4
 8010288:	d402      	bmi.n	8010290 <_printf_i+0xe8>
 801028a:	0649      	lsls	r1, r1, #25
 801028c:	bf48      	it	mi
 801028e:	b2ad      	uxthmi	r5, r5
 8010290:	2f6f      	cmp	r7, #111	@ 0x6f
 8010292:	4853      	ldr	r0, [pc, #332]	@ (80103e0 <_printf_i+0x238>)
 8010294:	6033      	str	r3, [r6, #0]
 8010296:	bf14      	ite	ne
 8010298:	230a      	movne	r3, #10
 801029a:	2308      	moveq	r3, #8
 801029c:	2100      	movs	r1, #0
 801029e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80102a2:	6866      	ldr	r6, [r4, #4]
 80102a4:	60a6      	str	r6, [r4, #8]
 80102a6:	2e00      	cmp	r6, #0
 80102a8:	bfa2      	ittt	ge
 80102aa:	6821      	ldrge	r1, [r4, #0]
 80102ac:	f021 0104 	bicge.w	r1, r1, #4
 80102b0:	6021      	strge	r1, [r4, #0]
 80102b2:	b90d      	cbnz	r5, 80102b8 <_printf_i+0x110>
 80102b4:	2e00      	cmp	r6, #0
 80102b6:	d04b      	beq.n	8010350 <_printf_i+0x1a8>
 80102b8:	4616      	mov	r6, r2
 80102ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80102be:	fb03 5711 	mls	r7, r3, r1, r5
 80102c2:	5dc7      	ldrb	r7, [r0, r7]
 80102c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102c8:	462f      	mov	r7, r5
 80102ca:	42bb      	cmp	r3, r7
 80102cc:	460d      	mov	r5, r1
 80102ce:	d9f4      	bls.n	80102ba <_printf_i+0x112>
 80102d0:	2b08      	cmp	r3, #8
 80102d2:	d10b      	bne.n	80102ec <_printf_i+0x144>
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	07df      	lsls	r7, r3, #31
 80102d8:	d508      	bpl.n	80102ec <_printf_i+0x144>
 80102da:	6923      	ldr	r3, [r4, #16]
 80102dc:	6861      	ldr	r1, [r4, #4]
 80102de:	4299      	cmp	r1, r3
 80102e0:	bfde      	ittt	le
 80102e2:	2330      	movle	r3, #48	@ 0x30
 80102e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102ec:	1b92      	subs	r2, r2, r6
 80102ee:	6122      	str	r2, [r4, #16]
 80102f0:	f8cd a000 	str.w	sl, [sp]
 80102f4:	464b      	mov	r3, r9
 80102f6:	aa03      	add	r2, sp, #12
 80102f8:	4621      	mov	r1, r4
 80102fa:	4640      	mov	r0, r8
 80102fc:	f7ff fee6 	bl	80100cc <_printf_common>
 8010300:	3001      	adds	r0, #1
 8010302:	d14a      	bne.n	801039a <_printf_i+0x1f2>
 8010304:	f04f 30ff 	mov.w	r0, #4294967295
 8010308:	b004      	add	sp, #16
 801030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801030e:	6823      	ldr	r3, [r4, #0]
 8010310:	f043 0320 	orr.w	r3, r3, #32
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	4833      	ldr	r0, [pc, #204]	@ (80103e4 <_printf_i+0x23c>)
 8010318:	2778      	movs	r7, #120	@ 0x78
 801031a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801031e:	6823      	ldr	r3, [r4, #0]
 8010320:	6831      	ldr	r1, [r6, #0]
 8010322:	061f      	lsls	r7, r3, #24
 8010324:	f851 5b04 	ldr.w	r5, [r1], #4
 8010328:	d402      	bmi.n	8010330 <_printf_i+0x188>
 801032a:	065f      	lsls	r7, r3, #25
 801032c:	bf48      	it	mi
 801032e:	b2ad      	uxthmi	r5, r5
 8010330:	6031      	str	r1, [r6, #0]
 8010332:	07d9      	lsls	r1, r3, #31
 8010334:	bf44      	itt	mi
 8010336:	f043 0320 	orrmi.w	r3, r3, #32
 801033a:	6023      	strmi	r3, [r4, #0]
 801033c:	b11d      	cbz	r5, 8010346 <_printf_i+0x19e>
 801033e:	2310      	movs	r3, #16
 8010340:	e7ac      	b.n	801029c <_printf_i+0xf4>
 8010342:	4827      	ldr	r0, [pc, #156]	@ (80103e0 <_printf_i+0x238>)
 8010344:	e7e9      	b.n	801031a <_printf_i+0x172>
 8010346:	6823      	ldr	r3, [r4, #0]
 8010348:	f023 0320 	bic.w	r3, r3, #32
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	e7f6      	b.n	801033e <_printf_i+0x196>
 8010350:	4616      	mov	r6, r2
 8010352:	e7bd      	b.n	80102d0 <_printf_i+0x128>
 8010354:	6833      	ldr	r3, [r6, #0]
 8010356:	6825      	ldr	r5, [r4, #0]
 8010358:	6961      	ldr	r1, [r4, #20]
 801035a:	1d18      	adds	r0, r3, #4
 801035c:	6030      	str	r0, [r6, #0]
 801035e:	062e      	lsls	r6, r5, #24
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	d501      	bpl.n	8010368 <_printf_i+0x1c0>
 8010364:	6019      	str	r1, [r3, #0]
 8010366:	e002      	b.n	801036e <_printf_i+0x1c6>
 8010368:	0668      	lsls	r0, r5, #25
 801036a:	d5fb      	bpl.n	8010364 <_printf_i+0x1bc>
 801036c:	8019      	strh	r1, [r3, #0]
 801036e:	2300      	movs	r3, #0
 8010370:	6123      	str	r3, [r4, #16]
 8010372:	4616      	mov	r6, r2
 8010374:	e7bc      	b.n	80102f0 <_printf_i+0x148>
 8010376:	6833      	ldr	r3, [r6, #0]
 8010378:	1d1a      	adds	r2, r3, #4
 801037a:	6032      	str	r2, [r6, #0]
 801037c:	681e      	ldr	r6, [r3, #0]
 801037e:	6862      	ldr	r2, [r4, #4]
 8010380:	2100      	movs	r1, #0
 8010382:	4630      	mov	r0, r6
 8010384:	f7ef ff34 	bl	80001f0 <memchr>
 8010388:	b108      	cbz	r0, 801038e <_printf_i+0x1e6>
 801038a:	1b80      	subs	r0, r0, r6
 801038c:	6060      	str	r0, [r4, #4]
 801038e:	6863      	ldr	r3, [r4, #4]
 8010390:	6123      	str	r3, [r4, #16]
 8010392:	2300      	movs	r3, #0
 8010394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010398:	e7aa      	b.n	80102f0 <_printf_i+0x148>
 801039a:	6923      	ldr	r3, [r4, #16]
 801039c:	4632      	mov	r2, r6
 801039e:	4649      	mov	r1, r9
 80103a0:	4640      	mov	r0, r8
 80103a2:	47d0      	blx	sl
 80103a4:	3001      	adds	r0, #1
 80103a6:	d0ad      	beq.n	8010304 <_printf_i+0x15c>
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	079b      	lsls	r3, r3, #30
 80103ac:	d413      	bmi.n	80103d6 <_printf_i+0x22e>
 80103ae:	68e0      	ldr	r0, [r4, #12]
 80103b0:	9b03      	ldr	r3, [sp, #12]
 80103b2:	4298      	cmp	r0, r3
 80103b4:	bfb8      	it	lt
 80103b6:	4618      	movlt	r0, r3
 80103b8:	e7a6      	b.n	8010308 <_printf_i+0x160>
 80103ba:	2301      	movs	r3, #1
 80103bc:	4632      	mov	r2, r6
 80103be:	4649      	mov	r1, r9
 80103c0:	4640      	mov	r0, r8
 80103c2:	47d0      	blx	sl
 80103c4:	3001      	adds	r0, #1
 80103c6:	d09d      	beq.n	8010304 <_printf_i+0x15c>
 80103c8:	3501      	adds	r5, #1
 80103ca:	68e3      	ldr	r3, [r4, #12]
 80103cc:	9903      	ldr	r1, [sp, #12]
 80103ce:	1a5b      	subs	r3, r3, r1
 80103d0:	42ab      	cmp	r3, r5
 80103d2:	dcf2      	bgt.n	80103ba <_printf_i+0x212>
 80103d4:	e7eb      	b.n	80103ae <_printf_i+0x206>
 80103d6:	2500      	movs	r5, #0
 80103d8:	f104 0619 	add.w	r6, r4, #25
 80103dc:	e7f5      	b.n	80103ca <_printf_i+0x222>
 80103de:	bf00      	nop
 80103e0:	0801820e 	.word	0x0801820e
 80103e4:	0801821f 	.word	0x0801821f

080103e8 <memmove>:
 80103e8:	4288      	cmp	r0, r1
 80103ea:	b510      	push	{r4, lr}
 80103ec:	eb01 0402 	add.w	r4, r1, r2
 80103f0:	d902      	bls.n	80103f8 <memmove+0x10>
 80103f2:	4284      	cmp	r4, r0
 80103f4:	4623      	mov	r3, r4
 80103f6:	d807      	bhi.n	8010408 <memmove+0x20>
 80103f8:	1e43      	subs	r3, r0, #1
 80103fa:	42a1      	cmp	r1, r4
 80103fc:	d008      	beq.n	8010410 <memmove+0x28>
 80103fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010406:	e7f8      	b.n	80103fa <memmove+0x12>
 8010408:	4402      	add	r2, r0
 801040a:	4601      	mov	r1, r0
 801040c:	428a      	cmp	r2, r1
 801040e:	d100      	bne.n	8010412 <memmove+0x2a>
 8010410:	bd10      	pop	{r4, pc}
 8010412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801041a:	e7f7      	b.n	801040c <memmove+0x24>

0801041c <_realloc_r>:
 801041c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010420:	4680      	mov	r8, r0
 8010422:	4615      	mov	r5, r2
 8010424:	460c      	mov	r4, r1
 8010426:	b921      	cbnz	r1, 8010432 <_realloc_r+0x16>
 8010428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801042c:	4611      	mov	r1, r2
 801042e:	f7ff bae7 	b.w	800fa00 <_malloc_r>
 8010432:	b92a      	cbnz	r2, 8010440 <_realloc_r+0x24>
 8010434:	f7ff fca8 	bl	800fd88 <_free_r>
 8010438:	2400      	movs	r4, #0
 801043a:	4620      	mov	r0, r4
 801043c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010440:	f000 f81a 	bl	8010478 <_malloc_usable_size_r>
 8010444:	4285      	cmp	r5, r0
 8010446:	4606      	mov	r6, r0
 8010448:	d802      	bhi.n	8010450 <_realloc_r+0x34>
 801044a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801044e:	d8f4      	bhi.n	801043a <_realloc_r+0x1e>
 8010450:	4629      	mov	r1, r5
 8010452:	4640      	mov	r0, r8
 8010454:	f7ff fad4 	bl	800fa00 <_malloc_r>
 8010458:	4607      	mov	r7, r0
 801045a:	2800      	cmp	r0, #0
 801045c:	d0ec      	beq.n	8010438 <_realloc_r+0x1c>
 801045e:	42b5      	cmp	r5, r6
 8010460:	462a      	mov	r2, r5
 8010462:	4621      	mov	r1, r4
 8010464:	bf28      	it	cs
 8010466:	4632      	movcs	r2, r6
 8010468:	f7ff fc80 	bl	800fd6c <memcpy>
 801046c:	4621      	mov	r1, r4
 801046e:	4640      	mov	r0, r8
 8010470:	f7ff fc8a 	bl	800fd88 <_free_r>
 8010474:	463c      	mov	r4, r7
 8010476:	e7e0      	b.n	801043a <_realloc_r+0x1e>

08010478 <_malloc_usable_size_r>:
 8010478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801047c:	1f18      	subs	r0, r3, #4
 801047e:	2b00      	cmp	r3, #0
 8010480:	bfbc      	itt	lt
 8010482:	580b      	ldrlt	r3, [r1, r0]
 8010484:	18c0      	addlt	r0, r0, r3
 8010486:	4770      	bx	lr

08010488 <_init>:
 8010488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801048a:	bf00      	nop
 801048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801048e:	bc08      	pop	{r3}
 8010490:	469e      	mov	lr, r3
 8010492:	4770      	bx	lr

08010494 <_fini>:
 8010494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010496:	bf00      	nop
 8010498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801049a:	bc08      	pop	{r3}
 801049c:	469e      	mov	lr, r3
 801049e:	4770      	bx	lr
