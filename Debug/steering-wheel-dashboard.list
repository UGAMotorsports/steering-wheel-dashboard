
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007d8c  08010470  08010470  00011470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181fc  080181fc  0001a18c  2**0
                  CONTENTS
  4 .ARM          00000008  080181fc  080181fc  000191fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018204  08018204  0001a18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018204  08018204  00019204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018210  08018210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08018214  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000180c  20000190  080183a0  0001a190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000199c  080183a0  0001a99c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e30  00000000  00000000  0001a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fec  00000000  00000000  0003dfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00043fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001687  00000000  00000000  00045d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020552  00000000  00000000  00047407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027760  00000000  00000000  00067959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac10  00000000  00000000  0008f0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129cc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008160  00000000  00000000  00129d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00131e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010458 	.word	0x08010458

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	08010458 	.word	0x08010458

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200b      	movs	r0, #11
 80005c4:	f004 fb8b 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f004 fba4 	bl	8004d16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	203b      	movs	r0, #59	@ 0x3b
 80005d4:	f004 fb83 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005d8:	203b      	movs	r0, #59	@ 0x3b
 80005da:	f004 fb9c 	bl	8004d16 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SELECT+0x18>)
 80005f6:	f005 f8bf 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f004 fa70 	bl	8004ae0 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400

08000608 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <DESELECT+0x18>)
 8000612:	f005 f8b1 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f004 fa62 	bl	8004ae0 <HAL_Delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <SPI_TxByte+0x30>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SPI_TxByte+0x30>)
 8000646:	f006 ffd4 	bl	80075f2 <HAL_SPI_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000234 	.word	0x20000234

08000658 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000664:	bf00      	nop
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <SPI_TxBuffer+0x30>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b02      	cmp	r3, #2
 8000672:	d1f8      	bne.n	8000666 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_TxBuffer+0x30>)
 800067c:	f006 ffb9 	bl	80075f2 <HAL_SPI_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000234 	.word	0x20000234

0800068c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000696:	bf00      	nop
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <SPI_RxByte+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d1f8      	bne.n	8000698 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006a6:	1dba      	adds	r2, r7, #6
 80006a8:	1df9      	adds	r1, r7, #7
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <SPI_RxByte+0x34>)
 80006b2:	f007 f9fb 	bl	8007aac <HAL_SPI_TransmitReceive>

	return data;
 80006b6:	79bb      	ldrb	r3, [r7, #6]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000234 	.word	0x20000234

080006c4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006cc:	f7ff ffde 	bl	800068c <SPI_RxByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <SD_ReadyWait+0x30>)
 80006e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ec:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006ee:	f7ff ffcd 	bl	800068c <SPI_RxByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2bff      	cmp	r3, #255	@ 0xff
 80006fa:	d003      	beq.n	8000704 <SD_ReadyWait+0x24>
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <SD_ReadyWait+0x30>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f4      	bne.n	80006ee <SD_ReadyWait+0xe>

	return res;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001ae 	.word	0x200001ae

08000714 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800071a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800071e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000720:	f7ff ff72 	bl	8000608 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e005      	b.n	8000736 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	f7ff ff7a 	bl	8000624 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b09      	cmp	r3, #9
 800073a:	ddf6      	ble.n	800072a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800073c:	f7ff ff56 	bl	80005ec <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000754:	2395      	movs	r3, #149	@ 0x95
 8000756:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000758:	463b      	mov	r3, r7
 800075a:	2106      	movs	r1, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff7b 	bl	8000658 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000762:	e002      	b.n	800076a <SD_PowerOn+0x56>
	{
		cnt--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3b01      	subs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800076a:	f7ff ff8f 	bl	800068c <SPI_RxByte>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d002      	beq.n	800077a <SD_PowerOn+0x66>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_PowerOn+0x50>
	}

	DESELECT();
 800077a:	f7ff ff45 	bl	8000608 <DESELECT>
	SPI_TxByte(0XFF);
 800077e:	20ff      	movs	r0, #255	@ 0xff
 8000780:	f7ff ff50 	bl	8000624 <SPI_TxByte>

	PowerFlag = 1;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SD_PowerOn+0x80>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200001b1 	.word	0x200001b1

08000798 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <SD_PowerOff+0x14>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200001b1 	.word	0x200001b1

080007b0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <SD_CheckPower+0x14>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	200001b1 	.word	0x200001b1

080007c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007d4:	22c8      	movs	r2, #200	@ 0xc8
 80007d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007d8:	f7ff ff58 	bl	800068c <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d103      	bne.n	80007ee <SD_RxDataBlock+0x26>
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f4      	bne.n	80007d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007f2:	d001      	beq.n	80007f8 <SD_RxDataBlock+0x30>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e00f      	b.n	8000818 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff60 	bl	80006c4 <SPI_RxBytePtr>
	} while(len--);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	603a      	str	r2, [r7, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f4      	bne.n	80007f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800080e:	f7ff ff3d 	bl	800068c <SPI_RxByte>
	SPI_RxByte();
 8000812:	f7ff ff3b 	bl	800068c <SPI_RxByte>

	return TRUE;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200001ac 	.word	0x200001ac

08000824 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000834:	f7ff ff54 	bl	80006e0 <SD_ReadyWait>
 8000838:	4603      	mov	r3, r0
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	d001      	beq.n	8000842 <SD_TxDataBlock+0x1e>
 800083e:	2300      	movs	r3, #0
 8000840:	e02f      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff feed 	bl	8000624 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2bfd      	cmp	r3, #253	@ 0xfd
 800084e:	d020      	beq.n	8000892 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff feff 	bl	8000658 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800085a:	f7ff ff17 	bl	800068c <SPI_RxByte>
		SPI_RxByte();
 800085e:	f7ff ff15 	bl	800068c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000862:	e00b      	b.n	800087c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000864:	f7ff ff12 	bl	800068c <SPI_RxByte>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b05      	cmp	r3, #5
 8000874:	d006      	beq.n	8000884 <SD_TxDataBlock+0x60>
			i++;
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	2b40      	cmp	r3, #64	@ 0x40
 8000880:	d9f0      	bls.n	8000864 <SD_TxDataBlock+0x40>
 8000882:	e000      	b.n	8000886 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000884:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000886:	bf00      	nop
 8000888:	f7ff ff00 	bl	800068c <SPI_RxByte>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fa      	beq.n	8000888 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2b05      	cmp	r3, #5
 800089a:	d101      	bne.n	80008a0 <SD_TxDataBlock+0x7c>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008b6:	f7ff ff13 	bl	80006e0 <SD_ReadyWait>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d001      	beq.n	80008c4 <SD_SendCmd+0x1a>
 80008c0:	23ff      	movs	r3, #255	@ 0xff
 80008c2:	e042      	b.n	800094a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff feac 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	0e1b      	lsrs	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fea6 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fea0 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe9a 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe95 	bl	8000624 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d102      	bne.n	8000906 <SD_SendCmd+0x5c>
 8000900:	2395      	movs	r3, #149	@ 0x95
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e007      	b.n	8000916 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b48      	cmp	r3, #72	@ 0x48
 800090a:	d102      	bne.n	8000912 <SD_SendCmd+0x68>
 800090c:	2387      	movs	r3, #135	@ 0x87
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e001      	b.n	8000916 <SD_SendCmd+0x6c>
	else crc = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe83 	bl	8000624 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b4c      	cmp	r3, #76	@ 0x4c
 8000922:	d101      	bne.n	8000928 <SD_SendCmd+0x7e>
 8000924:	f7ff feb2 	bl	800068c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800092c:	f7ff feae 	bl	800068c <SPI_RxByte>
 8000930:	4603      	mov	r3, r0
 8000932:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000934:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da05      	bge.n	8000948 <SD_SendCmd+0x9e>
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3b01      	subs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <SD_SendCmd+0x82>

	return res;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SD_disk_initialize+0x14>
 8000964:	2301      	movs	r3, #1
 8000966:	e0d1      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000968:	4b6a      	ldr	r3, [pc, #424]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SD_disk_initialize+0x2a>
 8000976:	4b67      	ldr	r3, [pc, #412]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	e0c6      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800097e:	f7ff fec9 	bl	8000714 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000982:	f7ff fe33 	bl	80005ec <SELECT>

	/* check disk type */
	type = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800098a:	2100      	movs	r1, #0
 800098c:	2040      	movs	r0, #64	@ 0x40
 800098e:	f7ff ff8c 	bl	80008aa <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	f040 80a1 	bne.w	8000adc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800099a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 800099c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009a2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009a6:	2048      	movs	r0, #72	@ 0x48
 80009a8:	f7ff ff7f 	bl	80008aa <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d155      	bne.n	8000a5e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e00c      	b.n	80009d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009b8:	7bfc      	ldrb	r4, [r7, #15]
 80009ba:	f7ff fe67 	bl	800068c <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	f104 0310 	add.w	r3, r4, #16
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d9ef      	bls.n	80009b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d17e      	bne.n	8000adc <SD_disk_initialize+0x188>
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2baa      	cmp	r3, #170	@ 0xaa
 80009e2:	d17b      	bne.n	8000adc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	2100      	movs	r1, #0
 80009e6:	2077      	movs	r0, #119	@ 0x77
 80009e8:	f7ff ff5f 	bl	80008aa <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d807      	bhi.n	8000a02 <SD_disk_initialize+0xae>
 80009f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009f6:	2069      	movs	r0, #105	@ 0x69
 80009f8:	f7ff ff57 	bl	80008aa <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ec      	bne.n	80009e4 <SD_disk_initialize+0x90>
 8000a0a:	e000      	b.n	8000a0e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d062      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f7ff ff46 	bl	80008aa <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15b      	bne.n	8000adc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e00c      	b.n	8000a44 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	f7ff fe2e 	bl	800068c <SPI_RxByte>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	f104 0310 	add.w	r3, r4, #16
 8000a38:	443b      	add	r3, r7
 8000a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3301      	adds	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9ef      	bls.n	8000a2a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a4a:	7a3b      	ldrb	r3, [r7, #8]
 8000a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x104>
 8000a54:	230c      	movs	r3, #12
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x106>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
 8000a5c:	e03e      	b.n	8000adc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2077      	movs	r0, #119	@ 0x77
 8000a62:	f7ff ff22 	bl	80008aa <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d808      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2069      	movs	r0, #105	@ 0x69
 8000a70:	f7ff ff1b 	bl	80008aa <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d801      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x12c>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d10e      	bne.n	8000aa6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff0d 	bl	80008aa <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d80e      	bhi.n	8000ab4 <SD_disk_initialize+0x160>
 8000a96:	2100      	movs	r1, #0
 8000a98:	2069      	movs	r0, #105	@ 0x69
 8000a9a:	f7ff ff06 	bl	80008aa <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <SD_disk_initialize+0x160>
 8000aa4:	e00c      	b.n	8000ac0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f7ff fefe 	bl	80008aa <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e2      	bne.n	8000a82 <SD_disk_initialize+0x12e>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000abe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <SD_disk_initialize+0x184>
 8000ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000acc:	2050      	movs	r0, #80	@ 0x50
 8000ace:	f7ff feec 	bl	80008aa <SD_SendCmd>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <SD_disk_initialize+0x1c8>)
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ae2:	f7ff fd91 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000ae6:	f7ff fdd1 	bl	800068c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e001      	b.n	8000b06 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b02:	f7ff fe49 	bl	8000798 <SD_PowerOff>
	}

	return Stat;
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	200001ac 	.word	0x200001ac
 8000b1c:	200001b0 	.word	0x200001b0

08000b20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SD_disk_status+0x14>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e002      	b.n	8000b3a <SD_disk_status+0x1a>
	return Stat;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SD_disk_status+0x28>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_read+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_read+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e051      	b.n	8000c10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <SD_disk_read+0xcc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_read+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e048      	b.n	8000c10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SD_disk_read+0xd0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_read+0x44>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b90:	f7ff fd2c 	bl	80005ec <SELECT>

	if (count == 1)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d111      	bne.n	8000bbe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2051      	movs	r0, #81	@ 0x51
 8000b9e:	f7ff fe84 	bl	80008aa <SD_SendCmd>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d129      	bne.n	8000bfc <SD_disk_read+0xb0>
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fe0b 	bl	80007c8 <SD_RxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <SD_disk_read+0xb0>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e01e      	b.n	8000bfc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2052      	movs	r0, #82	@ 0x52
 8000bc2:	f7ff fe72 	bl	80008aa <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d117      	bne.n	8000bfc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fdf9 	bl	80007c8 <SD_RxDataBlock>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <SD_disk_read+0xa6>
				buff += 512;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ed      	bne.n	8000bcc <SD_disk_read+0x80>
 8000bf0:	e000      	b.n	8000bf4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bf2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	204c      	movs	r0, #76	@ 0x4c
 8000bf8:	f7ff fe57 	bl	80008aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bfc:	f7ff fd04 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000c00:	f7ff fd44 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	200001b0 	.word	0x200001b0

08000c20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <SD_disk_write+0x1c>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <SD_disk_write+0x20>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e06b      	b.n	8000d18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c40:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <SD_disk_write+0x100>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SD_disk_write+0x32>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e062      	b.n	8000d18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SD_disk_write+0x100>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SD_disk_write+0x44>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e059      	b.n	8000d18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <SD_disk_write+0x104>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <SD_disk_write+0x56>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c76:	f7ff fcb9 	bl	80005ec <SELECT>

	if (count == 1)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d110      	bne.n	8000ca2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2058      	movs	r0, #88	@ 0x58
 8000c84:	f7ff fe11 	bl	80008aa <SD_SendCmd>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13a      	bne.n	8000d04 <SD_disk_write+0xe4>
 8000c8e:	21fe      	movs	r1, #254	@ 0xfe
 8000c90:	68b8      	ldr	r0, [r7, #8]
 8000c92:	f7ff fdc7 	bl	8000824 <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d033      	beq.n	8000d04 <SD_disk_write+0xe4>
			count = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e030      	b.n	8000d04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <SD_disk_write+0x104>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2077      	movs	r0, #119	@ 0x77
 8000cb2:	f7ff fdfa 	bl	80008aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	2057      	movs	r0, #87	@ 0x57
 8000cba:	f7ff fdf6 	bl	80008aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2059      	movs	r0, #89	@ 0x59
 8000cc2:	f7ff fdf2 	bl	80008aa <SD_SendCmd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ccc:	21fc      	movs	r1, #252	@ 0xfc
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f7ff fda8 	bl	8000824 <SD_TxDataBlock>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <SD_disk_write+0xd0>
				buff += 512;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ce0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1ee      	bne.n	8000ccc <SD_disk_write+0xac>
 8000cee:	e000      	b.n	8000cf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cf2:	21fd      	movs	r1, #253	@ 0xfd
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fd95 	bl	8000824 <SD_TxDataBlock>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d04:	f7ff fc80 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000d08:	f7ff fcc0 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	200001b0 	.word	0x200001b0

08000d28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	@ 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	603a      	str	r2, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	460b      	mov	r3, r1
 8000d36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x1e>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e113      	b.n	8000f6e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d124      	bne.n	8000d9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d012      	beq.n	8000d80 <SD_disk_ioctl+0x58>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	dc1a      	bgt.n	8000d94 <SD_disk_ioctl+0x6c>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <SD_disk_ioctl+0x40>
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d006      	beq.n	8000d74 <SD_disk_ioctl+0x4c>
 8000d66:	e015      	b.n	8000d94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d68:	f7ff fd16 	bl	8000798 <SD_PowerOff>
			res = RES_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d72:	e0fa      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d74:	f7ff fcce 	bl	8000714 <SD_PowerOn>
			res = RES_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d7e:	e0f4      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	1c5c      	adds	r4, r3, #1
 8000d84:	f7ff fd14 	bl	80007b0 <SD_CheckPower>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d92:	e0ea      	b.n	8000f6a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d9a:	e0e6      	b.n	8000f6a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d9c:	4b76      	ldr	r3, [pc, #472]	@ (8000f78 <SD_disk_ioctl+0x250>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SD_disk_ioctl+0x86>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0df      	b.n	8000f6e <SD_disk_ioctl+0x246>

		SELECT();
 8000dae:	f7ff fc1d 	bl	80005ec <SELECT>

		switch (ctrl)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b0d      	cmp	r3, #13
 8000db6:	f200 80c9 	bhi.w	8000f4c <SD_disk_ioctl+0x224>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <SD_disk_ioctl+0x98>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000eb7 	.word	0x08000eb7
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000ea7 	.word	0x08000ea7
 8000dcc:	08000f4d 	.word	0x08000f4d
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f4d 	.word	0x08000f4d
 8000dd8:	08000f4d 	.word	0x08000f4d
 8000ddc:	08000f4d 	.word	0x08000f4d
 8000de0:	08000f4d 	.word	0x08000f4d
 8000de4:	08000f4d 	.word	0x08000f4d
 8000de8:	08000f4d 	.word	0x08000f4d
 8000dec:	08000ec9 	.word	0x08000ec9
 8000df0:	08000eed 	.word	0x08000eed
 8000df4:	08000f11 	.word	0x08000f11
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2049      	movs	r0, #73	@ 0x49
 8000dfc:	f7ff fd55 	bl	80008aa <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80a6 	bne.w	8000f54 <SD_disk_ioctl+0x22c>
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fcda 	bl	80007c8 <SD_RxDataBlock>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 809c 	beq.w	8000f54 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10d      	bne.n	8000e42 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e26:	7d7b      	ldrb	r3, [r7, #21]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	029a      	lsls	r2, r3, #10
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02d      	b.n	8000e9e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e42:	7c7b      	ldrb	r3, [r7, #17]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	09db      	lsrs	r3, r3, #7
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 0306 	and.w	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3302      	adds	r3, #2
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e6a:	7d3b      	ldrb	r3, [r7, #20]
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	7cbb      	ldrb	r3, [r7, #18]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e90:	8bfa      	ldrh	r2, [r7, #30]
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	3b09      	subs	r3, #9
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ea4:	e056      	b.n	8000f54 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb4:	e055      	b.n	8000f62 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000eb6:	f7ff fc13 	bl	80006e0 <SD_ReadyWait>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2bff      	cmp	r3, #255	@ 0xff
 8000ebe:	d14b      	bne.n	8000f58 <SD_disk_ioctl+0x230>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ec6:	e047      	b.n	8000f58 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	@ 0x49
 8000ecc:	f7ff fced 	bl	80008aa <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d142      	bne.n	8000f5c <SD_disk_ioctl+0x234>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc75 	bl	80007c8 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03b      	beq.n	8000f5c <SD_disk_ioctl+0x234>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eea:	e037      	b.n	8000f5c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eec:	2100      	movs	r1, #0
 8000eee:	204a      	movs	r0, #74	@ 0x4a
 8000ef0:	f7ff fcdb 	bl	80008aa <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d132      	bne.n	8000f60 <SD_disk_ioctl+0x238>
 8000efa:	2110      	movs	r1, #16
 8000efc:	6a38      	ldr	r0, [r7, #32]
 8000efe:	f7ff fc63 	bl	80007c8 <SD_RxDataBlock>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02b      	beq.n	8000f60 <SD_disk_ioctl+0x238>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f0e:	e027      	b.n	8000f60 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f10:	2100      	movs	r1, #0
 8000f12:	207a      	movs	r0, #122	@ 0x7a
 8000f14:	f7ff fcc9 	bl	80008aa <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f24:	e00b      	b.n	8000f3e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f26:	6a3c      	ldr	r4, [r7, #32]
 8000f28:	1c63      	adds	r3, r4, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	f7ff fbae 	bl	800068c <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9ef      	bls.n	8000f26 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f52:	e006      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f60:	bf00      	nop
		}

		DESELECT();
 8000f62:	f7ff fb51 	bl	8000608 <DESELECT>
		SPI_RxByte();
 8000f66:	f7ff fb91 	bl	800068c <SPI_RxByte>
	}

	return res;
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	372c      	adds	r7, #44	@ 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b5d      	ldr	r3, [pc, #372]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b56      	ldr	r3, [pc, #344]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a55      	ldr	r2, [pc, #340]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b53      	ldr	r3, [pc, #332]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b4f      	ldr	r3, [pc, #316]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b48      	ldr	r3, [pc, #288]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a47      	ldr	r2, [pc, #284]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b45      	ldr	r3, [pc, #276]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	4841      	ldr	r0, [pc, #260]	@ (8001110 <MX_GPIO_Init+0x194>)
 800100a:	f004 fbb5 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2110      	movs	r1, #16
 8001012:	4840      	ldr	r0, [pc, #256]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001014:	f004 fbb0 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001018:	2200      	movs	r2, #0
 800101a:	213b      	movs	r1, #59	@ 0x3b
 800101c:	483e      	ldr	r0, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800101e:	f004 fbab 	bl	8005778 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 8001022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4835      	ldr	r0, [pc, #212]	@ (8001110 <MX_GPIO_Init+0x194>)
 800103c:	f004 fa18 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 8001040:	2306      	movs	r3, #6
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4830      	ldr	r0, [pc, #192]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001054:	f004 fa0c 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001058:	2310      	movs	r3, #16
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4829      	ldr	r0, [pc, #164]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001070:	f004 f9fe 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001074:	233b      	movs	r3, #59	@ 0x3b
 8001076:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4823      	ldr	r0, [pc, #140]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800108c:	f004 f9f0 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <MX_GPIO_Init+0x19c>)
 80010a8:	f004 f9e2 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010c4:	f004 f9d4 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 80010c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010e0:	f004 f9c6 	bl	8005470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2017      	movs	r0, #23
 80010ea:	f003 fdf8 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ee:	2017      	movs	r0, #23
 80010f0:	f003 fe11 	bl	8004d16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2028      	movs	r0, #40	@ 0x28
 80010fa:	f003 fdf0 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fe:	2028      	movs	r0, #40	@ 0x28
 8001100:	f003 fe09 	bl	8004d16 <HAL_NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	@ 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400

0800111c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static struct can_frame mark;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button1INT_Pin) {
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800112c:	d103      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x1a>
		USB_Println("button 1 was pressed\n");
 800112e:	4816      	ldr	r0, [pc, #88]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001130:	f001 f934 	bl	800239c <USB_Println>
	} else if (GPIO_Pin == button4INT_Pin) {
		USB_Println("button 4 was pressed\n");
	} else {
		USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
	}
}
 8001134:	e023      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x62>
	} else if (GPIO_Pin == button2INT_Pin) {
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800113c:	d103      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x2a>
		USB_Println("button 2 was pressed\n");
 800113e:	4813      	ldr	r0, [pc, #76]	@ (800118c <HAL_GPIO_EXTI_Callback+0x70>)
 8001140:	f001 f92c 	bl	800239c <USB_Println>
}
 8001144:	e01b      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x62>
	} else if (GPIO_Pin == button3INT_Pin ) {
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114c:	d10a      	bne.n	8001164 <HAL_GPIO_EXTI_Callback+0x48>
		USB_Println("button 3 was pressed\n");
 800114e:	4810      	ldr	r0, [pc, #64]	@ (8001190 <HAL_GPIO_EXTI_Callback+0x74>)
 8001150:	f001 f924 	bl	800239c <USB_Println>
		mark.can_id = 601;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x78>)
 8001156:	f240 2259 	movw	r2, #601	@ 0x259
 800115a:	601a      	str	r2, [r3, #0]
		sendMessage(&mark);
 800115c:	480d      	ldr	r0, [pc, #52]	@ (8001194 <HAL_GPIO_EXTI_Callback+0x78>)
 800115e:	f000 fb43 	bl	80017e8 <sendMessage>
}
 8001162:	e00c      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x62>
	} else if (GPIO_Pin == button4INT_Pin) {
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800116a:	d103      	bne.n	8001174 <HAL_GPIO_EXTI_Callback+0x58>
		USB_Println("button 4 was pressed\n");
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <HAL_GPIO_EXTI_Callback+0x7c>)
 800116e:	f001 f915 	bl	800239c <USB_Println>
}
 8001172:	e004      	b.n	800117e <HAL_GPIO_EXTI_Callback+0x62>
		USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4619      	mov	r1, r3
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <HAL_GPIO_EXTI_Callback+0x80>)
 800117a:	f001 f90f 	bl	800239c <USB_Println>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08010470 	.word	0x08010470
 800118c:	08010488 	.word	0x08010488
 8001190:	080104a0 	.word	0x080104a0
 8001194:	200001b8 	.word	0x200001b8
 8001198:	080104b8 	.word	0x080104b8
 800119c:	080104d0 	.word	0x080104d0

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	f5ad 6dee 	sub.w	sp, sp, #1904	@ 0x770
 80011a6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f003 fc28 	bl	80049fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 fa98 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f7ff fee4 	bl	8000f7c <MX_GPIO_Init>
  MX_DMA_Init();
 80011b4:	f7ff f9e4 	bl	8000580 <MX_DMA_Init>
  MX_SPI1_Init();
 80011b8:	f000 fd9a 	bl	8001cf0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011bc:	f00d fe86 	bl	800eecc <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011c0:	f000 fdce 	bl	8001d60 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011c4:	f000 ffe6 	bl	8002194 <MX_TIM4_Init>
  MX_FATFS_Init();
 80011c8:	f009 fcbe 	bl	800ab48 <MX_FATFS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80011cc:	2064      	movs	r0, #100	@ 0x64
 80011ce:	f003 fc87 	bl	8004ae0 <HAL_Delay>

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011d2:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80011d6:	2201      	movs	r2, #1
 80011d8:	49a7      	ldr	r1, [pc, #668]	@ (8001478 <main+0x2d8>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f00d fa32 	bl	800e644 <f_mount>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 375f 	strb.w	r3, [r7, #1887]	@ 0x75f
//	  USB_Println("There was an error: %d\n", fresult);
//  } else {
//	  USB_Println("the sdcard is mounted\n");
//  }

  initializeMCP2515();
 80011e6:	f000 faed 	bl	80017c4 <initializeMCP2515>
  //setFilters();
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 3000, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 80011ea:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80011ee:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 80011f2:	4aa2      	ldr	r2, [pc, #648]	@ (800147c <main+0x2dc>)
 80011f4:	461c      	mov	r4, r3
 80011f6:	4615      	mov	r5, r2
 80011f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10200};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001208:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800120c:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 8001210:	2100      	movs	r1, #0
 8001212:	489b      	ldr	r0, [pc, #620]	@ (8001480 <main+0x2e0>)
 8001214:	f000 fbac 	bl	8001970 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001218:	2300      	movs	r3, #0
 800121a:	9303      	str	r3, [sp, #12]
 800121c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2300      	movs	r3, #0
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2300      	movs	r3, #0
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	4893      	ldr	r0, [pc, #588]	@ (8001480 <main+0x2e0>)
 8001234:	f000 fb20 	bl	8001878 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001238:	2301      	movs	r3, #1
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	2300      	movs	r3, #0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	488b      	ldr	r0, [pc, #556]	@ (8001480 <main+0x2e0>)
 8001254:	f000 fb10 	bl	8001878 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001258:	230e      	movs	r3, #14
 800125a:	9303      	str	r3, [sp, #12]
 800125c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	2300      	movs	r3, #0
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2300      	movs	r3, #0
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	4883      	ldr	r0, [pc, #524]	@ (8001480 <main+0x2e0>)
 8001274:	f000 fb00 	bl	8001878 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001278:	230f      	movs	r3, #15
 800127a:	9303      	str	r3, [sp, #12]
 800127c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	2300      	movs	r3, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	487b      	ldr	r0, [pc, #492]	@ (8001480 <main+0x2e0>)
 8001294:	f000 faf0 	bl	8001878 <setColor>

  resetScreen();
 8001298:	f001 fd96 	bl	8002dc8 <resetScreen>
  initializeScreen();
 800129c:	f001 fdb2 	bl	8002e04 <initializeScreen>
  //dosplashscene();
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80012a0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012a4:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 80012a8:	2100      	movs	r1, #0
 80012aa:	4875      	ldr	r0, [pc, #468]	@ (8001480 <main+0x2e0>)
 80012ac:	f000 fcb8 	bl	8001c20 <startUp>
  HAL_Delay(200);
 80012b0:	20c8      	movs	r0, #200	@ 0xc8
 80012b2:	f003 fc15 	bl	8004ae0 <HAL_Delay>

  char result[20] = "null"; //rpm
 80012b6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80012ba:	f2a3 62e4 	subw	r2, r3, #1764	@ 0x6e4
 80012be:	4971      	ldr	r1, [pc, #452]	@ (8001484 <main+0x2e4>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	c903      	ldmia	r1, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
 80012ca:	1d53      	adds	r3, r2, #5
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	f8c3 200b 	str.w	r2, [r3, #11]
  char result2[20] = "null";//temp
 80012d8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80012dc:	f5a3 62df 	sub.w	r2, r3, #1784	@ 0x6f8
 80012e0:	4968      	ldr	r1, [pc, #416]	@ (8001484 <main+0x2e4>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	c903      	ldmia	r1, {r0, r1}
 80012e6:	6018      	str	r0, [r3, #0]
 80012e8:	3304      	adds	r3, #4
 80012ea:	7019      	strb	r1, [r3, #0]
 80012ec:	1d53      	adds	r3, r2, #5
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	f8c3 200b 	str.w	r2, [r3, #11]
  char result3[20] = "8";//gear
 80012fa:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80012fe:	f2a3 730c 	subw	r3, r3, #1804	@ 0x70c
 8001302:	2238      	movs	r2, #56	@ 0x38
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	3304      	adds	r3, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 8001312:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001316:	f5a3 62e4 	sub.w	r2, r3, #1824	@ 0x720
 800131a:	495a      	ldr	r1, [pc, #360]	@ (8001484 <main+0x2e4>)
 800131c:	4613      	mov	r3, r2
 800131e:	c903      	ldmia	r1, {r0, r1}
 8001320:	6018      	str	r0, [r3, #0]
 8001322:	3304      	adds	r3, #4
 8001324:	7019      	strb	r1, [r3, #0]
 8001326:	1d53      	adds	r3, r2, #5
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	f8c3 200b 	str.w	r2, [r3, #11]
  char result5[20] = "null"; //speed
 8001334:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001338:	f2a3 7234 	subw	r2, r3, #1844	@ 0x734
 800133c:	4951      	ldr	r1, [pc, #324]	@ (8001484 <main+0x2e4>)
 800133e:	4613      	mov	r3, r2
 8001340:	c903      	ldmia	r1, {r0, r1}
 8001342:	6018      	str	r0, [r3, #0]
 8001344:	3304      	adds	r3, #4
 8001346:	7019      	strb	r1, [r3, #0]
 8001348:	1d53      	adds	r3, r2, #5
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	f8c3 200b 	str.w	r2, [r3, #11]
  settempdata(result2);
 8001356:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fae4 	bl	8003928 <settempdata>
  setgeardata(result3);
 8001360:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fb0b 	bl	8003980 <setgeardata>
  setrpmdata(result);
 800136a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800136e:	4618      	mov	r0, r3
 8001370:	f002 faae 	bl	80038d0 <setrpmdata>
  setbattdata(result4);
 8001374:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fb2b 	bl	80039d4 <setbattdata>
  setspeeddata(result5);
 800137e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fb52 	bl	8003a2c <setspeeddata>
  domainscreen();
 8001388:	f002 fb7c 	bl	8003a84 <domainscreen>

  struct can_frame frame;
  uint8_t gear = 8;
 800138c:	2308      	movs	r3, #8
 800138e:	f887 375e 	strb.w	r3, [r7, #1886]	@ 0x75e
  uint8_t isNeutral = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 375d 	strb.w	r3, [r7, #1885]	@ 0x75d
  while (1)
  {
		  int canresult = readMessage(&frame);
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fa33 	bl	8001808 <readMessage>
 80013a2:	f8c7 0758 	str.w	r0, [r7, #1880]	@ 0x758
		  if (canresult == 0) {
 80013a6:	f8d7 3758 	ldr.w	r3, [r7, #1880]	@ 0x758
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f4      	bne.n	8001398 <main+0x1f8>
			  if (frame.can_id == (1520 + 0)) {
 80013ae:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80013b2:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 80013bc:	d12d      	bne.n	800141a <main+0x27a>
				  uint16_t rpm = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 80013be:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80013c2:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80013c6:	7b9b      	ldrb	r3, [r3, #14]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 80013d0:	f5a2 62e9 	sub.w	r2, r2, #1864	@ 0x748
 80013d4:	7bd2      	ldrb	r2, [r2, #15]
 80013d6:	4413      	add	r3, r2
 80013d8:	f8a7 3756 	strh.w	r3, [r7, #1878]	@ 0x756
				  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80013dc:	f8b7 3756 	ldrh.w	r3, [r7, #1878]	@ 0x756
 80013e0:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013e4:	f207 41ec 	addw	r1, r7, #1260	@ 0x4ec
 80013e8:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	460a      	mov	r2, r1
 80013f4:	2100      	movs	r1, #0
 80013f6:	4822      	ldr	r0, [pc, #136]	@ (8001480 <main+0x2e0>)
 80013f8:	f000 fb4a 	bl	8001a90 <UpdateShiftLights>

				  itoa(rpm, (char*)(result), 10);
 80013fc:	f8b7 3756 	ldrh.w	r3, [r7, #1878]	@ 0x756
 8001400:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001404:	220a      	movs	r2, #10
 8001406:	4618      	mov	r0, r3
 8001408:	f00e faad 	bl	800f966 <itoa>
				  setrpmdata(result);
 800140c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fa5d 	bl	80038d0 <setrpmdata>
				  domainscreen();
 8001416:	f002 fb35 	bl	8003a84 <domainscreen>
			  }
			  if (frame.can_id == (1520 + 2)) {
 800141a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800141e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f240 52f2 	movw	r2, #1522	@ 0x5f2
 8001428:	4293      	cmp	r3, r2
 800142a:	d152      	bne.n	80014d2 <main+0x332>
				  uint16_t temp = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 800142c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001430:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001434:	7b9b      	ldrb	r3, [r3, #14]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b29b      	uxth	r3, r3
 800143a:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 800143e:	f5a2 62e9 	sub.w	r2, r2, #1864	@ 0x748
 8001442:	7bd2      	ldrb	r2, [r2, #15]
 8001444:	4413      	add	r3, r2
 8001446:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  if (temp > 2150) {
 800144a:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 800144e:	f640 0266 	movw	r2, #2150	@ 0x866
 8001452:	4293      	cmp	r3, r2
 8001454:	d918      	bls.n	8001488 <main+0x2e8>
					setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 8001456:	230f      	movs	r3, #15
 8001458:	9303      	str	r3, [sp, #12]
 800145a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	23ff      	movs	r3, #255	@ 0xff
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	4803      	ldr	r0, [pc, #12]	@ (8001480 <main+0x2e0>)
 8001472:	f000 fa01 	bl	8001878 <setColor>
 8001476:	e017      	b.n	80014a8 <main+0x308>
 8001478:	080104f0 	.word	0x080104f0
 800147c:	08010500 	.word	0x08010500
 8001480:	200002f4 	.word	0x200002f4
 8001484:	08010530 	.word	0x08010530
				  } else {
					setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001488:	230f      	movs	r3, #15
 800148a:	9303      	str	r3, [sp, #12]
 800148c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	2300      	movs	r3, #0
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	488a      	ldr	r0, [pc, #552]	@ (80016cc <main+0x52c>)
 80014a4:	f000 f9e8 	bl	8001878 <setColor>
				  }
				  temp /= 10;
 80014a8:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 80014ac:	4a88      	ldr	r2, [pc, #544]	@ (80016d0 <main+0x530>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	08db      	lsrs	r3, r3, #3
 80014b4:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  itoa(temp, result2, 10);
 80014b8:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 80014bc:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80014c0:	220a      	movs	r2, #10
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00e fa4f 	bl	800f966 <itoa>
				  settempdata(result2);
 80014c8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fa2b 	bl	8003928 <settempdata>
			  }
			  if (frame.can_id == 1520 + 33) {
 80014d2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80014d6:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f240 6211 	movw	r2, #1553	@ 0x611
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d117      	bne.n	8001514 <main+0x374>
				  gear = ((uint8_t)frame.data[6]);
 80014e4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80014e8:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80014ec:	7b9b      	ldrb	r3, [r3, #14]
 80014ee:	f887 375e 	strb.w	r3, [r7, #1886]	@ 0x75e
				  if (gear != 0) {
 80014f2:	f897 375e 	ldrb.w	r3, [r7, #1886]	@ 0x75e
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00c      	beq.n	8001514 <main+0x374>
					  //USB_Println("the gear value is %d\n", gear);
					  itoa(gear, result3, 10);
 80014fa:	f897 375e 	ldrb.w	r3, [r7, #1886]	@ 0x75e
 80014fe:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001502:	220a      	movs	r2, #10
 8001504:	4618      	mov	r0, r3
 8001506:	f00e fa2e 	bl	800f966 <itoa>
					  setgeardata(result3);
 800150a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fa36 	bl	8003980 <setgeardata>
				  }
			  }
			  if (frame.can_id == (1520 + 3)) {
 8001514:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001518:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f240 52f3 	movw	r2, #1523	@ 0x5f3
 8001522:	4293      	cmp	r3, r2
 8001524:	d155      	bne.n	80015d2 <main+0x432>
				  uint8_t battvalue = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 8001526:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800152a:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 800152e:	7adb      	ldrb	r3, [r3, #11]
 8001530:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
				  uint8_t batIntPart = battvalue / 10;
 8001534:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 8001538:	4a65      	ldr	r2, [pc, #404]	@ (80016d0 <main+0x530>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	f887 374e 	strb.w	r3, [r7, #1870]	@ 0x74e
				  uint8_t batDecimalPart = battvalue % 10;
 8001544:	f897 274f 	ldrb.w	r2, [r7, #1871]	@ 0x74f
 8001548:	4b61      	ldr	r3, [pc, #388]	@ (80016d0 <main+0x530>)
 800154a:	fba3 1302 	umull	r1, r3, r3, r2
 800154e:	08d9      	lsrs	r1, r3, #3
 8001550:	460b      	mov	r3, r1
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f887 374d 	strb.w	r3, [r7, #1869]	@ 0x74d
				  char batint[10];
				  char batdec[10];
				  itoa(batIntPart, batint, 10);
 800155e:	f897 374e 	ldrb.w	r3, [r7, #1870]	@ 0x74e
 8001562:	f107 010c 	add.w	r1, r7, #12
 8001566:	220a      	movs	r2, #10
 8001568:	4618      	mov	r0, r3
 800156a:	f00e f9fc 	bl	800f966 <itoa>
				  itoa(batDecimalPart, batdec, 10);
 800156e:	f897 374d 	ldrb.w	r3, [r7, #1869]	@ 0x74d
 8001572:	4639      	mov	r1, r7
 8001574:	220a      	movs	r2, #10
 8001576:	4618      	mov	r0, r3
 8001578:	f00e f9f5 	bl	800f966 <itoa>
				  strncpy(result4, "", 20);
 800157c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001580:	2214      	movs	r2, #20
 8001582:	4954      	ldr	r1, [pc, #336]	@ (80016d4 <main+0x534>)
 8001584:	4618      	mov	r0, r3
 8001586:	f00e fb46 	bl	800fc16 <strncpy>
				  strncat(result4, batint, 5);
 800158a:	f107 010c 	add.w	r1, r7, #12
 800158e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001592:	2205      	movs	r2, #5
 8001594:	4618      	mov	r0, r3
 8001596:	f00e fb2b 	bl	800fbf0 <strncat>
				  strncat(result4, ".", 5);
 800159a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fe1e 	bl	80001e0 <strlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ac:	4413      	add	r3, r2
 80015ae:	494a      	ldr	r1, [pc, #296]	@ (80016d8 <main+0x538>)
 80015b0:	461a      	mov	r2, r3
 80015b2:	460b      	mov	r3, r1
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	8013      	strh	r3, [r2, #0]
				  strncat(result4, batdec, 1);
 80015b8:	4639      	mov	r1, r7
 80015ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015be:	2201      	movs	r2, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00e fb15 	bl	800fbf0 <strncat>
				  setbattdata(result4);
 80015c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fa02 	bl	80039d4 <setbattdata>
 80015d0:	e6e2      	b.n	8001398 <main+0x1f8>
			  } else if (frame.can_id == 504) {
 80015d2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80015d6:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80015e0:	d143      	bne.n	800166a <main+0x4ca>
				  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 80015e2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80015e6:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80015ea:	7b9b      	ldrb	r3, [r3, #14]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80015f4:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80015f8:	7bdb      	ldrb	r3, [r3, #15]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	f8a7 3750 	strh.w	r3, [r7, #1872]	@ 0x750
				  if (neutrallight < 1024) {
 8001604:	f8b7 3750 	ldrh.w	r3, [r7, #1872]	@ 0x750
 8001608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800160c:	d21c      	bcs.n	8001648 <main+0x4a8>
					  //isNeutral = 1;
					  setColor(&htim4, TIM_CHANNEL_1, 128, 255, 0, ledcolors, ledbytes, 0);
 800160e:	2300      	movs	r3, #0
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2300      	movs	r3, #0
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	23ff      	movs	r3, #255	@ 0xff
 8001624:	2280      	movs	r2, #128	@ 0x80
 8001626:	2100      	movs	r1, #0
 8001628:	4828      	ldr	r0, [pc, #160]	@ (80016cc <main+0x52c>)
 800162a:	f000 f925 	bl	8001878 <setColor>
					  strncpy(result3, "7", 10);
 800162e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001632:	220a      	movs	r2, #10
 8001634:	4929      	ldr	r1, [pc, #164]	@ (80016dc <main+0x53c>)
 8001636:	4618      	mov	r0, r3
 8001638:	f00e faed 	bl	800fc16 <strncpy>
					  setgeardata(result3);
 800163c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001640:	4618      	mov	r0, r3
 8001642:	f002 f99d 	bl	8003980 <setgeardata>
 8001646:	e6a7      	b.n	8001398 <main+0x1f8>
				  } else {
					  //isNeutral = 0;
					  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001648:	2300      	movs	r3, #0
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	2300      	movs	r3, #0
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2300      	movs	r3, #0
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	481a      	ldr	r0, [pc, #104]	@ (80016cc <main+0x52c>)
 8001664:	f000 f908 	bl	8001878 <setColor>
 8001668:	e696      	b.n	8001398 <main+0x1f8>
					  //strncpy(result3, "8", 10);
					  //setgeardata(result3);
				  }
				  //USB_Println("the neutral light value is %d\n", neutrallight);
			  } else if (frame.can_id == 1520 + 42) {
 800166a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800166e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f240 621a 	movw	r2, #1562	@ 0x61a
 8001678:	4293      	cmp	r3, r2
 800167a:	f47f ae8d 	bne.w	8001398 <main+0x1f8>
				  uint16_t speed = (uint16_t)((frame.data[0] << 8) | (frame.data[1]));
 800167e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001682:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001686:	7a1b      	ldrb	r3, [r3, #8]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001690:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001694:	7a5b      	ldrb	r3, [r3, #9]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
 800169c:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  speed /= 10;
 80016a0:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 80016a4:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <main+0x530>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  itoa(speed, (char*) result5, 10);
 80016b0:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 80016b4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80016b8:	220a      	movs	r2, #10
 80016ba:	4618      	mov	r0, r3
 80016bc:	f00e f953 	bl	800f966 <itoa>
				  setspeeddata(result5);
 80016c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 f9b1 	bl	8003a2c <setspeeddata>
  {
 80016ca:	e665      	b.n	8001398 <main+0x1f8>
 80016cc:	200002f4 	.word	0x200002f4
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	080104f4 	.word	0x080104f4
 80016d8:	080104f8 	.word	0x080104f8
 80016dc:	080104fc 	.word	0x080104fc

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	@ 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2230      	movs	r2, #48	@ 0x30
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f00e fa76 	bl	800fbe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <SystemClock_Config+0xd0>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	4a28      	ldr	r2, [pc, #160]	@ (80017b0 <SystemClock_Config+0xd0>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	@ 0x40
 8001714:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <SystemClock_Config+0xd0>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <SystemClock_Config+0xd4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800172c:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <SystemClock_Config+0xd4>)
 800172e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <SystemClock_Config+0xd4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001740:	2301      	movs	r3, #1
 8001742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001754:	2319      	movs	r3, #25
 8001756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001758:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800175c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800175e:	2304      	movs	r3, #4
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001762:	2307      	movs	r3, #7
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	4618      	mov	r0, r3
 800176c:	f005 fa88 	bl	8006c80 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001776:	f000 f81f 	bl	80017b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2102      	movs	r1, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f005 fcea 	bl	8007170 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017a2:	f000 f809 	bl	80017b8 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3750      	adds	r7, #80	@ 0x50
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <Error_Handler+0x8>

080017c4 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	myMCP.reset();
 80017c8:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <initializeMCP2515+0x20>)
 80017ca:	f002 fb11 	bl	8003df0 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80017ce:	2202      	movs	r2, #2
 80017d0:	210e      	movs	r1, #14
 80017d2:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <initializeMCP2515+0x20>)
 80017d4:	f002 fcde 	bl	8004194 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <initializeMCP2515+0x20>)
 80017da:	f002 fc8f 	bl	80040fc <_ZN7MCP251513setNormalModeEv>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200001c8 	.word	0x200001c8

080017e8 <sendMessage>:

int sendMessage(struct can_frame *frame) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	return myMCP.sendMessage(frame);
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4804      	ldr	r0, [pc, #16]	@ (8001804 <sendMessage+0x1c>)
 80017f4:	f002 fff4 	bl	80047e0 <_ZN7MCP251511sendMessageEPK9can_frame>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200001c8 	.word	0x200001c8

08001808 <readMessage>:

int readMessage(struct can_frame *frame) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4804      	ldr	r0, [pc, #16]	@ (8001824 <readMessage+0x1c>)
 8001814:	f003 f89c 	bl	8004950 <_ZN7MCP251511readMessageEP9can_frame>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200001c8 	.word	0x200001c8

08001828 <_Z41__static_initialization_and_destruction_0ii>:
//	myMCP.setFilter(MCP2515::RXF2, false, 1520 + 3);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF3, false, 1520 + 2);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF4, false, 504);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF5, false, 1520 + 42);  // uses MASK1

}
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af02      	add	r7, sp, #8
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d10c      	bne.n	8001852 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800183e:	4293      	cmp	r3, r2
 8001840:	d107      	bne.n	8001852 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 8001842:	2310      	movs	r3, #16
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001848:	220a      	movs	r2, #10
 800184a:	4905      	ldr	r1, [pc, #20]	@ (8001860 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800184e:	f002 fa6f 	bl	8003d30 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40020000 	.word	0x40020000
 8001860:	20000234 	.word	0x20000234
 8001864:	200001c8 	.word	0x200001c8

08001868 <_GLOBAL__sub_I_myMCP>:
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
 800186c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff ffd9 	bl	8001828 <_Z41__static_initialization_and_destruction_0ii>
 8001876:	bd80      	pop	{r7, pc}

08001878 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	4611      	mov	r1, r2
 8001884:	461a      	mov	r2, r3
 8001886:	460b      	mov	r3, r1
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	4613      	mov	r3, r2
 800188c:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 800188e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800189c:	4413      	add	r3, r2
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	3301      	adds	r3, #1
 80018a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a8:	4413      	add	r3, r2
 80018aa:	79ba      	ldrb	r2, [r7, #6]
 80018ac:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	3302      	adds	r3, #2
 80018b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b4:	4413      	add	r3, r2
 80018b6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018ba:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	e02a      	b.n	8001918 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	e021      	b.n	800190c <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	00da      	lsls	r2, r3, #3
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018ec:	4413      	add	r3, r2
 80018ee:	2246      	movs	r2, #70	@ 0x46
 80018f0:	801a      	strh	r2, [r3, #0]
 80018f2:	e008      	b.n	8001906 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	00da      	lsls	r2, r3, #3
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001900:	4413      	add	r3, r2
 8001902:	2223      	movs	r2, #35	@ 0x23
 8001904:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	3301      	adds	r3, #1
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b07      	cmp	r3, #7
 8001910:	ddda      	ble.n	80018c8 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	3302      	adds	r3, #2
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	429a      	cmp	r2, r3
 8001920:	ddcf      	ble.n	80018c2 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001922:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e008      	b.n	800193c <setColor+0xc4>
    	ledbytes[i] = 0;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001930:	4413      	add	r3, r2
 8001932:	2200      	movs	r2, #0
 8001934:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f240 2215 	movw	r2, #533	@ 0x215
 8001942:	4293      	cmp	r3, r2
 8001944:	ddf1      	ble.n	800192a <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001946:	f240 2316 	movw	r3, #534	@ 0x216
 800194a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f006 fd88 	bl	8008464 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8001954:	bf00      	nop
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <setColor+0xf4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0fb      	beq.n	8001956 <setColor+0xde>
    datasentflag = 0;
 800195e:	4b03      	ldr	r3, [pc, #12]	@ (800196c <setColor+0xf4>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200001d8 	.word	0x200001d8

08001970 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e013      	b.n	80019ac <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3302      	adds	r3, #2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	22ff      	movs	r2, #255	@ 0xff
 80019a4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3303      	adds	r3, #3
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80019b0:	dde8      	ble.n	8001984 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e02a      	b.n	8001a0e <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e021      	b.n	8001a02 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	00da      	lsls	r2, r3, #3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	2246      	movs	r2, #70	@ 0x46
 80019e6:	801a      	strh	r2, [r3, #0]
 80019e8:	e008      	b.n	80019fc <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	00da      	lsls	r2, r3, #3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	2223      	movs	r2, #35	@ 0x23
 80019fa:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	ddda      	ble.n	80019be <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a12:	ddd1      	ble.n	80019b8 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a14:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	e008      	b.n	8001a2e <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	2200      	movs	r2, #0
 8001a26:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	f240 2215 	movw	r2, #533	@ 0x215
 8001a34:	4293      	cmp	r3, r2
 8001a36:	ddf1      	ble.n	8001a1c <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001a38:	f240 2316 	movw	r3, #534	@ 0x216
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f006 fd0f 	bl	8008464 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8001a46:	bf00      	nop
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <shiftLightsInit+0xf4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0fb      	beq.n	8001a48 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <shiftLightsInit+0xf4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001d8 	.word	0x200001d8

08001a68 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001a70:	2100      	movs	r1, #0
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a74:	f006 fea6 	bl	80087c4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002f4 	.word	0x200002f4
 8001a8c:	200001d8 	.word	0x200001d8

08001a90 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	@ 0x28
 8001a94:	af04      	add	r7, sp, #16
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	dd06      	ble.n	8001ab6 <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f8b6 	bl	8001c20 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001ab4:	e02a      	b.n	8001b0c <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e024      	b.n	8001b06 <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ac2:	3b02      	subs	r3, #2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac8:	4413      	add	r3, r2
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	db08      	blt.n	8001ae4 <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f819 	bl	8001b14 <lightOn>
 8001ae2:	e00d      	b.n	8001b00 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	9303      	str	r3, [sp, #12]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	2200      	movs	r2, #0
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff febc 	bl	8001878 <setColor>
	for (int i = 2; i < 14; i++) {
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b0d      	cmp	r3, #13
 8001b0a:	ddd7      	ble.n	8001abc <UpdateShiftLights+0x2c>
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b0d      	cmp	r3, #13
 8001b26:	d140      	bne.n	8001baa <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff ff1e 	bl	8001970 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001b34:	2300      	movs	r3, #0
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4834      	ldr	r0, [pc, #208]	@ (8001c1c <lightOn+0x108>)
 8001b4c:	f7ff fe94 	bl	8001878 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001b50:	2301      	movs	r3, #1
 8001b52:	9303      	str	r3, [sp, #12]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2300      	movs	r3, #0
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	482d      	ldr	r0, [pc, #180]	@ (8001c1c <lightOn+0x108>)
 8001b68:	f7ff fe86 	bl	8001878 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001b6c:	230e      	movs	r3, #14
 8001b6e:	9303      	str	r3, [sp, #12]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	4826      	ldr	r0, [pc, #152]	@ (8001c1c <lightOn+0x108>)
 8001b84:	f7ff fe78 	bl	8001878 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001b88:	230f      	movs	r3, #15
 8001b8a:	9303      	str	r3, [sp, #12]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	481f      	ldr	r0, [pc, #124]	@ (8001c1c <lightOn+0x108>)
 8001ba0:	f7ff fe6a 	bl	8001878 <setColor>
		HAL_Delay(5);
 8001ba4:	2005      	movs	r0, #5
 8001ba6:	f002 ff9b 	bl	8004ae0 <HAL_Delay>
	}
	if (index < 6) {
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	dc0e      	bgt.n	8001bce <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	9303      	str	r3, [sp, #12]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	22ff      	movs	r2, #255	@ 0xff
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff fe56 	bl	8001878 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001bcc:	e022      	b.n	8001c14 <lightOn+0x100>
	} else if (index < 10) {
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b09      	cmp	r3, #9
 8001bd2:	dc0e      	bgt.n	8001bf2 <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	23ff      	movs	r3, #255	@ 0xff
 8001be6:	2200      	movs	r2, #0
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff fe44 	bl	8001878 <setColor>
}
 8001bf0:	e010      	b.n	8001c14 <lightOn+0x100>
	} else if (index < 14){
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b0d      	cmp	r3, #13
 8001bf6:	dc0d      	bgt.n	8001c14 <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	9303      	str	r3, [sp, #12]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	23ff      	movs	r3, #255	@ 0xff
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7ff fe32 	bl	8001878 <setColor>
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200002f4 	.word	0x200002f4

08001c20 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	@ 0x30
 8001c24:	af04      	add	r7, sp, #16
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001c2e:	2307      	movs	r3, #7
 8001c30:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e026      	b.n	8001c86 <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	9303      	str	r3, [sp, #12]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	23ff      	movs	r3, #255	@ 0xff
 8001c4e:	2200      	movs	r2, #0
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff fe10 	bl	8001878 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3301      	adds	r3, #1
 8001c60:	9303      	str	r3, [sp, #12]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	23ff      	movs	r3, #255	@ 0xff
 8001c70:	2200      	movs	r2, #0
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff fdff 	bl	8001878 <setColor>
		HAL_Delay(20);
 8001c7a:	2014      	movs	r0, #20
 8001c7c:	f002 ff30 	bl	8004ae0 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	ddd5      	ble.n	8001c38 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	e026      	b.n	8001ce0 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	9303      	str	r3, [sp, #12]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2200      	movs	r2, #0
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f7ff fde3 	bl	8001878 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3301      	adds	r3, #1
 8001cba:	9303      	str	r3, [sp, #12]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff fdd2 	bl	8001878 <setColor>
		HAL_Delay(20);
 8001cd4:	2014      	movs	r0, #20
 8001cd6:	f002 ff03 	bl	8004ae0 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	ddd5      	ble.n	8001c92 <startUp+0x72>
	}
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <MX_SPI1_Init+0x6c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001cfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d30:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d3e:	220a      	movs	r2, #10
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <MX_SPI1_Init+0x68>)
 8001d44:	f005 fbcc 	bl	80074e0 <HAL_SPI_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d4e:	f7ff fd33 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200001dc 	.word	0x200001dc
 8001d5c:	40013000 	.word	0x40013000

08001d60 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d64:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d66:	4a18      	ldr	r2, [pc, #96]	@ (8001dc8 <MX_SPI2_Init+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d94:	2220      	movs	r2, #32
 8001d96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da4:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001dac:	220a      	movs	r2, #10
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <MX_SPI2_Init+0x64>)
 8001db2:	f005 fb95 	bl	80074e0 <HAL_SPI_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dbc:	f7ff fcfc 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000234 	.word	0x20000234
 8001dc8:	40003800 	.word	0x40003800

08001dcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	@ 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4a      	ldr	r2, [pc, #296]	@ (8001f14 <HAL_SPI_MspInit+0x148>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d15c      	bne.n	8001ea8 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	4b49      	ldr	r3, [pc, #292]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	4a48      	ldr	r2, [pc, #288]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfe:	4b46      	ldr	r3, [pc, #280]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	4b42      	ldr	r3, [pc, #264]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a41      	ldr	r2, [pc, #260]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e26:	23a0      	movs	r3, #160	@ 0xa0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e36:	2305      	movs	r3, #5
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4836      	ldr	r0, [pc, #216]	@ (8001f1c <HAL_SPI_MspInit+0x150>)
 8001e42:	f003 fb15 	bl	8005470 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e46:	4b36      	ldr	r3, [pc, #216]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e48:	4a36      	ldr	r2, [pc, #216]	@ (8001f24 <HAL_SPI_MspInit+0x158>)
 8001e4a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e4c:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e4e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e52:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e54:	4b32      	ldr	r3, [pc, #200]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e56:	2240      	movs	r2, #64	@ 0x40
 8001e58:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5a:	4b31      	ldr	r3, [pc, #196]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e60:	4b2f      	ldr	r3, [pc, #188]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e66:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e70:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e76:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e78:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7e:	4b28      	ldr	r3, [pc, #160]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e84:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e8a:	4825      	ldr	r0, [pc, #148]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e8c:	f002 ff5e 	bl	8004d4c <HAL_DMA_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001e96:	f7ff fc8f 	bl	80017b8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a20      	ldr	r2, [pc, #128]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001e9e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <HAL_SPI_MspInit+0x154>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ea6:	e031      	b.n	8001f0c <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1e      	ldr	r2, [pc, #120]	@ (8001f28 <HAL_SPI_MspInit+0x15c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12c      	bne.n	8001f0c <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_SPI_MspInit+0x14c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001eea:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001efc:	2305      	movs	r3, #5
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4809      	ldr	r0, [pc, #36]	@ (8001f2c <HAL_SPI_MspInit+0x160>)
 8001f08:	f003 fab2 	bl	8005470 <HAL_GPIO_Init>
}
 8001f0c:	bf00      	nop
 8001f0e:	3730      	adds	r7, #48	@ 0x30
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	2000028c 	.word	0x2000028c
 8001f24:	40026458 	.word	0x40026458
 8001f28:	40003800 	.word	0x40003800
 8001f2c:	40020400 	.word	0x40020400

08001f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <HAL_MspInit+0x4c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f7c <HAL_MspInit+0x4c>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_MspInit+0x4c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <HAL_MspInit+0x4c>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f84:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <SDTimer_Handler+0x40>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <SDTimer_Handler+0x1c>
    Timer1--;
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <SDTimer_Handler+0x40>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <SDTimer_Handler+0x40>)
 8001f9a:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <SDTimer_Handler+0x44>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <SDTimer_Handler+0x34>
    Timer2--;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <SDTimer_Handler+0x44>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <SDTimer_Handler+0x44>)
 8001fb2:	801a      	strh	r2, [r3, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200001ac 	.word	0x200001ac
 8001fc4:	200001ae 	.word	0x200001ae

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <NMI_Handler+0x4>

08001fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <HardFault_Handler+0x4>

08001fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <MemManage_Handler+0x4>

08001fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <BusFault_Handler+0x4>

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <UsageFault_Handler+0x4>

08001ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002020:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <SysTick_Handler+0x30>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <SysTick_Handler+0x30>)
 800202c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <SysTick_Handler+0x30>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b09      	cmp	r3, #9
 8002036:	d904      	bls.n	8002042 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <SysTick_Handler+0x30>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800203e:	f7ff ff9f 	bl	8001f80 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002042:	f002 fd2d 	bl	8004aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002ec 	.word	0x200002ec

08002050 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <DMA1_Stream0_IRQHandler+0x10>)
 8002056:	f002 ffa1 	bl	8004f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000033c 	.word	0x2000033c

08002064 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 8002068:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800206c:	f003 fb9e 	bl	80057ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 8002070:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002074:	f003 fb9a 	bl	80057ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 8002080:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002084:	f003 fb92 	bl	80057ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 8002088:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800208c:	f003 fb8e 	bl	80057ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <DMA2_Stream3_IRQHandler+0x10>)
 800209a:	f002 ff7f 	bl	8004f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000028c 	.word	0x2000028c

080020a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <OTG_FS_IRQHandler+0x10>)
 80020ae:	f003 fcd9 	bl	8005a64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000114c 	.word	0x2000114c

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_kill>:

int _kill(int pid, int sig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020d6:	f00d fe05 	bl	800fce4 <__errno>
 80020da:	4603      	mov	r3, r0
 80020dc:	2216      	movs	r2, #22
 80020de:	601a      	str	r2, [r3, #0]
  return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_exit>:

void _exit (int status)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ffe7 	bl	80020cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80020fe:	bf00      	nop
 8002100:	e7fd      	b.n	80020fe <_exit+0x12>
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f00d fdd6 	bl	800fce4 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20010000 	.word	0x20010000
 8002164:	00000400 	.word	0x00000400
 8002168:	200002f0 	.word	0x200002f0
 800216c:	200019a0 	.word	0x200019a0

08002170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <SystemInit+0x20>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <SystemInit+0x20>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	@ 0x38
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	f107 0320 	add.w	r3, r7, #32
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	615a      	str	r2, [r3, #20]
 80021c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <MX_TIM4_Init+0xe4>)
 80021c6:	4a2d      	ldr	r2, [pc, #180]	@ (800227c <MX_TIM4_Init+0xe8>)
 80021c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002278 <MX_TIM4_Init+0xe4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <MX_TIM4_Init+0xe4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 80021d6:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <MX_TIM4_Init+0xe4>)
 80021d8:	2269      	movs	r2, #105	@ 0x69
 80021da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021dc:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <MX_TIM4_Init+0xe4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e2:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <MX_TIM4_Init+0xe4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021e8:	4823      	ldr	r0, [pc, #140]	@ (8002278 <MX_TIM4_Init+0xe4>)
 80021ea:	f006 f893 	bl	8008314 <HAL_TIM_Base_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80021f4:	f7ff fae0 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002202:	4619      	mov	r1, r3
 8002204:	481c      	ldr	r0, [pc, #112]	@ (8002278 <MX_TIM4_Init+0xe4>)
 8002206:	f006 fc65 	bl	8008ad4 <HAL_TIM_ConfigClockSource>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002210:	f7ff fad2 	bl	80017b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002214:	4818      	ldr	r0, [pc, #96]	@ (8002278 <MX_TIM4_Init+0xe4>)
 8002216:	f006 f8cc 	bl	80083b2 <HAL_TIM_PWM_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002220:	f7ff faca 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800222c:	f107 0320 	add.w	r3, r7, #32
 8002230:	4619      	mov	r1, r3
 8002232:	4811      	ldr	r0, [pc, #68]	@ (8002278 <MX_TIM4_Init+0xe4>)
 8002234:	f007 f8d2 	bl	80093dc <HAL_TIMEx_MasterConfigSynchronization>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800223e:	f7ff fabb 	bl	80017b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002242:	2360      	movs	r3, #96	@ 0x60
 8002244:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	2200      	movs	r2, #0
 8002256:	4619      	mov	r1, r3
 8002258:	4807      	ldr	r0, [pc, #28]	@ (8002278 <MX_TIM4_Init+0xe4>)
 800225a:	f006 fb79 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002264:	f7ff faa8 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002268:	4803      	ldr	r0, [pc, #12]	@ (8002278 <MX_TIM4_Init+0xe4>)
 800226a:	f000 f85d 	bl	8002328 <HAL_TIM_MspPostInit>

}
 800226e:	bf00      	nop
 8002270:	3738      	adds	r7, #56	@ 0x38
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200002f4 	.word	0x200002f4
 800227c:	40000800 	.word	0x40000800

08002280 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <HAL_TIM_Base_MspInit+0x98>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d13d      	bne.n	800230e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b21      	ldr	r3, [pc, #132]	@ (800231c <HAL_TIM_Base_MspInit+0x9c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a20      	ldr	r2, [pc, #128]	@ (800231c <HAL_TIM_Base_MspInit+0x9c>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b1e      	ldr	r3, [pc, #120]	@ (800231c <HAL_TIM_Base_MspInit+0x9c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002324 <HAL_TIM_Base_MspInit+0xa4>)
 80022b2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022ba:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022be:	2240      	movs	r2, #64	@ 0x40
 80022c0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022c8:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ce:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022d0:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022d6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022de:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80022f2:	480b      	ldr	r0, [pc, #44]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 80022f4:	f002 fd2a 	bl	8004d4c <HAL_DMA_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80022fe:	f7ff fa5b 	bl	80017b8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a06      	ldr	r2, [pc, #24]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24
 8002308:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <HAL_TIM_Base_MspInit+0xa0>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40000800 	.word	0x40000800
 800231c:	40023800 	.word	0x40023800
 8002320:	2000033c 	.word	0x2000033c
 8002324:	40026010 	.word	0x40026010

08002328 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <HAL_TIM_MspPostInit+0x68>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d11d      	bne.n	8002386 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_TIM_MspPostInit+0x6c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a10      	ldr	r2, [pc, #64]	@ (8002394 <HAL_TIM_MspPostInit+0x6c>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <HAL_TIM_MspPostInit+0x6c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002366:	2340      	movs	r3, #64	@ 0x40
 8002368:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002376:	2302      	movs	r3, #2
 8002378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	@ (8002398 <HAL_TIM_MspPostInit+0x70>)
 8002382:	f003 f875 	bl	8005470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002386:	bf00      	nop
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40000800 	.word	0x40000800
 8002394:	40023800 	.word	0x40023800
 8002398:	40020400 	.word	0x40020400

0800239c <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 800239c:	b40f      	push	{r0, r1, r2, r3}
 800239e:	b580      	push	{r7, lr}
 80023a0:	b0a2      	sub	sp, #136	@ 0x88
 80023a2:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80023a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80023a8:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80023aa:	f107 0008 	add.w	r0, r7, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80023b4:	2180      	movs	r1, #128	@ 0x80
 80023b6:	f00d fc05 	bl	800fbc4 <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fd ff0e 	bl	80001e0 <strlen>
 80023c4:	4603      	mov	r3, r0
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f00c fe3a 	bl	800f048 <CDC_Transmit_FS>
}
 80023d4:	bf00      	nop
 80023d6:	3788      	adds	r7, #136	@ 0x88
 80023d8:	46bd      	mov	sp, r7
 80023da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023de:	b004      	add	sp, #16
 80023e0:	4770      	bx	lr
	...

080023e4 <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <transmitdma+0x28>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f005 fcfe 	bl	8007e00 <HAL_SPI_Transmit_DMA>
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2000039c 	.word	0x2000039c

08002410 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <HAL_SPI_TxCpltCallback+0x24>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d102      	bne.n	8002428 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_SPI_TxCpltCallback+0x28>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
	}
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40013000 	.word	0x40013000
 8002438:	2000039c 	.word	0x2000039c

0800243c <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	461a      	mov	r2, r3
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f805 	bl	8002460 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	79fa      	ldrb	r2, [r7, #7]
 8002478:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e014      	b.n	80024b6 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	4413      	add	r3, r2
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f9da 	bl	8002850 <_ZN13DisplayObject11getpriorityEv>
 800249c:	4603      	mov	r3, r0
 800249e:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	799b      	ldrb	r3, [r3, #6]
 80024a4:	7cfa      	ldrb	r2, [r7, #19]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d902      	bls.n	80024b0 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	7cfa      	ldrb	r2, [r7, #19]
 80024ae:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	dbe6      	blt.n	800248c <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 80024ce:	b089      	sub	sp, #36	@ 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024d6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024da:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 80024dc:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024e0:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	795b      	ldrb	r3, [r3, #5]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 813e 	beq.w	800276a <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 80024ee:	f240 133f 	movw	r3, #319	@ 0x13f
 80024f2:	f240 12df 	movw	r2, #479	@ 0x1df
 80024f6:	2100      	movs	r1, #0
 80024f8:	2000      	movs	r0, #0
 80024fa:	f000 fd3c 	bl	8002f76 <modifySpace>
		startCommand(WRITE_COMMAND);
 80024fe:	202c      	movs	r0, #44	@ 0x2c
 8002500:	f000 fc46 	bl	8002d90 <startCommand>
		dataOrRegister(1);
 8002504:	2001      	movs	r0, #1
 8002506:	f000 fc01 	bl	8002d0c <dataOrRegister>
		uint8_t anychanges = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002510:	f102 021f 	add.w	r2, r2, #31
 8002514:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002516:	2300      	movs	r3, #0
 8002518:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800251c:	f102 0218 	add.w	r2, r2, #24
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e028      	b.n	8002576 <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 8002524:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002528:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002534:	f103 0318 	add.w	r3, r3, #24
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f9a0 	bl	8002886 <_ZN13DisplayObject13getChangeFlagEv>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800254e:	f103 031f 	add.w	r3, r3, #31
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4413      	add	r3, r2
 8002556:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800255a:	f102 021f 	add.w	r2, r2, #31
 800255e:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002560:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002564:	f103 0318 	add.w	r3, r3, #24
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002570:	f102 0218 	add.w	r2, r2, #24
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800257a:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	791b      	ldrb	r3, [r3, #4]
 8002582:	461a      	mov	r2, r3
 8002584:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002588:	f103 0318 	add.w	r3, r3, #24
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4293      	cmp	r3, r2
 8002590:	dbc8      	blt.n	8002524 <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 8002592:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002596:	f103 031f 	add.w	r3, r3, #31
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80ec 	beq.w	800277a <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025a8:	f102 0214 	add.w	r2, r2, #20
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e0d2      	b.n	8002756 <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 80025b0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025b4:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 80025b8:	4618      	mov	r0, r3
 80025ba:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80025be:	461a      	mov	r2, r3
 80025c0:	2100      	movs	r1, #0
 80025c2:	f00d fb0d 	bl	800fbe0 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 80025c6:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025ca:	f103 0314 	add.w	r3, r3, #20
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025dc:	f102 0208 	add.w	r2, r2, #8
 80025e0:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 80025e2:	2300      	movs	r3, #0
 80025e4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025e8:	f102 0210 	add.w	r2, r2, #16
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e084      	b.n	80026fa <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 80025f0:	2300      	movs	r3, #0
 80025f2:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025f6:	f102 020c 	add.w	r2, r2, #12
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e064      	b.n	80026c8 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 80025fe:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002602:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800260e:	f103 030c 	add.w	r3, r3, #12
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f918 	bl	8002850 <_ZN13DisplayObject11getpriorityEv>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002628:	f103 0310 	add.w	r3, r3, #16
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4293      	cmp	r3, r2
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d03a      	beq.n	80026b2 <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 800263c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002640:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800264c:	f103 030c 	add.w	r3, r3, #12
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800265c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002668:	f103 030c 	add.w	r3, r3, #12
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3308      	adds	r3, #8
 8002678:	681c      	ldr	r4, [r3, #0]
 800267a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800267e:	f103 0308 	add.w	r3, r3, #8
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f107 0120 	add.w	r1, r7, #32
 800268a:	3918      	subs	r1, #24
 800268c:	2250      	movs	r2, #80	@ 0x50
 800268e:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 8002690:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002694:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026a0:	f103 030c 	add.w	r3, r3, #12
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f87f 	bl	80027b0 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 80026b2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026b6:	f103 030c 	add.w	r3, r3, #12
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026c2:	f102 020c 	add.w	r2, r2, #12
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026cc:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	791b      	ldrb	r3, [r3, #4]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026da:	f103 030c 	add.w	r3, r3, #12
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	db8c      	blt.n	80025fe <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 80026e4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026e8:	f103 0310 	add.w	r3, r3, #16
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026f4:	f102 0210 	add.w	r2, r2, #16
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026fe:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	799b      	ldrb	r3, [r3, #6]
 8002706:	461a      	mov	r2, r3
 8002708:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800270c:	f103 0310 	add.w	r3, r3, #16
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4293      	cmp	r3, r2
 8002714:	f77f af6c 	ble.w	80025f0 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8002718:	f107 0320 	add.w	r3, r7, #32
 800271c:	3b18      	subs	r3, #24
 800271e:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002722:	4619      	mov	r1, r3
 8002724:	4818      	ldr	r0, [pc, #96]	@ (8002788 <_ZN5Scene9drawSceneEv+0x2c0>)
 8002726:	f7ff fe5d 	bl	80023e4 <transmitdma>
			while(!spidatasentflag) {}
 800272a:	bf00      	nop
 800272c:	4b17      	ldr	r3, [pc, #92]	@ (800278c <_ZN5Scene9drawSceneEv+0x2c4>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f5      	bne.n	800272c <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002740:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002744:	f103 0314 	add.w	r3, r3, #20
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002750:	f102 0214 	add.w	r2, r2, #20
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800275a:	f103 0314 	add.w	r3, r3, #20
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b05      	cmp	r3, #5
 8002762:	f77f af25 	ble.w	80025b0 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 8002766:	f000 fb29 	bl	8002dbc <endCommand>
	}
	this->changed = 0;
 800276a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800276e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	715a      	strb	r2, [r3, #5]
 8002778:	e000      	b.n	800277c <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 800277a:	bf00      	nop
}
 800277c:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002780:	3724      	adds	r7, #36	@ 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
 8002786:	bf00      	nop
 8002788:	200001dc 	.word	0x200001dc
 800278c:	2000039c 	.word	0x2000039c

08002790 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <_ZN13DisplayObjectD1Ev+0x1c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	080106d4 	.word	0x080106d4

080027b0 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	715a      	strb	r2, [r3, #5]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	715a      	strb	r2, [r3, #5]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	return this->xpos;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	88db      	ldrh	r3, [r3, #6]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	80da      	strh	r2, [r3, #6]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
	return this->ypos;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	891b      	ldrh	r3, [r3, #8]
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	887a      	ldrh	r2, [r7, #2]
 8002842:	811a      	strh	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	return this->priority;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	791b      	ldrb	r3, [r3, #4]
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	711a      	strb	r2, [r3, #4]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	return this->changed;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	795b      	ldrb	r3, [r3, #5]
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <_ZN13DisplayObjectC1Ev+0x1c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	080106d4 	.word	0x080106d4

080028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	4608      	mov	r0, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	817b      	strh	r3, [r7, #10]
 80028d2:	460b      	mov	r3, r1
 80028d4:	813b      	strh	r3, [r7, #8]
 80028d6:	4613      	mov	r3, r2
 80028d8:	80fb      	strh	r3, [r7, #6]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ffdf 	bl	80028a0 <_ZN13DisplayObjectC1Ev>
 80028e2:	4a15      	ldr	r2, [pc, #84]	@ (8002938 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	897a      	ldrh	r2, [r7, #10]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff81 	bl	80027fc <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	893a      	ldrh	r2, [r7, #8]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff96 	bl	8002832 <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	88fa      	ldrh	r2, [r7, #6]
 800290a:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	7f3a      	ldrb	r2, [r7, #28]
 8002910:	751a      	strb	r2, [r3, #20]
	this->font = font;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ffa1 	bl	8002868 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff4e 	bl	80027ca <_ZN13DisplayObject12redrawObjectEv>
}
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	080106c0 	.word	0x080106c0

0800293c <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002940:	b08a      	sub	sp, #40	@ 0x28
 8002942:	af06      	add	r7, sp, #24
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	4611      	mov	r1, r2
 800294a:	461a      	mov	r2, r3
 800294c:	460b      	mov	r3, r1
 800294e:	80fb      	strh	r3, [r7, #6]
 8002950:	4613      	mov	r3, r2
 8002952:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68dc      	ldr	r4, [r3, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691d      	ldr	r5, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	895e      	ldrh	r6, [r3, #10]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff3e 	bl	80027e4 <_ZN13DisplayObject7getxposEv>
 8002968:	4603      	mov	r3, r0
 800296a:	4698      	mov	r8, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff53 	bl	800281a <_ZN13DisplayObject7getyposEv>
 8002974:	4603      	mov	r3, r0
 8002976:	4619      	mov	r1, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	7d1b      	ldrb	r3, [r3, #20]
 800297c:	88ba      	ldrh	r2, [r7, #4]
 800297e:	9204      	str	r2, [sp, #16]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	9203      	str	r2, [sp, #12]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	9202      	str	r2, [sp, #8]
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	9100      	str	r1, [sp, #0]
 800298c:	4643      	mov	r3, r8
 800298e:	4632      	mov	r2, r6
 8002990:	4629      	mov	r1, r5
 8002992:	4620      	mov	r0, r4
 8002994:	f000 fdcc 	bl	8003530 <drawStringIntoFramebuffer>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029a4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	460b      	mov	r3, r1
 80029b4:	71fb      	strb	r3, [r7, #7]
 80029b6:	4613      	mov	r3, r2
 80029b8:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	79fa      	ldrb	r2, [r7, #7]
 80029c4:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88ba      	ldrh	r2, [r7, #4]
 80029ca:	815a      	strh	r2, [r3, #10]
	this->font = font;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8bba      	ldrh	r2, [r7, #28]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff0f 	bl	80027fc <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8c3a      	ldrh	r2, [r7, #32]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff24 	bl	8002832 <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff38 	bl	8002868 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fee5 	bl	80027ca <_ZN13DisplayObject12redrawObjectEv>
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_ZN17OutlineRectObjectC1Ettttthh>:

/*
 * the following are all OutlineRectObject definitions
 */

OutlineRectObject::OutlineRectObject(uint16_t xpos, uint16_t ypos, uint16_t length, uint16_t height, uint16_t colorvalue, uint8_t positioning, uint8_t priority) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	817b      	strh	r3, [r7, #10]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	813b      	strh	r3, [r7, #8]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff3b 	bl	80028a0 <_ZN13DisplayObjectC1Ev>
 8002a2a:	4a16      	ldr	r2, [pc, #88]	@ (8002a84 <_ZN17OutlineRectObjectC1Ettttthh+0x7c>)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	601a      	str	r2, [r3, #0]
	this->setxpos(xpos);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	897a      	ldrh	r2, [r7, #10]
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fee0 	bl	80027fc <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	893a      	ldrh	r2, [r7, #8]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fef5 	bl	8002832 <_ZN13DisplayObject7setyposEt>
	this->length = length;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	819a      	strh	r2, [r3, #12]
	this->height = height;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8b3a      	ldrh	r2, [r7, #24]
 8002a52:	81da      	strh	r2, [r3, #14]
	this->colorvalue = colorvalue;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8bba      	ldrh	r2, [r7, #28]
 8002a58:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a60:	741a      	strb	r2, [r3, #16]
	this->setpriority(priority);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fefc 	bl	8002868 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fea9 	bl	80027ca <_ZN13DisplayObject12redrawObjectEv>
}
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	080106ac 	.word	0x080106ac

08002a88 <_ZN17OutlineRectObject19drawIntoFramebufferEPttt>:

uint16_t OutlineRectObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8a:	b08b      	sub	sp, #44	@ 0x2c
 8002a8c:	af06      	add	r7, sp, #24
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	4611      	mov	r1, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	460b      	mov	r3, r1
 8002a98:	80fb      	strh	r3, [r7, #6]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80bb      	strh	r3, [r7, #4]
	drawRectangleOutlineIntoFramebuffer(this->getxpos(), this->getypos(), this->length, this->height, this->colorvalue, this->positioning, framebuffer, framewidth, xstart);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fe9f 	bl	80027e4 <_ZN13DisplayObject7getxposEv>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461d      	mov	r5, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff feb4 	bl	800281a <_ZN13DisplayObject7getyposEv>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461e      	mov	r6, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8998      	ldrh	r0, [r3, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	89dc      	ldrh	r4, [r3, #14]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	895b      	ldrh	r3, [r3, #10]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	7c12      	ldrb	r2, [r2, #16]
 8002ac6:	88b9      	ldrh	r1, [r7, #4]
 8002ac8:	9104      	str	r1, [sp, #16]
 8002aca:	88f9      	ldrh	r1, [r7, #6]
 8002acc:	9103      	str	r1, [sp, #12]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	9102      	str	r1, [sp, #8]
 8002ad2:	9201      	str	r2, [sp, #4]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4631      	mov	r1, r6
 8002adc:	4628      	mov	r0, r5
 8002ade:	f000 fb26 	bl	800312e <drawRectangleOutlineIntoFramebuffer>
	return 0;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aec <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af04      	add	r7, sp, #16
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	80fb      	strh	r3, [r7, #6]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80bb      	strh	r3, [r7, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fecb 	bl	80028a0 <_ZN13DisplayObjectC1Ev>
 8002b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <_ZN11ImageObjectC1EPctttthh+0x50>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8002b10:	88b9      	ldrh	r1, [r7, #4]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b18:	9303      	str	r3, [sp, #12]
 8002b1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	8bbb      	ldrh	r3, [r7, #28]
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	8b3b      	ldrh	r3, [r7, #24]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f83b 	bl	8002ba8 <_ZN11ImageObject11updateImageEPctttthh>
}
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	08010698 	.word	0x08010698

08002b40 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b44:	b08a      	sub	sp, #40	@ 0x28
 8002b46:	af06      	add	r7, sp, #24
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	460b      	mov	r3, r1
 8002b52:	80fb      	strh	r3, [r7, #6]
 8002b54:	4613      	mov	r3, r2
 8002b56:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	691c      	ldr	r4, [r3, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	895d      	ldrh	r5, [r3, #10]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	899e      	ldrh	r6, [r3, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fe3c 	bl	80027e4 <_ZN13DisplayObject7getxposEv>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4698      	mov	r8, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fe51 	bl	800281a <_ZN13DisplayObject7getyposEv>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	7b9b      	ldrb	r3, [r3, #14]
 8002b80:	88ba      	ldrh	r2, [r7, #4]
 8002b82:	9204      	str	r2, [sp, #16]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	9203      	str	r2, [sp, #12]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	9202      	str	r2, [sp, #8]
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	9100      	str	r1, [sp, #0]
 8002b90:	4643      	mov	r3, r8
 8002b92:	4632      	mov	r2, r6
 8002b94:	4629      	mov	r1, r5
 8002b96:	4620      	mov	r0, r4
 8002b98:	f000 fd42 	bl	8003620 <drawImageIntoFramebuffer>
	return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ba8 <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	80fb      	strh	r3, [r7, #6]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8b3a      	ldrh	r2, [r7, #24]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe19 	bl	80027fc <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8bba      	ldrh	r2, [r7, #28]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fe2e 	bl	8002832 <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	88ba      	ldrh	r2, [r7, #4]
 8002be6:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002bee:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fe35 	bl	8002868 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fde2 	bl	80027ca <_ZN13DisplayObject12redrawObjectEv>
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	4a05      	ldr	r2, [pc, #20]	@ (8002c30 <_ZN11ImageObjectD1Ev+0x20>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fdb5 	bl	8002790 <_ZN13DisplayObjectD1Ev>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08010698 	.word	0x08010698

08002c34 <_ZN11ImageObjectD0Ev>:
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffe7 	bl	8002c10 <_ZN11ImageObjectD1Ev>
 8002c42:	2114      	movs	r1, #20
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f00c fe51 	bl	800f8ec <_ZdlPvj>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_ZN17OutlineRectObjectD1Ev>:
class OutlineRectObject : public DisplayObject {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	4a05      	ldr	r2, [pc, #20]	@ (8002c74 <_ZN17OutlineRectObjectD1Ev+0x20>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fd93 	bl	8002790 <_ZN13DisplayObjectD1Ev>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	080106ac 	.word	0x080106ac

08002c78 <_ZN17OutlineRectObjectD0Ev>:
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ffe7 	bl	8002c54 <_ZN17OutlineRectObjectD1Ev>
 8002c86:	2114      	movs	r1, #20
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f00c fe2f 	bl	800f8ec <_ZdlPvj>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	4a05      	ldr	r2, [pc, #20]	@ (8002cb8 <_ZN12StringObjectD1Ev+0x20>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fd71 	bl	8002790 <_ZN13DisplayObjectD1Ev>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	080106c0 	.word	0x080106c0

08002cbc <_ZN12StringObjectD0Ev>:
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ffe7 	bl	8002c98 <_ZN12StringObjectD1Ev>
 8002cca:	2118      	movs	r1, #24
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f00c fe0d 	bl	800f8ec <_ZdlPvj>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	4802      	ldr	r0, [pc, #8]	@ (8002cf0 <startTransaction+0x14>)
 8002ce6:	f002 fd47 	bl	8005778 <HAL_GPIO_WritePin>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40020400 	.word	0x40020400

08002cf4 <endTransaction>:

void endTransaction() {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2108      	movs	r1, #8
 8002cfc:	4802      	ldr	r0, [pc, #8]	@ (8002d08 <endTransaction+0x14>)
 8002cfe:	f002 fd3b 	bl	8005778 <HAL_GPIO_WritePin>
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40020400 	.word	0x40020400

08002d0c <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2110      	movs	r1, #16
 8002d20:	4806      	ldr	r0, [pc, #24]	@ (8002d3c <dataOrRegister+0x30>)
 8002d22:	f002 fd29 	bl	8005778 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002d26:	e004      	b.n	8002d32 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	4803      	ldr	r0, [pc, #12]	@ (8002d3c <dataOrRegister+0x30>)
 8002d2e:	f002 fd23 	bl	8005778 <HAL_GPIO_WritePin>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40020400 	.word	0x40020400

08002d40 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002d4e:	f7ff ffc5 	bl	8002cdc <startTransaction>

	dataOrRegister(0);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7ff ffda 	bl	8002d0c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002d58:	f107 010e 	add.w	r1, r7, #14
 8002d5c:	230a      	movs	r3, #10
 8002d5e:	2201      	movs	r2, #1
 8002d60:	480a      	ldr	r0, [pc, #40]	@ (8002d8c <commandAndData+0x4c>)
 8002d62:	f004 fc46 	bl	80075f2 <HAL_SPI_Transmit>

	if (size) {
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <commandAndData+0x40>
		dataOrRegister(1);
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f7ff ffcd 	bl	8002d0c <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	230a      	movs	r3, #10
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4804      	ldr	r0, [pc, #16]	@ (8002d8c <commandAndData+0x4c>)
 8002d7c:	f004 fc39 	bl	80075f2 <HAL_SPI_Transmit>
	}

	endTransaction();
 8002d80:	f7ff ffb8 	bl	8002cf4 <endTransaction>
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200001dc 	.word	0x200001dc

08002d90 <startCommand>:

void startCommand(uint16_t command) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002d9a:	f7ff ff9f 	bl	8002cdc <startTransaction>
	dataOrRegister(0);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7ff ffb4 	bl	8002d0c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002da4:	1db9      	adds	r1, r7, #6
 8002da6:	230a      	movs	r3, #10
 8002da8:	2201      	movs	r2, #1
 8002daa:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <startCommand+0x28>)
 8002dac:	f004 fc21 	bl	80075f2 <HAL_SPI_Transmit>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	200001dc 	.word	0x200001dc

08002dbc <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	endTransaction();
 8002dc0:	f7ff ff98 	bl	8002cf4 <endTransaction>
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <resetScreen>:

void resetScreen() {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2120      	movs	r1, #32
 8002dd0:	480b      	ldr	r0, [pc, #44]	@ (8002e00 <resetScreen+0x38>)
 8002dd2:	f002 fcd1 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002dd6:	2014      	movs	r0, #20
 8002dd8:	f001 fe82 	bl	8004ae0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2120      	movs	r1, #32
 8002de0:	4807      	ldr	r0, [pc, #28]	@ (8002e00 <resetScreen+0x38>)
 8002de2:	f002 fcc9 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002de6:	2014      	movs	r0, #20
 8002de8:	f001 fe7a 	bl	8004ae0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002dec:	2201      	movs	r2, #1
 8002dee:	2120      	movs	r1, #32
 8002df0:	4803      	ldr	r0, [pc, #12]	@ (8002e00 <resetScreen+0x38>)
 8002df2:	f002 fcc1 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002df6:	2064      	movs	r0, #100	@ 0x64
 8002df8:	f001 fe72 	bl	8004ae0 <HAL_Delay>
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40020400 	.word	0x40020400

08002e04 <initializeScreen>:

void initializeScreen() {
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	b09c      	sub	sp, #112	@ 0x70
 8002e08:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7ff ff96 	bl	8002d40 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	2011      	movs	r0, #17
 8002e1a:	f7ff ff91 	bl	8002d40 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002e1e:	2355      	movs	r3, #85	@ 0x55
 8002e20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002e24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	203a      	movs	r0, #58	@ 0x3a
 8002e2e:	f7ff ff87 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002e32:	4b47      	ldr	r3, [pc, #284]	@ (8002f50 <initializeScreen+0x14c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002e38:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	20c0      	movs	r0, #192	@ 0xc0
 8002e42:	f7ff ff7d 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002e46:	2345      	movs	r3, #69	@ 0x45
 8002e48:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002e52:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e56:	2204      	movs	r2, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	20c1      	movs	r0, #193	@ 0xc1
 8002e5c:	f7ff ff70 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002e60:	2333      	movs	r3, #51	@ 0x33
 8002e62:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002e66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	20c2      	movs	r0, #194	@ 0xc2
 8002e70:	f7ff ff66 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002e7a:	2328      	movs	r3, #40	@ 0x28
 8002e7c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002e80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e84:	2204      	movs	r2, #4
 8002e86:	4619      	mov	r1, r3
 8002e88:	20c5      	movs	r0, #197	@ 0xc5
 8002e8a:	f7ff ff59 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <initializeScreen+0x150>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002e94:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	20b1      	movs	r0, #177	@ 0xb1
 8002e9e:	f7ff ff4f 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002ea8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eac:	2202      	movs	r2, #2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	20b4      	movs	r0, #180	@ 0xb4
 8002eb2:	f7ff ff45 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002eb6:	4a28      	ldr	r2, [pc, #160]	@ (8002f58 <initializeScreen+0x154>)
 8002eb8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ec0:	6018      	str	r0, [r3, #0]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002ec6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002eca:	2206      	movs	r2, #6
 8002ecc:	4619      	mov	r1, r3
 8002ece:	20b6      	movs	r0, #182	@ 0xb6
 8002ed0:	f7ff ff36 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002ed4:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <initializeScreen+0x158>)
 8002ed6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002eda:	461d      	mov	r5, r3
 8002edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ee4:	c407      	stmia	r4!, {r0, r1, r2}
 8002ee6:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eec:	221e      	movs	r2, #30
 8002eee:	4619      	mov	r1, r3
 8002ef0:	20e0      	movs	r0, #224	@ 0xe0
 8002ef2:	f7ff ff25 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <initializeScreen+0x15c>)
 8002ef8:	f107 040c 	add.w	r4, r7, #12
 8002efc:	461d      	mov	r5, r3
 8002efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f06:	c407      	stmia	r4!, {r0, r1, r2}
 8002f08:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	221e      	movs	r2, #30
 8002f10:	4619      	mov	r1, r3
 8002f12:	20e1      	movs	r0, #225	@ 0xe1
 8002f14:	f7ff ff14 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002f18:	2300      	movs	r3, #0
 8002f1a:	813b      	strh	r3, [r7, #8]
 8002f1c:	2322      	movs	r3, #34	@ 0x22
 8002f1e:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002f20:	f107 0308 	add.w	r3, r7, #8
 8002f24:	2204      	movs	r2, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	20b6      	movs	r0, #182	@ 0xb6
 8002f2a:	f7ff ff09 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002f2e:	2308      	movs	r3, #8
 8002f30:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2202      	movs	r2, #2
 8002f36:	4619      	mov	r1, r3
 8002f38:	2036      	movs	r0, #54	@ 0x36
 8002f3a:	f7ff ff01 	bl	8002d40 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f000 f85a 	bl	8002ff8 <clearScreenfast>
	displayOn();
 8002f44:	f000 f80e 	bl	8002f64 <displayOn>
}
 8002f48:	bf00      	nop
 8002f4a:	3770      	adds	r7, #112	@ 0x70
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f50:	08010544 	.word	0x08010544
 8002f54:	08010548 	.word	0x08010548
 8002f58:	0801054c 	.word	0x0801054c
 8002f5c:	08010554 	.word	0x08010554
 8002f60:	08010574 	.word	0x08010574

08002f64 <displayOn>:

void displayOn() {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2029      	movs	r0, #41	@ 0x29
 8002f6e:	f7ff fee7 	bl	8002d40 <commandAndData>
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002f76:	b590      	push	{r4, r7, lr}
 8002f78:	b087      	sub	sp, #28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	4608      	mov	r0, r1
 8002f80:	4611      	mov	r1, r2
 8002f82:	461a      	mov	r2, r3
 8002f84:	4623      	mov	r3, r4
 8002f86:	80fb      	strh	r3, [r7, #6]
 8002f88:	4603      	mov	r3, r0
 8002f8a:	80bb      	strh	r3, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002f94:	88bb      	ldrh	r3, [r7, #4]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	823b      	strh	r3, [r7, #16]
 8002f9c:	88bb      	ldrh	r3, [r7, #4]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	827b      	strh	r3, [r7, #18]
 8002fa4:	883b      	ldrh	r3, [r7, #0]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	82bb      	strh	r3, [r7, #20]
 8002fac:	883b      	ldrh	r3, [r7, #0]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	2208      	movs	r2, #8
 8002fba:	4619      	mov	r1, r3
 8002fbc:	202a      	movs	r0, #42	@ 0x2a
 8002fbe:	f7ff febf 	bl	8002d40 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	813b      	strh	r3, [r7, #8]
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	817b      	strh	r3, [r7, #10]
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	81bb      	strh	r3, [r7, #12]
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	4619      	mov	r1, r3
 8002fea:	202b      	movs	r0, #43	@ 0x2b
 8002fec:	f7ff fea8 	bl	8002d40 <commandAndData>
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}

08002ff8 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	4602      	mov	r2, r0
 8003004:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003008:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 800300c:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 800300e:	2300      	movs	r3, #0
 8003010:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003014:	f102 020c 	add.w	r2, r2, #12
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01a      	b.n	8003052 <clearScreenfast+0x5a>
		buffer1[i] = color;
 800301c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003020:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8003024:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003028:	f102 020c 	add.w	r2, r2, #12
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8003032:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 8003036:	8809      	ldrh	r1, [r1, #0]
 8003038:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 800303c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003040:	f103 030c 	add.w	r3, r3, #12
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800304c:	f102 020c 	add.w	r2, r2, #12
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003056:	f103 030c 	add.w	r3, r3, #12
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8003060:	dbdc      	blt.n	800301c <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 8003062:	f240 133f 	movw	r3, #319	@ 0x13f
 8003066:	f240 12df 	movw	r2, #479	@ 0x1df
 800306a:	2100      	movs	r1, #0
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff ff82 	bl	8002f76 <modifySpace>
	startCommand(0x2C);
 8003072:	202c      	movs	r0, #44	@ 0x2c
 8003074:	f7ff fe8c 	bl	8002d90 <startCommand>
	dataOrRegister(1);
 8003078:	2001      	movs	r0, #1
 800307a:	f7ff fe47 	bl	8002d0c <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 800307e:	2300      	movs	r3, #0
 8003080:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003084:	f102 0208 	add.w	r2, r2, #8
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e019      	b.n	80030c0 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	3b08      	subs	r3, #8
 8003092:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8003096:	4619      	mov	r1, r3
 8003098:	4811      	ldr	r0, [pc, #68]	@ (80030e0 <clearScreenfast+0xe8>)
 800309a:	f7ff f9a3 	bl	80023e4 <transmitdma>
		while (!spidatasentflag) {}
 800309e:	bf00      	nop
 80030a0:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <clearScreenfast+0xec>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0fa      	beq.n	80030a0 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80030aa:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80030ae:	f103 0308 	add.w	r3, r3, #8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80030ba:	f102 0208 	add.w	r2, r2, #8
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80030c4:	f103 0308 	add.w	r3, r3, #8
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	ddde      	ble.n	800308c <clearScreenfast+0x94>
	}
	endCommand();
 80030ce:	f7ff fe75 	bl	8002dbc <endCommand>
}
 80030d2:	bf00      	nop
 80030d4:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200001dc 	.word	0x200001dc
 80030e4:	2000039c 	.word	0x2000039c

080030e8 <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4611      	mov	r1, r2
 80030f4:	461a      	mov	r2, r3
 80030f6:	460b      	mov	r3, r1
 80030f8:	80fb      	strh	r3, [r7, #6]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	b29b      	uxth	r3, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	881a      	ldrh	r2, [r3, #0]
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	b29b      	uxth	r3, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b29a      	uxth	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	801a      	strh	r2, [r3, #0]
}
 8003122:	bf00      	nop
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <drawRectangleOutlineIntoFramebuffer>:
	drawVLine(x1 + length, y1, height, color);
	drawHLine(x1, y1, length, color);
	drawHLine(x1, y1 + height, length, color);
}

void drawRectangleOutlineIntoFramebuffer(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color, uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800312e:	b590      	push	{r4, r7, lr}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	4604      	mov	r4, r0
 8003136:	4608      	mov	r0, r1
 8003138:	4611      	mov	r1, r2
 800313a:	461a      	mov	r2, r3
 800313c:	4623      	mov	r3, r4
 800313e:	80fb      	strh	r3, [r7, #6]
 8003140:	4603      	mov	r3, r0
 8003142:	80bb      	strh	r3, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
 8003148:	4613      	mov	r3, r2
 800314a:	803b      	strh	r3, [r7, #0]
	if (positioning & CENTER_OBJECT) {
 800314c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <drawRectangleOutlineIntoFramebuffer+0x36>
		getRectCenter(&x1, &y1, length, height);
 8003158:	883b      	ldrh	r3, [r7, #0]
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	1d39      	adds	r1, r7, #4
 800315e:	1db8      	adds	r0, r7, #6
 8003160:	f7ff ffc2 	bl	80030e8 <getRectCenter>
	}
	for (int x = x1; x < x1 + length; x++) {
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e09c      	b.n	80032a4 <drawRectangleOutlineIntoFramebuffer+0x176>
		for (int y = y1; y < y1 + height; y++) {
 800316a:	88bb      	ldrh	r3, [r7, #4]
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	e08e      	b.n	800328e <drawRectangleOutlineIntoFramebuffer+0x160>
			if ((x >= xstart) & (x < (xstart + framewidth))) {
 8003170:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	429a      	cmp	r2, r3
 8003176:	bfac      	ite	ge
 8003178:	2301      	movge	r3, #1
 800317a:	2300      	movlt	r3, #0
 800317c:	b2da      	uxtb	r2, r3
 800317e:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8003180:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003182:	440b      	add	r3, r1
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	4299      	cmp	r1, r3
 8003188:	bfb4      	ite	lt
 800318a:	2301      	movlt	r3, #1
 800318c:	2300      	movge	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4013      	ands	r3, r2
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d077      	beq.n	8003288 <drawRectangleOutlineIntoFramebuffer+0x15a>
				if ((x == x1) | (x == (x1 + length - 1))) {
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4293      	cmp	r3, r2
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	4619      	mov	r1, r3
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	440b      	add	r3, r1
 80031b0:	3b01      	subs	r3, #1
 80031b2:	68f9      	ldr	r1, [r7, #12]
 80031b4:	4299      	cmp	r1, r3
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4313      	orrs	r3, r2
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d024      	beq.n	8003210 <drawRectangleOutlineIntoFramebuffer+0xe2>
					if ((y >= y1) & (y < y1 + height)) {
 80031c6:	88bb      	ldrh	r3, [r7, #4]
 80031c8:	461a      	mov	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bfac      	ite	ge
 80031d0:	2301      	movge	r3, #1
 80031d2:	2300      	movlt	r3, #0
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	88bb      	ldrh	r3, [r7, #4]
 80031d8:	4619      	mov	r1, r3
 80031da:	883b      	ldrh	r3, [r7, #0]
 80031dc:	440b      	add	r3, r1
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	4299      	cmp	r1, r3
 80031e2:	bfb4      	ite	lt
 80031e4:	2301      	movlt	r3, #1
 80031e6:	2300      	movge	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4013      	ands	r3, r2
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00e      	beq.n	8003210 <drawRectangleOutlineIntoFramebuffer+0xe2>
							framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 80031f2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	1ad2      	subs	r2, r2, r3
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	019b      	lsls	r3, r3, #6
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800320a:	4413      	add	r3, r2
 800320c:	8c3a      	ldrh	r2, [r7, #32]
 800320e:	801a      	strh	r2, [r3, #0]
					}
				}
				if ((y == y1) | (y == (y1 + height - 1))) {
 8003210:	88bb      	ldrh	r3, [r7, #4]
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4293      	cmp	r3, r2
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2da      	uxtb	r2, r3
 8003220:	88bb      	ldrh	r3, [r7, #4]
 8003222:	4619      	mov	r1, r3
 8003224:	883b      	ldrh	r3, [r7, #0]
 8003226:	440b      	add	r3, r1
 8003228:	3b01      	subs	r3, #1
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4299      	cmp	r1, r3
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d024      	beq.n	8003288 <drawRectangleOutlineIntoFramebuffer+0x15a>
					if ((x >= x1) & (x < (x1 + length))) {
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	461a      	mov	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4293      	cmp	r3, r2
 8003246:	bfac      	ite	ge
 8003248:	2301      	movge	r3, #1
 800324a:	2300      	movlt	r3, #0
 800324c:	b2da      	uxtb	r2, r3
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	4619      	mov	r1, r3
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	440b      	add	r3, r1
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	4299      	cmp	r1, r3
 800325a:	bfb4      	ite	lt
 800325c:	2301      	movlt	r3, #1
 800325e:	2300      	movge	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	4013      	ands	r3, r2
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00e      	beq.n	8003288 <drawRectangleOutlineIntoFramebuffer+0x15a>
						framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 800326a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	019b      	lsls	r3, r3, #6
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4413      	add	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003282:	4413      	add	r3, r2
 8003284:	8c3a      	ldrh	r2, [r7, #32]
 8003286:	801a      	strh	r2, [r3, #0]
		for (int y = y1; y < y1 + height; y++) {
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	3301      	adds	r3, #1
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	88bb      	ldrh	r3, [r7, #4]
 8003290:	461a      	mov	r2, r3
 8003292:	883b      	ldrh	r3, [r7, #0]
 8003294:	4413      	add	r3, r2
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	f6ff af69 	blt.w	8003170 <drawRectangleOutlineIntoFramebuffer+0x42>
	for (int x = x1; x < x1 + length; x++) {
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	461a      	mov	r2, r3
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	4413      	add	r3, r2
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f6ff af5b 	blt.w	800316a <drawRectangleOutlineIntoFramebuffer+0x3c>
					}
				}
			}
		}
	}
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd90      	pop	{r4, r7, pc}

080032be <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 80032be:	b480      	push	{r7}
 80032c0:	b089      	sub	sp, #36	@ 0x24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 80032d4:	e015      	b.n	8003302 <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	4619      	mov	r1, r3
 80032e0:	460b      	mov	r3, r1
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032ec:	4413      	add	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	791b      	ldrb	r3, [r3, #4]
 80032f4:	461a      	mov	r2, r3
 80032f6:	8b7b      	ldrh	r3, [r7, #26]
 80032f8:	4413      	add	r3, r2
 80032fa:	837b      	strh	r3, [r7, #26]
		currentletter++;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e5      	bne.n	80032d6 <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	b29b      	uxth	r3, r3
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 800331c:	bf00      	nop
 800331e:	3724      	adds	r7, #36	@ 0x24
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	@ 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 800333e:	e015      	b.n	800336c <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	460b      	mov	r3, r1
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003356:	4413      	add	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	791b      	ldrb	r3, [r3, #4]
 800335e:	461a      	mov	r2, r3
 8003360:	8b7b      	ldrh	r3, [r7, #26]
 8003362:	4413      	add	r3, r2
 8003364:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3301      	adds	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e5      	bne.n	8003340 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	8b7b      	ldrh	r3, [r7, #26]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8003382:	bf00      	nop
 8003384:	3724      	adds	r7, #36	@ 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <getCharXadv>:
	}

	return (uint16_t)xadv;
}

uint16_t getCharXadv(char letter, const GFXfont *font) {
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	6039      	str	r1, [r7, #0]
 8003398:	71fb      	strb	r3, [r7, #7]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	79fa      	ldrb	r2, [r7, #7]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033ac:	440b      	add	r3, r1
 80033ae:	60fb      	str	r3, [r7, #12]
	return toDraw->xAdvance;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	791b      	ldrb	r3, [r3, #4]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <drawCharIntoFramebuffer>:

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80033c0:	b480      	push	{r7}
 80033c2:	b08d      	sub	sp, #52	@ 0x34
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	4611      	mov	r1, r2
 80033ca:	461a      	mov	r2, r3
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	460b      	mov	r3, r1
 80033d2:	81bb      	strh	r3, [r7, #12]
 80033d4:	4613      	mov	r3, r2
 80033d6:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033ea:	440b      	add	r3, r1
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	789b      	ldrb	r3, [r3, #2]
 80033f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	78db      	ldrb	r3, [r3, #3]
 80033f8:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003408:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	791b      	ldrb	r3, [r3, #4]
 800340e:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 8003428:	2300      	movs	r3, #0
 800342a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800342c:	e071      	b.n	8003512 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 800342e:	2300      	movs	r3, #0
 8003430:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003432:	e062      	b.n	80034fa <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 8003434:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 8003446:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 800344c:	461a      	mov	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4413      	add	r3, r2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 8003458:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800345c:	2b00      	cmp	r3, #0
 800345e:	da41      	bge.n	80034e4 <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 8003460:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003464:	b29a      	uxth	r2, r3
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	4413      	add	r3, r2
 800346a:	b29a      	uxth	r2, r3
 800346c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003470:	b29b      	uxth	r3, r3
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	b29a      	uxth	r2, r3
 8003476:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 800347c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800347e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	b29a      	uxth	r2, r3
 8003484:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003488:	b29b      	uxth	r3, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 800348e:	8afa      	ldrh	r2, [r7, #22]
 8003490:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003494:	429a      	cmp	r2, r3
 8003496:	bf2c      	ite	cs
 8003498:	2301      	movcs	r3, #1
 800349a:	2300      	movcc	r3, #0
 800349c:	b2da      	uxtb	r2, r3
 800349e:	8af9      	ldrh	r1, [r7, #22]
 80034a0:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80034a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80034a8:	4403      	add	r3, r0
 80034aa:	4299      	cmp	r1, r3
 80034ac:	bfb4      	ite	lt
 80034ae:	2301      	movlt	r3, #1
 80034b0:	2300      	movge	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	4013      	ands	r3, r2
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 80034bc:	8abb      	ldrh	r3, [r7, #20]
 80034be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034c2:	d20f      	bcs.n	80034e4 <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80034c4:	8afa      	ldrh	r2, [r7, #22]
 80034c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80034ca:	1ad2      	subs	r2, r2, r3
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	019b      	lsls	r3, r3, #6
 80034d4:	461a      	mov	r2, r3
 80034d6:	8abb      	ldrh	r3, [r7, #20]
 80034d8:	4413      	add	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034de:	4413      	add	r3, r2
 80034e0:	89ba      	ldrh	r2, [r7, #12]
 80034e2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 80034e4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 80034ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80034fa:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80034fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003502:	429a      	cmp	r2, r3
 8003504:	db96      	blt.n	8003434 <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 8003506:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	b29b      	uxth	r3, r3
 8003510:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003512:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8003516:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800351a:	429a      	cmp	r2, r3
 800351c:	db87      	blt.n	800342e <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 800351e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003522:	b29b      	uxth	r3, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	3734      	adds	r7, #52	@ 0x34
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b08d      	sub	sp, #52	@ 0x34
 8003534:	af06      	add	r7, sp, #24
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	460b      	mov	r3, r1
 8003540:	80fb      	strh	r3, [r7, #6]
 8003542:	4613      	mov	r3, r2
 8003544:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8003546:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8003552:	1d38      	adds	r0, r7, #4
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800355c:	f7ff feaf 	bl	80032be <getStringCenter>
 8003560:	e00c      	b.n	800357c <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 8003562:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 800356e:	1d38      	adds	r0, r7, #4
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003578:	f7ff fed6 	bl	8003328 <getStringLeft>
	}
	uint16_t xAdvance = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 8003584:	bf00      	nop
 8003586:	8abb      	ldrh	r3, [r7, #20]
 8003588:	3301      	adds	r3, #1
 800358a:	82bb      	strh	r3, [r7, #20]
 800358c:	8abb      	ldrh	r3, [r7, #20]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f6      	bne.n	8003586 <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 8003598:	8abb      	ldrh	r3, [r7, #20]
 800359a:	3b01      	subs	r3, #1
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	e036      	b.n	800360e <drawStringIntoFramebuffer+0xde>
		if ((stringxpos + xAdvance) > (xstart + framewidth)) {
 80035a0:	88bb      	ldrh	r3, [r7, #4]
 80035a2:	461a      	mov	r2, r3
 80035a4:	8afb      	ldrh	r3, [r7, #22]
 80035a6:	441a      	add	r2, r3
 80035a8:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80035aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80035ac:	440b      	add	r3, r1
 80035ae:	429a      	cmp	r2, r3
 80035b0:	dd0d      	ble.n	80035ce <drawStringIntoFramebuffer+0x9e>
			xAdvance += getCharXadv(buffer[i], font);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fee6 	bl	800338e <getCharXadv>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	4413      	add	r3, r2
 80035ca:	82fb      	strh	r3, [r7, #22]
			break;
 80035cc:	e022      	b.n	8003614 <drawStringIntoFramebuffer+0xe4>
		}
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	7818      	ldrb	r0, [r3, #0]
 80035d6:	88ba      	ldrh	r2, [r7, #4]
 80035d8:	8afb      	ldrh	r3, [r7, #22]
 80035da:	4413      	add	r3, r2
 80035dc:	b29c      	uxth	r4, r3
 80035de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035e0:	88f9      	ldrh	r1, [r7, #6]
 80035e2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80035e4:	9204      	str	r2, [sp, #16]
 80035e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035e8:	9203      	str	r2, [sp, #12]
 80035ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ec:	9202      	str	r2, [sp, #8]
 80035ee:	2200      	movs	r2, #0
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4623      	mov	r3, r4
 80035f6:	460a      	mov	r2, r1
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	f7ff fee1 	bl	80033c0 <drawCharIntoFramebuffer>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	8afb      	ldrh	r3, [r7, #22]
 8003604:	4413      	add	r3, r2
 8003606:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	3b01      	subs	r3, #1
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	dac5      	bge.n	80035a0 <drawStringIntoFramebuffer+0x70>
	}
	return font->yAdvance;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	7b1b      	ldrb	r3, [r3, #12]
}
 8003618:	4618      	mov	r0, r3
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}

08003620 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003624:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8003628:	af00      	add	r7, sp, #0
 800362a:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 800362e:	f5a6 7619 	sub.w	r6, r6, #612	@ 0x264
 8003632:	6030      	str	r0, [r6, #0]
 8003634:	460e      	mov	r6, r1
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800363e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003642:	4632      	mov	r2, r6
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800364a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800364e:	4602      	mov	r2, r0
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003656:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800365a:	460a      	mov	r2, r1
 800365c:	801a      	strh	r2, [r3, #0]
 800365e:	466b      	mov	r3, sp
 8003660:	469a      	mov	sl, r3
	length = 400;
 8003662:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003666:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800366a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800366e:	801a      	strh	r2, [r3, #0]
	height = 215;
 8003670:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003674:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003678:	22d7      	movs	r2, #215	@ 0xd7
 800367a:	801a      	strh	r2, [r3, #0]
	if (positioning & CENTER_OBJECT) {
 800367c:	f897 3294 	ldrb.w	r3, [r7, #660]	@ 0x294
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00f      	beq.n	80036a8 <drawImageIntoFramebuffer+0x88>
		 getRectCenter(&x, &y, length, height);
 8003688:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800368c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003690:	8819      	ldrh	r1, [r3, #0]
 8003692:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003696:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800369a:	881a      	ldrh	r2, [r3, #0]
 800369c:	1db8      	adds	r0, r7, #6
 800369e:	460b      	mov	r3, r1
 80036a0:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80036a4:	f7ff fd20 	bl	80030e8 <getRectCenter>
	}
	FIL newfile;
	FRESULT fresult = f_open(&newfile, image, FA_READ);
 80036a8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036ac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80036b0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80036b4:	2201      	movs	r2, #1
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	f00b f80a 	bl	800e6d0 <f_open>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (fresult == FR_OK) {
 80036c2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <drawImageIntoFramebuffer+0xb2>
		USB_Println("the file was opened good\n");
 80036ca:	487e      	ldr	r0, [pc, #504]	@ (80038c4 <drawImageIntoFramebuffer+0x2a4>)
 80036cc:	f7fe fe66 	bl	800239c <USB_Println>
 80036d0:	e007      	b.n	80036e2 <drawImageIntoFramebuffer+0xc2>
	} else {
		USB_Println("failure to open %s\n", image);
 80036d2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036d6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	487a      	ldr	r0, [pc, #488]	@ (80038c8 <drawImageIntoFramebuffer+0x2a8>)
 80036de:	f7fe fe5d 	bl	800239c <USB_Println>
	}
	uint16_t readbuffer[height];
 80036e2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036e6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80036ea:	881e      	ldrh	r6, [r3, #0]
 80036ec:	4633      	mov	r3, r6
 80036ee:	3b01      	subs	r3, #1
 80036f0:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80036f4:	b2b3      	uxth	r3, r6
 80036f6:	2200      	movs	r2, #0
 80036f8:	4698      	mov	r8, r3
 80036fa:	4691      	mov	r9, r2
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003708:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800370c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003710:	b2b3      	uxth	r3, r6
 8003712:	2200      	movs	r2, #0
 8003714:	461c      	mov	r4, r3
 8003716:	4615      	mov	r5, r2
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	012b      	lsls	r3, r5, #4
 8003722:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003726:	0122      	lsls	r2, r4, #4
 8003728:	4633      	mov	r3, r6
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	3307      	adds	r3, #7
 800372e:	08db      	lsrs	r3, r3, #3
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	ebad 0d03 	sub.w	sp, sp, r3
 8003736:	466b      	mov	r3, sp
 8003738:	3301      	adds	r3, #1
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	unsigned int br = 0;
 8003742:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003746:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
	for (int xx = x; xx < x + length; xx++) {
 800374e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003752:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800375c:	e093      	b.n	8003886 <drawImageIntoFramebuffer+0x266>
		f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 800375e:	4633      	mov	r3, r6
 8003760:	005a      	lsls	r2, r3, #1
 8003762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003766:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800376a:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 800376e:	f00b f969 	bl	800ea44 <f_read>
		if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 8003772:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003776:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800377a:	429a      	cmp	r2, r3
 800377c:	bfac      	ite	ge
 800377e:	2301      	movge	r3, #1
 8003780:	2300      	movlt	r3, #0
 8003782:	b2da      	uxtb	r2, r3
 8003784:	f8b7 12a0 	ldrh.w	r1, [r7, #672]	@ 0x2a0
 8003788:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 800378c:	440b      	add	r3, r1
 800378e:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8003792:	4299      	cmp	r1, r3
 8003794:	bfb4      	ite	lt
 8003796:	2301      	movlt	r3, #1
 8003798:	2300      	movge	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4013      	ands	r3, r2
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d062      	beq.n	800386a <drawImageIntoFramebuffer+0x24a>
			for (int i = 0; i < height; i++) {
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80037aa:	e055      	b.n	8003858 <drawImageIntoFramebuffer+0x238>
				//USB_Println("writing to screen, x:%d, y:%d\n",xx, y + i);
				int coordinate = ((xx - xstart) * SCREEN_HEIGHT) + y + i;
 80037ac:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 80037b0:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80037b4:	1ad2      	subs	r2, r2, r3
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	461a      	mov	r2, r3
 80037c0:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 80037c4:	4413      	add	r3, r2
 80037c6:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80037ca:	4413      	add	r3, r2
 80037cc:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
				char whatbuffer[20];
				itoa(coordinate, whatbuffer, 10);
 80037d0:	f107 0310 	add.w	r3, r7, #16
 80037d4:	220a      	movs	r2, #10
 80037d6:	4619      	mov	r1, r3
 80037d8:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 80037dc:	f00c f8c3 	bl	800f966 <itoa>
				strncat(whatbuffer, "\n", 10);
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fcfb 	bl	80001e0 <strlen>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	f107 0310 	add.w	r3, r7, #16
 80037f2:	4413      	add	r3, r2
 80037f4:	4935      	ldr	r1, [pc, #212]	@ (80038cc <drawImageIntoFramebuffer+0x2ac>)
 80037f6:	461a      	mov	r2, r3
 80037f8:	460b      	mov	r3, r1
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)whatbuffer, strlen(whatbuffer));
 80037fe:	f107 0310 	add.w	r3, r7, #16
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fcec 	bl	80001e0 <strlen>
 8003808:	4603      	mov	r3, r0
 800380a:	b29a      	uxth	r2, r3
 800380c:	f107 0310 	add.w	r3, r7, #16
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f00b fc18 	bl	800f048 <CDC_Transmit_FS>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + y + i] = readbuffer[i];
 8003818:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 800381c:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	019b      	lsls	r3, r3, #6
 800382a:	461a      	mov	r2, r3
 800382c:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8003830:	441a      	add	r2, r3
 8003832:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003836:	4413      	add	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 800383e:	4413      	add	r3, r2
 8003840:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8003844:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 8003848:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800384c:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < height; i++) {
 800384e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003852:	3301      	adds	r3, #1
 8003854:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003858:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800385c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8003866:	429a      	cmp	r2, r3
 8003868:	dba0      	blt.n	80037ac <drawImageIntoFramebuffer+0x18c>
			}
		}
		if (xx > (xstart + framewidth)) {
 800386a:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 800386e:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 8003872:	4413      	add	r3, r2
 8003874:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003878:	429a      	cmp	r2, r3
 800387a:	dc16      	bgt.n	80038aa <drawImageIntoFramebuffer+0x28a>
	for (int xx = x; xx < x + length; xx++) {
 800387c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8003880:	3301      	adds	r3, #1
 8003882:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003886:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800388a:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003896:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	4413      	add	r3, r2
 800389e:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	f6ff af5b 	blt.w	800375e <drawImageIntoFramebuffer+0x13e>
 80038a8:	e000      	b.n	80038ac <drawImageIntoFramebuffer+0x28c>
			break;
 80038aa:	bf00      	nop
		}
	}
	f_close(&newfile);
 80038ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038b0:	4618      	mov	r0, r3
 80038b2:	f00b fa84 	bl	800edbe <f_close>
 80038b6:	46d5      	mov	sp, sl
}
 80038b8:	bf00      	nop
 80038ba:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80038be:	46bd      	mov	sp, r7
 80038c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c4:	080105a4 	.word	0x080105a4
 80038c8:	080105c0 	.word	0x080105c0
 80038cc:	080105d4 	.word	0x080105d4

080038d0 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af04      	add	r7, sp, #16
 80038d6:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 80038d8:	220a      	movs	r2, #10
 80038da:	490f      	ldr	r1, [pc, #60]	@ (8003918 <setrpmdata+0x48>)
 80038dc:	480f      	ldr	r0, [pc, #60]	@ (800391c <setrpmdata+0x4c>)
 80038de:	f00c f99a 	bl	800fc16 <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 80038e2:	220a      	movs	r2, #10
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	480d      	ldr	r0, [pc, #52]	@ (800391c <setrpmdata+0x4c>)
 80038e8:	f00c f982 	bl	800fbf0 <strncat>
	((StringObject*)otherobjects[0])->updateString(rpmresult, NO_CENTER_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 200, 260, 1);
 80038ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <setrpmdata+0x50>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	2301      	movs	r3, #1
 80038f2:	9303      	str	r3, [sp, #12]
 80038f4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80038f8:	9302      	str	r3, [sp, #8]
 80038fa:	23c8      	movs	r3, #200	@ 0xc8
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <setrpmdata+0x54>)
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003906:	2200      	movs	r2, #0
 8003908:	4904      	ldr	r1, [pc, #16]	@ (800391c <setrpmdata+0x4c>)
 800390a:	f7ff f84b 	bl	80029a4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	080105e4 	.word	0x080105e4
 800391c:	200003a0 	.word	0x200003a0
 8003920:	200003f0 	.word	0x200003f0
 8003924:	08013930 	.word	0x08013930

08003928 <settempdata>:

void settempdata(char *tempvalue) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af04      	add	r7, sp, #16
 800392e:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 8003930:	220a      	movs	r2, #10
 8003932:	490f      	ldr	r1, [pc, #60]	@ (8003970 <settempdata+0x48>)
 8003934:	480f      	ldr	r0, [pc, #60]	@ (8003974 <settempdata+0x4c>)
 8003936:	f00c f96e 	bl	800fc16 <strncpy>
	strncat(tempresult, tempvalue, 10);
 800393a:	220a      	movs	r2, #10
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	480d      	ldr	r0, [pc, #52]	@ (8003974 <settempdata+0x4c>)
 8003940:	f00c f956 	bl	800fbf0 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 8003944:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <settempdata+0x50>)
 8003946:	6858      	ldr	r0, [r3, #4]
 8003948:	2303      	movs	r3, #3
 800394a:	9303      	str	r3, [sp, #12]
 800394c:	2364      	movs	r3, #100	@ 0x64
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <settempdata+0x54>)
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800395e:	2202      	movs	r2, #2
 8003960:	4904      	ldr	r1, [pc, #16]	@ (8003974 <settempdata+0x4c>)
 8003962:	f7ff f81f 	bl	80029a4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	080105e4 	.word	0x080105e4
 8003974:	200003b4 	.word	0x200003b4
 8003978:	200003f0 	.word	0x200003f0
 800397c:	08011ad8 	.word	0x08011ad8

08003980 <setgeardata>:

void setgeardata(char *gearvalue) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af04      	add	r7, sp, #16
 8003986:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 8003988:	220a      	movs	r2, #10
 800398a:	490e      	ldr	r1, [pc, #56]	@ (80039c4 <setgeardata+0x44>)
 800398c:	480e      	ldr	r0, [pc, #56]	@ (80039c8 <setgeardata+0x48>)
 800398e:	f00c f942 	bl	800fc16 <strncpy>
	strncat(gearresult, gearvalue, 10);
 8003992:	220a      	movs	r2, #10
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	480c      	ldr	r0, [pc, #48]	@ (80039c8 <setgeardata+0x48>)
 8003998:	f00c f92a 	bl	800fbf0 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <setgeardata+0x4c>)
 800399e:	68d8      	ldr	r0, [r3, #12]
 80039a0:	2302      	movs	r3, #2
 80039a2:	9303      	str	r3, [sp, #12]
 80039a4:	23f0      	movs	r3, #240	@ 0xf0
 80039a6:	9302      	str	r3, [sp, #8]
 80039a8:	2364      	movs	r3, #100	@ 0x64
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <setgeardata+0x50>)
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039b4:	2202      	movs	r2, #2
 80039b6:	4904      	ldr	r1, [pc, #16]	@ (80039c8 <setgeardata+0x48>)
 80039b8:	f7fe fff4 	bl	80029a4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	080105e4 	.word	0x080105e4
 80039c8:	20000008 	.word	0x20000008
 80039cc:	200003f0 	.word	0x200003f0
 80039d0:	08017d3c 	.word	0x08017d3c

080039d4 <setbattdata>:

void setbattdata(char *battvalue) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af04      	add	r7, sp, #16
 80039da:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 80039dc:	220a      	movs	r2, #10
 80039de:	490f      	ldr	r1, [pc, #60]	@ (8003a1c <setbattdata+0x48>)
 80039e0:	480f      	ldr	r0, [pc, #60]	@ (8003a20 <setbattdata+0x4c>)
 80039e2:	f00c f918 	bl	800fc16 <strncpy>
	strncat(battresult, battvalue, 10);
 80039e6:	220a      	movs	r2, #10
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	480d      	ldr	r0, [pc, #52]	@ (8003a20 <setbattdata+0x4c>)
 80039ec:	f00c f900 	bl	800fbf0 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 80039f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a24 <setbattdata+0x50>)
 80039f2:	6898      	ldr	r0, [r3, #8]
 80039f4:	2306      	movs	r3, #6
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	233c      	movs	r3, #60	@ 0x3c
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <setbattdata+0x54>)
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	4904      	ldr	r1, [pc, #16]	@ (8003a20 <setbattdata+0x4c>)
 8003a0e:	f7fe ffc9 	bl	80029a4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	080105e4 	.word	0x080105e4
 8003a20:	200003dc 	.word	0x200003dc
 8003a24:	200003f0 	.word	0x200003f0
 8003a28:	08011ad8 	.word	0x08011ad8

08003a2c <setspeeddata>:

void setspeeddata(char *speedvalue) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af04      	add	r7, sp, #16
 8003a32:	6078      	str	r0, [r7, #4]
	strncpy(speedresult, "", 10);
 8003a34:	220a      	movs	r2, #10
 8003a36:	490f      	ldr	r1, [pc, #60]	@ (8003a74 <setspeeddata+0x48>)
 8003a38:	480f      	ldr	r0, [pc, #60]	@ (8003a78 <setspeeddata+0x4c>)
 8003a3a:	f00c f8ec 	bl	800fc16 <strncpy>
	strncat(speedresult, speedvalue, 10);
 8003a3e:	220a      	movs	r2, #10
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	480d      	ldr	r0, [pc, #52]	@ (8003a78 <setspeeddata+0x4c>)
 8003a44:	f00c f8d4 	bl	800fbf0 <strncat>
	((StringObject*)otherobjects[6])->updateString(speedresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 375, 185, 7);
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <setspeeddata+0x50>)
 8003a4a:	6998      	ldr	r0, [r3, #24]
 8003a4c:	2307      	movs	r3, #7
 8003a4e:	9303      	str	r3, [sp, #12]
 8003a50:	23b9      	movs	r3, #185	@ 0xb9
 8003a52:	9302      	str	r3, [sp, #8]
 8003a54:	f240 1377 	movw	r3, #375	@ 0x177
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <setspeeddata+0x54>)
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a62:	2201      	movs	r2, #1
 8003a64:	4904      	ldr	r1, [pc, #16]	@ (8003a78 <setspeeddata+0x4c>)
 8003a66:	f7fe ff9d 	bl	80029a4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	080105e4 	.word	0x080105e4
 8003a78:	200003c8 	.word	0x200003c8
 8003a7c:	200003f0 	.word	0x200003f0
 8003a80:	08011ad8 	.word	0x08011ad8

08003a84 <domainscreen>:

void domainscreen() {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 8003a88:	4804      	ldr	r0, [pc, #16]	@ (8003a9c <domainscreen+0x18>)
 8003a8a:	f7fe fd1d 	bl	80024c8 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 10);
 8003a8e:	220a      	movs	r2, #10
 8003a90:	4903      	ldr	r1, [pc, #12]	@ (8003aa0 <domainscreen+0x1c>)
 8003a92:	4802      	ldr	r0, [pc, #8]	@ (8003a9c <domainscreen+0x18>)
 8003a94:	f7fe fce4 	bl	8002460 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000418 	.word	0x20000418
 8003aa0:	200003f0 	.word	0x200003f0

08003aa4 <_Z41__static_initialization_and_destruction_0ii>:

void dosplashscene() {
	splashScene.drawScene();
	splashScene.setScene(splashobjects, 1);
}
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af04      	add	r7, sp, #16
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	f040 810d 	bne.w	8003cd0 <_Z41__static_initialization_and_destruction_0ii+0x22c>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003abc:	4293      	cmp	r3, r2
 8003abe:	f040 8107 	bne.w	8003cd0 <_Z41__static_initialization_and_destruction_0ii+0x22c>
		new StringObject(200, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, NO_CENTER_OBJECT, rpmresult, 1),
 8003ac2:	2018      	movs	r0, #24
 8003ac4:	f00b ff14 	bl	800f8f0 <_Znwj>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461c      	mov	r4, r3
 8003acc:	2301      	movs	r3, #1
 8003ace:	9303      	str	r3, [sp, #12]
 8003ad0:	4b81      	ldr	r3, [pc, #516]	@ (8003cd8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003ad2:	9302      	str	r3, [sp, #8]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	4b80      	ldr	r3, [pc, #512]	@ (8003cdc <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ae4:	21c8      	movs	r1, #200	@ 0xc8
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7fe feea 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003aec:	4b7c      	ldr	r3, [pc, #496]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003aee:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 8003af0:	2018      	movs	r0, #24
 8003af2:	f00b fefd 	bl	800f8f0 <_Znwj>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461c      	mov	r4, r3
 8003afa:	2303      	movs	r3, #3
 8003afc:	9303      	str	r3, [sp, #12]
 8003afe:	4b79      	ldr	r3, [pc, #484]	@ (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003b00:	9302      	str	r3, [sp, #8]
 8003b02:	2302      	movs	r3, #2
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	4b78      	ldr	r3, [pc, #480]	@ (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b0e:	2264      	movs	r2, #100	@ 0x64
 8003b10:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003b14:	4620      	mov	r0, r4
 8003b16:	f7fe fed3 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b1a:	4b71      	ldr	r3, [pc, #452]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b1c:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 8003b1e:	2018      	movs	r0, #24
 8003b20:	f00b fee6 	bl	800f8f0 <_Znwj>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461c      	mov	r4, r3
 8003b28:	2306      	movs	r3, #6
 8003b2a:	9303      	str	r3, [sp, #12]
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003b2e:	9302      	str	r3, [sp, #8]
 8003b30:	2302      	movs	r3, #2
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b3c:	223c      	movs	r2, #60	@ 0x3c
 8003b3e:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7fe febc 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b48:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b4a:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 8003b4c:	2018      	movs	r0, #24
 8003b4e:	f00b fecf 	bl	800f8f0 <_Znwj>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461c      	mov	r4, r3
 8003b56:	2302      	movs	r3, #2
 8003b58:	9303      	str	r3, [sp, #12]
 8003b5a:	4b65      	ldr	r3, [pc, #404]	@ (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003b5c:	9302      	str	r3, [sp, #8]
 8003b5e:	2302      	movs	r3, #2
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	4b64      	ldr	r3, [pc, #400]	@ (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b6a:	22f0      	movs	r2, #240	@ 0xf0
 8003b6c:	2164      	movs	r1, #100	@ 0x64
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7fe fea6 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b74:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b76:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 8003b78:	2018      	movs	r0, #24
 8003b7a:	f00b feb9 	bl	800f8f0 <_Znwj>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	461c      	mov	r4, r3
 8003b82:	2304      	movs	r3, #4
 8003b84:	9303      	str	r3, [sp, #12]
 8003b86:	4b5c      	ldr	r3, [pc, #368]	@ (8003cf8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b96:	2282      	movs	r2, #130	@ 0x82
 8003b98:	f240 118b 	movw	r1, #395	@ 0x18b
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f7fe fe8f 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003ba4:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5),
 8003ba6:	2018      	movs	r0, #24
 8003ba8:	f00b fea2 	bl	800f8f0 <_Znwj>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461c      	mov	r4, r3
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	9303      	str	r3, [sp, #12]
 8003bb4:	4b52      	ldr	r3, [pc, #328]	@ (8003d00 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8003bb6:	9302      	str	r3, [sp, #8]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bc4:	225a      	movs	r2, #90	@ 0x5a
 8003bc6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7fe fe78 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003bd0:	4b43      	ldr	r3, [pc, #268]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003bd2:	615c      	str	r4, [r3, #20]
		new StringObject(375, 185, 0xFFFF, FREE_SANS_18PT7B, LEFTDRAW_OBJECT, speedresult, 7),
 8003bd4:	2018      	movs	r0, #24
 8003bd6:	f00b fe8b 	bl	800f8f0 <_Znwj>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461c      	mov	r4, r3
 8003bde:	2307      	movs	r3, #7
 8003be0:	9303      	str	r3, [sp, #12]
 8003be2:	4b48      	ldr	r3, [pc, #288]	@ (8003d04 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003be4:	9302      	str	r3, [sp, #8]
 8003be6:	2301      	movs	r3, #1
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bf2:	22b9      	movs	r2, #185	@ 0xb9
 8003bf4:	f240 1177 	movw	r1, #375	@ 0x177
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7fe fe61 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003bfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c00:	619c      	str	r4, [r3, #24]
		new StringObject(440, 288, 0xFFFF, ICONFONT, LEFTDRAW_OBJECT, rpmicon, 8),
 8003c02:	2018      	movs	r0, #24
 8003c04:	f00b fe74 	bl	800f8f0 <_Znwj>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461c      	mov	r4, r3
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	9303      	str	r3, [sp, #12]
 8003c10:	4b3d      	ldr	r3, [pc, #244]	@ (8003d08 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8003c12:	9302      	str	r3, [sp, #8]
 8003c14:	2301      	movs	r3, #1
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	4b38      	ldr	r3, [pc, #224]	@ (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c20:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8003c24:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7fe fe49 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c30:	61dc      	str	r4, [r3, #28]
		new OutlineRectObject(190, 250, 260, 55, 0xFFFF, NO_CENTER_OBJECT, 9),
 8003c32:	2014      	movs	r0, #20
 8003c34:	f00b fe5c 	bl	800f8f0 <_Znwj>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461c      	mov	r4, r3
 8003c3c:	2309      	movs	r3, #9
 8003c3e:	9303      	str	r3, [sp, #12]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9302      	str	r3, [sp, #8]
 8003c44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	2337      	movs	r3, #55	@ 0x37
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003c52:	22fa      	movs	r2, #250	@ 0xfa
 8003c54:	21be      	movs	r1, #190	@ 0xbe
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7fe fed6 	bl	8002a08 <_ZN17OutlineRectObjectC1Ettttthh>
};
 8003c5c:	4b20      	ldr	r3, [pc, #128]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c5e:	621c      	str	r4, [r3, #32]
		new StringObject(405, 210, 0xFFFF, ICONFONT, CENTER_OBJECT, speedicon, 10)
 8003c60:	2018      	movs	r0, #24
 8003c62:	f00b fe45 	bl	800f8f0 <_Znwj>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461c      	mov	r4, r3
 8003c6a:	230a      	movs	r3, #10
 8003c6c:	9303      	str	r3, [sp, #12]
 8003c6e:	4b27      	ldr	r3, [pc, #156]	@ (8003d0c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8003c70:	9302      	str	r3, [sp, #8]
 8003c72:	2302      	movs	r3, #2
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	4b21      	ldr	r3, [pc, #132]	@ (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c7e:	22d2      	movs	r2, #210	@ 0xd2
 8003c80:	f240 1195 	movw	r1, #405	@ 0x195
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7fe fe1b 	bl	80028c0 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c8c:	625c      	str	r4, [r3, #36]	@ 0x24
Scene myScene2(otherobjects, 6);
 8003c8e:	2206      	movs	r2, #6
 8003c90:	4913      	ldr	r1, [pc, #76]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c92:	481f      	ldr	r0, [pc, #124]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003c94:	f7fe fbd2 	bl	800243c <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003c98:	2014      	movs	r0, #20
 8003c9a:	f00b fe29 	bl	800f8f0 <_Znwj>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461c      	mov	r4, r3
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d14 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8003ca4:	6819      	ldr	r1, [r3, #0]
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	9303      	str	r3, [sp, #12]
 8003caa:	2302      	movs	r3, #2
 8003cac:	9302      	str	r3, [sp, #8]
 8003cae:	23a0      	movs	r3, #160	@ 0xa0
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	23f0      	movs	r3, #240	@ 0xf0
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	23d7      	movs	r3, #215	@ 0xd7
 8003cb8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7fe ff15 	bl	8002aec <_ZN11ImageObjectC1EPctttthh>
};
 8003cc2:	4b15      	ldr	r3, [pc, #84]	@ (8003d18 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003cc4:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	4913      	ldr	r1, [pc, #76]	@ (8003d18 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003cca:	4814      	ldr	r0, [pc, #80]	@ (8003d1c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8003ccc:	f7fe fbb6 	bl	800243c <_ZN5SceneC1EPP13DisplayObjecth>
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd90      	pop	{r4, r7, pc}
 8003cd8:	200003a0 	.word	0x200003a0
 8003cdc:	08013930 	.word	0x08013930
 8003ce0:	200003f0 	.word	0x200003f0
 8003ce4:	200003b4 	.word	0x200003b4
 8003ce8:	08011ad8 	.word	0x08011ad8
 8003cec:	200003dc 	.word	0x200003dc
 8003cf0:	20000008 	.word	0x20000008
 8003cf4:	08017d3c 	.word	0x08017d3c
 8003cf8:	2000001c 	.word	0x2000001c
 8003cfc:	080180f8 	.word	0x080180f8
 8003d00:	20000020 	.word	0x20000020
 8003d04:	200003c8 	.word	0x200003c8
 8003d08:	20000024 	.word	0x20000024
 8003d0c:	20000028 	.word	0x20000028
 8003d10:	20000418 	.word	0x20000418
 8003d14:	2000002c 	.word	0x2000002c
 8003d18:	20000420 	.word	0x20000420
 8003d1c:	20000424 	.word	0x20000424

08003d20 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f7ff febb 	bl	8003aa4 <_Z41__static_initialization_and_destruction_0ii>
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	7e3a      	ldrb	r2, [r7, #24]
 8003d48:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]
    endSPI();
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f839 	bl	8003dce <_ZN7MCP25156endSPIEv>
}
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	1cf9      	adds	r1, r7, #3
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f003 fc38 	bl	80075f2 <HAL_SPI_Transmit>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f107 010f 	add.w	r1, r7, #15
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f003 fd6b 	bl	800787a <HAL_SPI_Receive>
	return retVal;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6898      	ldr	r0, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7b1b      	ldrb	r3, [r3, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f001 fcd9 	bl	8005778 <HAL_GPIO_WritePin>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6898      	ldr	r0, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	7b1b      	ldrb	r3, [r3, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	4619      	mov	r1, r3
 8003de2:	f001 fcc9 	bl	8005778 <HAL_GPIO_WritePin>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	@ 0x30
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	startSPI();
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ffd8 	bl	8003dae <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8003dfe:	21c0      	movs	r1, #192	@ 0xc0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ffb0 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ffe1 	bl	8003dce <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	220e      	movs	r2, #14
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f00b fee3 	bl	800fbe0 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8003e1a:	f107 0214 	add.w	r2, r7, #20
 8003e1e:	230e      	movs	r3, #14
 8003e20:	2130      	movs	r1, #48	@ 0x30
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8ec 	bl	8004000 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8003e28:	f107 0214 	add.w	r2, r7, #20
 8003e2c:	230e      	movs	r3, #14
 8003e2e:	2140      	movs	r1, #64	@ 0x40
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8e5 	bl	8004000 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8003e36:	f107 0214 	add.w	r2, r7, #20
 8003e3a:	230e      	movs	r3, #14
 8003e3c:	2150      	movs	r1, #80	@ 0x50
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8de 	bl	8004000 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8003e44:	2200      	movs	r2, #0
 8003e46:	2160      	movs	r1, #96	@ 0x60
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f8b9 	bl	8003fc0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2170      	movs	r1, #112	@ 0x70
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8b4 	bl	8003fc0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8003e58:	22a3      	movs	r2, #163	@ 0xa3
 8003e5a:	212b      	movs	r1, #43	@ 0x2b
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8af 	bl	8003fc0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8003e62:	2304      	movs	r3, #4
 8003e64:	2267      	movs	r2, #103	@ 0x67
 8003e66:	2160      	movs	r1, #96	@ 0x60
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f8f8 	bl	800405e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8003e6e:	2301      	movs	r3, #1
 8003e70:	2267      	movs	r2, #103	@ 0x67
 8003e72:	2170      	movs	r1, #112	@ 0x70
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f8f2 	bl	800405e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003e7a:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <_ZN7MCP25155resetEv+0x130>)
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e84:	6018      	str	r0, [r3, #0]
 8003e86:	3304      	adds	r3, #4
 8003e88:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e8e:	e01e      	b.n	8003ece <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003e9e:	f107 020c 	add.w	r2, r7, #12
 8003ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea4:	4413      	add	r3, r2
 8003ea6:	7819      	ldrb	r1, [r3, #0]
 8003ea8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003eac:	2300      	movs	r3, #0
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fbcc 	bl	800464c <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003eba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003ec2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ec6:	e027      	b.n	8003f18 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	3301      	adds	r3, #1
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	dddd      	ble.n	8003e90 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	723b      	strb	r3, [r7, #8]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003edc:	2300      	movs	r3, #0
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee0:	e016      	b.n	8003f10 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003ee2:	f107 0208 	add.w	r2, r7, #8
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	4413      	add	r3, r2
 8003eea:	7819      	ldrb	r1, [r3, #0]
 8003eec:	2300      	movs	r3, #0
 8003eee:	2201      	movs	r2, #1
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fb77 	bl	80045e4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f08:	e006      	b.n	8003f18 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	dde5      	ble.n	8003ee2 <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	@ 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	080105e8 	.word	0x080105e8

08003f24 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff3c 	bl	8003dae <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003f36:	2103      	movs	r1, #3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff14 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ff0f 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff1e 	bl	8003d8a <_ZN7MCP25156SPI_RxEv>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ff3b 	bl	8003dce <_ZN7MCP25156endSPIEv>

    return ret;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003f62:	b590      	push	{r4, r7, lr}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	460b      	mov	r3, r1
 8003f70:	72fb      	strb	r3, [r7, #11]
 8003f72:	4613      	mov	r3, r2
 8003f74:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff ff19 	bl	8003dae <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff fef1 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f84:	7afb      	ldrb	r3, [r7, #11]
 8003f86:	4619      	mov	r1, r3
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff feec 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]
 8003f92:	e00a      	b.n	8003faa <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	18d4      	adds	r4, r2, r3
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff fef5 	bl	8003d8a <_ZN7MCP25156SPI_RxEv>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
 8003faa:	7dfa      	ldrb	r2, [r7, #23]
 8003fac:	7abb      	ldrb	r3, [r7, #10]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d3f0      	bcc.n	8003f94 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff ff0b 	bl	8003dce <_ZN7MCP25156endSPIEv>
}
 8003fb8:	bf00      	nop
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd90      	pop	{r4, r7, pc}

08003fc0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	70fb      	strb	r3, [r7, #3]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff feec 	bl	8003dae <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fec4 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff febf 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003fe8:	78bb      	ldrb	r3, [r7, #2]
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff feba 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff feeb 	bl	8003dce <_ZN7MCP25156endSPIEv>
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	461a      	mov	r2, r3
 800400c:	460b      	mov	r3, r1
 800400e:	72fb      	strb	r3, [r7, #11]
 8004010:	4613      	mov	r3, r2
 8004012:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff feca 	bl	8003dae <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 800401a:	2102      	movs	r1, #2
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff fea2 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8004022:	7afb      	ldrb	r3, [r7, #11]
 8004024:	4619      	mov	r1, r3
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff fe9d 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 800402c:	2300      	movs	r3, #0
 800402e:	75fb      	strb	r3, [r7, #23]
 8004030:	e00a      	b.n	8004048 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff fe92 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	3301      	adds	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
 8004048:	7dfa      	ldrb	r2, [r7, #23]
 800404a:	7abb      	ldrb	r3, [r7, #10]
 800404c:	429a      	cmp	r2, r3
 800404e:	d3f0      	bcc.n	8004032 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff febc 	bl	8003dce <_ZN7MCP25156endSPIEv>
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	4608      	mov	r0, r1
 8004068:	4611      	mov	r1, r2
 800406a:	461a      	mov	r2, r3
 800406c:	4603      	mov	r3, r0
 800406e:	70fb      	strb	r3, [r7, #3]
 8004070:	460b      	mov	r3, r1
 8004072:	70bb      	strb	r3, [r7, #2]
 8004074:	4613      	mov	r3, r2
 8004076:	707b      	strb	r3, [r7, #1]
    startSPI();
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fe98 	bl	8003dae <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 800407e:	2105      	movs	r1, #5
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fe70 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fe6b 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8004090:	78bb      	ldrb	r3, [r7, #2]
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fe66 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 800409a:	787b      	ldrb	r3, [r7, #1]
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fe61 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fe92 	bl	8003dce <_ZN7MCP25156endSPIEv>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
    startSPI();
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fe77 	bl	8003dae <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 80040c0:	21a0      	movs	r1, #160	@ 0xa0
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fe4f 	bl	8003d66 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fe5e 	bl	8003d8a <_ZN7MCP25156SPI_RxEv>
 80040ce:	4603      	mov	r3, r0
 80040d0:	73fb      	strb	r3, [r7, #15]
    endSPI();
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fe7b 	bl	8003dce <_ZN7MCP25156endSPIEv>

    return i;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 80040ea:	2180      	movs	r1, #128	@ 0x80
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f812 	bl	8004116 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 80040f2:	4603      	mov	r3, r0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8004104:	2100      	movs	r1, #0
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f805 	bl	8004116 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 800410c:	4603      	mov	r3, r0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	22e0      	movs	r2, #224	@ 0xe0
 8004126:	210f      	movs	r1, #15
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff ff98 	bl	800405e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 800412e:	f000 fccb 	bl	8004ac8 <HAL_GetTick>
 8004132:	4603      	mov	r3, r0
 8004134:	330a      	adds	r3, #10
 8004136:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8004138:	2300      	movs	r3, #0
 800413a:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 800413c:	e013      	b.n	8004166 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 800413e:	210e      	movs	r1, #14
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff feef 	bl	8003f24 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004146:	4603      	mov	r3, r0
 8004148:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	f023 031f 	bic.w	r3, r3, #31
 8004150:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	429a      	cmp	r2, r3
 8004158:	bf0c      	ite	eq
 800415a:	2301      	moveq	r3, #1
 800415c:	2300      	movne	r3, #0
 800415e:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8004166:	f000 fcaf 	bl	8004ac8 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4293      	cmp	r3, r2
 8004170:	bf8c      	ite	hi
 8004172:	2301      	movhi	r3, #1
 8004174:	2300      	movls	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e0      	bne.n	800413e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 800417c:	e000      	b.n	8004180 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 800417e:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 800418a:	2301      	movs	r3, #1

}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
 80041a0:	4613      	mov	r3, r2
 80041a2:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff9c 	bl	80040e2 <_ZN7MCP251513setConfigModeEv>
 80041aa:	4603      	mov	r3, r0
 80041ac:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 80041b4:	7afb      	ldrb	r3, [r7, #11]
 80041b6:	e1b5      	b.n	8004524 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 80041bc:	78bb      	ldrb	r3, [r7, #2]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d009      	beq.n	80041d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	f300 8193 	bgt.w	80044ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 811f 	beq.w	800440c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	f000 808e 	beq.w	80042f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 80041d4:	e18b      	b.n	80044ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	2b0f      	cmp	r3, #15
 80041da:	f200 8085 	bhi.w	80042e8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 80041de:	a201      	add	r2, pc, #4	@ (adr r2, 80041e4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	08004225 	.word	0x08004225
 80041e8:	08004233 	.word	0x08004233
 80041ec:	08004241 	.word	0x08004241
 80041f0:	0800424f 	.word	0x0800424f
 80041f4:	0800425d 	.word	0x0800425d
 80041f8:	0800426b 	.word	0x0800426b
 80041fc:	08004279 	.word	0x08004279
 8004200:	08004287 	.word	0x08004287
 8004204:	080042e9 	.word	0x080042e9
 8004208:	080042e9 	.word	0x080042e9
 800420c:	08004295 	.word	0x08004295
 8004210:	080042a3 	.word	0x080042a3
 8004214:	080042b1 	.word	0x080042b1
 8004218:	080042bf 	.word	0x080042bf
 800421c:	080042cd 	.word	0x080042cd
 8004220:	080042db 	.word	0x080042db
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8004224:	231f      	movs	r3, #31
 8004226:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8004228:	23bf      	movs	r3, #191	@ 0xbf
 800422a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 800422c:	2387      	movs	r3, #135	@ 0x87
 800422e:	733b      	strb	r3, [r7, #12]
            break;
 8004230:	e05d      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8004232:	230f      	movs	r3, #15
 8004234:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8004236:	23bf      	movs	r3, #191	@ 0xbf
 8004238:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 800423a:	2387      	movs	r3, #135	@ 0x87
 800423c:	733b      	strb	r3, [r7, #12]
            break;
 800423e:	e056      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8004240:	2307      	movs	r3, #7
 8004242:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8004244:	23bf      	movs	r3, #191	@ 0xbf
 8004246:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8004248:	2387      	movs	r3, #135	@ 0x87
 800424a:	733b      	strb	r3, [r7, #12]
            break;
 800424c:	e04f      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 800424e:	2307      	movs	r3, #7
 8004250:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8004252:	23a4      	movs	r3, #164	@ 0xa4
 8004254:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8004256:	2384      	movs	r3, #132	@ 0x84
 8004258:	733b      	strb	r3, [r7, #12]
            break;
 800425a:	e048      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 800425c:	2347      	movs	r3, #71	@ 0x47
 800425e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8004260:	23e2      	movs	r3, #226	@ 0xe2
 8004262:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8004264:	2385      	movs	r3, #133	@ 0x85
 8004266:	733b      	strb	r3, [r7, #12]
            break;
 8004268:	e041      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 800426a:	2303      	movs	r3, #3
 800426c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 800426e:	23bf      	movs	r3, #191	@ 0xbf
 8004270:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8004272:	2387      	movs	r3, #135	@ 0x87
 8004274:	733b      	strb	r3, [r7, #12]
            break;
 8004276:	e03a      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8004278:	2303      	movs	r3, #3
 800427a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 800427c:	23b4      	movs	r3, #180	@ 0xb4
 800427e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8004280:	2386      	movs	r3, #134	@ 0x86
 8004282:	733b      	strb	r3, [r7, #12]
            break;
 8004284:	e033      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8004286:	2301      	movs	r3, #1
 8004288:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 800428a:	23bf      	movs	r3, #191	@ 0xbf
 800428c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 800428e:	2387      	movs	r3, #135	@ 0x87
 8004290:	733b      	strb	r3, [r7, #12]
            break;
 8004292:	e02c      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8004294:	2301      	movs	r3, #1
 8004296:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8004298:	23b4      	movs	r3, #180	@ 0xb4
 800429a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 800429c:	2386      	movs	r3, #134	@ 0x86
 800429e:	733b      	strb	r3, [r7, #12]
            break;
 80042a0:	e025      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 80042a6:	23b1      	movs	r3, #177	@ 0xb1
 80042a8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 80042aa:	2385      	movs	r3, #133	@ 0x85
 80042ac:	733b      	strb	r3, [r7, #12]
            break;
 80042ae:	e01e      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 80042b4:	23b4      	movs	r3, #180	@ 0xb4
 80042b6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 80042b8:	2386      	movs	r3, #134	@ 0x86
 80042ba:	733b      	strb	r3, [r7, #12]
            break;
 80042bc:	e017      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 80042be:	2300      	movs	r3, #0
 80042c0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 80042c2:	23b1      	movs	r3, #177	@ 0xb1
 80042c4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 80042c6:	2385      	movs	r3, #133	@ 0x85
 80042c8:	733b      	strb	r3, [r7, #12]
            break;
 80042ca:	e010      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 80042cc:	2300      	movs	r3, #0
 80042ce:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 80042d0:	2390      	movs	r3, #144	@ 0x90
 80042d2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 80042d4:	2382      	movs	r3, #130	@ 0x82
 80042d6:	733b      	strb	r3, [r7, #12]
            break;
 80042d8:	e009      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 80042da:	2300      	movs	r3, #0
 80042dc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 80042e2:	2380      	movs	r3, #128	@ 0x80
 80042e4:	733b      	strb	r3, [r7, #12]
            break;
 80042e6:	e002      	b.n	80042ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]
            break;
 80042ec:	bf00      	nop
        }
        break;
 80042ee:	e101      	b.n	80044f4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	f200 8086 	bhi.w	8004404 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 80042f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004300 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004341 	.word	0x08004341
 8004304:	0800434f 	.word	0x0800434f
 8004308:	0800435d 	.word	0x0800435d
 800430c:	08004405 	.word	0x08004405
 8004310:	0800436b 	.word	0x0800436b
 8004314:	08004379 	.word	0x08004379
 8004318:	08004387 	.word	0x08004387
 800431c:	08004395 	.word	0x08004395
 8004320:	080043a3 	.word	0x080043a3
 8004324:	08004405 	.word	0x08004405
 8004328:	080043b1 	.word	0x080043b1
 800432c:	080043bf 	.word	0x080043bf
 8004330:	080043cd 	.word	0x080043cd
 8004334:	080043db 	.word	0x080043db
 8004338:	080043e9 	.word	0x080043e9
 800433c:	080043f7 	.word	0x080043f7
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8004340:	233f      	movs	r3, #63	@ 0x3f
 8004342:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8004344:	23ff      	movs	r3, #255	@ 0xff
 8004346:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8004348:	2387      	movs	r3, #135	@ 0x87
 800434a:	733b      	strb	r3, [r7, #12]
            break;
 800434c:	e05d      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 800434e:	231f      	movs	r3, #31
 8004350:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8004352:	23ff      	movs	r3, #255	@ 0xff
 8004354:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8004356:	2387      	movs	r3, #135	@ 0x87
 8004358:	733b      	strb	r3, [r7, #12]
            break;
 800435a:	e056      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 800435c:	230f      	movs	r3, #15
 800435e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8004360:	23ff      	movs	r3, #255	@ 0xff
 8004362:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8004364:	2387      	movs	r3, #135	@ 0x87
 8004366:	733b      	strb	r3, [r7, #12]
            break;
 8004368:	e04f      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 800436a:	234e      	movs	r3, #78	@ 0x4e
 800436c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 800436e:	23f1      	movs	r3, #241	@ 0xf1
 8004370:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8004372:	2385      	movs	r3, #133	@ 0x85
 8004374:	733b      	strb	r3, [r7, #12]
            break;
 8004376:	e048      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8004378:	2307      	movs	r3, #7
 800437a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 800437c:	23ff      	movs	r3, #255	@ 0xff
 800437e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8004380:	2387      	movs	r3, #135	@ 0x87
 8004382:	733b      	strb	r3, [r7, #12]
            break;
 8004384:	e041      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8004386:	2307      	movs	r3, #7
 8004388:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 800438a:	23fa      	movs	r3, #250	@ 0xfa
 800438c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 800438e:	2387      	movs	r3, #135	@ 0x87
 8004390:	733b      	strb	r3, [r7, #12]
            break;
 8004392:	e03a      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8004394:	2303      	movs	r3, #3
 8004396:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8004398:	23ff      	movs	r3, #255	@ 0xff
 800439a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 800439c:	2387      	movs	r3, #135	@ 0x87
 800439e:	733b      	strb	r3, [r7, #12]
            break;
 80043a0:	e033      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 80043a2:	2303      	movs	r3, #3
 80043a4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 80043a6:	23be      	movs	r3, #190	@ 0xbe
 80043a8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 80043aa:	2307      	movs	r3, #7
 80043ac:	733b      	strb	r3, [r7, #12]
            break;
 80043ae:	e02c      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 80043b0:	2303      	movs	r3, #3
 80043b2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 80043b4:	23fa      	movs	r3, #250	@ 0xfa
 80043b6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 80043b8:	2387      	movs	r3, #135	@ 0x87
 80043ba:	733b      	strb	r3, [r7, #12]
            break;
 80043bc:	e025      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 80043be:	2303      	movs	r3, #3
 80043c0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 80043c2:	23f0      	movs	r3, #240	@ 0xf0
 80043c4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 80043c6:	2386      	movs	r3, #134	@ 0x86
 80043c8:	733b      	strb	r3, [r7, #12]
            break;
 80043ca:	e01e      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 80043d0:	23fa      	movs	r3, #250	@ 0xfa
 80043d2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 80043d4:	2387      	movs	r3, #135	@ 0x87
 80043d6:	733b      	strb	r3, [r7, #12]
            break;
 80043d8:	e017      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 80043da:	2341      	movs	r3, #65	@ 0x41
 80043dc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 80043de:	23f1      	movs	r3, #241	@ 0xf1
 80043e0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 80043e2:	2385      	movs	r3, #133	@ 0x85
 80043e4:	733b      	strb	r3, [r7, #12]
            break;
 80043e6:	e010      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 80043ec:	23f0      	movs	r3, #240	@ 0xf0
 80043ee:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 80043f0:	2386      	movs	r3, #134	@ 0x86
 80043f2:	733b      	strb	r3, [r7, #12]
            break;
 80043f4:	e009      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 80043fa:	23d0      	movs	r3, #208	@ 0xd0
 80043fc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 80043fe:	2382      	movs	r3, #130	@ 0x82
 8004400:	733b      	strb	r3, [r7, #12]
            break;
 8004402:	e002      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]
            break;
 8004408:	bf00      	nop
        }
        break;
 800440a:	e073      	b.n	80044f4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	3b04      	subs	r3, #4
 8004410:	2b0b      	cmp	r3, #11
 8004412:	d868      	bhi.n	80044e6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8004414:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	0800444d 	.word	0x0800444d
 8004420:	0800445b 	.word	0x0800445b
 8004424:	08004469 	.word	0x08004469
 8004428:	08004477 	.word	0x08004477
 800442c:	08004485 	.word	0x08004485
 8004430:	080044e7 	.word	0x080044e7
 8004434:	08004493 	.word	0x08004493
 8004438:	080044a1 	.word	0x080044a1
 800443c:	080044af 	.word	0x080044af
 8004440:	080044bd 	.word	0x080044bd
 8004444:	080044cb 	.word	0x080044cb
 8004448:	080044d9 	.word	0x080044d9
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 800444c:	230b      	movs	r3, #11
 800444e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8004450:	23ff      	movs	r3, #255	@ 0xff
 8004452:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8004454:	2387      	movs	r3, #135	@ 0x87
 8004456:	733b      	strb	r3, [r7, #12]
	    break;
 8004458:	e048      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 800445a:	2309      	movs	r3, #9
 800445c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 800445e:	23ff      	movs	r3, #255	@ 0xff
 8004460:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8004462:	2387      	movs	r3, #135	@ 0x87
 8004464:	733b      	strb	r3, [r7, #12]
            break;
 8004466:	e041      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8004468:	2309      	movs	r3, #9
 800446a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 800446c:	23fa      	movs	r3, #250	@ 0xfa
 800446e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8004470:	2387      	movs	r3, #135	@ 0x87
 8004472:	733b      	strb	r3, [r7, #12]
            break;
 8004474:	e03a      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8004476:	2304      	movs	r3, #4
 8004478:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 800447a:	23ff      	movs	r3, #255	@ 0xff
 800447c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 800447e:	2387      	movs	r3, #135	@ 0x87
 8004480:	733b      	strb	r3, [r7, #12]
            break;
 8004482:	e033      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8004484:	2304      	movs	r3, #4
 8004486:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8004488:	23fe      	movs	r3, #254	@ 0xfe
 800448a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 800448c:	2387      	movs	r3, #135	@ 0x87
 800448e:	733b      	strb	r3, [r7, #12]
	    break;
 8004490:	e02c      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8004492:	2304      	movs	r3, #4
 8004494:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8004496:	23fa      	movs	r3, #250	@ 0xfa
 8004498:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 800449a:	2387      	movs	r3, #135	@ 0x87
 800449c:	733b      	strb	r3, [r7, #12]
            break;
 800449e:	e025      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 80044a0:	2303      	movs	r3, #3
 80044a2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 80044a4:	23fa      	movs	r3, #250	@ 0xfa
 80044a6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 80044a8:	2387      	movs	r3, #135	@ 0x87
 80044aa:	733b      	strb	r3, [r7, #12]
            break;
 80044ac:	e01e      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 80044b2:	23ff      	movs	r3, #255	@ 0xff
 80044b4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 80044b6:	2387      	movs	r3, #135	@ 0x87
 80044b8:	733b      	strb	r3, [r7, #12]
            break;
 80044ba:	e017      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 80044bc:	2341      	movs	r3, #65	@ 0x41
 80044be:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 80044c0:	23fb      	movs	r3, #251	@ 0xfb
 80044c2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 80044c4:	2386      	movs	r3, #134	@ 0x86
 80044c6:	733b      	strb	r3, [r7, #12]
            break;
 80044c8:	e010      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 80044ce:	23fa      	movs	r3, #250	@ 0xfa
 80044d0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 80044d2:	2387      	movs	r3, #135	@ 0x87
 80044d4:	733b      	strb	r3, [r7, #12]
            break;
 80044d6:	e009      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 80044d8:	2300      	movs	r3, #0
 80044da:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 80044dc:	23d9      	movs	r3, #217	@ 0xd9
 80044de:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 80044e0:	2382      	movs	r3, #130	@ 0x82
 80044e2:	733b      	strb	r3, [r7, #12]
            break;
 80044e4:	e002      	b.n	80044ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
            break;
 80044ea:	bf00      	nop
        }
        break;
 80044ec:	e002      	b.n	80044f4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
        break;
 80044f2:	bf00      	nop
    }

    if (set) {
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 80044fa:	7bbb      	ldrb	r3, [r7, #14]
 80044fc:	461a      	mov	r2, r3
 80044fe:	212a      	movs	r1, #42	@ 0x2a
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fd5d 	bl	8003fc0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 8004506:	7b7b      	ldrb	r3, [r7, #13]
 8004508:	461a      	mov	r2, r3
 800450a:	2129      	movs	r1, #41	@ 0x29
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fd57 	bl	8003fc0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 8004512:	7b3b      	ldrb	r3, [r7, #12]
 8004514:	461a      	mov	r2, r3
 8004516:	2128      	movs	r1, #40	@ 0x28
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fd51 	bl	8003fc0 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 8004522:	2301      	movs	r3, #1
    }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d034      	beq.n	80045b0 <_ZN7MCP25159prepareIdEPhbm+0x84>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	3303      	adds	r3, #3
 800454a:	8afa      	ldrh	r2, [r7, #22]
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8004550:	8afb      	ldrh	r3, [r7, #22]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	b29a      	uxth	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3302      	adds	r3, #2
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8004564:	8afb      	ldrh	r3, [r7, #22]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3301      	adds	r3, #1
 800456c:	f002 0203 	and.w	r2, r2, #3
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3301      	adds	r3, #1
 8004578:	7819      	ldrb	r1, [r3, #0]
 800457a:	8afb      	ldrh	r3, [r7, #22]
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f023 031f 	bic.w	r3, r3, #31
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3301      	adds	r3, #1
 800458a:	440a      	add	r2, r1
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	3301      	adds	r3, #1
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3301      	adds	r3, #1
 800459a:	f042 0208 	orr.w	r2, r2, #8
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 80045a2:	8afb      	ldrh	r3, [r7, #22]
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 80045ae:	e013      	b.n	80045d8 <_ZN7MCP25159prepareIdEPhbm+0xac>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 80045b0:	8afb      	ldrh	r3, [r7, #22]
 80045b2:	08db      	lsrs	r3, r3, #3
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 80045bc:	8afb      	ldrh	r3, [r7, #22]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	3301      	adds	r3, #1
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	3303      	adds	r3, #3
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3302      	adds	r3, #2
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	72fb      	strb	r3, [r7, #11]
 80045f2:	4613      	mov	r3, r2
 80045f4:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fd73 	bl	80040e2 <_ZN7MCP251513setConfigModeEv>
 80045fc:	4603      	mov	r3, r0
 80045fe:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004600:	7dbb      	ldrb	r3, [r7, #22]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 8004606:	7dbb      	ldrb	r3, [r7, #22]
 8004608:	e01c      	b.n	8004644 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 800460a:	7aba      	ldrb	r2, [r7, #10]
 800460c:	f107 0110 	add.w	r1, r7, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff ff8a 	bl	800452c <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 800461e:	2b01      	cmp	r3, #1
 8004620:	d003      	beq.n	800462a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 8004622:	e005      	b.n	8004630 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 8004624:	2320      	movs	r3, #32
 8004626:	75fb      	strb	r3, [r7, #23]
 8004628:	e004      	b.n	8004634 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 800462a:	2324      	movs	r3, #36	@ 0x24
 800462c:	75fb      	strb	r3, [r7, #23]
 800462e:	e001      	b.n	8004634 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 8004634:	f107 0210 	add.w	r2, r7, #16
 8004638:	7df9      	ldrb	r1, [r7, #23]
 800463a:	2304      	movs	r3, #4
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff fcdf 	bl	8004000 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	72fb      	strb	r3, [r7, #11]
 800465a:	4613      	mov	r3, r2
 800465c:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff fd3f 	bl	80040e2 <_ZN7MCP251513setConfigModeEv>
 8004664:	4603      	mov	r3, r0
 8004666:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004668:	7dbb      	ldrb	r3, [r7, #22]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 800466e:	7dbb      	ldrb	r3, [r7, #22]
 8004670:	e035      	b.n	80046de <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 8004672:	7afb      	ldrb	r3, [r7, #11]
 8004674:	2b05      	cmp	r3, #5
 8004676:	d821      	bhi.n	80046bc <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8004678:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	08004699 	.word	0x08004699
 8004684:	0800469f 	.word	0x0800469f
 8004688:	080046a5 	.word	0x080046a5
 800468c:	080046ab 	.word	0x080046ab
 8004690:	080046b1 	.word	0x080046b1
 8004694:	080046b7 	.word	0x080046b7
        case RXF0: reg = MCP_RXF0SIDH; break;
 8004698:	2300      	movs	r3, #0
 800469a:	75fb      	strb	r3, [r7, #23]
 800469c:	e010      	b.n	80046c0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 800469e:	2304      	movs	r3, #4
 80046a0:	75fb      	strb	r3, [r7, #23]
 80046a2:	e00d      	b.n	80046c0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 80046a4:	2308      	movs	r3, #8
 80046a6:	75fb      	strb	r3, [r7, #23]
 80046a8:	e00a      	b.n	80046c0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 80046aa:	2310      	movs	r3, #16
 80046ac:	75fb      	strb	r3, [r7, #23]
 80046ae:	e007      	b.n	80046c0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 80046b0:	2314      	movs	r3, #20
 80046b2:	75fb      	strb	r3, [r7, #23]
 80046b4:	e004      	b.n	80046c0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 80046b6:	2318      	movs	r3, #24
 80046b8:	75fb      	strb	r3, [r7, #23]
 80046ba:	e001      	b.n	80046c0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 80046bc:	2301      	movs	r3, #1
 80046be:	e00e      	b.n	80046de <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80046c0:	7aba      	ldrb	r2, [r7, #10]
 80046c2:	f107 0110 	add.w	r1, r7, #16
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff ff2f 	bl	800452c <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 80046ce:	f107 0210 	add.w	r2, r7, #16
 80046d2:	7df9      	ldrb	r1, [r7, #23]
 80046d4:	2304      	movs	r3, #4
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff fc92 	bl	8004000 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop

080046e8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	@ 0x30
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	460b      	mov	r3, r1
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	72fb      	strb	r3, [r7, #11]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	791b      	ldrb	r3, [r3, #4]
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d901      	bls.n	8004702 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x1a>
        return ERROR_FAILTX;
 80046fe:	2304      	movs	r3, #4
 8004700:	e067      	b.n	80047d2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
 8004702:	7afa      	ldrb	r2, [r7, #11]
 8004704:	4613      	mov	r3, r2
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	4413      	add	r3, r2
 800470a:	4a34      	ldr	r2, [pc, #208]	@ (80047dc <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xf4>)
 800470c:	4413      	add	r3, r2
 800470e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	0fdb      	lsrs	r3, r3, #31
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004736:	2a00      	cmp	r2, #0
 8004738:	d002      	beq.n	8004740 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x58>
 800473a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800473e:	e001      	b.n	8004744 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x5c>
 8004740:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004744:	4013      	ands	r3, r2
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24

    prepareId(data, ext, id);
 8004748:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800474c:	f107 0114 	add.w	r1, r7, #20
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff feea 	bl	800452c <_ZN7MCP25159prepareIdEPhbm>

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
 8004758:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x84>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	791b      	ldrb	r3, [r3, #4]
 8004764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e001      	b.n	8004770 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x88>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	791b      	ldrb	r3, [r3, #4]
 8004770:	763b      	strb	r3, [r7, #24]

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f103 0108 	add.w	r1, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	791b      	ldrb	r3, [r3, #4]
 800477c:	461a      	mov	r2, r3
 800477e:	f107 0314 	add.w	r3, r7, #20
 8004782:	3305      	adds	r3, #5
 8004784:	4618      	mov	r0, r3
 8004786:	f00b fad9 	bl	800fd3c <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	7859      	ldrb	r1, [r3, #1]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	791b      	ldrb	r3, [r3, #4]
 8004792:	3305      	adds	r3, #5
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f107 0214 	add.w	r2, r7, #20
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff fc30 	bl	8004000 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
 80047a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a2:	7819      	ldrb	r1, [r3, #0]
 80047a4:	2308      	movs	r3, #8
 80047a6:	2208      	movs	r2, #8
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff fc58 	bl	800405e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    uint8_t ctrl = readRegister(txbuf->CTRL);
 80047ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	4619      	mov	r1, r3
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff fbb5 	bl	8003f24 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
 80047c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
        return ERROR_FAILTX;
 80047cc:	2304      	movs	r3, #4
 80047ce:	e000      	b.n	80047d2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    }
    return ERROR_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3730      	adds	r7, #48	@ 0x30
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	08018108 	.word	0x08018108

080047e0 <_ZN7MCP251511sendMessageEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	791b      	ldrb	r3, [r3, #4]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d901      	bls.n	80047f6 <_ZN7MCP251511sendMessageEPK9can_frame+0x16>
        return ERROR_FAILTX;
 80047f2:	2304      	movs	r3, #4
 80047f4:	e037      	b.n	8004866 <_ZN7MCP251511sendMessageEPK9can_frame+0x86>
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
 80047f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004870 <_ZN7MCP251511sendMessageEPK9can_frame+0x90>)
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	4611      	mov	r1, r2
 8004800:	8019      	strh	r1, [r3, #0]
 8004802:	3302      	adds	r3, #2
 8004804:	0c12      	lsrs	r2, r2, #16
 8004806:	701a      	strb	r2, [r3, #0]

    for (int i=0; i<N_TXBUFFERS; i++) {
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e027      	b.n	800485e <_ZN7MCP251511sendMessageEPK9can_frame+0x7e>
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
 800480e:	f107 020c 	add.w	r2, r7, #12
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	4413      	add	r3, r2
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	4a14      	ldr	r2, [pc, #80]	@ (8004874 <_ZN7MCP251511sendMessageEPK9can_frame+0x94>)
 8004822:	4413      	add	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        uint8_t ctrlval = readRegister(txbuf->CTRL);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff fb79 	bl	8003f24 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004832:	4603      	mov	r3, r0
 8004834:	73fb      	strb	r3, [r7, #15]
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <_ZN7MCP251511sendMessageEPK9can_frame+0x78>
            return sendMessage(txBuffers[i], frame);
 8004840:	f107 020c 	add.w	r2, r7, #12
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff ff4a 	bl	80046e8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
 8004854:	4603      	mov	r3, r0
 8004856:	e006      	b.n	8004866 <_ZN7MCP251511sendMessageEPK9can_frame+0x86>
    for (int i=0; i<N_TXBUFFERS; i++) {
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3301      	adds	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b02      	cmp	r3, #2
 8004862:	ddd4      	ble.n	800480e <_ZN7MCP251511sendMessageEPK9can_frame+0x2e>
        }
    }

    return ERROR_ALLTXBUSY;
 8004864:	2302      	movs	r3, #2
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	080105f0 	.word	0x080105f0
 8004874:	08018108 	.word	0x08018108

08004878 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	460b      	mov	r3, r1
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 8004886:	7afb      	ldrb	r3, [r7, #11]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4a30      	ldr	r2, [pc, #192]	@ (800494c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 800488c:	4413      	add	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	7859      	ldrb	r1, [r3, #1]
 8004894:	f107 0210 	add.w	r2, r7, #16
 8004898:	2305      	movs	r3, #5
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff fb61 	bl	8003f62 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80048a0:	7c3b      	ldrb	r3, [r7, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	7c7a      	ldrb	r2, [r7, #17]
 80048a6:	0952      	lsrs	r2, r2, #5
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	4413      	add	r3, r2
 80048ac:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80048ae:	7c7b      	ldrb	r3, [r7, #17]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d014      	beq.n	80048e2 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	009a      	lsls	r2, r3, #2
 80048bc:	7c7b      	ldrb	r3, [r7, #17]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	4413      	add	r3, r2
 80048c4:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	7cba      	ldrb	r2, [r7, #18]
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	7cfa      	ldrb	r2, [r7, #19]
 80048d6:	4413      	add	r3, r2
 80048d8:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048e0:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 80048e2:	7d3b      	ldrb	r3, [r7, #20]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d901      	bls.n	80048f4 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e027      	b.n	8004944 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	4619      	mov	r1, r3
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fb12 	bl	8003f24 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004900:	4603      	mov	r3, r0
 8004902:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 8004904:	7dbb      	ldrb	r3, [r7, #22]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004914:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	7dfa      	ldrb	r2, [r7, #23]
 8004920:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	7899      	ldrb	r1, [r3, #2]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f103 0208 	add.w	r2, r3, #8
 800492c:	7dfb      	ldrb	r3, [r7, #23]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fb17 	bl	8003f62 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	78da      	ldrb	r2, [r3, #3]
 8004938:	2300      	movs	r3, #0
 800493a:	212c      	movs	r1, #44	@ 0x2c
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff fb8e 	bl	800405e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3720      	adds	r7, #32
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	08018114 	.word	0x08018114

08004950 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fba9 	bl	80040b2 <_ZN7MCP25159getStatusEv>
 8004960:	4603      	mov	r3, r0
 8004962:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8004964:	7bbb      	ldrb	r3, [r7, #14]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	2100      	movs	r1, #0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff ff80 	bl	8004878 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e00e      	b.n	800499c <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 800497e:	7bbb      	ldrb	r3, [r7, #14]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	2101      	movs	r1, #1
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff73 	bl	8004878 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	e001      	b.n	800499c <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 8004998:	2305      	movs	r3, #5
 800499a:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80049ac:	f7fd fbe0 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049b0:	480c      	ldr	r0, [pc, #48]	@ (80049e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049b2:	490d      	ldr	r1, [pc, #52]	@ (80049e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049b4:	4a0d      	ldr	r2, [pc, #52]	@ (80049ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b8:	e002      	b.n	80049c0 <LoopCopyDataInit>

080049ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049be:	3304      	adds	r3, #4

080049c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049c4:	d3f9      	bcc.n	80049ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049c6:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049c8:	4c0a      	ldr	r4, [pc, #40]	@ (80049f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049cc:	e001      	b.n	80049d2 <LoopFillZerobss>

080049ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049d0:	3204      	adds	r2, #4

080049d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049d4:	d3fb      	bcc.n	80049ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049d6:	f00b f98b 	bl	800fcf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049da:	f7fc fbe1 	bl	80011a0 <main>
  bx  lr    
 80049de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80049e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80049ec:	08018214 	.word	0x08018214
  ldr r2, =_sbss
 80049f0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80049f4:	2000199c 	.word	0x2000199c

080049f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f8:	e7fe      	b.n	80049f8 <ADC_IRQHandler>
	...

080049fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a00:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <HAL_Init+0x40>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0d      	ldr	r2, [pc, #52]	@ (8004a3c <HAL_Init+0x40>)
 8004a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_Init+0x40>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <HAL_Init+0x40>)
 8004a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a18:	4b08      	ldr	r3, [pc, #32]	@ (8004a3c <HAL_Init+0x40>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a07      	ldr	r2, [pc, #28]	@ (8004a3c <HAL_Init+0x40>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a24:	2003      	movs	r0, #3
 8004a26:	f000 f94f 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a2a:	200f      	movs	r0, #15
 8004a2c:	f000 f808 	bl	8004a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a30:	f7fd fa7e 	bl	8001f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023c00 	.word	0x40023c00

08004a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a48:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_InitTick+0x54>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <HAL_InitTick+0x58>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f967 	bl	8004d32 <HAL_SYSTICK_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00e      	b.n	8004a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b0f      	cmp	r3, #15
 8004a72:	d80a      	bhi.n	8004a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a74:	2200      	movs	r2, #0
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	f000 f92f 	bl	8004cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a80:	4a06      	ldr	r2, [pc, #24]	@ (8004a9c <HAL_InitTick+0x5c>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000004 	.word	0x20000004
 8004a98:	20000034 	.word	0x20000034
 8004a9c:	20000030 	.word	0x20000030

08004aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_IncTick+0x20>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_IncTick+0x24>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <HAL_IncTick+0x24>)
 8004ab2:	6013      	str	r3, [r2, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000034 	.word	0x20000034
 8004ac4:	2000042c 	.word	0x2000042c

08004ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return uwTick;
 8004acc:	4b03      	ldr	r3, [pc, #12]	@ (8004adc <HAL_GetTick+0x14>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2000042c 	.word	0x2000042c

08004ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae8:	f7ff ffee 	bl	8004ac8 <HAL_GetTick>
 8004aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d005      	beq.n	8004b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004afa:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <HAL_Delay+0x44>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b06:	bf00      	nop
 8004b08:	f7ff ffde 	bl	8004ac8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d8f7      	bhi.n	8004b08 <HAL_Delay+0x28>
  {
  }
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000034 	.word	0x20000034

08004b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b38:	4b0c      	ldr	r3, [pc, #48]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b44:	4013      	ands	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5a:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	60d3      	str	r3, [r2, #12]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b74:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <__NVIC_GetPriorityGrouping+0x18>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	f003 0307 	and.w	r3, r3, #7
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	db0b      	blt.n	8004bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	f003 021f 	and.w	r2, r3, #31
 8004ba4:	4907      	ldr	r1, [pc, #28]	@ (8004bc4 <__NVIC_EnableIRQ+0x38>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2001      	movs	r0, #1
 8004bae:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	e000e100 	.word	0xe000e100

08004bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db0a      	blt.n	8004bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	490c      	ldr	r1, [pc, #48]	@ (8004c14 <__NVIC_SetPriority+0x4c>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	440b      	add	r3, r1
 8004bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf0:	e00a      	b.n	8004c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4908      	ldr	r1, [pc, #32]	@ (8004c18 <__NVIC_SetPriority+0x50>)
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3b04      	subs	r3, #4
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	761a      	strb	r2, [r3, #24]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000e100 	.word	0xe000e100
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	@ 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f1c3 0307 	rsb	r3, r3, #7
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	bf28      	it	cs
 8004c3a:	2304      	movcs	r3, #4
 8004c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d902      	bls.n	8004c4c <NVIC_EncodePriority+0x30>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3b03      	subs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <NVIC_EncodePriority+0x32>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	f04f 32ff 	mov.w	r2, #4294967295
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c64:	f04f 31ff 	mov.w	r1, #4294967295
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	43d9      	mvns	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	4313      	orrs	r3, r2
         );
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	@ 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c94:	d301      	bcc.n	8004c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <SysTick_Config+0x40>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	f7ff ff8e 	bl	8004bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cb2:	4b04      	ldr	r3, [pc, #16]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	e000e010 	.word	0xe000e010

08004cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff29 	bl	8004b28 <__NVIC_SetPriorityGrouping>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf0:	f7ff ff3e 	bl	8004b70 <__NVIC_GetPriorityGrouping>
 8004cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f7ff ff8e 	bl	8004c1c <NVIC_EncodePriority>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff5d 	bl	8004bc8 <__NVIC_SetPriority>
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff31 	bl	8004b8c <__NVIC_EnableIRQ>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff ffa2 	bl	8004c84 <SysTick_Config>
 8004d40:	4603      	mov	r3, r0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d58:	f7ff feb6 	bl	8004ac8 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e099      	b.n	8004e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d88:	e00f      	b.n	8004daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d8a:	f7ff fe9d 	bl	8004ac8 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d908      	bls.n	8004daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2203      	movs	r2, #3
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e078      	b.n	8004e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e8      	bne.n	8004d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4b38      	ldr	r3, [pc, #224]	@ (8004ea4 <HAL_DMA_Init+0x158>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d107      	bne.n	8004e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d117      	bne.n	8004e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fa91 	bl	8005378 <DMA_CheckFifoParam>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2240      	movs	r2, #64	@ 0x40
 8004e60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e016      	b.n	8004e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa48 	bl	800530c <DMA_CalcBaseAndBitshift>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	223f      	movs	r2, #63	@ 0x3f
 8004e86:	409a      	lsls	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	f010803f 	.word	0xf010803f

08004ea8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_DMA_Start_IT+0x26>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e040      	b.n	8004f50 <HAL_DMA_Start_IT+0xa8>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d12f      	bne.n	8004f42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f9da 	bl	80052b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f00:	223f      	movs	r2, #63	@ 0x3f
 8004f02:	409a      	lsls	r2, r3
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0216 	orr.w	r2, r2, #22
 8004f16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0208 	orr.w	r2, r2, #8
 8004f2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e005      	b.n	8004f4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d004      	beq.n	8004f76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2280      	movs	r2, #128	@ 0x80
 8004f70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e00c      	b.n	8004f90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2205      	movs	r2, #5
 8004f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fa8:	4b8e      	ldr	r3, [pc, #568]	@ (80051e4 <HAL_DMA_IRQHandler+0x248>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a8e      	ldr	r2, [pc, #568]	@ (80051e8 <HAL_DMA_IRQHandler+0x24c>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	0a9b      	lsrs	r3, r3, #10
 8004fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc6:	2208      	movs	r2, #8
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01a      	beq.n	8005008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d013      	beq.n	8005008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0204 	bic.w	r2, r2, #4
 8004fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005000:	f043 0201 	orr.w	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500c:	2201      	movs	r2, #1
 800500e:	409a      	lsls	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d012      	beq.n	800503e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502a:	2201      	movs	r2, #1
 800502c:	409a      	lsls	r2, r3
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005036:	f043 0202 	orr.w	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005042:	2204      	movs	r2, #4
 8005044:	409a      	lsls	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d012      	beq.n	8005074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005060:	2204      	movs	r2, #4
 8005062:	409a      	lsls	r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506c:	f043 0204 	orr.w	r2, r3, #4
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005078:	2210      	movs	r2, #16
 800507a:	409a      	lsls	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d043      	beq.n	800510c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d03c      	beq.n	800510c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005096:	2210      	movs	r2, #16
 8005098:	409a      	lsls	r2, r3
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d018      	beq.n	80050de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d108      	bne.n	80050cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d024      	beq.n	800510c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
 80050ca:	e01f      	b.n	800510c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01b      	beq.n	800510c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
 80050dc:	e016      	b.n	800510c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d107      	bne.n	80050fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0208 	bic.w	r2, r2, #8
 80050fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	2220      	movs	r2, #32
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 808f 	beq.w	800523c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8087 	beq.w	800523c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005132:	2220      	movs	r2, #32
 8005134:	409a      	lsls	r2, r3
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b05      	cmp	r3, #5
 8005144:	d136      	bne.n	80051b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0216 	bic.w	r2, r2, #22
 8005154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_DMA_IRQHandler+0x1da>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0208 	bic.w	r2, r2, #8
 8005184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518a:	223f      	movs	r2, #63	@ 0x3f
 800518c:	409a      	lsls	r2, r3
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d07e      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
        }
        return;
 80051b2:	e079      	b.n	80052a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01d      	beq.n	80051fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10d      	bne.n	80051ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d031      	beq.n	800523c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
 80051e0:	e02c      	b.n	800523c <HAL_DMA_IRQHandler+0x2a0>
 80051e2:	bf00      	nop
 80051e4:	20000004 	.word	0x20000004
 80051e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d023      	beq.n	800523c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4798      	blx	r3
 80051fc:	e01e      	b.n	800523c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10f      	bne.n	800522c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0210 	bic.w	r2, r2, #16
 800521a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005240:	2b00      	cmp	r3, #0
 8005242:	d032      	beq.n	80052aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d022      	beq.n	8005296 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2205      	movs	r2, #5
 8005254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	3301      	adds	r3, #1
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	429a      	cmp	r2, r3
 8005272:	d307      	bcc.n	8005284 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f2      	bne.n	8005268 <HAL_DMA_IRQHandler+0x2cc>
 8005282:	e000      	b.n	8005286 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005284:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
 80052a6:	e000      	b.n	80052aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80052a8:	bf00      	nop
    }
  }
}
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b40      	cmp	r3, #64	@ 0x40
 80052dc:	d108      	bne.n	80052f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052ee:	e007      	b.n	8005300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	3b10      	subs	r3, #16
 800531c:	4a14      	ldr	r2, [pc, #80]	@ (8005370 <DMA_CalcBaseAndBitshift+0x64>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005326:	4a13      	ldr	r2, [pc, #76]	@ (8005374 <DMA_CalcBaseAndBitshift+0x68>)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d909      	bls.n	800534e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	1d1a      	adds	r2, r3, #4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	659a      	str	r2, [r3, #88]	@ 0x58
 800534c:	e007      	b.n	800535e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005356:	f023 0303 	bic.w	r3, r3, #3
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	aaaaaaab 	.word	0xaaaaaaab
 8005374:	0801811c 	.word	0x0801811c

08005378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d11f      	bne.n	80053d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d856      	bhi.n	8005446 <DMA_CheckFifoParam+0xce>
 8005398:	a201      	add	r2, pc, #4	@ (adr r2, 80053a0 <DMA_CheckFifoParam+0x28>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053c3 	.word	0x080053c3
 80053a8:	080053b1 	.word	0x080053b1
 80053ac:	08005447 	.word	0x08005447
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d046      	beq.n	800544a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c0:	e043      	b.n	800544a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053ca:	d140      	bne.n	800544e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d0:	e03d      	b.n	800544e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053da:	d121      	bne.n	8005420 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d837      	bhi.n	8005452 <DMA_CheckFifoParam+0xda>
 80053e2:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <DMA_CheckFifoParam+0x70>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	080053ff 	.word	0x080053ff
 80053f0:	080053f9 	.word	0x080053f9
 80053f4:	08005411 	.word	0x08005411
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      break;
 80053fc:	e030      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d025      	beq.n	8005456 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800540e:	e022      	b.n	8005456 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005418:	d11f      	bne.n	800545a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800541e:	e01c      	b.n	800545a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d903      	bls.n	800542e <DMA_CheckFifoParam+0xb6>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d003      	beq.n	8005434 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800542c:	e018      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
      break;
 8005432:	e015      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00e      	beq.n	800545e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e00b      	b.n	800545e <DMA_CheckFifoParam+0xe6>
      break;
 8005446:	bf00      	nop
 8005448:	e00a      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 800544a:	bf00      	nop
 800544c:	e008      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 800544e:	bf00      	nop
 8005450:	e006      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 8005452:	bf00      	nop
 8005454:	e004      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 8005456:	bf00      	nop
 8005458:	e002      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;   
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 800545e:	bf00      	nop
    }
  } 
  
  return status; 
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop

08005470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	@ 0x24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005482:	2300      	movs	r3, #0
 8005484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	e159      	b.n	8005740 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800548c:	2201      	movs	r2, #1
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4013      	ands	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	f040 8148 	bne.w	800573a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d005      	beq.n	80054c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d130      	bne.n	8005524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	2203      	movs	r2, #3
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054f8:	2201      	movs	r2, #1
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 0201 	and.w	r2, r3, #1
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	2b03      	cmp	r3, #3
 800552e:	d017      	beq.n	8005560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	2203      	movs	r2, #3
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d123      	bne.n	80055b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	08da      	lsrs	r2, r3, #3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3208      	adds	r2, #8
 8005574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	220f      	movs	r2, #15
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	08da      	lsrs	r2, r3, #3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3208      	adds	r2, #8
 80055ae:	69b9      	ldr	r1, [r7, #24]
 80055b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	2203      	movs	r2, #3
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 0203 	and.w	r2, r3, #3
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80a2 	beq.w	800573a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	4b57      	ldr	r3, [pc, #348]	@ (8005758 <HAL_GPIO_Init+0x2e8>)
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	4a56      	ldr	r2, [pc, #344]	@ (8005758 <HAL_GPIO_Init+0x2e8>)
 8005600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005604:	6453      	str	r3, [r2, #68]	@ 0x44
 8005606:	4b54      	ldr	r3, [pc, #336]	@ (8005758 <HAL_GPIO_Init+0x2e8>)
 8005608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005612:	4a52      	ldr	r2, [pc, #328]	@ (800575c <HAL_GPIO_Init+0x2ec>)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	3302      	adds	r3, #2
 800561a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	220f      	movs	r2, #15
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4013      	ands	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a49      	ldr	r2, [pc, #292]	@ (8005760 <HAL_GPIO_Init+0x2f0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d019      	beq.n	8005672 <HAL_GPIO_Init+0x202>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a48      	ldr	r2, [pc, #288]	@ (8005764 <HAL_GPIO_Init+0x2f4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_GPIO_Init+0x1fe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a47      	ldr	r2, [pc, #284]	@ (8005768 <HAL_GPIO_Init+0x2f8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00d      	beq.n	800566a <HAL_GPIO_Init+0x1fa>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a46      	ldr	r2, [pc, #280]	@ (800576c <HAL_GPIO_Init+0x2fc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <HAL_GPIO_Init+0x1f6>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a45      	ldr	r2, [pc, #276]	@ (8005770 <HAL_GPIO_Init+0x300>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d101      	bne.n	8005662 <HAL_GPIO_Init+0x1f2>
 800565e:	2304      	movs	r3, #4
 8005660:	e008      	b.n	8005674 <HAL_GPIO_Init+0x204>
 8005662:	2307      	movs	r3, #7
 8005664:	e006      	b.n	8005674 <HAL_GPIO_Init+0x204>
 8005666:	2303      	movs	r3, #3
 8005668:	e004      	b.n	8005674 <HAL_GPIO_Init+0x204>
 800566a:	2302      	movs	r3, #2
 800566c:	e002      	b.n	8005674 <HAL_GPIO_Init+0x204>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_GPIO_Init+0x204>
 8005672:	2300      	movs	r3, #0
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	f002 0203 	and.w	r2, r2, #3
 800567a:	0092      	lsls	r2, r2, #2
 800567c:	4093      	lsls	r3, r2
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4313      	orrs	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005684:	4935      	ldr	r1, [pc, #212]	@ (800575c <HAL_GPIO_Init+0x2ec>)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	089b      	lsrs	r3, r3, #2
 800568a:	3302      	adds	r3, #2
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005692:	4b38      	ldr	r3, [pc, #224]	@ (8005774 <HAL_GPIO_Init+0x304>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005774 <HAL_GPIO_Init+0x304>)
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005774 <HAL_GPIO_Init+0x304>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056e0:	4a24      	ldr	r2, [pc, #144]	@ (8005774 <HAL_GPIO_Init+0x304>)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056e6:	4b23      	ldr	r3, [pc, #140]	@ (8005774 <HAL_GPIO_Init+0x304>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	43db      	mvns	r3, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800570a:	4a1a      	ldr	r2, [pc, #104]	@ (8005774 <HAL_GPIO_Init+0x304>)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005710:	4b18      	ldr	r3, [pc, #96]	@ (8005774 <HAL_GPIO_Init+0x304>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	43db      	mvns	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005734:	4a0f      	ldr	r2, [pc, #60]	@ (8005774 <HAL_GPIO_Init+0x304>)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b0f      	cmp	r3, #15
 8005744:	f67f aea2 	bls.w	800548c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	3724      	adds	r7, #36	@ 0x24
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	40013800 	.word	0x40013800
 8005760:	40020000 	.word	0x40020000
 8005764:	40020400 	.word	0x40020400
 8005768:	40020800 	.word	0x40020800
 800576c:	40020c00 	.word	0x40020c00
 8005770:	40021000 	.word	0x40021000
 8005774:	40013c00 	.word	0x40013c00

08005778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005788:	787b      	ldrb	r3, [r7, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005794:	e003      	b.n	800579e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	041a      	lsls	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057b6:	4b08      	ldr	r3, [pc, #32]	@ (80057d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	4013      	ands	r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057c2:	4a05      	ldr	r2, [pc, #20]	@ (80057d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fb fca6 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40013c00 	.word	0x40013c00

080057dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e101      	b.n	80059f2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f009 fd65 	bl	800f2d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2203      	movs	r2, #3
 8005812:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800581c:	d102      	bne.n	8005824 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f003 ff5c 	bl	80096e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7c1a      	ldrb	r2, [r3, #16]
 8005836:	f88d 2000 	strb.w	r2, [sp]
 800583a:	3304      	adds	r3, #4
 800583c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800583e:	f003 fe3b 	bl	80094b8 <USB_CoreInit>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0ce      	b.n	80059f2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f003 ff54 	bl	8009708 <USB_SetCurrentMode>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e0bf      	b.n	80059f2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
 8005876:	e04a      	b.n	800590e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005878:	7bfa      	ldrb	r2, [r7, #15]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	3315      	adds	r3, #21
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800588c:	7bfa      	ldrb	r2, [r7, #15]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	3314      	adds	r3, #20
 800589c:	7bfa      	ldrb	r2, [r7, #15]
 800589e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058a0:	7bfa      	ldrb	r2, [r7, #15]
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	b298      	uxth	r0, r3
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	332e      	adds	r3, #46	@ 0x2e
 80058b4:	4602      	mov	r2, r0
 80058b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058b8:	7bfa      	ldrb	r2, [r7, #15]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	3318      	adds	r3, #24
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058cc:	7bfa      	ldrb	r2, [r7, #15]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	4413      	add	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	331c      	adds	r3, #28
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058e0:	7bfa      	ldrb	r2, [r7, #15]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	3320      	adds	r3, #32
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058f4:	7bfa      	ldrb	r2, [r7, #15]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	3324      	adds	r3, #36	@ 0x24
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	3301      	adds	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	791b      	ldrb	r3, [r3, #4]
 8005912:	7bfa      	ldrb	r2, [r7, #15]
 8005914:	429a      	cmp	r2, r3
 8005916:	d3af      	bcc.n	8005878 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
 800591c:	e044      	b.n	80059a8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800591e:	7bfa      	ldrb	r2, [r7, #15]
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005934:	7bfa      	ldrb	r2, [r7, #15]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005946:	7bfa      	ldrb	r2, [r7, #15]
 8005948:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800594a:	7bfa      	ldrb	r2, [r7, #15]
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005960:	7bfa      	ldrb	r2, [r7, #15]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800598c:	7bfa      	ldrb	r2, [r7, #15]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	3301      	adds	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	791b      	ldrb	r3, [r3, #4]
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d3b5      	bcc.n	800591e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7c1a      	ldrb	r2, [r3, #16]
 80059ba:	f88d 2000 	strb.w	r2, [sp]
 80059be:	3304      	adds	r3, #4
 80059c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059c2:	f003 feed 	bl	80097a0 <USB_DevInit>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e00c      	b.n	80059f2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f004 ff37 	bl	800a85e <USB_DevDisconnect>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_PCD_Start+0x1c>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e022      	b.n	8005a5c <HAL_PCD_Start+0x62>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d105      	bne.n	8005a3e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f003 fe3e 	bl	80096c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f004 fee5 	bl	800a81c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b08d      	sub	sp, #52	@ 0x34
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f004 ffa3 	bl	800a9c6 <USB_GetMode>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 848c 	bne.w	80063a0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f004 ff07 	bl	800a8a0 <USB_ReadInterrupts>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8482 	beq.w	800639e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f004 fef4 	bl	800a8a0 <USB_ReadInterrupts>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d107      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695a      	ldr	r2, [r3, #20]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f002 0202 	and.w	r2, r2, #2
 8005ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f004 fee2 	bl	800a8a0 <USB_ReadInterrupts>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d161      	bne.n	8005baa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0210 	bic.w	r2, r2, #16
 8005af4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	3304      	adds	r3, #4
 8005b14:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	0c5b      	lsrs	r3, r3, #17
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d124      	bne.n	8005b6c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d035      	beq.n	8005b9a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6a38      	ldr	r0, [r7, #32]
 8005b42:	f004 fd19 	bl	800a578 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b52:	441a      	add	r2, r3
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b64:	441a      	add	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	615a      	str	r2, [r3, #20]
 8005b6a:	e016      	b.n	8005b9a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	0c5b      	lsrs	r3, r3, #17
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	2b06      	cmp	r3, #6
 8005b76:	d110      	bne.n	8005b9a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b7e:	2208      	movs	r2, #8
 8005b80:	4619      	mov	r1, r3
 8005b82:	6a38      	ldr	r0, [r7, #32]
 8005b84:	f004 fcf8 	bl	800a578 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b94:	441a      	add	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0210 	orr.w	r2, r2, #16
 8005ba8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f004 fe76 	bl	800a8a0 <USB_ReadInterrupts>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005bbe:	f040 80a7 	bne.w	8005d10 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f004 fe7b 	bl	800a8c6 <USB_ReadDevAllOutEpInterrupt>
 8005bd0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005bd2:	e099      	b.n	8005d08 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 808e 	beq.w	8005cfc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	4611      	mov	r1, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f004 fe9f 	bl	800a92e <USB_ReadDevOutEPInterrupt>
 8005bf0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00c      	beq.n	8005c16 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fea3 	bl	800695c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00c      	beq.n	8005c3a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2308      	movs	r3, #8
 8005c30:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 ff79 	bl	8006b2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c50:	461a      	mov	r2, r3
 8005c52:	2310      	movs	r3, #16
 8005c54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d030      	beq.n	8005cc2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c68:	2b80      	cmp	r3, #128	@ 0x80
 8005c6a:	d109      	bne.n	8005c80 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c7e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	3304      	adds	r3, #4
 8005c94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	78db      	ldrb	r3, [r3, #3]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d108      	bne.n	8005cb0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f009 fc10 	bl	800f4d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2320      	movs	r3, #32
 8005cdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005cfa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	3301      	adds	r3, #1
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d04:	085b      	lsrs	r3, r3, #1
 8005d06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f47f af62 	bne.w	8005bd4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f004 fdc3 	bl	800a8a0 <USB_ReadInterrupts>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d24:	f040 80db 	bne.w	8005ede <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f004 fde4 	bl	800a8fa <USB_ReadDevAllInEpInterrupt>
 8005d32:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005d38:	e0cd      	b.n	8005ed6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80c2 	beq.w	8005eca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f004 fe0a 	bl	800a96a <USB_ReadDevInEPInterrupt>
 8005d56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d057      	beq.n	8005e12 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2201      	movs	r2, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	69f9      	ldr	r1, [r7, #28]
 8005d7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d82:	4013      	ands	r3, r2
 8005d84:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d92:	461a      	mov	r2, r3
 8005d94:	2301      	movs	r3, #1
 8005d96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	799b      	ldrb	r3, [r3, #6]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d132      	bne.n	8005e06 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	3320      	adds	r3, #32
 8005db0:	6819      	ldr	r1, [r3, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4403      	add	r3, r0
 8005dc0:	331c      	adds	r3, #28
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4419      	add	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dca:	4613      	mov	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4403      	add	r3, r0
 8005dd4:	3320      	adds	r3, #32
 8005dd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d113      	bne.n	8005e06 <HAL_PCD_IRQHandler+0x3a2>
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de2:	4613      	mov	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	3324      	adds	r3, #36	@ 0x24
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005dfe:	461a      	mov	r2, r3
 8005e00:	2101      	movs	r1, #1
 8005e02:	f004 fe11 	bl	800aa28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f009 fae4 	bl	800f3da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e44:	461a      	mov	r2, r3
 8005e46:	2310      	movs	r3, #16
 8005e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e60:	461a      	mov	r2, r3
 8005e62:	2340      	movs	r3, #64	@ 0x40
 8005e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d023      	beq.n	8005eb8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005e70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e72:	6a38      	ldr	r0, [r7, #32]
 8005e74:	f003 fdf8 	bl	8009a68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	3310      	adds	r3, #16
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	3304      	adds	r3, #4
 8005e8a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	78db      	ldrb	r3, [r3, #3]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d108      	bne.n	8005ea6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2200      	movs	r2, #0
 8005e98:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f009 fb27 	bl	800f4f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ec2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fcbd 	bl	8006844 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	3301      	adds	r3, #1
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f47f af2e 	bne.w	8005d3a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f004 fcdc 	bl	800a8a0 <USB_ReadInterrupts>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ef2:	d122      	bne.n	8005f3a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d108      	bne.n	8005f24 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fea3 	bl	8006c68 <HAL_PCDEx_LPM_Callback>
 8005f22:	e002      	b.n	8005f2a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f009 fac5 	bl	800f4b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f004 fcae 	bl	800a8a0 <USB_ReadInterrupts>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f4e:	d112      	bne.n	8005f76 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d102      	bne.n	8005f66 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f009 fa81 	bl	800f468 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695a      	ldr	r2, [r3, #20]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005f74:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f004 fc90 	bl	800a8a0 <USB_ReadInterrupts>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8a:	f040 80b7 	bne.w	80060fc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2110      	movs	r1, #16
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f003 fd5d 	bl	8009a68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fb2:	e046      	b.n	8006042 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005fc6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fe2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fe6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ffa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006016:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800601a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006036:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800603a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800603c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603e:	3301      	adds	r3, #1
 8006040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	791b      	ldrb	r3, [r3, #4]
 8006046:	461a      	mov	r2, r3
 8006048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604a:	4293      	cmp	r3, r2
 800604c:	d3b2      	bcc.n	8005fb4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800605c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006060:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	7bdb      	ldrb	r3, [r3, #15]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d016      	beq.n	8006098 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800607a:	f043 030b 	orr.w	r3, r3, #11
 800607e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006090:	f043 030b 	orr.w	r3, r3, #11
 8006094:	6453      	str	r3, [r2, #68]	@ 0x44
 8006096:	e015      	b.n	80060c4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80060aa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80060ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060be:	f043 030b 	orr.w	r3, r3, #11
 80060c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80060d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060e6:	461a      	mov	r2, r3
 80060e8:	f004 fc9e 	bl	800aa28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80060fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f004 fbcd 	bl	800a8a0 <USB_ReadInterrupts>
 8006106:	4603      	mov	r3, r0
 8006108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006110:	d123      	bne.n	800615a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f004 fc63 	bl	800a9e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f003 fd1a 	bl	8009b5a <USB_GetDevSpeed>
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681c      	ldr	r4, [r3, #0]
 8006132:	f001 f9c9 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 8006136:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800613c:	461a      	mov	r2, r3
 800613e:	4620      	mov	r0, r4
 8006140:	f003 fa1e 	bl	8009580 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f009 f970 	bl	800f42a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006158:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f004 fb9e 	bl	800a8a0 <USB_ReadInterrupts>
 8006164:	4603      	mov	r3, r0
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b08      	cmp	r3, #8
 800616c:	d10a      	bne.n	8006184 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f009 f94d 	bl	800f40e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f002 0208 	and.w	r2, r2, #8
 8006182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f004 fb89 	bl	800a8a0 <USB_ReadInterrupts>
 800618e:	4603      	mov	r3, r0
 8006190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006194:	2b80      	cmp	r3, #128	@ 0x80
 8006196:	d123      	bne.n	80061e0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061a4:	2301      	movs	r3, #1
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a8:	e014      	b.n	80061d4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d105      	bne.n	80061ce <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fb0a 	bl	80067e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	3301      	adds	r3, #1
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	791b      	ldrb	r3, [r3, #4]
 80061d8:	461a      	mov	r2, r3
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	4293      	cmp	r3, r2
 80061de:	d3e4      	bcc.n	80061aa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f004 fb5b 	bl	800a8a0 <USB_ReadInterrupts>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061f4:	d13c      	bne.n	8006270 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061f6:	2301      	movs	r3, #1
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061fa:	e02b      	b.n	8006254 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006210:	4613      	mov	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	3318      	adds	r3, #24
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d115      	bne.n	800624e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006222:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006224:	2b00      	cmp	r3, #0
 8006226:	da12      	bge.n	800624e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	4613      	mov	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	3317      	adds	r3, #23
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006244:	b2db      	uxtb	r3, r3
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 faca 	bl	80067e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	3301      	adds	r3, #1
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	791b      	ldrb	r3, [r3, #4]
 8006258:	461a      	mov	r2, r3
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	4293      	cmp	r3, r2
 800625e:	d3cd      	bcc.n	80061fc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800626e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	f004 fb13 	bl	800a8a0 <USB_ReadInterrupts>
 800627a:	4603      	mov	r3, r0
 800627c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006280:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006284:	d156      	bne.n	8006334 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006286:	2301      	movs	r3, #1
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24
 800628a:	e045      	b.n	8006318 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d12e      	bne.n	8006312 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da2b      	bge.n	8006312 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80062c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d121      	bne.n	8006312 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d2:	4613      	mov	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800630a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800630e:	6053      	str	r3, [r2, #4]
            break;
 8006310:	e008      	b.n	8006324 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	3301      	adds	r3, #1
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	791b      	ldrb	r3, [r3, #4]
 800631c:	461a      	mov	r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	4293      	cmp	r3, r2
 8006322:	d3b3      	bcc.n	800628c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006332:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f004 fab1 	bl	800a8a0 <USB_ReadInterrupts>
 800633e:	4603      	mov	r3, r0
 8006340:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006348:	d10a      	bne.n	8006360 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f009 f8e4 	bl	800f518 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800635e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f004 fa9b 	bl	800a8a0 <USB_ReadInterrupts>
 800636a:	4603      	mov	r3, r0
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d115      	bne.n	80063a0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f009 f8d4 	bl	800f534 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	430a      	orrs	r2, r1
 800639a:	605a      	str	r2, [r3, #4]
 800639c:	e000      	b.n	80063a0 <HAL_PCD_IRQHandler+0x93c>
      return;
 800639e:	bf00      	nop
    }
  }
}
 80063a0:	3734      	adds	r7, #52	@ 0x34
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd90      	pop	{r4, r7, pc}

080063a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_PCD_SetAddress+0x1a>
 80063bc:	2302      	movs	r3, #2
 80063be:	e012      	b.n	80063e6 <HAL_PCD_SetAddress+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	4611      	mov	r1, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f004 f9fa 	bl	800a7d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	4608      	mov	r0, r1
 80063f8:	4611      	mov	r1, r2
 80063fa:	461a      	mov	r2, r3
 80063fc:	4603      	mov	r3, r0
 80063fe:	70fb      	strb	r3, [r7, #3]
 8006400:	460b      	mov	r3, r1
 8006402:	803b      	strh	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800640c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006410:	2b00      	cmp	r3, #0
 8006412:	da0f      	bge.n	8006434 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	f003 020f 	and.w	r2, r3, #15
 800641a:	4613      	mov	r3, r2
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	3310      	adds	r3, #16
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	4413      	add	r3, r2
 8006428:	3304      	adds	r3, #4
 800642a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	705a      	strb	r2, [r3, #1]
 8006432:	e00f      	b.n	8006454 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	f003 020f 	and.w	r2, r3, #15
 800643a:	4613      	mov	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4413      	add	r3, r2
 800644a:	3304      	adds	r3, #4
 800644c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006460:	883b      	ldrh	r3, [r7, #0]
 8006462:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	78ba      	ldrb	r2, [r7, #2]
 800646e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006482:	78bb      	ldrb	r3, [r7, #2]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d102      	bne.n	800648e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_PCD_EP_Open+0xae>
 8006498:	2302      	movs	r3, #2
 800649a:	e00e      	b.n	80064ba <HAL_PCD_EP_Open+0xcc>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68f9      	ldr	r1, [r7, #12]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f003 fb7a 	bl	8009ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80064b8:	7afb      	ldrb	r3, [r7, #11]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da0f      	bge.n	80064f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	f003 020f 	and.w	r2, r3, #15
 80064dc:	4613      	mov	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	3310      	adds	r3, #16
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	4413      	add	r3, r2
 80064ea:	3304      	adds	r3, #4
 80064ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2201      	movs	r2, #1
 80064f2:	705a      	strb	r2, [r3, #1]
 80064f4:	e00f      	b.n	8006516 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	4613      	mov	r3, r2
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	4413      	add	r3, r2
 800650c:	3304      	adds	r3, #4
 800650e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_PCD_EP_Close+0x6e>
 800652c:	2302      	movs	r3, #2
 800652e:	e00e      	b.n	800654e <HAL_PCD_EP_Close+0x8c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68f9      	ldr	r1, [r7, #12]
 800653e:	4618      	mov	r0, r3
 8006540:	f003 fbb8 	bl	8009cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	460b      	mov	r3, r1
 8006564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006566:	7afb      	ldrb	r3, [r7, #11]
 8006568:	f003 020f 	and.w	r2, r3, #15
 800656c:	4613      	mov	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	3304      	adds	r3, #4
 800657e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2200      	movs	r2, #0
 8006596:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	799b      	ldrb	r3, [r3, #6]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d102      	bne.n	80065b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	799b      	ldrb	r3, [r3, #6]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6979      	ldr	r1, [r7, #20]
 80065be:	f003 fc55 	bl	8009e6c <USB_EPStartXfer>

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80065ee:	681b      	ldr	r3, [r3, #0]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	607a      	str	r2, [r7, #4]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	460b      	mov	r3, r1
 800660a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800660c:	7afb      	ldrb	r3, [r7, #11]
 800660e:	f003 020f 	and.w	r2, r3, #15
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	3310      	adds	r3, #16
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	3304      	adds	r3, #4
 8006622:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2200      	movs	r2, #0
 8006634:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2201      	movs	r2, #1
 800663a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	b2da      	uxtb	r2, r3
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	799b      	ldrb	r3, [r3, #6]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d102      	bne.n	8006656 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	799b      	ldrb	r3, [r3, #6]
 800665e:	461a      	mov	r2, r3
 8006660:	6979      	ldr	r1, [r7, #20]
 8006662:	f003 fc03 	bl	8009e6c <USB_EPStartXfer>

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	7912      	ldrb	r2, [r2, #4]
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e04f      	b.n	800672e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800668e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006692:	2b00      	cmp	r3, #0
 8006694:	da0f      	bge.n	80066b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	4613      	mov	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	3310      	adds	r3, #16
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	4413      	add	r3, r2
 80066aa:	3304      	adds	r3, #4
 80066ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	705a      	strb	r2, [r3, #1]
 80066b4:	e00d      	b.n	80066d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	4613      	mov	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	4413      	add	r3, r2
 80066c8:	3304      	adds	r3, #4
 80066ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_PCD_EP_SetStall+0x82>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e01d      	b.n	800672e <HAL_PCD_EP_SetStall+0xbe>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	4618      	mov	r0, r3
 8006702:	f003 ff91 	bl	800a628 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7999      	ldrb	r1, [r3, #6]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800671e:	461a      	mov	r2, r3
 8006720:	f004 f982 	bl	800aa28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	7912      	ldrb	r2, [r2, #4]
 800674c:	4293      	cmp	r3, r2
 800674e:	d901      	bls.n	8006754 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e042      	b.n	80067da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006758:	2b00      	cmp	r3, #0
 800675a:	da0f      	bge.n	800677c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	4613      	mov	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	3310      	adds	r3, #16
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	4413      	add	r3, r2
 8006770:	3304      	adds	r3, #4
 8006772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	705a      	strb	r2, [r3, #1]
 800677a:	e00f      	b.n	800679c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	f003 020f 	and.w	r2, r3, #15
 8006782:	4613      	mov	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	3304      	adds	r3, #4
 8006794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_PCD_EP_ClrStall+0x86>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e00e      	b.n	80067da <HAL_PCD_EP_ClrStall+0xa4>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68f9      	ldr	r1, [r7, #12]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f003 ff9a 	bl	800a704 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80067ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da0c      	bge.n	8006810 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	f003 020f 	and.w	r2, r3, #15
 80067fc:	4613      	mov	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	3310      	adds	r3, #16
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4413      	add	r3, r2
 800680a:	3304      	adds	r3, #4
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e00c      	b.n	800682a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	f003 020f 	and.w	r2, r3, #15
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	4413      	add	r3, r2
 8006826:	3304      	adds	r3, #4
 8006828:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	4618      	mov	r0, r3
 8006832:	f003 fdb9 	bl	800a3a8 <USB_EPStopXfer>
 8006836:	4603      	mov	r3, r0
 8006838:	72fb      	strb	r3, [r7, #11]

  return ret;
 800683a:	7afb      	ldrb	r3, [r7, #11]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	@ 0x28
 8006848:	af02      	add	r7, sp, #8
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	4613      	mov	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	3310      	adds	r3, #16
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	4413      	add	r3, r2
 8006868:	3304      	adds	r3, #4
 800686a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d901      	bls.n	800687c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e06b      	b.n	8006954 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	429a      	cmp	r2, r3
 8006890:	d902      	bls.n	8006898 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	3303      	adds	r3, #3
 800689c:	089b      	lsrs	r3, r3, #2
 800689e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068a0:	e02a      	b.n	80068f8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d902      	bls.n	80068be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	3303      	adds	r3, #3
 80068c2:	089b      	lsrs	r3, r3, #2
 80068c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68d9      	ldr	r1, [r3, #12]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4603      	mov	r3, r0
 80068da:	6978      	ldr	r0, [r7, #20]
 80068dc:	f003 fe0e 	bl	800a4fc <USB_WritePacket>

    ep->xfer_buff  += len;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	441a      	add	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	695a      	ldr	r2, [r3, #20]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	441a      	add	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	429a      	cmp	r2, r3
 800690c:	d809      	bhi.n	8006922 <PCD_WriteEmptyTxFifo+0xde>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006916:	429a      	cmp	r2, r3
 8006918:	d203      	bcs.n	8006922 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1bf      	bne.n	80068a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	429a      	cmp	r2, r3
 800692c:	d811      	bhi.n	8006952 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	2201      	movs	r2, #1
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	43db      	mvns	r3, r3
 8006948:	6939      	ldr	r1, [r7, #16]
 800694a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800694e:	4013      	ands	r3, r2
 8006950:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	333c      	adds	r3, #60	@ 0x3c
 8006974:	3304      	adds	r3, #4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	799b      	ldrb	r3, [r3, #6]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d17b      	bne.n	8006a8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d015      	beq.n	80069c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4a61      	ldr	r2, [pc, #388]	@ (8006b24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	f240 80b9 	bls.w	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80b3 	beq.w	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069c4:	6093      	str	r3, [r2, #8]
 80069c6:	e0a7      	b.n	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069de:	461a      	mov	r2, r3
 80069e0:	2320      	movs	r3, #32
 80069e2:	6093      	str	r3, [r2, #8]
 80069e4:	e098      	b.n	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 8093 	bne.w	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006b24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d90f      	bls.n	8006a1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a10:	461a      	mov	r2, r3
 8006a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a16:	6093      	str	r3, [r2, #8]
 8006a18:	e07e      	b.n	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a1a      	ldr	r2, [r3, #32]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	0159      	lsls	r1, r3, #5
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a46:	1ad2      	subs	r2, r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d114      	bne.n	8006a7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a64:	461a      	mov	r2, r3
 8006a66:	2101      	movs	r1, #1
 8006a68:	f003 ffde 	bl	800aa28 <USB_EP0_OutStart>
 8006a6c:	e006      	b.n	8006a7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	441a      	add	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f008 fc8e 	bl	800f3a4 <HAL_PCD_DataOutStageCallback>
 8006a88:	e046      	b.n	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4a26      	ldr	r2, [pc, #152]	@ (8006b28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d124      	bne.n	8006adc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aae:	6093      	str	r3, [r2, #8]
 8006ab0:	e032      	b.n	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2320      	movs	r3, #32
 8006acc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f008 fc65 	bl	800f3a4 <HAL_PCD_DataOutStageCallback>
 8006ada:	e01d      	b.n	8006b18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d114      	bne.n	8006b0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d108      	bne.n	8006b0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b04:	461a      	mov	r2, r3
 8006b06:	2100      	movs	r1, #0
 8006b08:	f003 ff8e 	bl	800aa28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f008 fc46 	bl	800f3a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	4f54300a 	.word	0x4f54300a
 8006b28:	4f54310a 	.word	0x4f54310a

08006b2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	333c      	adds	r3, #60	@ 0x3c
 8006b44:	3304      	adds	r3, #4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a15      	ldr	r2, [pc, #84]	@ (8006bb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d90e      	bls.n	8006b80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d009      	beq.n	8006b80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f008 fbfd 	bl	800f380 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d90c      	bls.n	8006ba8 <PCD_EP_OutSetupPacket_int+0x7c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	799b      	ldrb	r3, [r3, #6]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d108      	bne.n	8006ba8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	f003 ff40 	bl	800aa28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	4f54300a 	.word	0x4f54300a

08006bb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	70fb      	strb	r3, [r7, #3]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d107      	bne.n	8006be6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006bd6:	883b      	ldrh	r3, [r7, #0]
 8006bd8:	0419      	lsls	r1, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006be4:	e028      	b.n	8006c38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bec:	0c1b      	lsrs	r3, r3, #16
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
 8006bf8:	e00d      	b.n	8006c16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	3340      	adds	r3, #64	@ 0x40
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	3301      	adds	r3, #1
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	7bfa      	ldrb	r2, [r7, #15]
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3ec      	bcc.n	8006bfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c20:	883b      	ldrh	r3, [r7, #0]
 8006c22:	0418      	lsls	r0, r3, #16
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6819      	ldr	r1, [r3, #0]
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	4302      	orrs	r2, r0
 8006c30:	3340      	adds	r3, #64	@ 0x40
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	887a      	ldrh	r2, [r7, #2]
 8006c58:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e267      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d075      	beq.n	8006d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006c9e:	4b88      	ldr	r3, [pc, #544]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f003 030c 	and.w	r3, r3, #12
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d00c      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006caa:	4b85      	ldr	r3, [pc, #532]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d112      	bne.n	8006cdc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cb6:	4b82      	ldr	r3, [pc, #520]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cc2:	d10b      	bne.n	8006cdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d05b      	beq.n	8006d88 <HAL_RCC_OscConfig+0x108>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d157      	bne.n	8006d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e242      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce4:	d106      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x74>
 8006ce6:	4b76      	ldr	r3, [pc, #472]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a75      	ldr	r2, [pc, #468]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	e01d      	b.n	8006d30 <HAL_RCC_OscConfig+0xb0>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cfc:	d10c      	bne.n	8006d18 <HAL_RCC_OscConfig+0x98>
 8006cfe:	4b70      	ldr	r3, [pc, #448]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a6f      	ldr	r2, [pc, #444]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	e00b      	b.n	8006d30 <HAL_RCC_OscConfig+0xb0>
 8006d18:	4b69      	ldr	r3, [pc, #420]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a68      	ldr	r2, [pc, #416]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	4b66      	ldr	r3, [pc, #408]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a65      	ldr	r2, [pc, #404]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d013      	beq.n	8006d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d38:	f7fd fec6 	bl	8004ac8 <HAL_GetTick>
 8006d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3e:	e008      	b.n	8006d52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d40:	f7fd fec2 	bl	8004ac8 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b64      	cmp	r3, #100	@ 0x64
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e207      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d52:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0f0      	beq.n	8006d40 <HAL_RCC_OscConfig+0xc0>
 8006d5e:	e014      	b.n	8006d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d60:	f7fd feb2 	bl	8004ac8 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d68:	f7fd feae 	bl	8004ac8 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b64      	cmp	r3, #100	@ 0x64
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e1f3      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d7a:	4b51      	ldr	r3, [pc, #324]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0xe8>
 8006d86:	e000      	b.n	8006d8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d063      	beq.n	8006e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006d96:	4b4a      	ldr	r3, [pc, #296]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006da2:	4b47      	ldr	r3, [pc, #284]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d11c      	bne.n	8006de8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dae:	4b44      	ldr	r3, [pc, #272]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d116      	bne.n	8006de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dba:	4b41      	ldr	r3, [pc, #260]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x152>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d001      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e1c7      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4937      	ldr	r1, [pc, #220]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006de6:	e03a      	b.n	8006e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d020      	beq.n	8006e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006df0:	4b34      	ldr	r3, [pc, #208]	@ (8006ec4 <HAL_RCC_OscConfig+0x244>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df6:	f7fd fe67 	bl	8004ac8 <HAL_GetTick>
 8006dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dfc:	e008      	b.n	8006e10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dfe:	f7fd fe63 	bl	8004ac8 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e1a8      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e10:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0f0      	beq.n	8006dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e1c:	4b28      	ldr	r3, [pc, #160]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	4925      	ldr	r1, [pc, #148]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	600b      	str	r3, [r1, #0]
 8006e30:	e015      	b.n	8006e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e32:	4b24      	ldr	r3, [pc, #144]	@ (8006ec4 <HAL_RCC_OscConfig+0x244>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e38:	f7fd fe46 	bl	8004ac8 <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e40:	f7fd fe42 	bl	8004ac8 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e187      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e52:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f0      	bne.n	8006e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d036      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d016      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e72:	4b15      	ldr	r3, [pc, #84]	@ (8006ec8 <HAL_RCC_OscConfig+0x248>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e78:	f7fd fe26 	bl	8004ac8 <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e80:	f7fd fe22 	bl	8004ac8 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e167      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e92:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec0 <HAL_RCC_OscConfig+0x240>)
 8006e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0x200>
 8006e9e:	e01b      	b.n	8006ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ea0:	4b09      	ldr	r3, [pc, #36]	@ (8006ec8 <HAL_RCC_OscConfig+0x248>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea6:	f7fd fe0f 	bl	8004ac8 <HAL_GetTick>
 8006eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eac:	e00e      	b.n	8006ecc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eae:	f7fd fe0b 	bl	8004ac8 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d907      	bls.n	8006ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e150      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	42470000 	.word	0x42470000
 8006ec8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ecc:	4b88      	ldr	r3, [pc, #544]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1ea      	bne.n	8006eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8097 	beq.w	8007014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eea:	4b81      	ldr	r3, [pc, #516]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10f      	bne.n	8006f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60bb      	str	r3, [r7, #8]
 8006efa:	4b7d      	ldr	r3, [pc, #500]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	4a7c      	ldr	r2, [pc, #496]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f06:	4b7a      	ldr	r3, [pc, #488]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f0e:	60bb      	str	r3, [r7, #8]
 8006f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f16:	4b77      	ldr	r3, [pc, #476]	@ (80070f4 <HAL_RCC_OscConfig+0x474>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d118      	bne.n	8006f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f22:	4b74      	ldr	r3, [pc, #464]	@ (80070f4 <HAL_RCC_OscConfig+0x474>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a73      	ldr	r2, [pc, #460]	@ (80070f4 <HAL_RCC_OscConfig+0x474>)
 8006f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f2e:	f7fd fdcb 	bl	8004ac8 <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f36:	f7fd fdc7 	bl	8004ac8 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e10c      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f48:	4b6a      	ldr	r3, [pc, #424]	@ (80070f4 <HAL_RCC_OscConfig+0x474>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0f0      	beq.n	8006f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d106      	bne.n	8006f6a <HAL_RCC_OscConfig+0x2ea>
 8006f5c:	4b64      	ldr	r3, [pc, #400]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f60:	4a63      	ldr	r2, [pc, #396]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f68:	e01c      	b.n	8006fa4 <HAL_RCC_OscConfig+0x324>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	2b05      	cmp	r3, #5
 8006f70:	d10c      	bne.n	8006f8c <HAL_RCC_OscConfig+0x30c>
 8006f72:	4b5f      	ldr	r3, [pc, #380]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f76:	4a5e      	ldr	r2, [pc, #376]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f78:	f043 0304 	orr.w	r3, r3, #4
 8006f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f82:	4a5b      	ldr	r2, [pc, #364]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f84:	f043 0301 	orr.w	r3, r3, #1
 8006f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f8a:	e00b      	b.n	8006fa4 <HAL_RCC_OscConfig+0x324>
 8006f8c:	4b58      	ldr	r3, [pc, #352]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f90:	4a57      	ldr	r2, [pc, #348]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f92:	f023 0301 	bic.w	r3, r3, #1
 8006f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f98:	4b55      	ldr	r3, [pc, #340]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f9c:	4a54      	ldr	r2, [pc, #336]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006f9e:	f023 0304 	bic.w	r3, r3, #4
 8006fa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d015      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fac:	f7fd fd8c 	bl	8004ac8 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb2:	e00a      	b.n	8006fca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fb4:	f7fd fd88 	bl	8004ac8 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e0cb      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fca:	4b49      	ldr	r3, [pc, #292]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0ee      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x334>
 8006fd6:	e014      	b.n	8007002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fd8:	f7fd fd76 	bl	8004ac8 <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe0:	f7fd fd72 	bl	8004ac8 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e0b5      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1ee      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d105      	bne.n	8007014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007008:	4b39      	ldr	r3, [pc, #228]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 800700a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700c:	4a38      	ldr	r2, [pc, #224]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 800700e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007012:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80a1 	beq.w	8007160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800701e:	4b34      	ldr	r3, [pc, #208]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f003 030c 	and.w	r3, r3, #12
 8007026:	2b08      	cmp	r3, #8
 8007028:	d05c      	beq.n	80070e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d141      	bne.n	80070b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007032:	4b31      	ldr	r3, [pc, #196]	@ (80070f8 <HAL_RCC_OscConfig+0x478>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007038:	f7fd fd46 	bl	8004ac8 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007040:	f7fd fd42 	bl	8004ac8 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e087      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007052:	4b27      	ldr	r3, [pc, #156]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69da      	ldr	r2, [r3, #28]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	431a      	orrs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706c:	019b      	lsls	r3, r3, #6
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007074:	085b      	lsrs	r3, r3, #1
 8007076:	3b01      	subs	r3, #1
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007080:	061b      	lsls	r3, r3, #24
 8007082:	491b      	ldr	r1, [pc, #108]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 8007084:	4313      	orrs	r3, r2
 8007086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007088:	4b1b      	ldr	r3, [pc, #108]	@ (80070f8 <HAL_RCC_OscConfig+0x478>)
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800708e:	f7fd fd1b 	bl	8004ac8 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007096:	f7fd fd17 	bl	8004ac8 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e05c      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070a8:	4b11      	ldr	r3, [pc, #68]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <HAL_RCC_OscConfig+0x416>
 80070b4:	e054      	b.n	8007160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b6:	4b10      	ldr	r3, [pc, #64]	@ (80070f8 <HAL_RCC_OscConfig+0x478>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070bc:	f7fd fd04 	bl	8004ac8 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c4:	f7fd fd00 	bl	8004ac8 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e045      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d6:	4b06      	ldr	r3, [pc, #24]	@ (80070f0 <HAL_RCC_OscConfig+0x470>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f0      	bne.n	80070c4 <HAL_RCC_OscConfig+0x444>
 80070e2:	e03d      	b.n	8007160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d107      	bne.n	80070fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e038      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
 80070f0:	40023800 	.word	0x40023800
 80070f4:	40007000 	.word	0x40007000
 80070f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070fc:	4b1b      	ldr	r3, [pc, #108]	@ (800716c <HAL_RCC_OscConfig+0x4ec>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d028      	beq.n	800715c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007114:	429a      	cmp	r2, r3
 8007116:	d121      	bne.n	800715c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007122:	429a      	cmp	r2, r3
 8007124:	d11a      	bne.n	800715c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800712c:	4013      	ands	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007134:	4293      	cmp	r3, r2
 8007136:	d111      	bne.n	800715c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	3b01      	subs	r3, #1
 8007146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007148:	429a      	cmp	r2, r3
 800714a:	d107      	bne.n	800715c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007158:	429a      	cmp	r2, r3
 800715a:	d001      	beq.n	8007160 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40023800 	.word	0x40023800

08007170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0cc      	b.n	800731e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007184:	4b68      	ldr	r3, [pc, #416]	@ (8007328 <HAL_RCC_ClockConfig+0x1b8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d90c      	bls.n	80071ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007192:	4b65      	ldr	r3, [pc, #404]	@ (8007328 <HAL_RCC_ClockConfig+0x1b8>)
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b63      	ldr	r3, [pc, #396]	@ (8007328 <HAL_RCC_ClockConfig+0x1b8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e0b8      	b.n	800731e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d020      	beq.n	80071fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071c4:	4b59      	ldr	r3, [pc, #356]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	4a58      	ldr	r2, [pc, #352]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80071ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80071ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071dc:	4b53      	ldr	r3, [pc, #332]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	4a52      	ldr	r2, [pc, #328]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80071e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071e8:	4b50      	ldr	r3, [pc, #320]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	494d      	ldr	r1, [pc, #308]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d044      	beq.n	8007290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d107      	bne.n	800721e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800720e:	4b47      	ldr	r3, [pc, #284]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d119      	bne.n	800724e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e07f      	b.n	800731e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d003      	beq.n	800722e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800722a:	2b03      	cmp	r3, #3
 800722c:	d107      	bne.n	800723e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722e:	4b3f      	ldr	r3, [pc, #252]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e06f      	b.n	800731e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723e:	4b3b      	ldr	r3, [pc, #236]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e067      	b.n	800731e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800724e:	4b37      	ldr	r3, [pc, #220]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f023 0203 	bic.w	r2, r3, #3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4934      	ldr	r1, [pc, #208]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 800725c:	4313      	orrs	r3, r2
 800725e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007260:	f7fd fc32 	bl	8004ac8 <HAL_GetTick>
 8007264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007266:	e00a      	b.n	800727e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007268:	f7fd fc2e 	bl	8004ac8 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e04f      	b.n	800731e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727e:	4b2b      	ldr	r3, [pc, #172]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 020c 	and.w	r2, r3, #12
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	429a      	cmp	r2, r3
 800728e:	d1eb      	bne.n	8007268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007290:	4b25      	ldr	r3, [pc, #148]	@ (8007328 <HAL_RCC_ClockConfig+0x1b8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d20c      	bcs.n	80072b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729e:	4b22      	ldr	r3, [pc, #136]	@ (8007328 <HAL_RCC_ClockConfig+0x1b8>)
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a6:	4b20      	ldr	r3, [pc, #128]	@ (8007328 <HAL_RCC_ClockConfig+0x1b8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d001      	beq.n	80072b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e032      	b.n	800731e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d008      	beq.n	80072d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072c4:	4b19      	ldr	r3, [pc, #100]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4916      	ldr	r1, [pc, #88]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072e2:	4b12      	ldr	r3, [pc, #72]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	490e      	ldr	r1, [pc, #56]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072f6:	f000 f821 	bl	800733c <HAL_RCC_GetSysClockFreq>
 80072fa:	4602      	mov	r2, r0
 80072fc:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <HAL_RCC_ClockConfig+0x1bc>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	091b      	lsrs	r3, r3, #4
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	490a      	ldr	r1, [pc, #40]	@ (8007330 <HAL_RCC_ClockConfig+0x1c0>)
 8007308:	5ccb      	ldrb	r3, [r1, r3]
 800730a:	fa22 f303 	lsr.w	r3, r2, r3
 800730e:	4a09      	ldr	r2, [pc, #36]	@ (8007334 <HAL_RCC_ClockConfig+0x1c4>)
 8007310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007312:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <HAL_RCC_ClockConfig+0x1c8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7fd fb92 	bl	8004a40 <HAL_InitTick>

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40023c00 	.word	0x40023c00
 800732c:	40023800 	.word	0x40023800
 8007330:	08010680 	.word	0x08010680
 8007334:	20000004 	.word	0x20000004
 8007338:	20000030 	.word	0x20000030

0800733c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800733c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007340:	b090      	sub	sp, #64	@ 0x40
 8007342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007354:	4b59      	ldr	r3, [pc, #356]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f003 030c 	and.w	r3, r3, #12
 800735c:	2b08      	cmp	r3, #8
 800735e:	d00d      	beq.n	800737c <HAL_RCC_GetSysClockFreq+0x40>
 8007360:	2b08      	cmp	r3, #8
 8007362:	f200 80a1 	bhi.w	80074a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <HAL_RCC_GetSysClockFreq+0x34>
 800736a:	2b04      	cmp	r3, #4
 800736c:	d003      	beq.n	8007376 <HAL_RCC_GetSysClockFreq+0x3a>
 800736e:	e09b      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007370:	4b53      	ldr	r3, [pc, #332]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007372:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007374:	e09b      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007376:	4b53      	ldr	r3, [pc, #332]	@ (80074c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007378:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800737a:	e098      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800737c:	4b4f      	ldr	r3, [pc, #316]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x180>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007384:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007386:	4b4d      	ldr	r3, [pc, #308]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d028      	beq.n	80073e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007392:	4b4a      	ldr	r3, [pc, #296]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	099b      	lsrs	r3, r3, #6
 8007398:	2200      	movs	r2, #0
 800739a:	623b      	str	r3, [r7, #32]
 800739c:	627a      	str	r2, [r7, #36]	@ 0x24
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80073a4:	2100      	movs	r1, #0
 80073a6:	4b47      	ldr	r3, [pc, #284]	@ (80074c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80073a8:	fb03 f201 	mul.w	r2, r3, r1
 80073ac:	2300      	movs	r3, #0
 80073ae:	fb00 f303 	mul.w	r3, r0, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	4a43      	ldr	r2, [pc, #268]	@ (80074c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80073b6:	fba0 1202 	umull	r1, r2, r0, r2
 80073ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073bc:	460a      	mov	r2, r1
 80073be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80073c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c2:	4413      	add	r3, r2
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c8:	2200      	movs	r2, #0
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	61fa      	str	r2, [r7, #28]
 80073ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80073d6:	f7f8 ff5b 	bl	8000290 <__aeabi_uldivmod>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4613      	mov	r3, r2
 80073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e2:	e053      	b.n	800748c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073e4:	4b35      	ldr	r3, [pc, #212]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x180>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	099b      	lsrs	r3, r3, #6
 80073ea:	2200      	movs	r2, #0
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	617a      	str	r2, [r7, #20]
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80073f6:	f04f 0b00 	mov.w	fp, #0
 80073fa:	4652      	mov	r2, sl
 80073fc:	465b      	mov	r3, fp
 80073fe:	f04f 0000 	mov.w	r0, #0
 8007402:	f04f 0100 	mov.w	r1, #0
 8007406:	0159      	lsls	r1, r3, #5
 8007408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800740c:	0150      	lsls	r0, r2, #5
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	ebb2 080a 	subs.w	r8, r2, sl
 8007416:	eb63 090b 	sbc.w	r9, r3, fp
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007426:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800742a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800742e:	ebb2 0408 	subs.w	r4, r2, r8
 8007432:	eb63 0509 	sbc.w	r5, r3, r9
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	00eb      	lsls	r3, r5, #3
 8007440:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007444:	00e2      	lsls	r2, r4, #3
 8007446:	4614      	mov	r4, r2
 8007448:	461d      	mov	r5, r3
 800744a:	eb14 030a 	adds.w	r3, r4, sl
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	eb45 030b 	adc.w	r3, r5, fp
 8007454:	607b      	str	r3, [r7, #4]
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007462:	4629      	mov	r1, r5
 8007464:	028b      	lsls	r3, r1, #10
 8007466:	4621      	mov	r1, r4
 8007468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800746c:	4621      	mov	r1, r4
 800746e:	028a      	lsls	r2, r1, #10
 8007470:	4610      	mov	r0, r2
 8007472:	4619      	mov	r1, r3
 8007474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007476:	2200      	movs	r2, #0
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	60fa      	str	r2, [r7, #12]
 800747c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007480:	f7f8 ff06 	bl	8000290 <__aeabi_uldivmod>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4613      	mov	r3, r2
 800748a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800748c:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x180>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	0c1b      	lsrs	r3, r3, #16
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	3301      	adds	r3, #1
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800749c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074a6:	e002      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80074aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3740      	adds	r7, #64	@ 0x40
 80074b4:	46bd      	mov	sp, r7
 80074b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ba:	bf00      	nop
 80074bc:	40023800 	.word	0x40023800
 80074c0:	00f42400 	.word	0x00f42400
 80074c4:	017d7840 	.word	0x017d7840

080074c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074cc:	4b03      	ldr	r3, [pc, #12]	@ (80074dc <HAL_RCC_GetHCLKFreq+0x14>)
 80074ce:	681b      	ldr	r3, [r3, #0]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20000004 	.word	0x20000004

080074e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e07b      	b.n	80075ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d108      	bne.n	800750c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007502:	d009      	beq.n	8007518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	61da      	str	r2, [r3, #28]
 800750a:	e005      	b.n	8007518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d106      	bne.n	8007538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fa fc4a 	bl	8001dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800754e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007588:	431a      	orrs	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759c:	ea42 0103 	orr.w	r1, r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	f003 0104 	and.w	r1, r3, #4
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	f003 0210 	and.w	r2, r3, #16
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69da      	ldr	r2, [r3, #28]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b088      	sub	sp, #32
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007602:	f7fd fa61 	bl	8004ac8 <HAL_GetTick>
 8007606:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d001      	beq.n	800761c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
 800761a:	e12a      	b.n	8007872 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_SPI_Transmit+0x36>
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e122      	b.n	8007872 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_SPI_Transmit+0x48>
 8007636:	2302      	movs	r3, #2
 8007638:	e11b      	b.n	8007872 <HAL_SPI_Transmit+0x280>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2203      	movs	r2, #3
 8007646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	88fa      	ldrh	r2, [r7, #6]
 800765a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007688:	d10f      	bne.n	80076aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007698:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b4:	2b40      	cmp	r3, #64	@ 0x40
 80076b6:	d007      	beq.n	80076c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076d0:	d152      	bne.n	8007778 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_SPI_Transmit+0xee>
 80076da:	8b7b      	ldrh	r3, [r7, #26]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d145      	bne.n	800776c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	881a      	ldrh	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f0:	1c9a      	adds	r2, r3, #2
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007704:	e032      	b.n	800776c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b02      	cmp	r3, #2
 8007712:	d112      	bne.n	800773a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007718:	881a      	ldrh	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007724:	1c9a      	adds	r2, r3, #2
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007738:	e018      	b.n	800776c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800773a:	f7fd f9c5 	bl	8004ac8 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d803      	bhi.n	8007752 <HAL_SPI_Transmit+0x160>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007750:	d102      	bne.n	8007758 <HAL_SPI_Transmit+0x166>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e082      	b.n	8007872 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1c7      	bne.n	8007706 <HAL_SPI_Transmit+0x114>
 8007776:	e053      	b.n	8007820 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <HAL_SPI_Transmit+0x194>
 8007780:	8b7b      	ldrh	r3, [r7, #26]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d147      	bne.n	8007816 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	330c      	adds	r3, #12
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077ac:	e033      	b.n	8007816 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d113      	bne.n	80077e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80077e2:	e018      	b.n	8007816 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077e4:	f7fd f970 	bl	8004ac8 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d803      	bhi.n	80077fc <HAL_SPI_Transmit+0x20a>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	d102      	bne.n	8007802 <HAL_SPI_Transmit+0x210>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d109      	bne.n	8007816 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e02d      	b.n	8007872 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1c6      	bne.n	80077ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fd21 	bl	800826c <SPI_EndRxTxTransaction>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e000      	b.n	8007872 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007870:	2300      	movs	r3, #0
  }
}
 8007872:	4618      	mov	r0, r3
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b088      	sub	sp, #32
 800787e:	af02      	add	r7, sp, #8
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	603b      	str	r3, [r7, #0]
 8007886:	4613      	mov	r3, r2
 8007888:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b01      	cmp	r3, #1
 8007894:	d001      	beq.n	800789a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007896:	2302      	movs	r3, #2
 8007898:	e104      	b.n	8007aa4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078a2:	d112      	bne.n	80078ca <HAL_SPI_Receive+0x50>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10e      	bne.n	80078ca <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2204      	movs	r2, #4
 80078b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078b4:	88fa      	ldrh	r2, [r7, #6]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	4613      	mov	r3, r2
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f8f3 	bl	8007aac <HAL_SPI_TransmitReceive>
 80078c6:	4603      	mov	r3, r0
 80078c8:	e0ec      	b.n	8007aa4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ca:	f7fd f8fd 	bl	8004ac8 <HAL_GetTick>
 80078ce:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_SPI_Receive+0x62>
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e0e1      	b.n	8007aa4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d101      	bne.n	80078ee <HAL_SPI_Receive+0x74>
 80078ea:	2302      	movs	r3, #2
 80078ec:	e0da      	b.n	8007aa4 <HAL_SPI_Receive+0x22a>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2204      	movs	r2, #4
 80078fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	88fa      	ldrh	r2, [r7, #6]
 800790e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800793c:	d10f      	bne.n	800795e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800794c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800795c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007968:	2b40      	cmp	r3, #64	@ 0x40
 800796a:	d007      	beq.n	800797c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800797a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d170      	bne.n	8007a66 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007984:	e035      	b.n	80079f2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b01      	cmp	r3, #1
 8007992:	d115      	bne.n	80079c0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f103 020c 	add.w	r2, r3, #12
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079be:	e018      	b.n	80079f2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079c0:	f7fd f882 	bl	8004ac8 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d803      	bhi.n	80079d8 <HAL_SPI_Receive+0x15e>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d6:	d102      	bne.n	80079de <HAL_SPI_Receive+0x164>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e058      	b.n	8007aa4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1c4      	bne.n	8007986 <HAL_SPI_Receive+0x10c>
 80079fc:	e038      	b.n	8007a70 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d113      	bne.n	8007a34 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a16:	b292      	uxth	r2, r2
 8007a18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1e:	1c9a      	adds	r2, r3, #2
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a32:	e018      	b.n	8007a66 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a34:	f7fd f848 	bl	8004ac8 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d803      	bhi.n	8007a4c <HAL_SPI_Receive+0x1d2>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4a:	d102      	bne.n	8007a52 <HAL_SPI_Receive+0x1d8>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e01e      	b.n	8007aa4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1c6      	bne.n	80079fe <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fb93 	bl	80081a0 <SPI_EndRxTransaction>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
  }
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	@ 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007aba:	2301      	movs	r3, #1
 8007abc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007abe:	f7fd f803 	bl	8004ac8 <HAL_GetTick>
 8007ac2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007aca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d00c      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x4a>
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ae2:	d106      	bne.n	8007af2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <HAL_SPI_TransmitReceive+0x46>
 8007aec:	7ffb      	ldrb	r3, [r7, #31]
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	d001      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007af2:	2302      	movs	r3, #2
 8007af4:	e17f      	b.n	8007df6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_SPI_TransmitReceive+0x5c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_SPI_TransmitReceive+0x5c>
 8007b02:	887b      	ldrh	r3, [r7, #2]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e174      	b.n	8007df6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d101      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x6e>
 8007b16:	2302      	movs	r3, #2
 8007b18:	e16d      	b.n	8007df6 <HAL_SPI_TransmitReceive+0x34a>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d003      	beq.n	8007b36 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2205      	movs	r2, #5
 8007b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	887a      	ldrh	r2, [r7, #2]
 8007b46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	887a      	ldrh	r2, [r7, #2]
 8007b4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	887a      	ldrh	r2, [r7, #2]
 8007b58:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	887a      	ldrh	r2, [r7, #2]
 8007b5e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b76:	2b40      	cmp	r3, #64	@ 0x40
 8007b78:	d007      	beq.n	8007b8a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b92:	d17e      	bne.n	8007c92 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <HAL_SPI_TransmitReceive+0xf6>
 8007b9c:	8afb      	ldrh	r3, [r7, #22]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d16c      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba6:	881a      	ldrh	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb2:	1c9a      	adds	r2, r3, #2
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc6:	e059      	b.n	8007c7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d11b      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x162>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d016      	beq.n	8007c0e <HAL_SPI_TransmitReceive+0x162>
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d113      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bea:	881a      	ldrh	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf6:	1c9a      	adds	r2, r3, #2
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d119      	bne.n	8007c50 <HAL_SPI_TransmitReceive+0x1a4>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d014      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c30:	b292      	uxth	r2, r2
 8007c32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c38:	1c9a      	adds	r2, r3, #2
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c50:	f7fc ff3a 	bl	8004ac8 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d80d      	bhi.n	8007c7c <HAL_SPI_TransmitReceive+0x1d0>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c66:	d009      	beq.n	8007c7c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e0bc      	b.n	8007df6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1a0      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x11c>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d19b      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x11c>
 8007c90:	e082      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <HAL_SPI_TransmitReceive+0x1f4>
 8007c9a:	8afb      	ldrh	r3, [r7, #22]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d171      	bne.n	8007d84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	7812      	ldrb	r2, [r2, #0]
 8007cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc6:	e05d      	b.n	8007d84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d11c      	bne.n	8007d10 <HAL_SPI_TransmitReceive+0x264>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d017      	beq.n	8007d10 <HAL_SPI_TransmitReceive+0x264>
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d114      	bne.n	8007d10 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	330c      	adds	r3, #12
 8007cf0:	7812      	ldrb	r2, [r2, #0]
 8007cf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d119      	bne.n	8007d52 <HAL_SPI_TransmitReceive+0x2a6>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d014      	beq.n	8007d52 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d52:	f7fc feb9 	bl	8004ac8 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d803      	bhi.n	8007d6a <HAL_SPI_TransmitReceive+0x2be>
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d102      	bne.n	8007d70 <HAL_SPI_TransmitReceive+0x2c4>
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e038      	b.n	8007df6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d19c      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x21c>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d197      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d98:	6a3a      	ldr	r2, [r7, #32]
 8007d9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 fa65 	bl	800826c <SPI_EndRxTxTransaction>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e01d      	b.n	8007df6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	613b      	str	r3, [r7, #16]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e000      	b.n	8007df6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007df4:	2300      	movs	r3, #0
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3728      	adds	r7, #40	@ 0x28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d001      	beq.n	8007e1e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e097      	b.n	8007f4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <HAL_SPI_Transmit_DMA+0x2a>
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e08f      	b.n	8007f4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_SPI_Transmit_DMA+0x3c>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e088      	b.n	8007f4e <HAL_SPI_Transmit_DMA+0x14e>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2203      	movs	r2, #3
 8007e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	88fa      	ldrh	r2, [r7, #6]
 8007e62:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e8a:	d10f      	bne.n	8007eac <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007eaa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eb0:	4a29      	ldr	r2, [pc, #164]	@ (8007f58 <HAL_SPI_Transmit_DMA+0x158>)
 8007eb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eb8:	4a28      	ldr	r2, [pc, #160]	@ (8007f5c <HAL_SPI_Transmit_DMA+0x15c>)
 8007eba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ec0:	4a27      	ldr	r2, [pc, #156]	@ (8007f60 <HAL_SPI_Transmit_DMA+0x160>)
 8007ec2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ec8:	2200      	movs	r2, #0
 8007eca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	330c      	adds	r3, #12
 8007edc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ee2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ee4:	f7fc ffe0 	bl	8004ea8 <HAL_DMA_Start_IT>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef2:	f043 0210 	orr.w	r2, r3, #16
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e023      	b.n	8007f4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f10:	2b40      	cmp	r3, #64	@ 0x40
 8007f12:	d007      	beq.n	8007f24 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f22:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0220 	orr.w	r2, r2, #32
 8007f3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0202 	orr.w	r2, r2, #2
 8007f4a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	08008035 	.word	0x08008035
 8007f5c:	08007f8d 	.word	0x08007f8d
 8007f60:	08008051 	.word	0x08008051

08007f64 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f9a:	f7fc fd95 	bl	8004ac8 <HAL_GetTick>
 8007f9e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fae:	d03b      	beq.n	8008028 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0220 	bic.w	r2, r2, #32
 8007fbe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0202 	bic.w	r2, r2, #2
 8007fce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	2164      	movs	r1, #100	@ 0x64
 8007fd4:	6978      	ldr	r0, [r7, #20]
 8007fd6:	f000 f949 	bl	800826c <SPI_EndRxTxTransaction>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe4:	f043 0220 	orr.w	r2, r3, #32
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2200      	movs	r2, #0
 800800e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008020:	6978      	ldr	r0, [r7, #20]
 8008022:	f7ff ffa9 	bl	8007f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008026:	e002      	b.n	800802e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008028:	6978      	ldr	r0, [r7, #20]
 800802a:	f7fa f9f1 	bl	8002410 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008040:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff ff8e 	bl	8007f64 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008048:	bf00      	nop
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0203 	bic.w	r2, r2, #3
 800806c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008072:	f043 0210 	orr.w	r2, r3, #16
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff ff78 	bl	8007f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	4613      	mov	r3, r2
 800809e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080a0:	f7fc fd12 	bl	8004ac8 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	4413      	add	r3, r2
 80080ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080b0:	f7fc fd0a 	bl	8004ac8 <HAL_GetTick>
 80080b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080b6:	4b39      	ldr	r3, [pc, #228]	@ (800819c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	015b      	lsls	r3, r3, #5
 80080bc:	0d1b      	lsrs	r3, r3, #20
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	fb02 f303 	mul.w	r3, r2, r3
 80080c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080c6:	e054      	b.n	8008172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ce:	d050      	beq.n	8008172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080d0:	f7fc fcfa 	bl	8004ac8 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d902      	bls.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d13d      	bne.n	8008162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080fe:	d111      	bne.n	8008124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008108:	d004      	beq.n	8008114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008112:	d107      	bne.n	8008124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800812c:	d10f      	bne.n	800814e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800814c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e017      	b.n	8008192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	3b01      	subs	r3, #1
 8008170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4013      	ands	r3, r2
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	429a      	cmp	r2, r3
 8008180:	bf0c      	ite	eq
 8008182:	2301      	moveq	r3, #1
 8008184:	2300      	movne	r3, #0
 8008186:	b2db      	uxtb	r3, r3
 8008188:	461a      	mov	r2, r3
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	429a      	cmp	r2, r3
 800818e:	d19b      	bne.n	80080c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000004 	.word	0x20000004

080081a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081b4:	d111      	bne.n	80081da <SPI_EndRxTransaction+0x3a>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081be:	d004      	beq.n	80081ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081c8:	d107      	bne.n	80081da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081e2:	d12a      	bne.n	800823a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ec:	d012      	beq.n	8008214 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2180      	movs	r1, #128	@ 0x80
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff ff49 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d02d      	beq.n	8008260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008208:	f043 0220 	orr.w	r2, r3, #32
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e026      	b.n	8008262 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	2101      	movs	r1, #1
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff ff36 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01a      	beq.n	8008260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	f043 0220 	orr.w	r2, r3, #32
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e013      	b.n	8008262 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2200      	movs	r2, #0
 8008242:	2101      	movs	r1, #1
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff ff23 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008254:	f043 0220 	orr.w	r2, r3, #32
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e000      	b.n	8008262 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2201      	movs	r2, #1
 8008280:	2102      	movs	r1, #2
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff ff04 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008292:	f043 0220 	orr.w	r2, r3, #32
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e032      	b.n	8008304 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800829e:	4b1b      	ldr	r3, [pc, #108]	@ (800830c <SPI_EndRxTxTransaction+0xa0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008310 <SPI_EndRxTxTransaction+0xa4>)
 80082a4:	fba2 2303 	umull	r2, r3, r2, r3
 80082a8:	0d5b      	lsrs	r3, r3, #21
 80082aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082bc:	d112      	bne.n	80082e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	2180      	movs	r1, #128	@ 0x80
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f7ff fee1 	bl	8008090 <SPI_WaitFlagStateUntilTimeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d016      	beq.n	8008302 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d8:	f043 0220 	orr.w	r2, r3, #32
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e00f      	b.n	8008304 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082fa:	2b80      	cmp	r3, #128	@ 0x80
 80082fc:	d0f2      	beq.n	80082e4 <SPI_EndRxTxTransaction+0x78>
 80082fe:	e000      	b.n	8008302 <SPI_EndRxTxTransaction+0x96>
        break;
 8008300:	bf00      	nop
  }

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000004 	.word	0x20000004
 8008310:	165e9f81 	.word	0x165e9f81

08008314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e041      	b.n	80083aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d106      	bne.n	8008340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7f9 ffa0 	bl	8002280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f000 fd6a 	bl	8008e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b082      	sub	sp, #8
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e041      	b.n	8008448 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f839 	bl	8008450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2202      	movs	r2, #2
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3304      	adds	r3, #4
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f000 fd1b 	bl	8008e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d109      	bne.n	8008490 <HAL_TIM_PWM_Start_DMA+0x2c>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	e022      	b.n	80084d6 <HAL_TIM_PWM_Start_DMA+0x72>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b04      	cmp	r3, #4
 8008494:	d109      	bne.n	80084aa <HAL_TIM_PWM_Start_DMA+0x46>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	bf0c      	ite	eq
 80084a2:	2301      	moveq	r3, #1
 80084a4:	2300      	movne	r3, #0
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	e015      	b.n	80084d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d109      	bne.n	80084c4 <HAL_TIM_PWM_Start_DMA+0x60>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	e008      	b.n	80084d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	bf0c      	ite	eq
 80084d0:	2301      	moveq	r3, #1
 80084d2:	2300      	movne	r3, #0
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80084da:	2302      	movs	r3, #2
 80084dc:	e15d      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d109      	bne.n	80084f8 <HAL_TIM_PWM_Start_DMA+0x94>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	bf0c      	ite	eq
 80084f0:	2301      	moveq	r3, #1
 80084f2:	2300      	movne	r3, #0
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	e022      	b.n	800853e <HAL_TIM_PWM_Start_DMA+0xda>
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d109      	bne.n	8008512 <HAL_TIM_PWM_Start_DMA+0xae>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b01      	cmp	r3, #1
 8008508:	bf0c      	ite	eq
 800850a:	2301      	moveq	r3, #1
 800850c:	2300      	movne	r3, #0
 800850e:	b2db      	uxtb	r3, r3
 8008510:	e015      	b.n	800853e <HAL_TIM_PWM_Start_DMA+0xda>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b08      	cmp	r3, #8
 8008516:	d109      	bne.n	800852c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b01      	cmp	r3, #1
 8008522:	bf0c      	ite	eq
 8008524:	2301      	moveq	r3, #1
 8008526:	2300      	movne	r3, #0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	e008      	b.n	800853e <HAL_TIM_PWM_Start_DMA+0xda>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b01      	cmp	r3, #1
 8008536:	bf0c      	ite	eq
 8008538:	2301      	moveq	r3, #1
 800853a:	2300      	movne	r3, #0
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d024      	beq.n	800858c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_TIM_PWM_Start_DMA+0xea>
 8008548:	887b      	ldrh	r3, [r7, #2]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e123      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d104      	bne.n	8008562 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008560:	e016      	b.n	8008590 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2b04      	cmp	r3, #4
 8008566:	d104      	bne.n	8008572 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008570:	e00e      	b.n	8008590 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b08      	cmp	r3, #8
 8008576:	d104      	bne.n	8008582 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008580:	e006      	b.n	8008590 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800858a:	e001      	b.n	8008590 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e104      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b0c      	cmp	r3, #12
 8008594:	f200 80ae 	bhi.w	80086f4 <HAL_TIM_PWM_Start_DMA+0x290>
 8008598:	a201      	add	r2, pc, #4	@ (adr r2, 80085a0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085d5 	.word	0x080085d5
 80085a4:	080086f5 	.word	0x080086f5
 80085a8:	080086f5 	.word	0x080086f5
 80085ac:	080086f5 	.word	0x080086f5
 80085b0:	0800861d 	.word	0x0800861d
 80085b4:	080086f5 	.word	0x080086f5
 80085b8:	080086f5 	.word	0x080086f5
 80085bc:	080086f5 	.word	0x080086f5
 80085c0:	08008665 	.word	0x08008665
 80085c4:	080086f5 	.word	0x080086f5
 80085c8:	080086f5 	.word	0x080086f5
 80085cc:	080086f5 	.word	0x080086f5
 80085d0:	080086ad 	.word	0x080086ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d8:	4a72      	ldr	r2, [pc, #456]	@ (80087a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80085da:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e0:	4a71      	ldr	r2, [pc, #452]	@ (80087a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80085e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e8:	4a70      	ldr	r2, [pc, #448]	@ (80087ac <HAL_TIM_PWM_Start_DMA+0x348>)
 80085ea:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3334      	adds	r3, #52	@ 0x34
 80085f8:	461a      	mov	r2, r3
 80085fa:	887b      	ldrh	r3, [r7, #2]
 80085fc:	f7fc fc54 	bl	8004ea8 <HAL_DMA_Start_IT>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e0c7      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008618:	60da      	str	r2, [r3, #12]
      break;
 800861a:	e06e      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008620:	4a60      	ldr	r2, [pc, #384]	@ (80087a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008622:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008628:	4a5f      	ldr	r2, [pc, #380]	@ (80087a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800862a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008630:	4a5e      	ldr	r2, [pc, #376]	@ (80087ac <HAL_TIM_PWM_Start_DMA+0x348>)
 8008632:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3338      	adds	r3, #56	@ 0x38
 8008640:	461a      	mov	r2, r3
 8008642:	887b      	ldrh	r3, [r7, #2]
 8008644:	f7fc fc30 	bl	8004ea8 <HAL_DMA_Start_IT>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e0a3      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008660:	60da      	str	r2, [r3, #12]
      break;
 8008662:	e04a      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008668:	4a4e      	ldr	r2, [pc, #312]	@ (80087a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800866a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008670:	4a4d      	ldr	r2, [pc, #308]	@ (80087a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008672:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	4a4c      	ldr	r2, [pc, #304]	@ (80087ac <HAL_TIM_PWM_Start_DMA+0x348>)
 800867a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	333c      	adds	r3, #60	@ 0x3c
 8008688:	461a      	mov	r2, r3
 800868a:	887b      	ldrh	r3, [r7, #2]
 800868c:	f7fc fc0c 	bl	8004ea8 <HAL_DMA_Start_IT>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e07f      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086a8:	60da      	str	r2, [r3, #12]
      break;
 80086aa:	e026      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b0:	4a3c      	ldr	r2, [pc, #240]	@ (80087a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80086b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b8:	4a3b      	ldr	r2, [pc, #236]	@ (80087a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80086ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c0:	4a3a      	ldr	r2, [pc, #232]	@ (80087ac <HAL_TIM_PWM_Start_DMA+0x348>)
 80086c2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3340      	adds	r3, #64	@ 0x40
 80086d0:	461a      	mov	r2, r3
 80086d2:	887b      	ldrh	r3, [r7, #2]
 80086d4:	f7fc fbe8 	bl	8004ea8 <HAL_DMA_Start_IT>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e05b      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086f0:	60da      	str	r2, [r3, #12]
      break;
 80086f2:	e002      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
      break;
 80086f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d14b      	bne.n	8008798 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2201      	movs	r2, #1
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fe41 	bl	8009390 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a27      	ldr	r2, [pc, #156]	@ (80087b0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d107      	bne.n	8008728 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008726:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a20      	ldr	r2, [pc, #128]	@ (80087b0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d018      	beq.n	8008764 <HAL_TIM_PWM_Start_DMA+0x300>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800873a:	d013      	beq.n	8008764 <HAL_TIM_PWM_Start_DMA+0x300>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a1c      	ldr	r2, [pc, #112]	@ (80087b4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00e      	beq.n	8008764 <HAL_TIM_PWM_Start_DMA+0x300>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a1b      	ldr	r2, [pc, #108]	@ (80087b8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d009      	beq.n	8008764 <HAL_TIM_PWM_Start_DMA+0x300>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a19      	ldr	r2, [pc, #100]	@ (80087bc <HAL_TIM_PWM_Start_DMA+0x358>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d004      	beq.n	8008764 <HAL_TIM_PWM_Start_DMA+0x300>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a18      	ldr	r2, [pc, #96]	@ (80087c0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d111      	bne.n	8008788 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2b06      	cmp	r3, #6
 8008774:	d010      	beq.n	8008798 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0201 	orr.w	r2, r2, #1
 8008784:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008786:	e007      	b.n	8008798 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008798:	7dfb      	ldrb	r3, [r7, #23]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	08008d1d 	.word	0x08008d1d
 80087a8:	08008dc5 	.word	0x08008dc5
 80087ac:	08008c8b 	.word	0x08008c8b
 80087b0:	40010000 	.word	0x40010000
 80087b4:	40000400 	.word	0x40000400
 80087b8:	40000800 	.word	0x40000800
 80087bc:	40000c00 	.word	0x40000c00
 80087c0:	40014000 	.word	0x40014000

080087c4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b0c      	cmp	r3, #12
 80087d6:	d855      	bhi.n	8008884 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80087d8:	a201      	add	r2, pc, #4	@ (adr r2, 80087e0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008815 	.word	0x08008815
 80087e4:	08008885 	.word	0x08008885
 80087e8:	08008885 	.word	0x08008885
 80087ec:	08008885 	.word	0x08008885
 80087f0:	08008831 	.word	0x08008831
 80087f4:	08008885 	.word	0x08008885
 80087f8:	08008885 	.word	0x08008885
 80087fc:	08008885 	.word	0x08008885
 8008800:	0800884d 	.word	0x0800884d
 8008804:	08008885 	.word	0x08008885
 8008808:	08008885 	.word	0x08008885
 800880c:	08008885 	.word	0x08008885
 8008810:	08008869 	.word	0x08008869
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008822:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008828:	4618      	mov	r0, r3
 800882a:	f7fc fb95 	bl	8004f58 <HAL_DMA_Abort_IT>
      break;
 800882e:	e02c      	b.n	800888a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800883e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008844:	4618      	mov	r0, r3
 8008846:	f7fc fb87 	bl	8004f58 <HAL_DMA_Abort_IT>
      break;
 800884a:	e01e      	b.n	800888a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800885a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	4618      	mov	r0, r3
 8008862:	f7fc fb79 	bl	8004f58 <HAL_DMA_Abort_IT>
      break;
 8008866:	e010      	b.n	800888a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008876:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887c:	4618      	mov	r0, r3
 800887e:	f7fc fb6b 	bl	8004f58 <HAL_DMA_Abort_IT>
      break;
 8008882:	e002      	b.n	800888a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	bf00      	nop
  }

  if (status == HAL_OK)
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d157      	bne.n	8008940 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2200      	movs	r2, #0
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fd79 	bl	8009390 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a2a      	ldr	r2, [pc, #168]	@ (800894c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d117      	bne.n	80088d8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6a1a      	ldr	r2, [r3, #32]
 80088ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80088b2:	4013      	ands	r3, r2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10f      	bne.n	80088d8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6a1a      	ldr	r2, [r3, #32]
 80088be:	f240 4344 	movw	r3, #1092	@ 0x444
 80088c2:	4013      	ands	r3, r2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d107      	bne.n	80088d8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6a1a      	ldr	r2, [r3, #32]
 80088de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80088e2:	4013      	ands	r3, r2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10f      	bne.n	8008908 <HAL_TIM_PWM_Stop_DMA+0x144>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6a1a      	ldr	r2, [r3, #32]
 80088ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80088f2:	4013      	ands	r3, r2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d107      	bne.n	8008908 <HAL_TIM_PWM_Stop_DMA+0x144>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f022 0201 	bic.w	r2, r2, #1
 8008906:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <HAL_TIM_PWM_Stop_DMA+0x154>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008916:	e013      	b.n	8008940 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b04      	cmp	r3, #4
 800891c:	d104      	bne.n	8008928 <HAL_TIM_PWM_Stop_DMA+0x164>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008926:	e00b      	b.n	8008940 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b08      	cmp	r3, #8
 800892c:	d104      	bne.n	8008938 <HAL_TIM_PWM_Stop_DMA+0x174>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008936:	e003      	b.n	8008940 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40010000 	.word	0x40010000

08008950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800896a:	2302      	movs	r3, #2
 800896c:	e0ae      	b.n	8008acc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b0c      	cmp	r3, #12
 800897a:	f200 809f 	bhi.w	8008abc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089b9 	.word	0x080089b9
 8008988:	08008abd 	.word	0x08008abd
 800898c:	08008abd 	.word	0x08008abd
 8008990:	08008abd 	.word	0x08008abd
 8008994:	080089f9 	.word	0x080089f9
 8008998:	08008abd 	.word	0x08008abd
 800899c:	08008abd 	.word	0x08008abd
 80089a0:	08008abd 	.word	0x08008abd
 80089a4:	08008a3b 	.word	0x08008a3b
 80089a8:	08008abd 	.word	0x08008abd
 80089ac:	08008abd 	.word	0x08008abd
 80089b0:	08008abd 	.word	0x08008abd
 80089b4:	08008a7b 	.word	0x08008a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fac0 	bl	8008f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0208 	orr.w	r2, r2, #8
 80089d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0204 	bic.w	r2, r2, #4
 80089e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6999      	ldr	r1, [r3, #24]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	691a      	ldr	r2, [r3, #16]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	619a      	str	r2, [r3, #24]
      break;
 80089f6:	e064      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fb06 	bl	8009010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	699a      	ldr	r2, [r3, #24]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6999      	ldr	r1, [r3, #24]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	021a      	lsls	r2, r3, #8
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	619a      	str	r2, [r3, #24]
      break;
 8008a38:	e043      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fb51 	bl	80090e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0208 	orr.w	r2, r2, #8
 8008a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69da      	ldr	r2, [r3, #28]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0204 	bic.w	r2, r2, #4
 8008a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69d9      	ldr	r1, [r3, #28]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	691a      	ldr	r2, [r3, #16]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	61da      	str	r2, [r3, #28]
      break;
 8008a78:	e023      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fb9b 	bl	80091bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69da      	ldr	r2, [r3, #28]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	69da      	ldr	r2, [r3, #28]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69d9      	ldr	r1, [r3, #28]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	021a      	lsls	r2, r3, #8
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	61da      	str	r2, [r3, #28]
      break;
 8008aba:	e002      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_TIM_ConfigClockSource+0x1c>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e0b4      	b.n	8008c5a <HAL_TIM_ConfigClockSource+0x186>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b28:	d03e      	beq.n	8008ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8008b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b2e:	f200 8087 	bhi.w	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b36:	f000 8086 	beq.w	8008c46 <HAL_TIM_ConfigClockSource+0x172>
 8008b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b3e:	d87f      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b40:	2b70      	cmp	r3, #112	@ 0x70
 8008b42:	d01a      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0xa6>
 8008b44:	2b70      	cmp	r3, #112	@ 0x70
 8008b46:	d87b      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b48:	2b60      	cmp	r3, #96	@ 0x60
 8008b4a:	d050      	beq.n	8008bee <HAL_TIM_ConfigClockSource+0x11a>
 8008b4c:	2b60      	cmp	r3, #96	@ 0x60
 8008b4e:	d877      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b50:	2b50      	cmp	r3, #80	@ 0x50
 8008b52:	d03c      	beq.n	8008bce <HAL_TIM_ConfigClockSource+0xfa>
 8008b54:	2b50      	cmp	r3, #80	@ 0x50
 8008b56:	d873      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b58:	2b40      	cmp	r3, #64	@ 0x40
 8008b5a:	d058      	beq.n	8008c0e <HAL_TIM_ConfigClockSource+0x13a>
 8008b5c:	2b40      	cmp	r3, #64	@ 0x40
 8008b5e:	d86f      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b60:	2b30      	cmp	r3, #48	@ 0x30
 8008b62:	d064      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b64:	2b30      	cmp	r3, #48	@ 0x30
 8008b66:	d86b      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d060      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d867      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d05c      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b74:	2b10      	cmp	r3, #16
 8008b76:	d05a      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b78:	e062      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b8a:	f000 fbe1 	bl	8009350 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	609a      	str	r2, [r3, #8]
      break;
 8008ba6:	e04f      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bb8:	f000 fbca 	bl	8009350 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bca:	609a      	str	r2, [r3, #8]
      break;
 8008bcc:	e03c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f000 fb3e 	bl	800925c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2150      	movs	r1, #80	@ 0x50
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fb97 	bl	800931a <TIM_ITRx_SetConfig>
      break;
 8008bec:	e02c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f000 fb5d 	bl	80092ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2160      	movs	r1, #96	@ 0x60
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fb87 	bl	800931a <TIM_ITRx_SetConfig>
      break;
 8008c0c:	e01c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f000 fb1e 	bl	800925c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2140      	movs	r1, #64	@ 0x40
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fb77 	bl	800931a <TIM_ITRx_SetConfig>
      break;
 8008c2c:	e00c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4619      	mov	r1, r3
 8008c38:	4610      	mov	r0, r2
 8008c3a:	f000 fb6e 	bl	800931a <TIM_ITRx_SetConfig>
      break;
 8008c3e:	e003      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
      break;
 8008c44:	e000      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c6a:	bf00      	nop
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c7e:	bf00      	nop
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d107      	bne.n	8008cb2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cb0:	e02a      	b.n	8008d08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d107      	bne.n	8008ccc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cca:	e01d      	b.n	8008d08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d107      	bne.n	8008ce6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2204      	movs	r2, #4
 8008cda:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ce4:	e010      	b.n	8008d08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d107      	bne.n	8008d00 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cfe:	e003      	b.n	8008d08 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7ff ffb4 	bl	8008c76 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	771a      	strb	r2, [r3, #28]
}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d10b      	bne.n	8008d4c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d136      	bne.n	8008db0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d4a:	e031      	b.n	8008db0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d10b      	bne.n	8008d6e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2202      	movs	r2, #2
 8008d5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d125      	bne.n	8008db0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d6c:	e020      	b.n	8008db0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d10b      	bne.n	8008d90 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d114      	bne.n	8008db0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d8e:	e00f      	b.n	8008db0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d10a      	bne.n	8008db0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d103      	bne.n	8008db0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f7f8 fe59 	bl	8001a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
}
 8008dbc:	bf00      	nop
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d103      	bne.n	8008de4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	771a      	strb	r2, [r3, #28]
 8008de2:	e019      	b.n	8008e18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d103      	bne.n	8008df6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2202      	movs	r2, #2
 8008df2:	771a      	strb	r2, [r3, #28]
 8008df4:	e010      	b.n	8008e18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d103      	bne.n	8008e08 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2204      	movs	r2, #4
 8008e04:	771a      	strb	r2, [r3, #28]
 8008e06:	e007      	b.n	8008e18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d102      	bne.n	8008e18 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2208      	movs	r2, #8
 8008e16:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff ff22 	bl	8008c62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	771a      	strb	r2, [r3, #28]
}
 8008e24:	bf00      	nop
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8008f28 <TIM_Base_SetConfig+0xfc>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00f      	beq.n	8008e64 <TIM_Base_SetConfig+0x38>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e4a:	d00b      	beq.n	8008e64 <TIM_Base_SetConfig+0x38>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a37      	ldr	r2, [pc, #220]	@ (8008f2c <TIM_Base_SetConfig+0x100>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d007      	beq.n	8008e64 <TIM_Base_SetConfig+0x38>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a36      	ldr	r2, [pc, #216]	@ (8008f30 <TIM_Base_SetConfig+0x104>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d003      	beq.n	8008e64 <TIM_Base_SetConfig+0x38>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a35      	ldr	r2, [pc, #212]	@ (8008f34 <TIM_Base_SetConfig+0x108>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d108      	bne.n	8008e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a2b      	ldr	r2, [pc, #172]	@ (8008f28 <TIM_Base_SetConfig+0xfc>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d01b      	beq.n	8008eb6 <TIM_Base_SetConfig+0x8a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e84:	d017      	beq.n	8008eb6 <TIM_Base_SetConfig+0x8a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a28      	ldr	r2, [pc, #160]	@ (8008f2c <TIM_Base_SetConfig+0x100>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d013      	beq.n	8008eb6 <TIM_Base_SetConfig+0x8a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a27      	ldr	r2, [pc, #156]	@ (8008f30 <TIM_Base_SetConfig+0x104>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00f      	beq.n	8008eb6 <TIM_Base_SetConfig+0x8a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a26      	ldr	r2, [pc, #152]	@ (8008f34 <TIM_Base_SetConfig+0x108>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00b      	beq.n	8008eb6 <TIM_Base_SetConfig+0x8a>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a25      	ldr	r2, [pc, #148]	@ (8008f38 <TIM_Base_SetConfig+0x10c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d007      	beq.n	8008eb6 <TIM_Base_SetConfig+0x8a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a24      	ldr	r2, [pc, #144]	@ (8008f3c <TIM_Base_SetConfig+0x110>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d003      	beq.n	8008eb6 <TIM_Base_SetConfig+0x8a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a23      	ldr	r2, [pc, #140]	@ (8008f40 <TIM_Base_SetConfig+0x114>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d108      	bne.n	8008ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a0e      	ldr	r2, [pc, #56]	@ (8008f28 <TIM_Base_SetConfig+0xfc>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d103      	bne.n	8008efc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	691a      	ldr	r2, [r3, #16]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d105      	bne.n	8008f1a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f023 0201 	bic.w	r2, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	611a      	str	r2, [r3, #16]
  }
}
 8008f1a:	bf00      	nop
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	40010000 	.word	0x40010000
 8008f2c:	40000400 	.word	0x40000400
 8008f30:	40000800 	.word	0x40000800
 8008f34:	40000c00 	.word	0x40000c00
 8008f38:	40014000 	.word	0x40014000
 8008f3c:	40014400 	.word	0x40014400
 8008f40:	40014800 	.word	0x40014800

08008f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	f023 0201 	bic.w	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 0303 	bic.w	r3, r3, #3
 8008f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f023 0302 	bic.w	r3, r3, #2
 8008f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800900c <TIM_OC1_SetConfig+0xc8>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d10c      	bne.n	8008fba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f023 0308 	bic.w	r3, r3, #8
 8008fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f023 0304 	bic.w	r3, r3, #4
 8008fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a13      	ldr	r2, [pc, #76]	@ (800900c <TIM_OC1_SetConfig+0xc8>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d111      	bne.n	8008fe6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	621a      	str	r2, [r3, #32]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	40010000 	.word	0x40010000

08009010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a1b      	ldr	r3, [r3, #32]
 8009024:	f023 0210 	bic.w	r2, r3, #16
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800903e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f023 0320 	bic.w	r3, r3, #32
 800905a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	4313      	orrs	r3, r2
 8009066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a1e      	ldr	r2, [pc, #120]	@ (80090e4 <TIM_OC2_SetConfig+0xd4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d10d      	bne.n	800908c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	011b      	lsls	r3, r3, #4
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800908a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a15      	ldr	r2, [pc, #84]	@ (80090e4 <TIM_OC2_SetConfig+0xd4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d113      	bne.n	80090bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800909a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	621a      	str	r2, [r3, #32]
}
 80090d6:	bf00      	nop
 80090d8:	371c      	adds	r7, #28
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40010000 	.word	0x40010000

080090e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0303 	bic.w	r3, r3, #3
 800911e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4313      	orrs	r3, r2
 800913c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a1d      	ldr	r2, [pc, #116]	@ (80091b8 <TIM_OC3_SetConfig+0xd0>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d10d      	bne.n	8009162 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800914c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a14      	ldr	r2, [pc, #80]	@ (80091b8 <TIM_OC3_SetConfig+0xd0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d113      	bne.n	8009192 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	011b      	lsls	r3, r3, #4
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	4313      	orrs	r3, r2
 8009184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	011b      	lsls	r3, r3, #4
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	4313      	orrs	r3, r2
 8009190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	621a      	str	r2, [r3, #32]
}
 80091ac:	bf00      	nop
 80091ae:	371c      	adds	r7, #28
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	40010000 	.word	0x40010000

080091bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	031b      	lsls	r3, r3, #12
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	4313      	orrs	r3, r2
 8009212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a10      	ldr	r2, [pc, #64]	@ (8009258 <TIM_OC4_SetConfig+0x9c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d109      	bne.n	8009230 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	019b      	lsls	r3, r3, #6
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	4313      	orrs	r3, r2
 800922e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	621a      	str	r2, [r3, #32]
}
 800924a:	bf00      	nop
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40010000 	.word	0x40010000

0800925c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f023 0201 	bic.w	r2, r3, #1
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f023 030a 	bic.w	r3, r3, #10
 8009298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4313      	orrs	r3, r2
 80092a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	621a      	str	r2, [r3, #32]
}
 80092ae:	bf00      	nop
 80092b0:	371c      	adds	r7, #28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b087      	sub	sp, #28
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	f023 0210 	bic.w	r2, r3, #16
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	031b      	lsls	r3, r3, #12
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	011b      	lsls	r3, r3, #4
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	4313      	orrs	r3, r2
 8009300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	621a      	str	r2, [r3, #32]
}
 800930e:	bf00      	nop
 8009310:	371c      	adds	r7, #28
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4313      	orrs	r3, r2
 8009338:	f043 0307 	orr.w	r3, r3, #7
 800933c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	609a      	str	r2, [r3, #8]
}
 8009344:	bf00      	nop
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800936a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	021a      	lsls	r2, r3, #8
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	431a      	orrs	r2, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4313      	orrs	r3, r2
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	4313      	orrs	r3, r2
 800937c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	609a      	str	r2, [r3, #8]
}
 8009384:	bf00      	nop
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f003 031f 	and.w	r3, r3, #31
 80093a2:	2201      	movs	r2, #1
 80093a4:	fa02 f303 	lsl.w	r3, r2, r3
 80093a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6a1a      	ldr	r2, [r3, #32]
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	43db      	mvns	r3, r3
 80093b2:	401a      	ands	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6a1a      	ldr	r2, [r3, #32]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f003 031f 	and.w	r3, r3, #31
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	fa01 f303 	lsl.w	r3, r1, r3
 80093c8:	431a      	orrs	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	621a      	str	r2, [r3, #32]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
	...

080093dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e050      	b.n	8009496 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800941a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a1c      	ldr	r2, [pc, #112]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d018      	beq.n	800946a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009440:	d013      	beq.n	800946a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a18      	ldr	r2, [pc, #96]	@ (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d00e      	beq.n	800946a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a16      	ldr	r2, [pc, #88]	@ (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d009      	beq.n	800946a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a15      	ldr	r2, [pc, #84]	@ (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d004      	beq.n	800946a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a13      	ldr	r2, [pc, #76]	@ (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d10c      	bne.n	8009484 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	4313      	orrs	r3, r2
 800947a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	40010000 	.word	0x40010000
 80094a8:	40000400 	.word	0x40000400
 80094ac:	40000800 	.word	0x40000800
 80094b0:	40000c00 	.word	0x40000c00
 80094b4:	40014000 	.word	0x40014000

080094b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094b8:	b084      	sub	sp, #16
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	f107 001c 	add.w	r0, r7, #28
 80094c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d123      	bne.n	800951a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80094e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d105      	bne.n	800950e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 fae8 	bl	800aae4 <USB_CoreReset>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
 8009518:	e01b      	b.n	8009552 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f001 fadc 	bl	800aae4 <USB_CoreReset>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009530:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	639a      	str	r2, [r3, #56]	@ 0x38
 8009544:	e005      	b.n	8009552 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009552:	7fbb      	ldrb	r3, [r7, #30]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d10b      	bne.n	8009570 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f043 0206 	orr.w	r2, r3, #6
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f043 0220 	orr.w	r2, r3, #32
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009570:	7bfb      	ldrb	r3, [r7, #15]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800957c:	b004      	add	sp, #16
 800957e:	4770      	bx	lr

08009580 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d165      	bne.n	8009660 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4a41      	ldr	r2, [pc, #260]	@ (800969c <USB_SetTurnaroundTime+0x11c>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d906      	bls.n	80095aa <USB_SetTurnaroundTime+0x2a>
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4a40      	ldr	r2, [pc, #256]	@ (80096a0 <USB_SetTurnaroundTime+0x120>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d202      	bcs.n	80095aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095a4:	230f      	movs	r3, #15
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e062      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4a3c      	ldr	r2, [pc, #240]	@ (80096a0 <USB_SetTurnaroundTime+0x120>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d306      	bcc.n	80095c0 <USB_SetTurnaroundTime+0x40>
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	4a3b      	ldr	r2, [pc, #236]	@ (80096a4 <USB_SetTurnaroundTime+0x124>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d202      	bcs.n	80095c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095ba:	230e      	movs	r3, #14
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	e057      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4a38      	ldr	r2, [pc, #224]	@ (80096a4 <USB_SetTurnaroundTime+0x124>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d306      	bcc.n	80095d6 <USB_SetTurnaroundTime+0x56>
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4a37      	ldr	r2, [pc, #220]	@ (80096a8 <USB_SetTurnaroundTime+0x128>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d202      	bcs.n	80095d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80095d0:	230d      	movs	r3, #13
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	e04c      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4a33      	ldr	r2, [pc, #204]	@ (80096a8 <USB_SetTurnaroundTime+0x128>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d306      	bcc.n	80095ec <USB_SetTurnaroundTime+0x6c>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	4a32      	ldr	r2, [pc, #200]	@ (80096ac <USB_SetTurnaroundTime+0x12c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d802      	bhi.n	80095ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80095e6:	230c      	movs	r3, #12
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	e041      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	4a2f      	ldr	r2, [pc, #188]	@ (80096ac <USB_SetTurnaroundTime+0x12c>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d906      	bls.n	8009602 <USB_SetTurnaroundTime+0x82>
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	4a2e      	ldr	r2, [pc, #184]	@ (80096b0 <USB_SetTurnaroundTime+0x130>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d802      	bhi.n	8009602 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095fc:	230b      	movs	r3, #11
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	e036      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	4a2a      	ldr	r2, [pc, #168]	@ (80096b0 <USB_SetTurnaroundTime+0x130>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d906      	bls.n	8009618 <USB_SetTurnaroundTime+0x98>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	4a29      	ldr	r2, [pc, #164]	@ (80096b4 <USB_SetTurnaroundTime+0x134>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d802      	bhi.n	8009618 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009612:	230a      	movs	r3, #10
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	e02b      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	4a26      	ldr	r2, [pc, #152]	@ (80096b4 <USB_SetTurnaroundTime+0x134>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d906      	bls.n	800962e <USB_SetTurnaroundTime+0xae>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4a25      	ldr	r2, [pc, #148]	@ (80096b8 <USB_SetTurnaroundTime+0x138>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d202      	bcs.n	800962e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009628:	2309      	movs	r3, #9
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e020      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4a21      	ldr	r2, [pc, #132]	@ (80096b8 <USB_SetTurnaroundTime+0x138>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d306      	bcc.n	8009644 <USB_SetTurnaroundTime+0xc4>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4a20      	ldr	r2, [pc, #128]	@ (80096bc <USB_SetTurnaroundTime+0x13c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d802      	bhi.n	8009644 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800963e:	2308      	movs	r3, #8
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	e015      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4a1d      	ldr	r2, [pc, #116]	@ (80096bc <USB_SetTurnaroundTime+0x13c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d906      	bls.n	800965a <USB_SetTurnaroundTime+0xda>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4a1c      	ldr	r2, [pc, #112]	@ (80096c0 <USB_SetTurnaroundTime+0x140>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d202      	bcs.n	800965a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009654:	2307      	movs	r3, #7
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e00a      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800965a:	2306      	movs	r3, #6
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e007      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009666:	2309      	movs	r3, #9
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	e001      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800966c:	2309      	movs	r3, #9
 800966e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	029b      	lsls	r3, r3, #10
 8009684:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009688:	431a      	orrs	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	00d8acbf 	.word	0x00d8acbf
 80096a0:	00e4e1c0 	.word	0x00e4e1c0
 80096a4:	00f42400 	.word	0x00f42400
 80096a8:	01067380 	.word	0x01067380
 80096ac:	011a499f 	.word	0x011a499f
 80096b0:	01312cff 	.word	0x01312cff
 80096b4:	014ca43f 	.word	0x014ca43f
 80096b8:	016e3600 	.word	0x016e3600
 80096bc:	01a6ab1f 	.word	0x01a6ab1f
 80096c0:	01e84800 	.word	0x01e84800

080096c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f043 0201 	orr.w	r2, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f023 0201 	bic.w	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d115      	bne.n	8009756 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009736:	200a      	movs	r0, #10
 8009738:	f7fb f9d2 	bl	8004ae0 <HAL_Delay>
      ms += 10U;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	330a      	adds	r3, #10
 8009740:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 f93f 	bl	800a9c6 <USB_GetMode>
 8009748:	4603      	mov	r3, r0
 800974a:	2b01      	cmp	r3, #1
 800974c:	d01e      	beq.n	800978c <USB_SetCurrentMode+0x84>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2bc7      	cmp	r3, #199	@ 0xc7
 8009752:	d9f0      	bls.n	8009736 <USB_SetCurrentMode+0x2e>
 8009754:	e01a      	b.n	800978c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d115      	bne.n	8009788 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009768:	200a      	movs	r0, #10
 800976a:	f7fb f9b9 	bl	8004ae0 <HAL_Delay>
      ms += 10U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	330a      	adds	r3, #10
 8009772:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 f926 	bl	800a9c6 <USB_GetMode>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <USB_SetCurrentMode+0x84>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2bc7      	cmp	r3, #199	@ 0xc7
 8009784:	d9f0      	bls.n	8009768 <USB_SetCurrentMode+0x60>
 8009786:	e001      	b.n	800978c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e005      	b.n	8009798 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009790:	d101      	bne.n	8009796 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e000      	b.n	8009798 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097a0:	b084      	sub	sp, #16
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b086      	sub	sp, #24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80097ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097ba:	2300      	movs	r3, #0
 80097bc:	613b      	str	r3, [r7, #16]
 80097be:	e009      	b.n	80097d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	3340      	adds	r3, #64	@ 0x40
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	3301      	adds	r3, #1
 80097d2:	613b      	str	r3, [r7, #16]
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2b0e      	cmp	r3, #14
 80097d8:	d9f2      	bls.n	80097c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80097da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d11c      	bne.n	800981c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097f0:	f043 0302 	orr.w	r3, r3, #2
 80097f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009806:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009812:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	639a      	str	r2, [r3, #56]	@ 0x38
 800981a:	e00b      	b.n	8009834 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009820:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800983a:	461a      	mov	r2, r3
 800983c:	2300      	movs	r3, #0
 800983e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009840:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009844:	2b01      	cmp	r3, #1
 8009846:	d10d      	bne.n	8009864 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009850:	2100      	movs	r1, #0
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f968 	bl	8009b28 <USB_SetDevSpeed>
 8009858:	e008      	b.n	800986c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800985a:	2101      	movs	r1, #1
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f963 	bl	8009b28 <USB_SetDevSpeed>
 8009862:	e003      	b.n	800986c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009864:	2103      	movs	r1, #3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f95e 	bl	8009b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800986c:	2110      	movs	r1, #16
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f8fa 	bl	8009a68 <USB_FlushTxFifo>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f924 	bl	8009acc <USB_FlushRxFifo>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009894:	461a      	mov	r2, r3
 8009896:	2300      	movs	r3, #0
 8009898:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a0:	461a      	mov	r2, r3
 80098a2:	2300      	movs	r3, #0
 80098a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ac:	461a      	mov	r2, r3
 80098ae:	2300      	movs	r3, #0
 80098b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098b2:	2300      	movs	r3, #0
 80098b4:	613b      	str	r3, [r7, #16]
 80098b6:	e043      	b.n	8009940 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ce:	d118      	bne.n	8009902 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098e2:	461a      	mov	r2, r3
 80098e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	e013      	b.n	8009914 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f8:	461a      	mov	r2, r3
 80098fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	e008      	b.n	8009914 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	015a      	lsls	r2, r3, #5
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	4413      	add	r3, r2
 800990a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800990e:	461a      	mov	r2, r3
 8009910:	2300      	movs	r3, #0
 8009912:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009920:	461a      	mov	r2, r3
 8009922:	2300      	movs	r3, #0
 8009924:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009932:	461a      	mov	r2, r3
 8009934:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009938:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	3301      	adds	r3, #1
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009944:	461a      	mov	r2, r3
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	4293      	cmp	r3, r2
 800994a:	d3b5      	bcc.n	80098b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800994c:	2300      	movs	r3, #0
 800994e:	613b      	str	r3, [r7, #16]
 8009950:	e043      	b.n	80099da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009968:	d118      	bne.n	800999c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4413      	add	r3, r2
 8009978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800997c:	461a      	mov	r2, r3
 800997e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	e013      	b.n	80099ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009992:	461a      	mov	r2, r3
 8009994:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	e008      	b.n	80099ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a8:	461a      	mov	r2, r3
 80099aa:	2300      	movs	r3, #0
 80099ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ba:	461a      	mov	r2, r3
 80099bc:	2300      	movs	r3, #0
 80099be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099cc:	461a      	mov	r2, r3
 80099ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	3301      	adds	r3, #1
 80099d8:	613b      	str	r3, [r7, #16]
 80099da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099de:	461a      	mov	r2, r3
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d3b5      	bcc.n	8009952 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	f043 0210 	orr.w	r2, r3, #16
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	699a      	ldr	r2, [r3, #24]
 8009a20:	4b10      	ldr	r3, [pc, #64]	@ (8009a64 <USB_DevInit+0x2c4>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d005      	beq.n	8009a3c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f043 0208 	orr.w	r2, r3, #8
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d107      	bne.n	8009a54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a4c:	f043 0304 	orr.w	r3, r3, #4
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a60:	b004      	add	sp, #16
 8009a62:	4770      	bx	lr
 8009a64:	803c3800 	.word	0x803c3800

08009a68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a82:	d901      	bls.n	8009a88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e01b      	b.n	8009ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	daf2      	bge.n	8009a76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	019b      	lsls	r3, r3, #6
 8009a98:	f043 0220 	orr.w	r2, r3, #32
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009aac:	d901      	bls.n	8009ab2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e006      	b.n	8009ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	d0f0      	beq.n	8009aa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3301      	adds	r3, #1
 8009adc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ae4:	d901      	bls.n	8009aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e018      	b.n	8009b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	daf2      	bge.n	8009ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2210      	movs	r2, #16
 8009afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3301      	adds	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b08:	d901      	bls.n	8009b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e006      	b.n	8009b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	f003 0310 	and.w	r3, r3, #16
 8009b16:	2b10      	cmp	r3, #16
 8009b18:	d0f0      	beq.n	8009afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b087      	sub	sp, #28
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f003 0306 	and.w	r3, r3, #6
 8009b72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	75fb      	strb	r3, [r7, #23]
 8009b7e:	e00a      	b.n	8009b96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d002      	beq.n	8009b8c <USB_GetDevSpeed+0x32>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b06      	cmp	r3, #6
 8009b8a:	d102      	bne.n	8009b92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	75fb      	strb	r3, [r7, #23]
 8009b90:	e001      	b.n	8009b96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b92:	230f      	movs	r3, #15
 8009b94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	371c      	adds	r7, #28
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	785b      	ldrb	r3, [r3, #1]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d13a      	bne.n	8009c36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc6:	69da      	ldr	r2, [r3, #28]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 030f 	and.w	r3, r3, #15
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	68f9      	ldr	r1, [r7, #12]
 8009bda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bde:	4313      	orrs	r3, r2
 8009be0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d155      	bne.n	8009ca4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	791b      	ldrb	r3, [r3, #4]
 8009c12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	059b      	lsls	r3, r3, #22
 8009c1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	0151      	lsls	r1, r2, #5
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	440a      	add	r2, r1
 8009c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	e036      	b.n	8009ca4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c3c:	69da      	ldr	r2, [r3, #28]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	2101      	movs	r1, #1
 8009c48:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4c:	041b      	lsls	r3, r3, #16
 8009c4e:	68f9      	ldr	r1, [r7, #12]
 8009c50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c54:	4313      	orrs	r3, r2
 8009c56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d11a      	bne.n	8009ca4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	015a      	lsls	r2, r3, #5
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4413      	add	r3, r2
 8009c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	791b      	ldrb	r3, [r3, #4]
 8009c88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c8a:	430b      	orrs	r3, r1
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ca2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	785b      	ldrb	r3, [r3, #1]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d161      	bne.n	8009d94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ce6:	d11f      	bne.n	8009d28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	f003 030f 	and.w	r3, r3, #15
 8009d38:	2101      	movs	r1, #1
 8009d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	43db      	mvns	r3, r3
 8009d42:	68f9      	ldr	r1, [r7, #12]
 8009d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d48:	4013      	ands	r3, r2
 8009d4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d52:	69da      	ldr	r2, [r3, #28]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	f003 030f 	and.w	r3, r3, #15
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	43db      	mvns	r3, r3
 8009d66:	68f9      	ldr	r1, [r7, #12]
 8009d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	015a      	lsls	r2, r3, #5
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4413      	add	r3, r2
 8009d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	0159      	lsls	r1, r3, #5
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	440b      	add	r3, r1
 8009d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4b35      	ldr	r3, [pc, #212]	@ (8009e64 <USB_DeactivateEndpoint+0x1b0>)
 8009d8e:	4013      	ands	r3, r2
 8009d90:	600b      	str	r3, [r1, #0]
 8009d92:	e060      	b.n	8009e56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009daa:	d11f      	bne.n	8009dec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	0151      	lsls	r1, r2, #5
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009dca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009de6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	f003 030f 	and.w	r3, r3, #15
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	43db      	mvns	r3, r3
 8009e06:	68f9      	ldr	r1, [r7, #12]
 8009e08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e16:	69da      	ldr	r2, [r3, #28]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	f003 030f 	and.w	r3, r3, #15
 8009e20:	2101      	movs	r1, #1
 8009e22:	fa01 f303 	lsl.w	r3, r1, r3
 8009e26:	041b      	lsls	r3, r3, #16
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	68f9      	ldr	r1, [r7, #12]
 8009e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e30:	4013      	ands	r3, r2
 8009e32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	0159      	lsls	r1, r3, #5
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	440b      	add	r3, r1
 8009e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <USB_DeactivateEndpoint+0x1b4>)
 8009e52:	4013      	ands	r3, r2
 8009e54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	ec337800 	.word	0xec337800
 8009e68:	eff37800 	.word	0xeff37800

08009e6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08a      	sub	sp, #40	@ 0x28
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	4613      	mov	r3, r2
 8009e78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	785b      	ldrb	r3, [r3, #1]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	f040 817f 	bne.w	800a18c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d132      	bne.n	8009efc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	69ba      	ldr	r2, [r7, #24]
 8009ea6:	0151      	lsls	r1, r2, #5
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	440a      	add	r2, r1
 8009eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eb0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009eb4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	69ba      	ldr	r2, [r7, #24]
 8009eca:	0151      	lsls	r1, r2, #5
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	440a      	add	r2, r1
 8009ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ed4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	0151      	lsls	r1, r2, #5
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	440a      	add	r2, r1
 8009ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef4:	0cdb      	lsrs	r3, r3, #19
 8009ef6:	04db      	lsls	r3, r3, #19
 8009ef8:	6113      	str	r3, [r2, #16]
 8009efa:	e097      	b.n	800a02c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	0151      	lsls	r1, r2, #5
 8009f0e:	69fa      	ldr	r2, [r7, #28]
 8009f10:	440a      	add	r2, r1
 8009f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f16:	0cdb      	lsrs	r3, r3, #19
 8009f18:	04db      	lsls	r3, r3, #19
 8009f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f36:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f3a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f3e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d11a      	bne.n	8009f7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d903      	bls.n	8009f5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	689a      	ldr	r2, [r3, #8]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	0151      	lsls	r1, r2, #5
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	440a      	add	r2, r1
 8009f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f78:	6113      	str	r3, [r2, #16]
 8009f7a:	e044      	b.n	800a006 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	691a      	ldr	r2, [r3, #16]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	4413      	add	r3, r2
 8009f86:	1e5a      	subs	r2, r3, #1
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f90:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f9e:	691a      	ldr	r2, [r3, #16]
 8009fa0:	8afb      	ldrh	r3, [r7, #22]
 8009fa2:	04d9      	lsls	r1, r3, #19
 8009fa4:	4ba4      	ldr	r3, [pc, #656]	@ (800a238 <USB_EPStartXfer+0x3cc>)
 8009fa6:	400b      	ands	r3, r1
 8009fa8:	69b9      	ldr	r1, [r7, #24]
 8009faa:	0148      	lsls	r0, r1, #5
 8009fac:	69f9      	ldr	r1, [r7, #28]
 8009fae:	4401      	add	r1, r0
 8009fb0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	791b      	ldrb	r3, [r3, #4]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d122      	bne.n	800a006 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	69ba      	ldr	r2, [r7, #24]
 8009fd0:	0151      	lsls	r1, r2, #5
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	440a      	add	r2, r1
 8009fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fda:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009fde:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fec:	691a      	ldr	r2, [r3, #16]
 8009fee:	8afb      	ldrh	r3, [r7, #22]
 8009ff0:	075b      	lsls	r3, r3, #29
 8009ff2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009ff6:	69b9      	ldr	r1, [r7, #24]
 8009ff8:	0148      	lsls	r0, r1, #5
 8009ffa:	69f9      	ldr	r1, [r7, #28]
 8009ffc:	4401      	add	r1, r0
 8009ffe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a002:	4313      	orrs	r3, r2
 800a004:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a012:	691a      	ldr	r2, [r3, #16]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a01c:	69b9      	ldr	r1, [r7, #24]
 800a01e:	0148      	lsls	r0, r1, #5
 800a020:	69f9      	ldr	r1, [r7, #28]
 800a022:	4401      	add	r1, r0
 800a024:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a028:	4313      	orrs	r3, r2
 800a02a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d14b      	bne.n	800a0ca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d009      	beq.n	800a04e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a046:	461a      	mov	r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	791b      	ldrb	r3, [r3, #4]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d128      	bne.n	800a0a8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a062:	2b00      	cmp	r3, #0
 800a064:	d110      	bne.n	800a088 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	69ba      	ldr	r2, [r7, #24]
 800a076:	0151      	lsls	r1, r2, #5
 800a078:	69fa      	ldr	r2, [r7, #28]
 800a07a:	440a      	add	r2, r1
 800a07c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a080:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	e00f      	b.n	800a0a8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0a6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	e166      	b.n	800a398 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	015a      	lsls	r2, r3, #5
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	0151      	lsls	r1, r2, #5
 800a0dc:	69fa      	ldr	r2, [r7, #28]
 800a0de:	440a      	add	r2, r1
 800a0e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0e8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	791b      	ldrb	r3, [r3, #4]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d015      	beq.n	800a11e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 814e 	beq.w	800a398 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	f003 030f 	and.w	r3, r3, #15
 800a10c:	2101      	movs	r1, #1
 800a10e:	fa01 f303 	lsl.w	r3, r1, r3
 800a112:	69f9      	ldr	r1, [r7, #28]
 800a114:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a118:	4313      	orrs	r3, r2
 800a11a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a11c:	e13c      	b.n	800a398 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d110      	bne.n	800a150 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69ba      	ldr	r2, [r7, #24]
 800a13e:	0151      	lsls	r1, r2, #5
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	440a      	add	r2, r1
 800a144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a148:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	e00f      	b.n	800a170 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	4413      	add	r3, r2
 800a158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	0151      	lsls	r1, r2, #5
 800a162:	69fa      	ldr	r2, [r7, #28]
 800a164:	440a      	add	r2, r1
 800a166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a16a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a16e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	68d9      	ldr	r1, [r3, #12]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	b298      	uxth	r0, r3
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	4603      	mov	r3, r0
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 f9b9 	bl	800a4fc <USB_WritePacket>
 800a18a:	e105      	b.n	800a398 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	4413      	add	r3, r2
 800a194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	0151      	lsls	r1, r2, #5
 800a19e:	69fa      	ldr	r2, [r7, #28]
 800a1a0:	440a      	add	r2, r1
 800a1a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1a6:	0cdb      	lsrs	r3, r3, #19
 800a1a8:	04db      	lsls	r3, r3, #19
 800a1aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	0151      	lsls	r1, r2, #5
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	440a      	add	r2, r1
 800a1c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a1ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a1ce:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d132      	bne.n	800a23c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1fa:	691a      	ldr	r2, [r3, #16]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6a1b      	ldr	r3, [r3, #32]
 800a200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a204:	69b9      	ldr	r1, [r7, #24]
 800a206:	0148      	lsls	r0, r1, #5
 800a208:	69f9      	ldr	r1, [r7, #28]
 800a20a:	4401      	add	r1, r0
 800a20c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a210:	4313      	orrs	r3, r2
 800a212:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	0151      	lsls	r1, r2, #5
 800a226:	69fa      	ldr	r2, [r7, #28]
 800a228:	440a      	add	r2, r1
 800a22a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a22e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a232:	6113      	str	r3, [r2, #16]
 800a234:	e062      	b.n	800a2fc <USB_EPStartXfer+0x490>
 800a236:	bf00      	nop
 800a238:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d123      	bne.n	800a28c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a250:	691a      	ldr	r2, [r3, #16]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a25a:	69b9      	ldr	r1, [r7, #24]
 800a25c:	0148      	lsls	r0, r1, #5
 800a25e:	69f9      	ldr	r1, [r7, #28]
 800a260:	4401      	add	r1, r0
 800a262:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a266:	4313      	orrs	r3, r2
 800a268:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a284:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a288:	6113      	str	r3, [r2, #16]
 800a28a:	e037      	b.n	800a2fc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	691a      	ldr	r2, [r3, #16]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	4413      	add	r3, r2
 800a296:	1e5a      	subs	r2, r3, #1
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	8afa      	ldrh	r2, [r7, #22]
 800a2a8:	fb03 f202 	mul.w	r2, r3, r2
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2bc:	691a      	ldr	r2, [r3, #16]
 800a2be:	8afb      	ldrh	r3, [r7, #22]
 800a2c0:	04d9      	lsls	r1, r3, #19
 800a2c2:	4b38      	ldr	r3, [pc, #224]	@ (800a3a4 <USB_EPStartXfer+0x538>)
 800a2c4:	400b      	ands	r3, r1
 800a2c6:	69b9      	ldr	r1, [r7, #24]
 800a2c8:	0148      	lsls	r0, r1, #5
 800a2ca:	69f9      	ldr	r1, [r7, #28]
 800a2cc:	4401      	add	r1, r0
 800a2ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2ec:	69b9      	ldr	r1, [r7, #24]
 800a2ee:	0148      	lsls	r0, r1, #5
 800a2f0:	69f9      	ldr	r1, [r7, #28]
 800a2f2:	4401      	add	r1, r0
 800a2f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a2fc:	79fb      	ldrb	r3, [r7, #7]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d10d      	bne.n	800a31e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d009      	beq.n	800a31e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	68d9      	ldr	r1, [r3, #12]
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31a:	460a      	mov	r2, r1
 800a31c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	791b      	ldrb	r3, [r3, #4]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d128      	bne.n	800a378 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a332:	2b00      	cmp	r3, #0
 800a334:	d110      	bne.n	800a358 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	69ba      	ldr	r2, [r7, #24]
 800a346:	0151      	lsls	r1, r2, #5
 800a348:	69fa      	ldr	r2, [r7, #28]
 800a34a:	440a      	add	r2, r1
 800a34c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a350:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	e00f      	b.n	800a378 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	0151      	lsls	r1, r2, #5
 800a36a:	69fa      	ldr	r2, [r7, #28]
 800a36c:	440a      	add	r2, r1
 800a36e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a376:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a392:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3720      	adds	r7, #32
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	1ff80000 	.word	0x1ff80000

0800a3a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d14a      	bne.n	800a45c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3de:	f040 8086 	bne.w	800a4ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	7812      	ldrb	r2, [r2, #0]
 800a3f6:	0151      	lsls	r1, r2, #5
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	440a      	add	r2, r1
 800a3fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a400:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a404:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	7812      	ldrb	r2, [r2, #0]
 800a41a:	0151      	lsls	r1, r2, #5
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	440a      	add	r2, r1
 800a420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a428:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3301      	adds	r3, #1
 800a42e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a436:	4293      	cmp	r3, r2
 800a438:	d902      	bls.n	800a440 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	75fb      	strb	r3, [r7, #23]
          break;
 800a43e:	e056      	b.n	800a4ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a458:	d0e7      	beq.n	800a42a <USB_EPStopXfer+0x82>
 800a45a:	e048      	b.n	800a4ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	4413      	add	r3, r2
 800a466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a474:	d13b      	bne.n	800a4ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	7812      	ldrb	r2, [r2, #0]
 800a48a:	0151      	lsls	r1, r2, #5
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	440a      	add	r2, r1
 800a490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a494:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a498:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	7812      	ldrb	r2, [r2, #0]
 800a4ae:	0151      	lsls	r1, r2, #5
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	440a      	add	r2, r1
 800a4b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d902      	bls.n	800a4d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a4d2:	e00c      	b.n	800a4ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4ec:	d0e7      	beq.n	800a4be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	371c      	adds	r7, #28
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b089      	sub	sp, #36	@ 0x24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	4611      	mov	r1, r2
 800a508:	461a      	mov	r2, r3
 800a50a:	460b      	mov	r3, r1
 800a50c:	71fb      	strb	r3, [r7, #7]
 800a50e:	4613      	mov	r3, r2
 800a510:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a51a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d123      	bne.n	800a56a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a522:	88bb      	ldrh	r3, [r7, #4]
 800a524:	3303      	adds	r3, #3
 800a526:	089b      	lsrs	r3, r3, #2
 800a528:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a52a:	2300      	movs	r3, #0
 800a52c:	61bb      	str	r3, [r7, #24]
 800a52e:	e018      	b.n	800a562 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a530:	79fb      	ldrb	r3, [r7, #7]
 800a532:	031a      	lsls	r2, r3, #12
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	4413      	add	r3, r2
 800a538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a53c:	461a      	mov	r2, r3
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	3301      	adds	r3, #1
 800a548:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	3301      	adds	r3, #1
 800a54e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	3301      	adds	r3, #1
 800a554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	3301      	adds	r3, #1
 800a55a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	3301      	adds	r3, #1
 800a560:	61bb      	str	r3, [r7, #24]
 800a562:	69ba      	ldr	r2, [r7, #24]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	429a      	cmp	r2, r3
 800a568:	d3e2      	bcc.n	800a530 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3724      	adds	r7, #36	@ 0x24
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a578:	b480      	push	{r7}
 800a57a:	b08b      	sub	sp, #44	@ 0x2c
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	4613      	mov	r3, r2
 800a584:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a58e:	88fb      	ldrh	r3, [r7, #6]
 800a590:	089b      	lsrs	r3, r3, #2
 800a592:	b29b      	uxth	r3, r3
 800a594:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	f003 0303 	and.w	r3, r3, #3
 800a59c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a59e:	2300      	movs	r3, #0
 800a5a0:	623b      	str	r3, [r7, #32]
 800a5a2:	e014      	b.n	800a5ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	3301      	adds	r3, #1
 800a5c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	623b      	str	r3, [r7, #32]
 800a5ce:	6a3a      	ldr	r2, [r7, #32]
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d3e6      	bcc.n	800a5a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a5d6:	8bfb      	ldrh	r3, [r7, #30]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d01e      	beq.n	800a61a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	f107 0310 	add.w	r3, r7, #16
 800a5ec:	6812      	ldr	r2, [r2, #0]
 800a5ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	701a      	strb	r2, [r3, #0]
      i++;
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	3301      	adds	r3, #1
 800a606:	623b      	str	r3, [r7, #32]
      pDest++;
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	3301      	adds	r3, #1
 800a60c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a60e:	8bfb      	ldrh	r3, [r7, #30]
 800a610:	3b01      	subs	r3, #1
 800a612:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a614:	8bfb      	ldrh	r3, [r7, #30]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1ea      	bne.n	800a5f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	372c      	adds	r7, #44	@ 0x2c
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d12c      	bne.n	800a69e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	db12      	blt.n	800a67c <USB_EPSetStall+0x54>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00f      	beq.n	800a67c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	440a      	add	r2, r1
 800a672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a676:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a67a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	0151      	lsls	r1, r2, #5
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	440a      	add	r2, r1
 800a692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a696:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	e02b      	b.n	800a6f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	db12      	blt.n	800a6d6 <USB_EPSetStall+0xae>
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00f      	beq.n	800a6d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	0151      	lsls	r1, r2, #5
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	440a      	add	r2, r1
 800a6ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	785b      	ldrb	r3, [r3, #1]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d128      	bne.n	800a772 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	0151      	lsls	r1, r2, #5
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	440a      	add	r2, r1
 800a736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a73a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a73e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	791b      	ldrb	r3, [r3, #4]
 800a744:	2b03      	cmp	r3, #3
 800a746:	d003      	beq.n	800a750 <USB_EPClearStall+0x4c>
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	791b      	ldrb	r3, [r3, #4]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d138      	bne.n	800a7c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	0151      	lsls	r1, r2, #5
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	440a      	add	r2, r1
 800a766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a76a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	e027      	b.n	800a7c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	0151      	lsls	r1, r2, #5
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	440a      	add	r2, r1
 800a788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a78c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a790:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	791b      	ldrb	r3, [r3, #4]
 800a796:	2b03      	cmp	r3, #3
 800a798:	d003      	beq.n	800a7a2 <USB_EPClearStall+0x9e>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	791b      	ldrb	r3, [r3, #4]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d10f      	bne.n	800a7c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	0151      	lsls	r1, r2, #5
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	440a      	add	r2, r1
 800a7b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a7f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	011b      	lsls	r3, r3, #4
 800a800:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a804:	68f9      	ldr	r1, [r7, #12]
 800a806:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a80a:	4313      	orrs	r3, r2
 800a80c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a836:	f023 0303 	bic.w	r3, r3, #3
 800a83a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a84a:	f023 0302 	bic.w	r3, r3, #2
 800a84e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a85e:	b480      	push	{r7}
 800a860:	b085      	sub	sp, #20
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a878:	f023 0303 	bic.w	r3, r3, #3
 800a87c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a88c:	f043 0302 	orr.w	r3, r3, #2
 800a890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	0c1b      	lsrs	r3, r3, #16
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	4013      	ands	r3, r2
 800a91c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	b29b      	uxth	r3, r3
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	460b      	mov	r3, r1
 800a938:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a93e:	78fb      	ldrb	r3, [r7, #3]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	4013      	ands	r3, r2
 800a95a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a95c:	68bb      	ldr	r3, [r7, #8]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b087      	sub	sp, #28
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a98c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	fa22 f303 	lsr.w	r3, r2, r3
 800a99a:	01db      	lsls	r3, r3, #7
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9a4:	78fb      	ldrb	r3, [r7, #3]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	371c      	adds	r7, #28
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	f003 0301 	and.w	r3, r3, #1
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa00:	f023 0307 	bic.w	r3, r3, #7
 800aa04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	460b      	mov	r3, r1
 800aa32:	607a      	str	r2, [r7, #4]
 800aa34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	333c      	adds	r3, #60	@ 0x3c
 800aa3e:	3304      	adds	r3, #4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	4a26      	ldr	r2, [pc, #152]	@ (800aae0 <USB_EP0_OutStart+0xb8>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d90a      	bls.n	800aa62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa5c:	d101      	bne.n	800aa62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e037      	b.n	800aad2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa68:	461a      	mov	r2, r3
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa90:	f043 0318 	orr.w	r3, r3, #24
 800aa94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaa4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aaa8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aaaa:	7afb      	ldrb	r3, [r7, #11]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d10f      	bne.n	800aad0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab6:	461a      	mov	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aace:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	4f54300a 	.word	0x4f54300a

0800aae4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aaec:	2300      	movs	r3, #0
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aafc:	d901      	bls.n	800ab02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e01b      	b.n	800ab3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	daf2      	bge.n	800aaf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	f043 0201 	orr.w	r2, r3, #1
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab26:	d901      	bls.n	800ab2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e006      	b.n	800ab3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d0f0      	beq.n	800ab1a <USB_CoreReset+0x36>

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
	...

0800ab48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ab4c:	4904      	ldr	r1, [pc, #16]	@ (800ab60 <MX_FATFS_Init+0x18>)
 800ab4e:	4805      	ldr	r0, [pc, #20]	@ (800ab64 <MX_FATFS_Init+0x1c>)
 800ab50:	f004 f9ac 	bl	800eeac <FATFS_LinkDriver>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	4b03      	ldr	r3, [pc, #12]	@ (800ab68 <MX_FATFS_Init+0x20>)
 800ab5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab5c:	bf00      	nop
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000434 	.word	0x20000434
 800ab64:	20000038 	.word	0x20000038
 800ab68:	20000430 	.word	0x20000430

0800ab6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ab70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f5 fee3 	bl	8000954 <SD_disk_initialize>
 800ab8e:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800aba2:	79fb      	ldrb	r3, [r7, #7]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7f5 ffbb 	bl	8000b20 <SD_disk_status>
 800abaa:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	4603      	mov	r3, r0
 800abc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800abc4:	7bf8      	ldrb	r0, [r7, #15]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	f7f5 ffbe 	bl	8000b4c <SD_disk_read>
 800abd0:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
 800abe6:	4603      	mov	r3, r0
 800abe8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800abea:	7bf8      	ldrb	r0, [r7, #15]
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	f7f6 f815 	bl	8000c20 <SD_disk_write>
 800abf6:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	4603      	mov	r3, r0
 800ac08:	603a      	str	r2, [r7, #0]
 800ac0a:	71fb      	strb	r3, [r7, #7]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800ac10:	79b9      	ldrb	r1, [r7, #6]
 800ac12:	79fb      	ldrb	r3, [r7, #7]
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7f6 f886 	bl	8000d28 <SD_disk_ioctl>
 800ac1c:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
	...

0800ac28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac34:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ac38:	f004 fe14 	bl	800f864 <USBD_static_malloc>
 800ac3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	32b0      	adds	r2, #176	@ 0xb0
 800ac4e:	2100      	movs	r1, #0
 800ac50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac54:	2302      	movs	r3, #2
 800ac56:	e0d4      	b.n	800ae02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac58:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f004 ffbe 	bl	800fbe0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	32b0      	adds	r2, #176	@ 0xb0
 800ac6e:	68f9      	ldr	r1, [r7, #12]
 800ac70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	32b0      	adds	r2, #176	@ 0xb0
 800ac7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7c1b      	ldrb	r3, [r3, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d138      	bne.n	800ad02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac90:	4b5e      	ldr	r3, [pc, #376]	@ (800ae0c <USBD_CDC_Init+0x1e4>)
 800ac92:	7819      	ldrb	r1, [r3, #0]
 800ac94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac98:	2202      	movs	r2, #2
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f004 fcbf 	bl	800f61e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aca0:	4b5a      	ldr	r3, [pc, #360]	@ (800ae0c <USBD_CDC_Init+0x1e4>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 020f 	and.w	r2, r3, #15
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	3324      	adds	r3, #36	@ 0x24
 800acb6:	2201      	movs	r2, #1
 800acb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acba:	4b55      	ldr	r3, [pc, #340]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800acbc:	7819      	ldrb	r1, [r3, #0]
 800acbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acc2:	2202      	movs	r2, #2
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f004 fcaa 	bl	800f61e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acca:	4b51      	ldr	r3, [pc, #324]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	f003 020f 	and.w	r2, r3, #15
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ace2:	2201      	movs	r2, #1
 800ace4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ace6:	4b4b      	ldr	r3, [pc, #300]	@ (800ae14 <USBD_CDC_Init+0x1ec>)
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	f003 020f 	and.w	r2, r3, #15
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	440b      	add	r3, r1
 800acfa:	3326      	adds	r3, #38	@ 0x26
 800acfc:	2210      	movs	r2, #16
 800acfe:	801a      	strh	r2, [r3, #0]
 800ad00:	e035      	b.n	800ad6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad02:	4b42      	ldr	r3, [pc, #264]	@ (800ae0c <USBD_CDC_Init+0x1e4>)
 800ad04:	7819      	ldrb	r1, [r3, #0]
 800ad06:	2340      	movs	r3, #64	@ 0x40
 800ad08:	2202      	movs	r2, #2
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f004 fc87 	bl	800f61e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad10:	4b3e      	ldr	r3, [pc, #248]	@ (800ae0c <USBD_CDC_Init+0x1e4>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	f003 020f 	and.w	r2, r3, #15
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	440b      	add	r3, r1
 800ad24:	3324      	adds	r3, #36	@ 0x24
 800ad26:	2201      	movs	r2, #1
 800ad28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad2a:	4b39      	ldr	r3, [pc, #228]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800ad2c:	7819      	ldrb	r1, [r3, #0]
 800ad2e:	2340      	movs	r3, #64	@ 0x40
 800ad30:	2202      	movs	r2, #2
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f004 fc73 	bl	800f61e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad38:	4b35      	ldr	r3, [pc, #212]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	f003 020f 	and.w	r2, r3, #15
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	440b      	add	r3, r1
 800ad4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad50:	2201      	movs	r2, #1
 800ad52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad54:	4b2f      	ldr	r3, [pc, #188]	@ (800ae14 <USBD_CDC_Init+0x1ec>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	f003 020f 	and.w	r2, r3, #15
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	3326      	adds	r3, #38	@ 0x26
 800ad6a:	2210      	movs	r2, #16
 800ad6c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad6e:	4b29      	ldr	r3, [pc, #164]	@ (800ae14 <USBD_CDC_Init+0x1ec>)
 800ad70:	7819      	ldrb	r1, [r3, #0]
 800ad72:	2308      	movs	r3, #8
 800ad74:	2203      	movs	r2, #3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f004 fc51 	bl	800f61e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad7c:	4b25      	ldr	r3, [pc, #148]	@ (800ae14 <USBD_CDC_Init+0x1ec>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f003 020f 	and.w	r2, r3, #15
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	3324      	adds	r3, #36	@ 0x24
 800ad92:	2201      	movs	r2, #1
 800ad94:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	33b0      	adds	r3, #176	@ 0xb0
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d101      	bne.n	800add0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800adcc:	2302      	movs	r3, #2
 800adce:	e018      	b.n	800ae02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	7c1b      	ldrb	r3, [r3, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800add8:	4b0d      	ldr	r3, [pc, #52]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800adda:	7819      	ldrb	r1, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ade2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f004 fd08 	bl	800f7fc <USBD_LL_PrepareReceive>
 800adec:	e008      	b.n	800ae00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800adee:	4b08      	ldr	r3, [pc, #32]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800adf0:	7819      	ldrb	r1, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800adf8:	2340      	movs	r3, #64	@ 0x40
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f004 fcfe 	bl	800f7fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	200000d3 	.word	0x200000d3
 800ae10:	200000d4 	.word	0x200000d4
 800ae14:	200000d5 	.word	0x200000d5

0800ae18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ae24:	4b3a      	ldr	r3, [pc, #232]	@ (800af10 <USBD_CDC_DeInit+0xf8>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f004 fc1d 	bl	800f66a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ae30:	4b37      	ldr	r3, [pc, #220]	@ (800af10 <USBD_CDC_DeInit+0xf8>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	f003 020f 	and.w	r2, r3, #15
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	440b      	add	r3, r1
 800ae44:	3324      	adds	r3, #36	@ 0x24
 800ae46:	2200      	movs	r2, #0
 800ae48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ae4a:	4b32      	ldr	r3, [pc, #200]	@ (800af14 <USBD_CDC_DeInit+0xfc>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f004 fc0a 	bl	800f66a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae56:	4b2f      	ldr	r3, [pc, #188]	@ (800af14 <USBD_CDC_DeInit+0xfc>)
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	f003 020f 	and.w	r2, r3, #15
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	4613      	mov	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	440b      	add	r3, r1
 800ae6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae6e:	2200      	movs	r2, #0
 800ae70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae72:	4b29      	ldr	r3, [pc, #164]	@ (800af18 <USBD_CDC_DeInit+0x100>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f004 fbf6 	bl	800f66a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae7e:	4b26      	ldr	r3, [pc, #152]	@ (800af18 <USBD_CDC_DeInit+0x100>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	f003 020f 	and.w	r2, r3, #15
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	440b      	add	r3, r1
 800ae92:	3324      	adds	r3, #36	@ 0x24
 800ae94:	2200      	movs	r2, #0
 800ae96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae98:	4b1f      	ldr	r3, [pc, #124]	@ (800af18 <USBD_CDC_DeInit+0x100>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	f003 020f 	and.w	r2, r3, #15
 800aea0:	6879      	ldr	r1, [r7, #4]
 800aea2:	4613      	mov	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	440b      	add	r3, r1
 800aeac:	3326      	adds	r3, #38	@ 0x26
 800aeae:	2200      	movs	r2, #0
 800aeb0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	32b0      	adds	r2, #176	@ 0xb0
 800aebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d01f      	beq.n	800af04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	33b0      	adds	r3, #176	@ 0xb0
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32b0      	adds	r2, #176	@ 0xb0
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f004 fcca 	bl	800f880 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	32b0      	adds	r2, #176	@ 0xb0
 800aef6:	2100      	movs	r1, #0
 800aef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	200000d3 	.word	0x200000d3
 800af14:	200000d4 	.word	0x200000d4
 800af18:	200000d5 	.word	0x200000d5

0800af1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	32b0      	adds	r2, #176	@ 0xb0
 800af30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af36:	2300      	movs	r3, #0
 800af38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	e0bf      	b.n	800b0cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af54:	2b00      	cmp	r3, #0
 800af56:	d050      	beq.n	800affa <USBD_CDC_Setup+0xde>
 800af58:	2b20      	cmp	r3, #32
 800af5a:	f040 80af 	bne.w	800b0bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	88db      	ldrh	r3, [r3, #6]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d03a      	beq.n	800afdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	b25b      	sxtb	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	da1b      	bge.n	800afa8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	33b0      	adds	r3, #176	@ 0xb0
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	88d2      	ldrh	r2, [r2, #6]
 800af8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	88db      	ldrh	r3, [r3, #6]
 800af92:	2b07      	cmp	r3, #7
 800af94:	bf28      	it	cs
 800af96:	2307      	movcs	r3, #7
 800af98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	89fa      	ldrh	r2, [r7, #14]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 fd93 	bl	800cacc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800afa6:	e090      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	785a      	ldrb	r2, [r3, #1]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	88db      	ldrh	r3, [r3, #6]
 800afb6:	2b3f      	cmp	r3, #63	@ 0x3f
 800afb8:	d803      	bhi.n	800afc2 <USBD_CDC_Setup+0xa6>
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	88db      	ldrh	r3, [r3, #6]
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	e000      	b.n	800afc4 <USBD_CDC_Setup+0xa8>
 800afc2:	2240      	movs	r2, #64	@ 0x40
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800afca:	6939      	ldr	r1, [r7, #16]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800afd2:	461a      	mov	r2, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fda5 	bl	800cb24 <USBD_CtlPrepareRx>
      break;
 800afda:	e076      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	33b0      	adds	r3, #176	@ 0xb0
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	7850      	ldrb	r0, [r2, #1]
 800aff2:	2200      	movs	r2, #0
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	4798      	blx	r3
      break;
 800aff8:	e067      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	785b      	ldrb	r3, [r3, #1]
 800affe:	2b0b      	cmp	r3, #11
 800b000:	d851      	bhi.n	800b0a6 <USBD_CDC_Setup+0x18a>
 800b002:	a201      	add	r2, pc, #4	@ (adr r2, 800b008 <USBD_CDC_Setup+0xec>)
 800b004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b008:	0800b039 	.word	0x0800b039
 800b00c:	0800b0b5 	.word	0x0800b0b5
 800b010:	0800b0a7 	.word	0x0800b0a7
 800b014:	0800b0a7 	.word	0x0800b0a7
 800b018:	0800b0a7 	.word	0x0800b0a7
 800b01c:	0800b0a7 	.word	0x0800b0a7
 800b020:	0800b0a7 	.word	0x0800b0a7
 800b024:	0800b0a7 	.word	0x0800b0a7
 800b028:	0800b0a7 	.word	0x0800b0a7
 800b02c:	0800b0a7 	.word	0x0800b0a7
 800b030:	0800b063 	.word	0x0800b063
 800b034:	0800b08d 	.word	0x0800b08d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b03      	cmp	r3, #3
 800b042:	d107      	bne.n	800b054 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b044:	f107 030a 	add.w	r3, r7, #10
 800b048:	2202      	movs	r2, #2
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 fd3d 	bl	800cacc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b052:	e032      	b.n	800b0ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 fcbb 	bl	800c9d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b05c:	2303      	movs	r3, #3
 800b05e:	75fb      	strb	r3, [r7, #23]
          break;
 800b060:	e02b      	b.n	800b0ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d107      	bne.n	800b07e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b06e:	f107 030d 	add.w	r3, r7, #13
 800b072:	2201      	movs	r2, #1
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f001 fd28 	bl	800cacc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b07c:	e01d      	b.n	800b0ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f001 fca6 	bl	800c9d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b086:	2303      	movs	r3, #3
 800b088:	75fb      	strb	r3, [r7, #23]
          break;
 800b08a:	e016      	b.n	800b0ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b03      	cmp	r3, #3
 800b096:	d00f      	beq.n	800b0b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f001 fc99 	bl	800c9d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b0a4:	e008      	b.n	800b0b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f001 fc92 	bl	800c9d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	75fb      	strb	r3, [r7, #23]
          break;
 800b0b2:	e002      	b.n	800b0ba <USBD_CDC_Setup+0x19e>
          break;
 800b0b4:	bf00      	nop
 800b0b6:	e008      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>
          break;
 800b0b8:	bf00      	nop
      }
      break;
 800b0ba:	e006      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f001 fc87 	bl	800c9d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	32b0      	adds	r2, #176	@ 0xb0
 800b0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e065      	b.n	800b1ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	32b0      	adds	r2, #176	@ 0xb0
 800b108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b10e:	78fb      	ldrb	r3, [r7, #3]
 800b110:	f003 020f 	and.w	r2, r3, #15
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	440b      	add	r3, r1
 800b120:	3318      	adds	r3, #24
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d02f      	beq.n	800b188 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	f003 020f 	and.w	r2, r3, #15
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	4613      	mov	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	3318      	adds	r3, #24
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	f003 010f 	and.w	r1, r3, #15
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	460b      	mov	r3, r1
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	440b      	add	r3, r1
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4403      	add	r3, r0
 800b150:	331c      	adds	r3, #28
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	fbb2 f1f3 	udiv	r1, r2, r3
 800b158:	fb01 f303 	mul.w	r3, r1, r3
 800b15c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d112      	bne.n	800b188 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b162:	78fb      	ldrb	r3, [r7, #3]
 800b164:	f003 020f 	and.w	r2, r3, #15
 800b168:	6879      	ldr	r1, [r7, #4]
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	3318      	adds	r3, #24
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b17a:	78f9      	ldrb	r1, [r7, #3]
 800b17c:	2300      	movs	r3, #0
 800b17e:	2200      	movs	r2, #0
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f004 fb1a 	bl	800f7ba <USBD_LL_Transmit>
 800b186:	e01f      	b.n	800b1c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	33b0      	adds	r3, #176	@ 0xb0
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d010      	beq.n	800b1c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	33b0      	adds	r3, #176	@ 0xb0
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	32b0      	adds	r2, #176	@ 0xb0
 800b1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	32b0      	adds	r2, #176	@ 0xb0
 800b1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b200:	2303      	movs	r3, #3
 800b202:	e01a      	b.n	800b23a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b204:	78fb      	ldrb	r3, [r7, #3]
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f004 fb18 	bl	800f83e <USBD_LL_GetRxDataSize>
 800b20e:	4602      	mov	r2, r0
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	33b0      	adds	r3, #176	@ 0xb0
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b234:	4611      	mov	r1, r2
 800b236:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	32b0      	adds	r2, #176	@ 0xb0
 800b254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b258:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b260:	2303      	movs	r3, #3
 800b262:	e024      	b.n	800b2ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	33b0      	adds	r3, #176	@ 0xb0
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d019      	beq.n	800b2ac <USBD_CDC_EP0_RxReady+0x6a>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b27e:	2bff      	cmp	r3, #255	@ 0xff
 800b280:	d014      	beq.n	800b2ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	33b0      	adds	r3, #176	@ 0xb0
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b29a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	22ff      	movs	r2, #255	@ 0xff
 800b2a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2c0:	2182      	movs	r1, #130	@ 0x82
 800b2c2:	4818      	ldr	r0, [pc, #96]	@ (800b324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2c4:	f000 fd4f 	bl	800bd66 <USBD_GetEpDesc>
 800b2c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4815      	ldr	r0, [pc, #84]	@ (800b324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2ce:	f000 fd4a 	bl	800bd66 <USBD_GetEpDesc>
 800b2d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2d4:	2181      	movs	r1, #129	@ 0x81
 800b2d6:	4813      	ldr	r0, [pc, #76]	@ (800b324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2d8:	f000 fd45 	bl	800bd66 <USBD_GetEpDesc>
 800b2dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2210      	movs	r2, #16
 800b2e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2f8:	711a      	strb	r2, [r3, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b30c:	711a      	strb	r2, [r3, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2243      	movs	r2, #67	@ 0x43
 800b316:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b318:	4b02      	ldr	r3, [pc, #8]	@ (800b324 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000090 	.word	0x20000090

0800b328 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b330:	2182      	movs	r1, #130	@ 0x82
 800b332:	4818      	ldr	r0, [pc, #96]	@ (800b394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b334:	f000 fd17 	bl	800bd66 <USBD_GetEpDesc>
 800b338:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b33a:	2101      	movs	r1, #1
 800b33c:	4815      	ldr	r0, [pc, #84]	@ (800b394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b33e:	f000 fd12 	bl	800bd66 <USBD_GetEpDesc>
 800b342:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b344:	2181      	movs	r1, #129	@ 0x81
 800b346:	4813      	ldr	r0, [pc, #76]	@ (800b394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b348:	f000 fd0d 	bl	800bd66 <USBD_GetEpDesc>
 800b34c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d002      	beq.n	800b35a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2210      	movs	r2, #16
 800b358:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d006      	beq.n	800b36e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2200      	movs	r2, #0
 800b364:	711a      	strb	r2, [r3, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f042 0202 	orr.w	r2, r2, #2
 800b36c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d006      	beq.n	800b382 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	711a      	strb	r2, [r3, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f042 0202 	orr.w	r2, r2, #2
 800b380:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2243      	movs	r2, #67	@ 0x43
 800b386:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b388:	4b02      	ldr	r3, [pc, #8]	@ (800b394 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	20000090 	.word	0x20000090

0800b398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3a0:	2182      	movs	r1, #130	@ 0x82
 800b3a2:	4818      	ldr	r0, [pc, #96]	@ (800b404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3a4:	f000 fcdf 	bl	800bd66 <USBD_GetEpDesc>
 800b3a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	4815      	ldr	r0, [pc, #84]	@ (800b404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3ae:	f000 fcda 	bl	800bd66 <USBD_GetEpDesc>
 800b3b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3b4:	2181      	movs	r1, #129	@ 0x81
 800b3b6:	4813      	ldr	r0, [pc, #76]	@ (800b404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3b8:	f000 fcd5 	bl	800bd66 <USBD_GetEpDesc>
 800b3bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2210      	movs	r2, #16
 800b3c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d006      	beq.n	800b3de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3d8:	711a      	strb	r2, [r3, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d006      	beq.n	800b3f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3ec:	711a      	strb	r2, [r3, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2243      	movs	r2, #67	@ 0x43
 800b3f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3f8:	4b02      	ldr	r3, [pc, #8]	@ (800b404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20000090 	.word	0x20000090

0800b408 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	220a      	movs	r2, #10
 800b414:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b416:	4b03      	ldr	r3, [pc, #12]	@ (800b424 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b418:	4618      	mov	r0, r3
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	2000004c 	.word	0x2000004c

0800b428 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	e009      	b.n	800b450 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	33b0      	adds	r3, #176	@ 0xb0
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b087      	sub	sp, #28
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	32b0      	adds	r2, #176	@ 0xb0
 800b472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b476:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b47e:	2303      	movs	r3, #3
 800b480:	e008      	b.n	800b494 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	371c      	adds	r7, #28
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	32b0      	adds	r2, #176	@ 0xb0
 800b4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e004      	b.n	800b4ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
	...

0800b4dc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	32b0      	adds	r2, #176	@ 0xb0
 800b4ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e025      	b.n	800b54e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d11f      	bne.n	800b54c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	2201      	movs	r2, #1
 800b510:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b514:	4b10      	ldr	r3, [pc, #64]	@ (800b558 <USBD_CDC_TransmitPacket+0x7c>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	f003 020f 	and.w	r2, r3, #15
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	4613      	mov	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4403      	add	r3, r0
 800b52e:	3318      	adds	r3, #24
 800b530:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b532:	4b09      	ldr	r3, [pc, #36]	@ (800b558 <USBD_CDC_TransmitPacket+0x7c>)
 800b534:	7819      	ldrb	r1, [r3, #0]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f004 f939 	bl	800f7ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	200000d3 	.word	0x200000d3

0800b55c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	32b0      	adds	r2, #176	@ 0xb0
 800b56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b572:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	32b0      	adds	r2, #176	@ 0xb0
 800b57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b586:	2303      	movs	r3, #3
 800b588:	e018      	b.n	800b5bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	7c1b      	ldrb	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b592:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c4 <USBD_CDC_ReceivePacket+0x68>)
 800b594:	7819      	ldrb	r1, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b59c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f004 f92b 	bl	800f7fc <USBD_LL_PrepareReceive>
 800b5a6:	e008      	b.n	800b5ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5a8:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <USBD_CDC_ReceivePacket+0x68>)
 800b5aa:	7819      	ldrb	r1, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5b2:	2340      	movs	r3, #64	@ 0x40
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f004 f921 	bl	800f7fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	200000d4 	.word	0x200000d4

0800b5c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e01f      	b.n	800b620 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	79fa      	ldrb	r2, [r7, #7]
 800b612:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f003 ff9b 	bl	800f550 <USBD_LL_Init>
 800b61a:	4603      	mov	r3, r0
 800b61c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3718      	adds	r7, #24
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b632:	2300      	movs	r3, #0
 800b634:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e025      	b.n	800b68c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	32ae      	adds	r2, #174	@ 0xae
 800b652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00f      	beq.n	800b67c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	32ae      	adds	r2, #174	@ 0xae
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66c:	f107 020e 	add.w	r2, r7, #14
 800b670:	4610      	mov	r0, r2
 800b672:	4798      	blx	r3
 800b674:	4602      	mov	r2, r0
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f003 ffa3 	bl	800f5e8 <USBD_LL_Start>
 800b6a2:	4603      	mov	r3, r0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d009      	beq.n	800b6f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	4798      	blx	r3
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	460b      	mov	r3, r1
 800b704:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	78fa      	ldrb	r2, [r7, #3]
 800b714:	4611      	mov	r1, r2
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	4798      	blx	r3
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b720:	2303      	movs	r3, #3
 800b722:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b724:	7bfb      	ldrb	r3, [r7, #15]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b084      	sub	sp, #16
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	f001 f90c 	bl	800c95e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b754:	461a      	mov	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b762:	f003 031f 	and.w	r3, r3, #31
 800b766:	2b02      	cmp	r3, #2
 800b768:	d01a      	beq.n	800b7a0 <USBD_LL_SetupStage+0x72>
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d822      	bhi.n	800b7b4 <USBD_LL_SetupStage+0x86>
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d002      	beq.n	800b778 <USBD_LL_SetupStage+0x4a>
 800b772:	2b01      	cmp	r3, #1
 800b774:	d00a      	beq.n	800b78c <USBD_LL_SetupStage+0x5e>
 800b776:	e01d      	b.n	800b7b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fb63 	bl	800be4c <USBD_StdDevReq>
 800b786:	4603      	mov	r3, r0
 800b788:	73fb      	strb	r3, [r7, #15]
      break;
 800b78a:	e020      	b.n	800b7ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fbcb 	bl	800bf30 <USBD_StdItfReq>
 800b79a:	4603      	mov	r3, r0
 800b79c:	73fb      	strb	r3, [r7, #15]
      break;
 800b79e:	e016      	b.n	800b7ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fc2d 	bl	800c008 <USBD_StdEPReq>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b2:	e00c      	b.n	800b7ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f003 ff70 	bl	800f6a8 <USBD_LL_StallEP>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b7cc:	bf00      	nop
  }

  return ret;
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b7ea:	7afb      	ldrb	r3, [r7, #11]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d16e      	bne.n	800b8ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b7f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	f040 8098 	bne.w	800b934 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	689a      	ldr	r2, [r3, #8]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d913      	bls.n	800b838 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	689a      	ldr	r2, [r3, #8]
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	1ad2      	subs	r2, r2, r3
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	4293      	cmp	r3, r2
 800b828:	bf28      	it	cs
 800b82a:	4613      	movcs	r3, r2
 800b82c:	461a      	mov	r2, r3
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f001 f994 	bl	800cb5e <USBD_CtlContinueRx>
 800b836:	e07d      	b.n	800b934 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b83e:	f003 031f 	and.w	r3, r3, #31
 800b842:	2b02      	cmp	r3, #2
 800b844:	d014      	beq.n	800b870 <USBD_LL_DataOutStage+0x98>
 800b846:	2b02      	cmp	r3, #2
 800b848:	d81d      	bhi.n	800b886 <USBD_LL_DataOutStage+0xae>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <USBD_LL_DataOutStage+0x7c>
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d003      	beq.n	800b85a <USBD_LL_DataOutStage+0x82>
 800b852:	e018      	b.n	800b886 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b854:	2300      	movs	r3, #0
 800b856:	75bb      	strb	r3, [r7, #22]
            break;
 800b858:	e018      	b.n	800b88c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b860:	b2db      	uxtb	r3, r3
 800b862:	4619      	mov	r1, r3
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 fa64 	bl	800bd32 <USBD_CoreFindIF>
 800b86a:	4603      	mov	r3, r0
 800b86c:	75bb      	strb	r3, [r7, #22]
            break;
 800b86e:	e00d      	b.n	800b88c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b876:	b2db      	uxtb	r3, r3
 800b878:	4619      	mov	r1, r3
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 fa66 	bl	800bd4c <USBD_CoreFindEP>
 800b880:	4603      	mov	r3, r0
 800b882:	75bb      	strb	r3, [r7, #22]
            break;
 800b884:	e002      	b.n	800b88c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	75bb      	strb	r3, [r7, #22]
            break;
 800b88a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b88c:	7dbb      	ldrb	r3, [r7, #22]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d119      	bne.n	800b8c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d113      	bne.n	800b8c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b89e:	7dba      	ldrb	r2, [r7, #22]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	32ae      	adds	r2, #174	@ 0xae
 800b8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00b      	beq.n	800b8c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b8ae:	7dba      	ldrb	r2, [r7, #22]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b8b6:	7dba      	ldrb	r2, [r7, #22]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	32ae      	adds	r2, #174	@ 0xae
 800b8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f001 f95a 	bl	800cb80 <USBD_CtlSendStatus>
 800b8cc:	e032      	b.n	800b934 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b8ce:	7afb      	ldrb	r3, [r7, #11]
 800b8d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 fa37 	bl	800bd4c <USBD_CoreFindEP>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8e2:	7dbb      	ldrb	r3, [r7, #22]
 800b8e4:	2bff      	cmp	r3, #255	@ 0xff
 800b8e6:	d025      	beq.n	800b934 <USBD_LL_DataOutStage+0x15c>
 800b8e8:	7dbb      	ldrb	r3, [r7, #22]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d122      	bne.n	800b934 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d117      	bne.n	800b92a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8fa:	7dba      	ldrb	r2, [r7, #22]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	32ae      	adds	r2, #174	@ 0xae
 800b900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00f      	beq.n	800b92a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b90a:	7dba      	ldrb	r2, [r7, #22]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b912:	7dba      	ldrb	r2, [r7, #22]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	32ae      	adds	r2, #174	@ 0xae
 800b918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	7afa      	ldrb	r2, [r7, #11]
 800b920:	4611      	mov	r1, r2
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	4798      	blx	r3
 800b926:	4603      	mov	r3, r0
 800b928:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b92a:	7dfb      	ldrb	r3, [r7, #23]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b930:	7dfb      	ldrb	r3, [r7, #23]
 800b932:	e000      	b.n	800b936 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b086      	sub	sp, #24
 800b942:	af00      	add	r7, sp, #0
 800b944:	60f8      	str	r0, [r7, #12]
 800b946:	460b      	mov	r3, r1
 800b948:	607a      	str	r2, [r7, #4]
 800b94a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b94c:	7afb      	ldrb	r3, [r7, #11]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d16f      	bne.n	800ba32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3314      	adds	r3, #20
 800b956:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d15a      	bne.n	800ba18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	689a      	ldr	r2, [r3, #8]
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d914      	bls.n	800b998 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	689a      	ldr	r2, [r3, #8]
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	1ad2      	subs	r2, r2, r3
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	461a      	mov	r2, r3
 800b982:	6879      	ldr	r1, [r7, #4]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f001 f8bc 	bl	800cb02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b98a:	2300      	movs	r3, #0
 800b98c:	2200      	movs	r2, #0
 800b98e:	2100      	movs	r1, #0
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f003 ff33 	bl	800f7fc <USBD_LL_PrepareReceive>
 800b996:	e03f      	b.n	800ba18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	68da      	ldr	r2, [r3, #12]
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d11c      	bne.n	800b9de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d316      	bcc.n	800b9de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d20f      	bcs.n	800b9de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f001 f89d 	bl	800cb02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f003 ff10 	bl	800f7fc <USBD_LL_PrepareReceive>
 800b9dc:	e01c      	b.n	800ba18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d10f      	bne.n	800ba0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d009      	beq.n	800ba0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba0a:	2180      	movs	r1, #128	@ 0x80
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f003 fe4b 	bl	800f6a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f001 f8c7 	bl	800cba6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d03a      	beq.n	800ba98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fe42 	bl	800b6ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ba30:	e032      	b.n	800ba98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba32:	7afb      	ldrb	r3, [r7, #11]
 800ba34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 f985 	bl	800bd4c <USBD_CoreFindEP>
 800ba42:	4603      	mov	r3, r0
 800ba44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba46:	7dfb      	ldrb	r3, [r7, #23]
 800ba48:	2bff      	cmp	r3, #255	@ 0xff
 800ba4a:	d025      	beq.n	800ba98 <USBD_LL_DataInStage+0x15a>
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d122      	bne.n	800ba98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d11c      	bne.n	800ba98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba5e:	7dfa      	ldrb	r2, [r7, #23]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	32ae      	adds	r2, #174	@ 0xae
 800ba64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d014      	beq.n	800ba98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba6e:	7dfa      	ldrb	r2, [r7, #23]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba76:	7dfa      	ldrb	r2, [r7, #23]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	32ae      	adds	r2, #174	@ 0xae
 800ba7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	7afa      	ldrb	r2, [r7, #11]
 800ba84:	4611      	mov	r1, r2
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	4798      	blx	r3
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba8e:	7dbb      	ldrb	r3, [r7, #22]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba94:	7dbb      	ldrb	r3, [r7, #22]
 800ba96:	e000      	b.n	800ba9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bada:	2b00      	cmp	r3, #0
 800badc:	d014      	beq.n	800bb08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00e      	beq.n	800bb08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	6852      	ldr	r2, [r2, #4]
 800baf6:	b2d2      	uxtb	r2, r2
 800baf8:	4611      	mov	r1, r2
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	4798      	blx	r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb04:	2303      	movs	r3, #3
 800bb06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb08:	2340      	movs	r3, #64	@ 0x40
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f003 fd85 	bl	800f61e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2240      	movs	r2, #64	@ 0x40
 800bb20:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb24:	2340      	movs	r3, #64	@ 0x40
 800bb26:	2200      	movs	r2, #0
 800bb28:	2180      	movs	r1, #128	@ 0x80
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f003 fd77 	bl	800f61e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2240      	movs	r2, #64	@ 0x40
 800bb3a:	621a      	str	r2, [r3, #32]

  return ret;
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	78fa      	ldrb	r2, [r7, #3]
 800bb56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b083      	sub	sp, #12
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b04      	cmp	r3, #4
 800bb78:	d006      	beq.n	800bb88 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2204      	movs	r2, #4
 800bb8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b083      	sub	sp, #12
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	d106      	bne.n	800bbc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d110      	bne.n	800bc04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00b      	beq.n	800bc04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d005      	beq.n	800bc04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbfe:	69db      	ldr	r3, [r3, #28]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	32ae      	adds	r2, #174	@ 0xae
 800bc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e01c      	b.n	800bc6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d115      	bne.n	800bc68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	32ae      	adds	r2, #174	@ 0xae
 800bc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4a:	6a1b      	ldr	r3, [r3, #32]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00b      	beq.n	800bc68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	32ae      	adds	r2, #174	@ 0xae
 800bc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	78fa      	ldrb	r2, [r7, #3]
 800bc62:	4611      	mov	r1, r2
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b082      	sub	sp, #8
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	32ae      	adds	r2, #174	@ 0xae
 800bc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc90:	2303      	movs	r3, #3
 800bc92:	e01c      	b.n	800bcce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	d115      	bne.n	800bccc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	32ae      	adds	r2, #174	@ 0xae
 800bcaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00b      	beq.n	800bccc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	32ae      	adds	r2, #174	@ 0xae
 800bcbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc4:	78fa      	ldrb	r2, [r7, #3]
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b083      	sub	sp, #12
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00e      	beq.n	800bd28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	6852      	ldr	r2, [r2, #4]
 800bd16:	b2d2      	uxtb	r2, r2
 800bd18:	4611      	mov	r1, r2
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	4798      	blx	r3
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd24:	2303      	movs	r3, #3
 800bd26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b086      	sub	sp, #24
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	885b      	ldrh	r3, [r3, #2]
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	7812      	ldrb	r2, [r2, #0]
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d91f      	bls.n	800bdcc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd92:	e013      	b.n	800bdbc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd94:	f107 030a 	add.w	r3, r7, #10
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6978      	ldr	r0, [r7, #20]
 800bd9c:	f000 f81b 	bl	800bdd6 <USBD_GetNextDesc>
 800bda0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b05      	cmp	r3, #5
 800bda8:	d108      	bne.n	800bdbc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	789b      	ldrb	r3, [r3, #2]
 800bdb2:	78fa      	ldrb	r2, [r7, #3]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d008      	beq.n	800bdca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	885b      	ldrh	r3, [r3, #2]
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	897b      	ldrh	r3, [r7, #10]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d8e5      	bhi.n	800bd94 <USBD_GetEpDesc+0x2e>
 800bdc8:	e000      	b.n	800bdcc <USBD_GetEpDesc+0x66>
          break;
 800bdca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bdcc:	693b      	ldr	r3, [r7, #16]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b085      	sub	sp, #20
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	7812      	ldrb	r2, [r2, #0]
 800bdec:	4413      	add	r3, r2
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be00:	68fb      	ldr	r3, [r7, #12]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be0e:	b480      	push	{r7}
 800be10:	b087      	sub	sp, #28
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	3301      	adds	r3, #1
 800be24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be2c:	8a3b      	ldrh	r3, [r7, #16]
 800be2e:	021b      	lsls	r3, r3, #8
 800be30:	b21a      	sxth	r2, r3
 800be32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be36:	4313      	orrs	r3, r2
 800be38:	b21b      	sxth	r3, r3
 800be3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be3c:	89fb      	ldrh	r3, [r7, #14]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	371c      	adds	r7, #28
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
	...

0800be4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be62:	2b40      	cmp	r3, #64	@ 0x40
 800be64:	d005      	beq.n	800be72 <USBD_StdDevReq+0x26>
 800be66:	2b40      	cmp	r3, #64	@ 0x40
 800be68:	d857      	bhi.n	800bf1a <USBD_StdDevReq+0xce>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00f      	beq.n	800be8e <USBD_StdDevReq+0x42>
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d153      	bne.n	800bf1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	32ae      	adds	r2, #174	@ 0xae
 800be7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	4798      	blx	r3
 800be88:	4603      	mov	r3, r0
 800be8a:	73fb      	strb	r3, [r7, #15]
      break;
 800be8c:	e04a      	b.n	800bf24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	785b      	ldrb	r3, [r3, #1]
 800be92:	2b09      	cmp	r3, #9
 800be94:	d83b      	bhi.n	800bf0e <USBD_StdDevReq+0xc2>
 800be96:	a201      	add	r2, pc, #4	@ (adr r2, 800be9c <USBD_StdDevReq+0x50>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800bef1 	.word	0x0800bef1
 800bea0:	0800bf05 	.word	0x0800bf05
 800bea4:	0800bf0f 	.word	0x0800bf0f
 800bea8:	0800befb 	.word	0x0800befb
 800beac:	0800bf0f 	.word	0x0800bf0f
 800beb0:	0800becf 	.word	0x0800becf
 800beb4:	0800bec5 	.word	0x0800bec5
 800beb8:	0800bf0f 	.word	0x0800bf0f
 800bebc:	0800bee7 	.word	0x0800bee7
 800bec0:	0800bed9 	.word	0x0800bed9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fa3c 	bl	800c344 <USBD_GetDescriptor>
          break;
 800becc:	e024      	b.n	800bf18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fba1 	bl	800c618 <USBD_SetAddress>
          break;
 800bed6:	e01f      	b.n	800bf18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fbe0 	bl	800c6a0 <USBD_SetConfig>
 800bee0:	4603      	mov	r3, r0
 800bee2:	73fb      	strb	r3, [r7, #15]
          break;
 800bee4:	e018      	b.n	800bf18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fc83 	bl	800c7f4 <USBD_GetConfig>
          break;
 800beee:	e013      	b.n	800bf18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 fcb4 	bl	800c860 <USBD_GetStatus>
          break;
 800bef8:	e00e      	b.n	800bf18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fce3 	bl	800c8c8 <USBD_SetFeature>
          break;
 800bf02:	e009      	b.n	800bf18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fd07 	bl	800c91a <USBD_ClrFeature>
          break;
 800bf0c:	e004      	b.n	800bf18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf0e:	6839      	ldr	r1, [r7, #0]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 fd5e 	bl	800c9d2 <USBD_CtlError>
          break;
 800bf16:	bf00      	nop
      }
      break;
 800bf18:	e004      	b.n	800bf24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fd58 	bl	800c9d2 <USBD_CtlError>
      break;
 800bf22:	bf00      	nop
  }

  return ret;
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop

0800bf30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf46:	2b40      	cmp	r3, #64	@ 0x40
 800bf48:	d005      	beq.n	800bf56 <USBD_StdItfReq+0x26>
 800bf4a:	2b40      	cmp	r3, #64	@ 0x40
 800bf4c:	d852      	bhi.n	800bff4 <USBD_StdItfReq+0xc4>
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <USBD_StdItfReq+0x26>
 800bf52:	2b20      	cmp	r3, #32
 800bf54:	d14e      	bne.n	800bff4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d840      	bhi.n	800bfe6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	889b      	ldrh	r3, [r3, #4]
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d836      	bhi.n	800bfdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	889b      	ldrh	r3, [r3, #4]
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff fedb 	bl	800bd32 <USBD_CoreFindIF>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	2bff      	cmp	r3, #255	@ 0xff
 800bf84:	d01d      	beq.n	800bfc2 <USBD_StdItfReq+0x92>
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d11a      	bne.n	800bfc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf8c:	7bba      	ldrb	r2, [r7, #14]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	32ae      	adds	r2, #174	@ 0xae
 800bf92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00f      	beq.n	800bfbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf9c:	7bba      	ldrb	r2, [r7, #14]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfa4:	7bba      	ldrb	r2, [r7, #14]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	32ae      	adds	r2, #174	@ 0xae
 800bfaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	4798      	blx	r3
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bfba:	e004      	b.n	800bfc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bfc0:	e001      	b.n	800bfc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	88db      	ldrh	r3, [r3, #6]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d110      	bne.n	800bff0 <USBD_StdItfReq+0xc0>
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10d      	bne.n	800bff0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 fdd3 	bl	800cb80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfda:	e009      	b.n	800bff0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fcf7 	bl	800c9d2 <USBD_CtlError>
          break;
 800bfe4:	e004      	b.n	800bff0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fcf2 	bl	800c9d2 <USBD_CtlError>
          break;
 800bfee:	e000      	b.n	800bff2 <USBD_StdItfReq+0xc2>
          break;
 800bff0:	bf00      	nop
      }
      break;
 800bff2:	e004      	b.n	800bffe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fceb 	bl	800c9d2 <USBD_CtlError>
      break;
 800bffc:	bf00      	nop
  }

  return ret;
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	889b      	ldrh	r3, [r3, #4]
 800c01a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c024:	2b40      	cmp	r3, #64	@ 0x40
 800c026:	d007      	beq.n	800c038 <USBD_StdEPReq+0x30>
 800c028:	2b40      	cmp	r3, #64	@ 0x40
 800c02a:	f200 817f 	bhi.w	800c32c <USBD_StdEPReq+0x324>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d02a      	beq.n	800c088 <USBD_StdEPReq+0x80>
 800c032:	2b20      	cmp	r3, #32
 800c034:	f040 817a 	bne.w	800c32c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff fe85 	bl	800bd4c <USBD_CoreFindEP>
 800c042:	4603      	mov	r3, r0
 800c044:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c046:	7b7b      	ldrb	r3, [r7, #13]
 800c048:	2bff      	cmp	r3, #255	@ 0xff
 800c04a:	f000 8174 	beq.w	800c336 <USBD_StdEPReq+0x32e>
 800c04e:	7b7b      	ldrb	r3, [r7, #13]
 800c050:	2b00      	cmp	r3, #0
 800c052:	f040 8170 	bne.w	800c336 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c056:	7b7a      	ldrb	r2, [r7, #13]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c05e:	7b7a      	ldrb	r2, [r7, #13]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	32ae      	adds	r2, #174	@ 0xae
 800c064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 8163 	beq.w	800c336 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c070:	7b7a      	ldrb	r2, [r7, #13]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	32ae      	adds	r2, #174	@ 0xae
 800c076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	4798      	blx	r3
 800c082:	4603      	mov	r3, r0
 800c084:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c086:	e156      	b.n	800c336 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	2b03      	cmp	r3, #3
 800c08e:	d008      	beq.n	800c0a2 <USBD_StdEPReq+0x9a>
 800c090:	2b03      	cmp	r3, #3
 800c092:	f300 8145 	bgt.w	800c320 <USBD_StdEPReq+0x318>
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 809b 	beq.w	800c1d2 <USBD_StdEPReq+0x1ca>
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d03c      	beq.n	800c11a <USBD_StdEPReq+0x112>
 800c0a0:	e13e      	b.n	800c320 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d002      	beq.n	800c0b4 <USBD_StdEPReq+0xac>
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d016      	beq.n	800c0e0 <USBD_StdEPReq+0xd8>
 800c0b2:	e02c      	b.n	800c10e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00d      	beq.n	800c0d6 <USBD_StdEPReq+0xce>
 800c0ba:	7bbb      	ldrb	r3, [r7, #14]
 800c0bc:	2b80      	cmp	r3, #128	@ 0x80
 800c0be:	d00a      	beq.n	800c0d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f003 faef 	bl	800f6a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ca:	2180      	movs	r1, #128	@ 0x80
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f003 faeb 	bl	800f6a8 <USBD_LL_StallEP>
 800c0d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0d4:	e020      	b.n	800c118 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fc7a 	bl	800c9d2 <USBD_CtlError>
              break;
 800c0de:	e01b      	b.n	800c118 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	885b      	ldrh	r3, [r3, #2]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10e      	bne.n	800c106 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0e8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00b      	beq.n	800c106 <USBD_StdEPReq+0xfe>
 800c0ee:	7bbb      	ldrb	r3, [r7, #14]
 800c0f0:	2b80      	cmp	r3, #128	@ 0x80
 800c0f2:	d008      	beq.n	800c106 <USBD_StdEPReq+0xfe>
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	88db      	ldrh	r3, [r3, #6]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d104      	bne.n	800c106 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f003 fad1 	bl	800f6a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fd3a 	bl	800cb80 <USBD_CtlSendStatus>

              break;
 800c10c:	e004      	b.n	800c118 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fc5e 	bl	800c9d2 <USBD_CtlError>
              break;
 800c116:	bf00      	nop
          }
          break;
 800c118:	e107      	b.n	800c32a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b02      	cmp	r3, #2
 800c124:	d002      	beq.n	800c12c <USBD_StdEPReq+0x124>
 800c126:	2b03      	cmp	r3, #3
 800c128:	d016      	beq.n	800c158 <USBD_StdEPReq+0x150>
 800c12a:	e04b      	b.n	800c1c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00d      	beq.n	800c14e <USBD_StdEPReq+0x146>
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b80      	cmp	r3, #128	@ 0x80
 800c136:	d00a      	beq.n	800c14e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c138:	7bbb      	ldrb	r3, [r7, #14]
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f003 fab3 	bl	800f6a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c142:	2180      	movs	r1, #128	@ 0x80
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f003 faaf 	bl	800f6a8 <USBD_LL_StallEP>
 800c14a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c14c:	e040      	b.n	800c1d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fc3e 	bl	800c9d2 <USBD_CtlError>
              break;
 800c156:	e03b      	b.n	800c1d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	885b      	ldrh	r3, [r3, #2]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d136      	bne.n	800c1ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c166:	2b00      	cmp	r3, #0
 800c168:	d004      	beq.n	800c174 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f003 fab9 	bl	800f6e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fd03 	bl	800cb80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7ff fde4 	bl	800bd4c <USBD_CoreFindEP>
 800c184:	4603      	mov	r3, r0
 800c186:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c188:	7b7b      	ldrb	r3, [r7, #13]
 800c18a:	2bff      	cmp	r3, #255	@ 0xff
 800c18c:	d01f      	beq.n	800c1ce <USBD_StdEPReq+0x1c6>
 800c18e:	7b7b      	ldrb	r3, [r7, #13]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d11c      	bne.n	800c1ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c194:	7b7a      	ldrb	r2, [r7, #13]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c19c:	7b7a      	ldrb	r2, [r7, #13]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	32ae      	adds	r2, #174	@ 0xae
 800c1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d010      	beq.n	800c1ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1ac:	7b7a      	ldrb	r2, [r7, #13]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	32ae      	adds	r2, #174	@ 0xae
 800c1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	4798      	blx	r3
 800c1be:	4603      	mov	r3, r0
 800c1c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c1c2:	e004      	b.n	800c1ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fc03 	bl	800c9d2 <USBD_CtlError>
              break;
 800c1cc:	e000      	b.n	800c1d0 <USBD_StdEPReq+0x1c8>
              break;
 800c1ce:	bf00      	nop
          }
          break;
 800c1d0:	e0ab      	b.n	800c32a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d002      	beq.n	800c1e4 <USBD_StdEPReq+0x1dc>
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d032      	beq.n	800c248 <USBD_StdEPReq+0x240>
 800c1e2:	e097      	b.n	800c314 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d007      	beq.n	800c1fa <USBD_StdEPReq+0x1f2>
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	2b80      	cmp	r3, #128	@ 0x80
 800c1ee:	d004      	beq.n	800c1fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fbed 	bl	800c9d2 <USBD_CtlError>
                break;
 800c1f8:	e091      	b.n	800c31e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	da0b      	bge.n	800c21a <USBD_StdEPReq+0x212>
 800c202:	7bbb      	ldrb	r3, [r7, #14]
 800c204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	3310      	adds	r3, #16
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	4413      	add	r3, r2
 800c216:	3304      	adds	r3, #4
 800c218:	e00b      	b.n	800c232 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	4413      	add	r3, r2
 800c230:	3304      	adds	r3, #4
 800c232:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	2200      	movs	r2, #0
 800c238:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2202      	movs	r2, #2
 800c23e:	4619      	mov	r1, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fc43 	bl	800cacc <USBD_CtlSendData>
              break;
 800c246:	e06a      	b.n	800c31e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	da11      	bge.n	800c274 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c250:	7bbb      	ldrb	r3, [r7, #14]
 800c252:	f003 020f 	and.w	r2, r3, #15
 800c256:	6879      	ldr	r1, [r7, #4]
 800c258:	4613      	mov	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4413      	add	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	440b      	add	r3, r1
 800c262:	3324      	adds	r3, #36	@ 0x24
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d117      	bne.n	800c29a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fbb0 	bl	800c9d2 <USBD_CtlError>
                  break;
 800c272:	e054      	b.n	800c31e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c274:	7bbb      	ldrb	r3, [r7, #14]
 800c276:	f003 020f 	and.w	r2, r3, #15
 800c27a:	6879      	ldr	r1, [r7, #4]
 800c27c:	4613      	mov	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	440b      	add	r3, r1
 800c286:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d104      	bne.n	800c29a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fb9d 	bl	800c9d2 <USBD_CtlError>
                  break;
 800c298:	e041      	b.n	800c31e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c29a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	da0b      	bge.n	800c2ba <USBD_StdEPReq+0x2b2>
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	4413      	add	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	3310      	adds	r3, #16
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	3304      	adds	r3, #4
 800c2b8:	e00b      	b.n	800c2d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4413      	add	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <USBD_StdEPReq+0x2d8>
 800c2da:	7bbb      	ldrb	r3, [r7, #14]
 800c2dc:	2b80      	cmp	r3, #128	@ 0x80
 800c2de:	d103      	bne.n	800c2e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]
 800c2e6:	e00e      	b.n	800c306 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f003 fa19 	bl	800f724 <USBD_LL_IsStallEP>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	601a      	str	r2, [r3, #0]
 800c2fe:	e002      	b.n	800c306 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	2202      	movs	r2, #2
 800c30a:	4619      	mov	r1, r3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fbdd 	bl	800cacc <USBD_CtlSendData>
              break;
 800c312:	e004      	b.n	800c31e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fb5b 	bl	800c9d2 <USBD_CtlError>
              break;
 800c31c:	bf00      	nop
          }
          break;
 800c31e:	e004      	b.n	800c32a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fb55 	bl	800c9d2 <USBD_CtlError>
          break;
 800c328:	bf00      	nop
      }
      break;
 800c32a:	e005      	b.n	800c338 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fb4f 	bl	800c9d2 <USBD_CtlError>
      break;
 800c334:	e000      	b.n	800c338 <USBD_StdEPReq+0x330>
      break;
 800c336:	bf00      	nop
  }

  return ret;
 800c338:	7bfb      	ldrb	r3, [r7, #15]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
	...

0800c344 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c34e:	2300      	movs	r3, #0
 800c350:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	885b      	ldrh	r3, [r3, #2]
 800c35e:	0a1b      	lsrs	r3, r3, #8
 800c360:	b29b      	uxth	r3, r3
 800c362:	3b01      	subs	r3, #1
 800c364:	2b06      	cmp	r3, #6
 800c366:	f200 8128 	bhi.w	800c5ba <USBD_GetDescriptor+0x276>
 800c36a:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <USBD_GetDescriptor+0x2c>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c38d 	.word	0x0800c38d
 800c374:	0800c3a5 	.word	0x0800c3a5
 800c378:	0800c3e5 	.word	0x0800c3e5
 800c37c:	0800c5bb 	.word	0x0800c5bb
 800c380:	0800c5bb 	.word	0x0800c5bb
 800c384:	0800c55b 	.word	0x0800c55b
 800c388:	0800c587 	.word	0x0800c587
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	7c12      	ldrb	r2, [r2, #16]
 800c398:	f107 0108 	add.w	r1, r7, #8
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3
 800c3a0:	60f8      	str	r0, [r7, #12]
      break;
 800c3a2:	e112      	b.n	800c5ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	7c1b      	ldrb	r3, [r3, #16]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10d      	bne.n	800c3c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b4:	f107 0208 	add.w	r2, r7, #8
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	4798      	blx	r3
 800c3bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3c6:	e100      	b.n	800c5ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d0:	f107 0208 	add.w	r2, r7, #8
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	2202      	movs	r2, #2
 800c3e0:	701a      	strb	r2, [r3, #0]
      break;
 800c3e2:	e0f2      	b.n	800c5ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	885b      	ldrh	r3, [r3, #2]
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b05      	cmp	r3, #5
 800c3ec:	f200 80ac 	bhi.w	800c548 <USBD_GetDescriptor+0x204>
 800c3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f8 <USBD_GetDescriptor+0xb4>)
 800c3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f6:	bf00      	nop
 800c3f8:	0800c411 	.word	0x0800c411
 800c3fc:	0800c445 	.word	0x0800c445
 800c400:	0800c479 	.word	0x0800c479
 800c404:	0800c4ad 	.word	0x0800c4ad
 800c408:	0800c4e1 	.word	0x0800c4e1
 800c40c:	0800c515 	.word	0x0800c515
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00b      	beq.n	800c434 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	7c12      	ldrb	r2, [r2, #16]
 800c428:	f107 0108 	add.w	r1, r7, #8
 800c42c:	4610      	mov	r0, r2
 800c42e:	4798      	blx	r3
 800c430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c432:	e091      	b.n	800c558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 facb 	bl	800c9d2 <USBD_CtlError>
            err++;
 800c43c:	7afb      	ldrb	r3, [r7, #11]
 800c43e:	3301      	adds	r3, #1
 800c440:	72fb      	strb	r3, [r7, #11]
          break;
 800c442:	e089      	b.n	800c558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00b      	beq.n	800c468 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	7c12      	ldrb	r2, [r2, #16]
 800c45c:	f107 0108 	add.w	r1, r7, #8
 800c460:	4610      	mov	r0, r2
 800c462:	4798      	blx	r3
 800c464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c466:	e077      	b.n	800c558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fab1 	bl	800c9d2 <USBD_CtlError>
            err++;
 800c470:	7afb      	ldrb	r3, [r7, #11]
 800c472:	3301      	adds	r3, #1
 800c474:	72fb      	strb	r3, [r7, #11]
          break;
 800c476:	e06f      	b.n	800c558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00b      	beq.n	800c49c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	7c12      	ldrb	r2, [r2, #16]
 800c490:	f107 0108 	add.w	r1, r7, #8
 800c494:	4610      	mov	r0, r2
 800c496:	4798      	blx	r3
 800c498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49a:	e05d      	b.n	800c558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fa97 	bl	800c9d2 <USBD_CtlError>
            err++;
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4aa:	e055      	b.n	800c558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00b      	beq.n	800c4d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	7c12      	ldrb	r2, [r2, #16]
 800c4c4:	f107 0108 	add.w	r1, r7, #8
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
 800c4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ce:	e043      	b.n	800c558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fa7d 	bl	800c9d2 <USBD_CtlError>
            err++;
 800c4d8:	7afb      	ldrb	r3, [r7, #11]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4de:	e03b      	b.n	800c558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e6:	695b      	ldr	r3, [r3, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00b      	beq.n	800c504 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4f2:	695b      	ldr	r3, [r3, #20]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	7c12      	ldrb	r2, [r2, #16]
 800c4f8:	f107 0108 	add.w	r1, r7, #8
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	4798      	blx	r3
 800c500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c502:	e029      	b.n	800c558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa63 	bl	800c9d2 <USBD_CtlError>
            err++;
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	3301      	adds	r3, #1
 800c510:	72fb      	strb	r3, [r7, #11]
          break;
 800c512:	e021      	b.n	800c558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c51a:	699b      	ldr	r3, [r3, #24]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00b      	beq.n	800c538 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	7c12      	ldrb	r2, [r2, #16]
 800c52c:	f107 0108 	add.w	r1, r7, #8
 800c530:	4610      	mov	r0, r2
 800c532:	4798      	blx	r3
 800c534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c536:	e00f      	b.n	800c558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fa49 	bl	800c9d2 <USBD_CtlError>
            err++;
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	3301      	adds	r3, #1
 800c544:	72fb      	strb	r3, [r7, #11]
          break;
 800c546:	e007      	b.n	800c558 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c548:	6839      	ldr	r1, [r7, #0]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fa41 	bl	800c9d2 <USBD_CtlError>
          err++;
 800c550:	7afb      	ldrb	r3, [r7, #11]
 800c552:	3301      	adds	r3, #1
 800c554:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c556:	bf00      	nop
      }
      break;
 800c558:	e037      	b.n	800c5ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7c1b      	ldrb	r3, [r3, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d109      	bne.n	800c576 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c56a:	f107 0208 	add.w	r2, r7, #8
 800c56e:	4610      	mov	r0, r2
 800c570:	4798      	blx	r3
 800c572:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c574:	e029      	b.n	800c5ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fa2a 	bl	800c9d2 <USBD_CtlError>
        err++;
 800c57e:	7afb      	ldrb	r3, [r7, #11]
 800c580:	3301      	adds	r3, #1
 800c582:	72fb      	strb	r3, [r7, #11]
      break;
 800c584:	e021      	b.n	800c5ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	7c1b      	ldrb	r3, [r3, #16]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10d      	bne.n	800c5aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c596:	f107 0208 	add.w	r2, r7, #8
 800c59a:	4610      	mov	r0, r2
 800c59c:	4798      	blx	r3
 800c59e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	2207      	movs	r2, #7
 800c5a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5a8:	e00f      	b.n	800c5ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fa10 	bl	800c9d2 <USBD_CtlError>
        err++;
 800c5b2:	7afb      	ldrb	r3, [r7, #11]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b8:	e007      	b.n	800c5ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fa08 	bl	800c9d2 <USBD_CtlError>
      err++;
 800c5c2:	7afb      	ldrb	r3, [r7, #11]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5c8:	bf00      	nop
  }

  if (err != 0U)
 800c5ca:	7afb      	ldrb	r3, [r7, #11]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d11e      	bne.n	800c60e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	88db      	ldrh	r3, [r3, #6]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d016      	beq.n	800c606 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c5d8:	893b      	ldrh	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00e      	beq.n	800c5fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	88da      	ldrh	r2, [r3, #6]
 800c5e2:	893b      	ldrh	r3, [r7, #8]
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	bf28      	it	cs
 800c5e8:	4613      	movcs	r3, r2
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5ee:	893b      	ldrh	r3, [r7, #8]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	68f9      	ldr	r1, [r7, #12]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fa69 	bl	800cacc <USBD_CtlSendData>
 800c5fa:	e009      	b.n	800c610 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f9e7 	bl	800c9d2 <USBD_CtlError>
 800c604:	e004      	b.n	800c610 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 faba 	bl	800cb80 <USBD_CtlSendStatus>
 800c60c:	e000      	b.n	800c610 <USBD_GetDescriptor+0x2cc>
    return;
 800c60e:	bf00      	nop
  }
}
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop

0800c618 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	889b      	ldrh	r3, [r3, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d131      	bne.n	800c68e <USBD_SetAddress+0x76>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	88db      	ldrh	r3, [r3, #6]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d12d      	bne.n	800c68e <USBD_SetAddress+0x76>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	885b      	ldrh	r3, [r3, #2]
 800c636:	2b7f      	cmp	r3, #127	@ 0x7f
 800c638:	d829      	bhi.n	800c68e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	885b      	ldrh	r3, [r3, #2]
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c644:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b03      	cmp	r3, #3
 800c650:	d104      	bne.n	800c65c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f9bc 	bl	800c9d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65a:	e01d      	b.n	800c698 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	7bfa      	ldrb	r2, [r7, #15]
 800c660:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f003 f887 	bl	800f77c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fa86 	bl	800cb80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c674:	7bfb      	ldrb	r3, [r7, #15]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d004      	beq.n	800c684 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2202      	movs	r2, #2
 800c67e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c682:	e009      	b.n	800c698 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c68c:	e004      	b.n	800c698 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f99e 	bl	800c9d2 <USBD_CtlError>
  }
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	885b      	ldrh	r3, [r3, #2]
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	4b4e      	ldr	r3, [pc, #312]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c6b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6b8:	4b4d      	ldr	r3, [pc, #308]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d905      	bls.n	800c6cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f985 	bl	800c9d2 <USBD_CtlError>
    return USBD_FAIL;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e08c      	b.n	800c7e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d002      	beq.n	800c6de <USBD_SetConfig+0x3e>
 800c6d8:	2b03      	cmp	r3, #3
 800c6da:	d029      	beq.n	800c730 <USBD_SetConfig+0x90>
 800c6dc:	e075      	b.n	800c7ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6de:	4b44      	ldr	r3, [pc, #272]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d020      	beq.n	800c728 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6e6:	4b42      	ldr	r3, [pc, #264]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6f0:	4b3f      	ldr	r3, [pc, #252]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7fe ffe3 	bl	800b6c2 <USBD_SetClassConfig>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c700:	7bfb      	ldrb	r3, [r7, #15]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d008      	beq.n	800c718 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 f962 	bl	800c9d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2202      	movs	r2, #2
 800c712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c716:	e065      	b.n	800c7e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fa31 	bl	800cb80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2203      	movs	r2, #3
 800c722:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c726:	e05d      	b.n	800c7e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fa29 	bl	800cb80 <USBD_CtlSendStatus>
      break;
 800c72e:	e059      	b.n	800c7e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c730:	4b2f      	ldr	r3, [pc, #188]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d112      	bne.n	800c75e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2202      	movs	r2, #2
 800c73c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c740:	4b2b      	ldr	r3, [pc, #172]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	461a      	mov	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c74a:	4b29      	ldr	r3, [pc, #164]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7fe ffd2 	bl	800b6fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fa12 	bl	800cb80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c75c:	e042      	b.n	800c7e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c75e:	4b24      	ldr	r3, [pc, #144]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d02a      	beq.n	800c7c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	b2db      	uxtb	r3, r3
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7fe ffc0 	bl	800b6fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c77a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	461a      	mov	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c784:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	4619      	mov	r1, r3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7fe ff99 	bl	800b6c2 <USBD_SetClassConfig>
 800c790:	4603      	mov	r3, r0
 800c792:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00f      	beq.n	800c7ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f918 	bl	800c9d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7fe ffa5 	bl	800b6fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2202      	movs	r2, #2
 800c7b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c7b8:	e014      	b.n	800c7e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f9e0 	bl	800cb80 <USBD_CtlSendStatus>
      break;
 800c7c0:	e010      	b.n	800c7e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f9dc 	bl	800cb80 <USBD_CtlSendStatus>
      break;
 800c7c8:	e00c      	b.n	800c7e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 f900 	bl	800c9d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7d2:	4b07      	ldr	r3, [pc, #28]	@ (800c7f0 <USBD_SetConfig+0x150>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f7fe ff8e 	bl	800b6fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7e2:	bf00      	nop
  }

  return ret;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20000438 	.word	0x20000438

0800c7f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	88db      	ldrh	r3, [r3, #6]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d004      	beq.n	800c810 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f8e2 	bl	800c9d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c80e:	e023      	b.n	800c858 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c816:	b2db      	uxtb	r3, r3
 800c818:	2b02      	cmp	r3, #2
 800c81a:	dc02      	bgt.n	800c822 <USBD_GetConfig+0x2e>
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	dc03      	bgt.n	800c828 <USBD_GetConfig+0x34>
 800c820:	e015      	b.n	800c84e <USBD_GetConfig+0x5a>
 800c822:	2b03      	cmp	r3, #3
 800c824:	d00b      	beq.n	800c83e <USBD_GetConfig+0x4a>
 800c826:	e012      	b.n	800c84e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3308      	adds	r3, #8
 800c832:	2201      	movs	r2, #1
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f948 	bl	800cacc <USBD_CtlSendData>
        break;
 800c83c:	e00c      	b.n	800c858 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	3304      	adds	r3, #4
 800c842:	2201      	movs	r2, #1
 800c844:	4619      	mov	r1, r3
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f940 	bl	800cacc <USBD_CtlSendData>
        break;
 800c84c:	e004      	b.n	800c858 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f8be 	bl	800c9d2 <USBD_CtlError>
        break;
 800c856:	bf00      	nop
}
 800c858:	bf00      	nop
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c870:	b2db      	uxtb	r3, r3
 800c872:	3b01      	subs	r3, #1
 800c874:	2b02      	cmp	r3, #2
 800c876:	d81e      	bhi.n	800c8b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	88db      	ldrh	r3, [r3, #6]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d004      	beq.n	800c88a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c880:	6839      	ldr	r1, [r7, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f8a5 	bl	800c9d2 <USBD_CtlError>
        break;
 800c888:	e01a      	b.n	800c8c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c896:	2b00      	cmp	r3, #0
 800c898:	d005      	beq.n	800c8a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	f043 0202 	orr.w	r2, r3, #2
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	330c      	adds	r3, #12
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f90c 	bl	800cacc <USBD_CtlSendData>
      break;
 800c8b4:	e004      	b.n	800c8c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 f88a 	bl	800c9d2 <USBD_CtlError>
      break;
 800c8be:	bf00      	nop
  }
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	885b      	ldrh	r3, [r3, #2]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d107      	bne.n	800c8ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f94c 	bl	800cb80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8e8:	e013      	b.n	800c912 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	885b      	ldrh	r3, [r3, #2]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d10b      	bne.n	800c90a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	889b      	ldrh	r3, [r3, #4]
 800c8f6:	0a1b      	lsrs	r3, r3, #8
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f93c 	bl	800cb80 <USBD_CtlSendStatus>
}
 800c908:	e003      	b.n	800c912 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 f860 	bl	800c9d2 <USBD_CtlError>
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b082      	sub	sp, #8
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	3b01      	subs	r3, #1
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d80b      	bhi.n	800c94a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	885b      	ldrh	r3, [r3, #2]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d10c      	bne.n	800c954 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f91c 	bl	800cb80 <USBD_CtlSendStatus>
      }
      break;
 800c948:	e004      	b.n	800c954 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f840 	bl	800c9d2 <USBD_CtlError>
      break;
 800c952:	e000      	b.n	800c956 <USBD_ClrFeature+0x3c>
      break;
 800c954:	bf00      	nop
  }
}
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b084      	sub	sp, #16
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	781a      	ldrb	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3301      	adds	r3, #1
 800c978:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	781a      	ldrb	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff fa40 	bl	800be0e <SWAPBYTE>
 800c98e:	4603      	mov	r3, r0
 800c990:	461a      	mov	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	3301      	adds	r3, #1
 800c99a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f7ff fa33 	bl	800be0e <SWAPBYTE>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f7ff fa26 	bl	800be0e <SWAPBYTE>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	80da      	strh	r2, [r3, #6]
}
 800c9ca:	bf00      	nop
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9dc:	2180      	movs	r1, #128	@ 0x80
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f002 fe62 	bl	800f6a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f002 fe5e 	bl	800f6a8 <USBD_LL_StallEP>
}
 800c9ec:	bf00      	nop
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d042      	beq.n	800ca90 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ca0e:	6938      	ldr	r0, [r7, #16]
 800ca10:	f000 f842 	bl	800ca98 <USBD_GetLen>
 800ca14:	4603      	mov	r3, r0
 800ca16:	3301      	adds	r3, #1
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca1e:	d808      	bhi.n	800ca32 <USBD_GetString+0x3e>
 800ca20:	6938      	ldr	r0, [r7, #16]
 800ca22:	f000 f839 	bl	800ca98 <USBD_GetLen>
 800ca26:	4603      	mov	r3, r0
 800ca28:	3301      	adds	r3, #1
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	e001      	b.n	800ca36 <USBD_GetString+0x42>
 800ca32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	4413      	add	r3, r2
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	7812      	ldrb	r2, [r2, #0]
 800ca44:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	4413      	add	r3, r2
 800ca52:	2203      	movs	r2, #3
 800ca54:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca56:	7dfb      	ldrb	r3, [r7, #23]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca5c:	e013      	b.n	800ca86 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	4413      	add	r3, r2
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	7812      	ldrb	r2, [r2, #0]
 800ca68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	613b      	str	r3, [r7, #16]
    idx++;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	3301      	adds	r3, #1
 800ca74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca76:	7dfb      	ldrb	r3, [r7, #23]
 800ca78:	68ba      	ldr	r2, [r7, #8]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	3301      	adds	r3, #1
 800ca84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1e7      	bne.n	800ca5e <USBD_GetString+0x6a>
 800ca8e:	e000      	b.n	800ca92 <USBD_GetString+0x9e>
    return;
 800ca90:	bf00      	nop
  }
}
 800ca92:	3718      	adds	r7, #24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800caa0:	2300      	movs	r3, #0
 800caa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800caa8:	e005      	b.n	800cab6 <USBD_GetLen+0x1e>
  {
    len++;
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	3301      	adds	r3, #1
 800caae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	3301      	adds	r3, #1
 800cab4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1f5      	bne.n	800caaa <USBD_GetLen+0x12>
  }

  return len;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2202      	movs	r2, #2
 800cadc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	2100      	movs	r1, #0
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f002 fe61 	bl	800f7ba <USBD_LL_Transmit>

  return USBD_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	2100      	movs	r1, #0
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f002 fe50 	bl	800f7ba <USBD_LL_Transmit>

  return USBD_OK;
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2203      	movs	r2, #3
 800cb34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f002 fe54 	bl	800f7fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	2100      	movs	r1, #0
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f002 fe43 	bl	800f7fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2204      	movs	r2, #4
 800cb8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb90:	2300      	movs	r3, #0
 800cb92:	2200      	movs	r2, #0
 800cb94:	2100      	movs	r1, #0
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f002 fe0f 	bl	800f7ba <USBD_LL_Transmit>

  return USBD_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2205      	movs	r2, #5
 800cbb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2100      	movs	r1, #0
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f002 fe1d 	bl	800f7fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
 800cbd8:	4a08      	ldr	r2, [pc, #32]	@ (800cbfc <disk_status+0x30>)
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	79fa      	ldrb	r2, [r7, #7]
 800cbe4:	4905      	ldr	r1, [pc, #20]	@ (800cbfc <disk_status+0x30>)
 800cbe6:	440a      	add	r2, r1
 800cbe8:	7a12      	ldrb	r2, [r2, #8]
 800cbea:	4610      	mov	r0, r2
 800cbec:	4798      	blx	r3
 800cbee:	4603      	mov	r3, r0
 800cbf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	20000464 	.word	0x20000464

0800cc00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cc0e:	79fb      	ldrb	r3, [r7, #7]
 800cc10:	4a0e      	ldr	r2, [pc, #56]	@ (800cc4c <disk_initialize+0x4c>)
 800cc12:	5cd3      	ldrb	r3, [r2, r3]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d114      	bne.n	800cc42 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	4a0c      	ldr	r2, [pc, #48]	@ (800cc4c <disk_initialize+0x4c>)
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	79fa      	ldrb	r2, [r7, #7]
 800cc26:	4909      	ldr	r1, [pc, #36]	@ (800cc4c <disk_initialize+0x4c>)
 800cc28:	440a      	add	r2, r1
 800cc2a:	7a12      	ldrb	r2, [r2, #8]
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	4798      	blx	r3
 800cc30:	4603      	mov	r3, r0
 800cc32:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d103      	bne.n	800cc42 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	4a03      	ldr	r2, [pc, #12]	@ (800cc4c <disk_initialize+0x4c>)
 800cc3e:	2101      	movs	r1, #1
 800cc40:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	20000464 	.word	0x20000464

0800cc50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc50:	b590      	push	{r4, r7, lr}
 800cc52:	b087      	sub	sp, #28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60b9      	str	r1, [r7, #8]
 800cc58:	607a      	str	r2, [r7, #4]
 800cc5a:	603b      	str	r3, [r7, #0]
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4a0a      	ldr	r2, [pc, #40]	@ (800cc8c <disk_read+0x3c>)
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	689c      	ldr	r4, [r3, #8]
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
 800cc6e:	4a07      	ldr	r2, [pc, #28]	@ (800cc8c <disk_read+0x3c>)
 800cc70:	4413      	add	r3, r2
 800cc72:	7a18      	ldrb	r0, [r3, #8]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	47a0      	blx	r4
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	371c      	adds	r7, #28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd90      	pop	{r4, r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20000464 	.word	0x20000464

0800cc90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc90:	b590      	push	{r4, r7, lr}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60b9      	str	r1, [r7, #8]
 800cc98:	607a      	str	r2, [r7, #4]
 800cc9a:	603b      	str	r3, [r7, #0]
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	4a0a      	ldr	r2, [pc, #40]	@ (800cccc <disk_write+0x3c>)
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	4413      	add	r3, r2
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	68dc      	ldr	r4, [r3, #12]
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	4a07      	ldr	r2, [pc, #28]	@ (800cccc <disk_write+0x3c>)
 800ccb0:	4413      	add	r3, r2
 800ccb2:	7a18      	ldrb	r0, [r3, #8]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	68b9      	ldr	r1, [r7, #8]
 800ccba:	47a0      	blx	r4
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	75fb      	strb	r3, [r7, #23]
  return res;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	371c      	adds	r7, #28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd90      	pop	{r4, r7, pc}
 800ccca:	bf00      	nop
 800cccc:	20000464 	.word	0x20000464

0800ccd0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	603a      	str	r2, [r7, #0]
 800ccda:	71fb      	strb	r3, [r7, #7]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cce0:	79fb      	ldrb	r3, [r7, #7]
 800cce2:	4a09      	ldr	r2, [pc, #36]	@ (800cd08 <disk_ioctl+0x38>)
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	79fa      	ldrb	r2, [r7, #7]
 800ccee:	4906      	ldr	r1, [pc, #24]	@ (800cd08 <disk_ioctl+0x38>)
 800ccf0:	440a      	add	r2, r1
 800ccf2:	7a10      	ldrb	r0, [r2, #8]
 800ccf4:	79b9      	ldrb	r1, [r7, #6]
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	4798      	blx	r3
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]
  return res;
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	20000464 	.word	0x20000464

0800cd0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3301      	adds	r3, #1
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cd1c:	89fb      	ldrh	r3, [r7, #14]
 800cd1e:	021b      	lsls	r3, r3, #8
 800cd20:	b21a      	sxth	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	b21b      	sxth	r3, r3
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	b21b      	sxth	r3, r3
 800cd2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cd2e:	89fb      	ldrh	r3, [r7, #14]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	3303      	adds	r3, #3
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	3202      	adds	r2, #2
 800cd54:	7812      	ldrb	r2, [r2, #0]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	3201      	adds	r2, #1
 800cd62:	7812      	ldrb	r2, [r2, #0]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	021b      	lsls	r3, r3, #8
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	7812      	ldrb	r2, [r2, #0]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd74:	68fb      	ldr	r3, [r7, #12]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd82:	b480      	push	{r7}
 800cd84:	b083      	sub	sp, #12
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	1c5a      	adds	r2, r3, #1
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	887a      	ldrh	r2, [r7, #2]
 800cd96:	b2d2      	uxtb	r2, r2
 800cd98:	701a      	strb	r2, [r3, #0]
 800cd9a:	887b      	ldrh	r3, [r7, #2]
 800cd9c:	0a1b      	lsrs	r3, r3, #8
 800cd9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	1c5a      	adds	r2, r3, #1
 800cda4:	607a      	str	r2, [r7, #4]
 800cda6:	887a      	ldrh	r2, [r7, #2]
 800cda8:	b2d2      	uxtb	r2, r2
 800cdaa:	701a      	strb	r2, [r3, #0]
}
 800cdac:	bf00      	nop
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	607a      	str	r2, [r7, #4]
 800cdc8:	683a      	ldr	r2, [r7, #0]
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	701a      	strb	r2, [r3, #0]
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	0a1b      	lsrs	r3, r3, #8
 800cdd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	607a      	str	r2, [r7, #4]
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	b2d2      	uxtb	r2, r2
 800cdde:	701a      	strb	r2, [r3, #0]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	0a1b      	lsrs	r3, r3, #8
 800cde4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	607a      	str	r2, [r7, #4]
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	b2d2      	uxtb	r2, r2
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	0a1b      	lsrs	r3, r3, #8
 800cdf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	607a      	str	r2, [r7, #4]
 800cdfe:	683a      	ldr	r2, [r7, #0]
 800ce00:	b2d2      	uxtb	r2, r2
 800ce02:	701a      	strb	r2, [r3, #0]
}
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ce10:	b480      	push	{r7}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00d      	beq.n	800ce46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	1c53      	adds	r3, r2, #1
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	1c59      	adds	r1, r3, #1
 800ce34:	6179      	str	r1, [r7, #20]
 800ce36:	7812      	ldrb	r2, [r2, #0]
 800ce38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	607b      	str	r3, [r7, #4]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1f1      	bne.n	800ce2a <mem_cpy+0x1a>
	}
}
 800ce46:	bf00      	nop
 800ce48:	371c      	adds	r7, #28
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce52:	b480      	push	{r7}
 800ce54:	b087      	sub	sp, #28
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	60f8      	str	r0, [r7, #12]
 800ce5a:	60b9      	str	r1, [r7, #8]
 800ce5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	1c5a      	adds	r2, r3, #1
 800ce66:	617a      	str	r2, [r7, #20]
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	b2d2      	uxtb	r2, r2
 800ce6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3b01      	subs	r3, #1
 800ce72:	607b      	str	r3, [r7, #4]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1f3      	bne.n	800ce62 <mem_set+0x10>
}
 800ce7a:	bf00      	nop
 800ce7c:	bf00      	nop
 800ce7e:	371c      	adds	r7, #28
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce88:	b480      	push	{r7}
 800ce8a:	b089      	sub	sp, #36	@ 0x24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	61fb      	str	r3, [r7, #28]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	1c5a      	adds	r2, r3, #1
 800cea4:	61fa      	str	r2, [r7, #28]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	1c5a      	adds	r2, r3, #1
 800ceae:	61ba      	str	r2, [r7, #24]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	1acb      	subs	r3, r1, r3
 800ceb4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	607b      	str	r3, [r7, #4]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <mem_cmp+0x40>
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0eb      	beq.n	800cea0 <mem_cmp+0x18>

	return r;
 800cec8:	697b      	ldr	r3, [r7, #20]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3724      	adds	r7, #36	@ 0x24
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ced6:	b480      	push	{r7}
 800ced8:	b083      	sub	sp, #12
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cee0:	e002      	b.n	800cee8 <chk_chr+0x12>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	3301      	adds	r3, #1
 800cee6:	607b      	str	r3, [r7, #4]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d005      	beq.n	800cefc <chk_chr+0x26>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d1f2      	bne.n	800cee2 <chk_chr+0xc>
	return *str;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	781b      	ldrb	r3, [r3, #0]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf16:	2300      	movs	r3, #0
 800cf18:	60bb      	str	r3, [r7, #8]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	60fb      	str	r3, [r7, #12]
 800cf1e:	e029      	b.n	800cf74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cf20:	4a27      	ldr	r2, [pc, #156]	@ (800cfc0 <chk_lock+0xb4>)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	011b      	lsls	r3, r3, #4
 800cf26:	4413      	add	r3, r2
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d01d      	beq.n	800cf6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf2e:	4a24      	ldr	r2, [pc, #144]	@ (800cfc0 <chk_lock+0xb4>)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	4413      	add	r3, r2
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d116      	bne.n	800cf6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cf40:	4a1f      	ldr	r2, [pc, #124]	@ (800cfc0 <chk_lock+0xb4>)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	011b      	lsls	r3, r3, #4
 800cf46:	4413      	add	r3, r2
 800cf48:	3304      	adds	r3, #4
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d10c      	bne.n	800cf6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf54:	4a1a      	ldr	r2, [pc, #104]	@ (800cfc0 <chk_lock+0xb4>)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	011b      	lsls	r3, r3, #4
 800cf5a:	4413      	add	r3, r2
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d102      	bne.n	800cf6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf68:	e007      	b.n	800cf7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	3301      	adds	r3, #1
 800cf72:	60fb      	str	r3, [r7, #12]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d9d2      	bls.n	800cf20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d109      	bne.n	800cf94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d102      	bne.n	800cf8c <chk_lock+0x80>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d101      	bne.n	800cf90 <chk_lock+0x84>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e010      	b.n	800cfb2 <chk_lock+0xa6>
 800cf90:	2312      	movs	r3, #18
 800cf92:	e00e      	b.n	800cfb2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d108      	bne.n	800cfac <chk_lock+0xa0>
 800cf9a:	4a09      	ldr	r2, [pc, #36]	@ (800cfc0 <chk_lock+0xb4>)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	011b      	lsls	r3, r3, #4
 800cfa0:	4413      	add	r3, r2
 800cfa2:	330c      	adds	r3, #12
 800cfa4:	881b      	ldrh	r3, [r3, #0]
 800cfa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfaa:	d101      	bne.n	800cfb0 <chk_lock+0xa4>
 800cfac:	2310      	movs	r3, #16
 800cfae:	e000      	b.n	800cfb2 <chk_lock+0xa6>
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	20000444 	.word	0x20000444

0800cfc4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	607b      	str	r3, [r7, #4]
 800cfce:	e002      	b.n	800cfd6 <enq_lock+0x12>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	607b      	str	r3, [r7, #4]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d806      	bhi.n	800cfea <enq_lock+0x26>
 800cfdc:	4a09      	ldr	r2, [pc, #36]	@ (800d004 <enq_lock+0x40>)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	011b      	lsls	r3, r3, #4
 800cfe2:	4413      	add	r3, r2
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1f2      	bne.n	800cfd0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	bf14      	ite	ne
 800cff0:	2301      	movne	r3, #1
 800cff2:	2300      	moveq	r3, #0
 800cff4:	b2db      	uxtb	r3, r3
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	370c      	adds	r7, #12
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	20000444 	.word	0x20000444

0800d008 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d012:	2300      	movs	r3, #0
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	e01f      	b.n	800d058 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d018:	4a41      	ldr	r2, [pc, #260]	@ (800d120 <inc_lock+0x118>)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	011b      	lsls	r3, r3, #4
 800d01e:	4413      	add	r3, r2
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	429a      	cmp	r2, r3
 800d028:	d113      	bne.n	800d052 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d02a:	4a3d      	ldr	r2, [pc, #244]	@ (800d120 <inc_lock+0x118>)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	011b      	lsls	r3, r3, #4
 800d030:	4413      	add	r3, r2
 800d032:	3304      	adds	r3, #4
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d109      	bne.n	800d052 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d03e:	4a38      	ldr	r2, [pc, #224]	@ (800d120 <inc_lock+0x118>)
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	011b      	lsls	r3, r3, #4
 800d044:	4413      	add	r3, r2
 800d046:	3308      	adds	r3, #8
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d04e:	429a      	cmp	r2, r3
 800d050:	d006      	beq.n	800d060 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3301      	adds	r3, #1
 800d056:	60fb      	str	r3, [r7, #12]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d9dc      	bls.n	800d018 <inc_lock+0x10>
 800d05e:	e000      	b.n	800d062 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d060:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2b02      	cmp	r3, #2
 800d066:	d132      	bne.n	800d0ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d068:	2300      	movs	r3, #0
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	e002      	b.n	800d074 <inc_lock+0x6c>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3301      	adds	r3, #1
 800d072:	60fb      	str	r3, [r7, #12]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2b01      	cmp	r3, #1
 800d078:	d806      	bhi.n	800d088 <inc_lock+0x80>
 800d07a:	4a29      	ldr	r2, [pc, #164]	@ (800d120 <inc_lock+0x118>)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	011b      	lsls	r3, r3, #4
 800d080:	4413      	add	r3, r2
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1f2      	bne.n	800d06e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	d101      	bne.n	800d092 <inc_lock+0x8a>
 800d08e:	2300      	movs	r3, #0
 800d090:	e040      	b.n	800d114 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	4922      	ldr	r1, [pc, #136]	@ (800d120 <inc_lock+0x118>)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	011b      	lsls	r3, r3, #4
 800d09c:	440b      	add	r3, r1
 800d09e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	689a      	ldr	r2, [r3, #8]
 800d0a4:	491e      	ldr	r1, [pc, #120]	@ (800d120 <inc_lock+0x118>)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	440b      	add	r3, r1
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	695a      	ldr	r2, [r3, #20]
 800d0b4:	491a      	ldr	r1, [pc, #104]	@ (800d120 <inc_lock+0x118>)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3308      	adds	r3, #8
 800d0be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d0c0:	4a17      	ldr	r2, [pc, #92]	@ (800d120 <inc_lock+0x118>)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	011b      	lsls	r3, r3, #4
 800d0c6:	4413      	add	r3, r2
 800d0c8:	330c      	adds	r3, #12
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <inc_lock+0xe0>
 800d0d4:	4a12      	ldr	r2, [pc, #72]	@ (800d120 <inc_lock+0x118>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	4413      	add	r3, r2
 800d0dc:	330c      	adds	r3, #12
 800d0de:	881b      	ldrh	r3, [r3, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <inc_lock+0xe0>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	e015      	b.n	800d114 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d108      	bne.n	800d100 <inc_lock+0xf8>
 800d0ee:	4a0c      	ldr	r2, [pc, #48]	@ (800d120 <inc_lock+0x118>)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	011b      	lsls	r3, r3, #4
 800d0f4:	4413      	add	r3, r2
 800d0f6:	330c      	adds	r3, #12
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	e001      	b.n	800d104 <inc_lock+0xfc>
 800d100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d104:	4906      	ldr	r1, [pc, #24]	@ (800d120 <inc_lock+0x118>)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	011b      	lsls	r3, r3, #4
 800d10a:	440b      	add	r3, r1
 800d10c:	330c      	adds	r3, #12
 800d10e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3301      	adds	r3, #1
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	20000444 	.word	0x20000444

0800d124 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	3b01      	subs	r3, #1
 800d130:	607b      	str	r3, [r7, #4]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d825      	bhi.n	800d184 <dec_lock+0x60>
		n = Files[i].ctr;
 800d138:	4a17      	ldr	r2, [pc, #92]	@ (800d198 <dec_lock+0x74>)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	011b      	lsls	r3, r3, #4
 800d13e:	4413      	add	r3, r2
 800d140:	330c      	adds	r3, #12
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d146:	89fb      	ldrh	r3, [r7, #14]
 800d148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d14c:	d101      	bne.n	800d152 <dec_lock+0x2e>
 800d14e:	2300      	movs	r3, #0
 800d150:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d152:	89fb      	ldrh	r3, [r7, #14]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <dec_lock+0x3a>
 800d158:	89fb      	ldrh	r3, [r7, #14]
 800d15a:	3b01      	subs	r3, #1
 800d15c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d15e:	4a0e      	ldr	r2, [pc, #56]	@ (800d198 <dec_lock+0x74>)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	011b      	lsls	r3, r3, #4
 800d164:	4413      	add	r3, r2
 800d166:	330c      	adds	r3, #12
 800d168:	89fa      	ldrh	r2, [r7, #14]
 800d16a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d16c:	89fb      	ldrh	r3, [r7, #14]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d105      	bne.n	800d17e <dec_lock+0x5a>
 800d172:	4a09      	ldr	r2, [pc, #36]	@ (800d198 <dec_lock+0x74>)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	011b      	lsls	r3, r3, #4
 800d178:	4413      	add	r3, r2
 800d17a:	2200      	movs	r2, #0
 800d17c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	737b      	strb	r3, [r7, #13]
 800d182:	e001      	b.n	800d188 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d184:	2302      	movs	r3, #2
 800d186:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d188:	7b7b      	ldrb	r3, [r7, #13]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	20000444 	.word	0x20000444

0800d19c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	60fb      	str	r3, [r7, #12]
 800d1a8:	e010      	b.n	800d1cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d1aa:	4a0d      	ldr	r2, [pc, #52]	@ (800d1e0 <clear_lock+0x44>)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	011b      	lsls	r3, r3, #4
 800d1b0:	4413      	add	r3, r2
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d105      	bne.n	800d1c6 <clear_lock+0x2a>
 800d1ba:	4a09      	ldr	r2, [pc, #36]	@ (800d1e0 <clear_lock+0x44>)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	011b      	lsls	r3, r3, #4
 800d1c0:	4413      	add	r3, r2
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	60fb      	str	r3, [r7, #12]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d9eb      	bls.n	800d1aa <clear_lock+0xe>
	}
}
 800d1d2:	bf00      	nop
 800d1d4:	bf00      	nop
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	20000444 	.word	0x20000444

0800d1e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	78db      	ldrb	r3, [r3, #3]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d034      	beq.n	800d262 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	7858      	ldrb	r0, [r3, #1]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d208:	2301      	movs	r3, #1
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	f7ff fd40 	bl	800cc90 <disk_write>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d002      	beq.n	800d21c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d216:	2301      	movs	r3, #1
 800d218:	73fb      	strb	r3, [r7, #15]
 800d21a:	e022      	b.n	800d262 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	1ad2      	subs	r2, r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	699b      	ldr	r3, [r3, #24]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d217      	bcs.n	800d262 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	789b      	ldrb	r3, [r3, #2]
 800d236:	613b      	str	r3, [r7, #16]
 800d238:	e010      	b.n	800d25c <sync_window+0x78>
					wsect += fs->fsize;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	4413      	add	r3, r2
 800d242:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	7858      	ldrb	r0, [r3, #1]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d24e:	2301      	movs	r3, #1
 800d250:	697a      	ldr	r2, [r7, #20]
 800d252:	f7ff fd1d 	bl	800cc90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	3b01      	subs	r3, #1
 800d25a:	613b      	str	r3, [r7, #16]
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d8eb      	bhi.n	800d23a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d262:	7bfb      	ldrb	r3, [r7, #15]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27e:	683a      	ldr	r2, [r7, #0]
 800d280:	429a      	cmp	r2, r3
 800d282:	d01b      	beq.n	800d2bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7ff ffad 	bl	800d1e4 <sync_window>
 800d28a:	4603      	mov	r3, r0
 800d28c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d113      	bne.n	800d2bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	7858      	ldrb	r0, [r3, #1]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d29e:	2301      	movs	r3, #1
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	f7ff fcd5 	bl	800cc50 <disk_read>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d004      	beq.n	800d2b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
	...

0800d2c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7ff ff87 	bl	800d1e4 <sync_window>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d158      	bne.n	800d392 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d148      	bne.n	800d37a <sync_fs+0xb2>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	791b      	ldrb	r3, [r3, #4]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d144      	bne.n	800d37a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3330      	adds	r3, #48	@ 0x30
 800d2f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff fda9 	bl	800ce52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3330      	adds	r3, #48	@ 0x30
 800d304:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d308:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff fd38 	bl	800cd82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3330      	adds	r3, #48	@ 0x30
 800d316:	4921      	ldr	r1, [pc, #132]	@ (800d39c <sync_fs+0xd4>)
 800d318:	4618      	mov	r0, r3
 800d31a:	f7ff fd4d 	bl	800cdb8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	3330      	adds	r3, #48	@ 0x30
 800d322:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d326:	491e      	ldr	r1, [pc, #120]	@ (800d3a0 <sync_fs+0xd8>)
 800d328:	4618      	mov	r0, r3
 800d32a:	f7ff fd45 	bl	800cdb8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3330      	adds	r3, #48	@ 0x30
 800d332:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	4619      	mov	r1, r3
 800d33c:	4610      	mov	r0, r2
 800d33e:	f7ff fd3b 	bl	800cdb8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3330      	adds	r3, #48	@ 0x30
 800d346:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	4619      	mov	r1, r3
 800d350:	4610      	mov	r0, r2
 800d352:	f7ff fd31 	bl	800cdb8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	69db      	ldr	r3, [r3, #28]
 800d35a:	1c5a      	adds	r2, r3, #1
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	7858      	ldrb	r0, [r3, #1]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d36e:	2301      	movs	r3, #1
 800d370:	f7ff fc8e 	bl	800cc90 <disk_write>
			fs->fsi_flag = 0;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	785b      	ldrb	r3, [r3, #1]
 800d37e:	2200      	movs	r2, #0
 800d380:	2100      	movs	r1, #0
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fca4 	bl	800ccd0 <disk_ioctl>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <sync_fs+0xca>
 800d38e:	2301      	movs	r3, #1
 800d390:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d392:	7bfb      	ldrb	r3, [r7, #15]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	41615252 	.word	0x41615252
 800d3a0:	61417272 	.word	0x61417272

0800d3a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	3b02      	subs	r3, #2
 800d3b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	3b02      	subs	r3, #2
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d301      	bcc.n	800d3c4 <clust2sect+0x20>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	e008      	b.n	800d3d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	895b      	ldrh	r3, [r3, #10]
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	fb03 f202 	mul.w	r2, r3, r2
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3d4:	4413      	add	r3, r2
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b086      	sub	sp, #24
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d904      	bls.n	800d402 <get_fat+0x20>
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	683a      	ldr	r2, [r7, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d302      	bcc.n	800d408 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d402:	2301      	movs	r3, #1
 800d404:	617b      	str	r3, [r7, #20]
 800d406:	e08e      	b.n	800d526 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d408:	f04f 33ff 	mov.w	r3, #4294967295
 800d40c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b03      	cmp	r3, #3
 800d414:	d061      	beq.n	800d4da <get_fat+0xf8>
 800d416:	2b03      	cmp	r3, #3
 800d418:	dc7b      	bgt.n	800d512 <get_fat+0x130>
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d002      	beq.n	800d424 <get_fat+0x42>
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d041      	beq.n	800d4a6 <get_fat+0xc4>
 800d422:	e076      	b.n	800d512 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	60fb      	str	r3, [r7, #12]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	085b      	lsrs	r3, r3, #1
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4413      	add	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	6a1a      	ldr	r2, [r3, #32]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	0a5b      	lsrs	r3, r3, #9
 800d43a:	4413      	add	r3, r2
 800d43c:	4619      	mov	r1, r3
 800d43e:	6938      	ldr	r0, [r7, #16]
 800d440:	f7ff ff14 	bl	800d26c <move_window>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d166      	bne.n	800d518 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	1c5a      	adds	r2, r3, #1
 800d44e:	60fa      	str	r2, [r7, #12]
 800d450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d454:	693a      	ldr	r2, [r7, #16]
 800d456:	4413      	add	r3, r2
 800d458:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d45c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	6a1a      	ldr	r2, [r3, #32]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	0a5b      	lsrs	r3, r3, #9
 800d466:	4413      	add	r3, r2
 800d468:	4619      	mov	r1, r3
 800d46a:	6938      	ldr	r0, [r7, #16]
 800d46c:	f7ff fefe 	bl	800d26c <move_window>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d152      	bne.n	800d51c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	4413      	add	r3, r2
 800d480:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d484:	021b      	lsls	r3, r3, #8
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	4313      	orrs	r3, r2
 800d48a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <get_fat+0xba>
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	091b      	lsrs	r3, r3, #4
 800d49a:	e002      	b.n	800d4a2 <get_fat+0xc0>
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4a2:	617b      	str	r3, [r7, #20]
			break;
 800d4a4:	e03f      	b.n	800d526 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	6a1a      	ldr	r2, [r3, #32]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	0a1b      	lsrs	r3, r3, #8
 800d4ae:	4413      	add	r3, r2
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6938      	ldr	r0, [r7, #16]
 800d4b4:	f7ff feda 	bl	800d26c <move_window>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d130      	bne.n	800d520 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d4cc:	4413      	add	r3, r2
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff fc1c 	bl	800cd0c <ld_word>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	617b      	str	r3, [r7, #20]
			break;
 800d4d8:	e025      	b.n	800d526 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	6a1a      	ldr	r2, [r3, #32]
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	09db      	lsrs	r3, r3, #7
 800d4e2:	4413      	add	r3, r2
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6938      	ldr	r0, [r7, #16]
 800d4e8:	f7ff fec0 	bl	800d26c <move_window>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d118      	bne.n	800d524 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d500:	4413      	add	r3, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff fc1a 	bl	800cd3c <ld_dword>
 800d508:	4603      	mov	r3, r0
 800d50a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d50e:	617b      	str	r3, [r7, #20]
			break;
 800d510:	e009      	b.n	800d526 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d512:	2301      	movs	r3, #1
 800d514:	617b      	str	r3, [r7, #20]
 800d516:	e006      	b.n	800d526 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d518:	bf00      	nop
 800d51a:	e004      	b.n	800d526 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d51c:	bf00      	nop
 800d51e:	e002      	b.n	800d526 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d520:	bf00      	nop
 800d522:	e000      	b.n	800d526 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d524:	bf00      	nop
		}
	}

	return val;
 800d526:	697b      	ldr	r3, [r7, #20]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3718      	adds	r7, #24
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b089      	sub	sp, #36	@ 0x24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d53c:	2302      	movs	r3, #2
 800d53e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	2b01      	cmp	r3, #1
 800d544:	f240 80d9 	bls.w	800d6fa <put_fat+0x1ca>
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	695b      	ldr	r3, [r3, #20]
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	429a      	cmp	r2, r3
 800d550:	f080 80d3 	bcs.w	800d6fa <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	2b03      	cmp	r3, #3
 800d55a:	f000 8096 	beq.w	800d68a <put_fat+0x15a>
 800d55e:	2b03      	cmp	r3, #3
 800d560:	f300 80cb 	bgt.w	800d6fa <put_fat+0x1ca>
 800d564:	2b01      	cmp	r3, #1
 800d566:	d002      	beq.n	800d56e <put_fat+0x3e>
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d06e      	beq.n	800d64a <put_fat+0x11a>
 800d56c:	e0c5      	b.n	800d6fa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	61bb      	str	r3, [r7, #24]
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	085b      	lsrs	r3, r3, #1
 800d576:	69ba      	ldr	r2, [r7, #24]
 800d578:	4413      	add	r3, r2
 800d57a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6a1a      	ldr	r2, [r3, #32]
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	0a5b      	lsrs	r3, r3, #9
 800d584:	4413      	add	r3, r2
 800d586:	4619      	mov	r1, r3
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f7ff fe6f 	bl	800d26c <move_window>
 800d58e:	4603      	mov	r3, r0
 800d590:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d592:	7ffb      	ldrb	r3, [r7, #31]
 800d594:	2b00      	cmp	r3, #0
 800d596:	f040 80a9 	bne.w	800d6ec <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	1c59      	adds	r1, r3, #1
 800d5a4:	61b9      	str	r1, [r7, #24]
 800d5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5aa:	4413      	add	r3, r2
 800d5ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	f003 0301 	and.w	r3, r3, #1
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00d      	beq.n	800d5d4 <put_fat+0xa4>
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	f003 030f 	and.w	r3, r3, #15
 800d5c2:	b25a      	sxtb	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	011b      	lsls	r3, r3, #4
 800d5ca:	b25b      	sxtb	r3, r3
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	b25b      	sxtb	r3, r3
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	e001      	b.n	800d5d8 <put_fat+0xa8>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6a1a      	ldr	r2, [r3, #32]
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	0a5b      	lsrs	r3, r3, #9
 800d5ea:	4413      	add	r3, r2
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f7ff fe3c 	bl	800d26c <move_window>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5f8:	7ffb      	ldrb	r3, [r7, #31]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d178      	bne.n	800d6f0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60a:	4413      	add	r3, r2
 800d60c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	f003 0301 	and.w	r3, r3, #1
 800d614:	2b00      	cmp	r3, #0
 800d616:	d003      	beq.n	800d620 <put_fat+0xf0>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	091b      	lsrs	r3, r3, #4
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	e00e      	b.n	800d63e <put_fat+0x10e>
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	b25b      	sxtb	r3, r3
 800d626:	f023 030f 	bic.w	r3, r3, #15
 800d62a:	b25a      	sxtb	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	0a1b      	lsrs	r3, r3, #8
 800d630:	b25b      	sxtb	r3, r3
 800d632:	f003 030f 	and.w	r3, r3, #15
 800d636:	b25b      	sxtb	r3, r3
 800d638:	4313      	orrs	r3, r2
 800d63a:	b25b      	sxtb	r3, r3
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2201      	movs	r2, #1
 800d646:	70da      	strb	r2, [r3, #3]
			break;
 800d648:	e057      	b.n	800d6fa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6a1a      	ldr	r2, [r3, #32]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	0a1b      	lsrs	r3, r3, #8
 800d652:	4413      	add	r3, r2
 800d654:	4619      	mov	r1, r3
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f7ff fe08 	bl	800d26c <move_window>
 800d65c:	4603      	mov	r3, r0
 800d65e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d660:	7ffb      	ldrb	r3, [r7, #31]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d146      	bne.n	800d6f4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d674:	4413      	add	r3, r2
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	b292      	uxth	r2, r2
 800d67a:	4611      	mov	r1, r2
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7ff fb80 	bl	800cd82 <st_word>
			fs->wflag = 1;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2201      	movs	r2, #1
 800d686:	70da      	strb	r2, [r3, #3]
			break;
 800d688:	e037      	b.n	800d6fa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6a1a      	ldr	r2, [r3, #32]
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	09db      	lsrs	r3, r3, #7
 800d692:	4413      	add	r3, r2
 800d694:	4619      	mov	r1, r3
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f7ff fde8 	bl	800d26c <move_window>
 800d69c:	4603      	mov	r3, r0
 800d69e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6a0:	7ffb      	ldrb	r3, [r7, #31]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d128      	bne.n	800d6f8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d6ba:	4413      	add	r3, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fb3d 	bl	800cd3c <ld_dword>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d6c8:	4323      	orrs	r3, r4
 800d6ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d6da:	4413      	add	r3, r2
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7ff fb6a 	bl	800cdb8 <st_dword>
			fs->wflag = 1;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	70da      	strb	r2, [r3, #3]
			break;
 800d6ea:	e006      	b.n	800d6fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6ec:	bf00      	nop
 800d6ee:	e004      	b.n	800d6fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6f0:	bf00      	nop
 800d6f2:	e002      	b.n	800d6fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6f4:	bf00      	nop
 800d6f6:	e000      	b.n	800d6fa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6f8:	bf00      	nop
		}
	}
	return res;
 800d6fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3724      	adds	r7, #36	@ 0x24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd90      	pop	{r4, r7, pc}

0800d704 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d904      	bls.n	800d72a <remove_chain+0x26>
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	429a      	cmp	r2, r3
 800d728:	d301      	bcc.n	800d72e <remove_chain+0x2a>
 800d72a:	2302      	movs	r3, #2
 800d72c:	e04b      	b.n	800d7c6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00c      	beq.n	800d74e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d734:	f04f 32ff 	mov.w	r2, #4294967295
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	69b8      	ldr	r0, [r7, #24]
 800d73c:	f7ff fef8 	bl	800d530 <put_fat>
 800d740:	4603      	mov	r3, r0
 800d742:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d744:	7ffb      	ldrb	r3, [r7, #31]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <remove_chain+0x4a>
 800d74a:	7ffb      	ldrb	r3, [r7, #31]
 800d74c:	e03b      	b.n	800d7c6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7ff fe46 	bl	800d3e2 <get_fat>
 800d756:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d031      	beq.n	800d7c2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b01      	cmp	r3, #1
 800d762:	d101      	bne.n	800d768 <remove_chain+0x64>
 800d764:	2302      	movs	r3, #2
 800d766:	e02e      	b.n	800d7c6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76e:	d101      	bne.n	800d774 <remove_chain+0x70>
 800d770:	2301      	movs	r3, #1
 800d772:	e028      	b.n	800d7c6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d774:	2200      	movs	r2, #0
 800d776:	68b9      	ldr	r1, [r7, #8]
 800d778:	69b8      	ldr	r0, [r7, #24]
 800d77a:	f7ff fed9 	bl	800d530 <put_fat>
 800d77e:	4603      	mov	r3, r0
 800d780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d782:	7ffb      	ldrb	r3, [r7, #31]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d001      	beq.n	800d78c <remove_chain+0x88>
 800d788:	7ffb      	ldrb	r3, [r7, #31]
 800d78a:	e01c      	b.n	800d7c6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	691a      	ldr	r2, [r3, #16]
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	695b      	ldr	r3, [r3, #20]
 800d794:	3b02      	subs	r3, #2
 800d796:	429a      	cmp	r2, r3
 800d798:	d20b      	bcs.n	800d7b2 <remove_chain+0xae>
			fs->free_clst++;
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	791b      	ldrb	r3, [r3, #4]
 800d7a8:	f043 0301 	orr.w	r3, r3, #1
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	68ba      	ldr	r2, [r7, #8]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d3c6      	bcc.n	800d74e <remove_chain+0x4a>
 800d7c0:	e000      	b.n	800d7c4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d7c2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3720      	adds	r7, #32
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b088      	sub	sp, #32
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10d      	bne.n	800d800 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d004      	beq.n	800d7fa <create_chain+0x2c>
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	695b      	ldr	r3, [r3, #20]
 800d7f4:	69ba      	ldr	r2, [r7, #24]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d31b      	bcc.n	800d832 <create_chain+0x64>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	61bb      	str	r3, [r7, #24]
 800d7fe:	e018      	b.n	800d832 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7ff fded 	bl	800d3e2 <get_fat>
 800d808:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d801      	bhi.n	800d814 <create_chain+0x46>
 800d810:	2301      	movs	r3, #1
 800d812:	e070      	b.n	800d8f6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81a:	d101      	bne.n	800d820 <create_chain+0x52>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	e06a      	b.n	800d8f6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	429a      	cmp	r2, r3
 800d828:	d201      	bcs.n	800d82e <create_chain+0x60>
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	e063      	b.n	800d8f6 <create_chain+0x128>
		scl = clst;
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	3301      	adds	r3, #1
 800d83a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	695b      	ldr	r3, [r3, #20]
 800d840:	69fa      	ldr	r2, [r7, #28]
 800d842:	429a      	cmp	r2, r3
 800d844:	d307      	bcc.n	800d856 <create_chain+0x88>
				ncl = 2;
 800d846:	2302      	movs	r3, #2
 800d848:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d84a:	69fa      	ldr	r2, [r7, #28]
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d901      	bls.n	800d856 <create_chain+0x88>
 800d852:	2300      	movs	r3, #0
 800d854:	e04f      	b.n	800d8f6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d856:	69f9      	ldr	r1, [r7, #28]
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff fdc2 	bl	800d3e2 <get_fat>
 800d85e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00e      	beq.n	800d884 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d003      	beq.n	800d874 <create_chain+0xa6>
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d872:	d101      	bne.n	800d878 <create_chain+0xaa>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	e03e      	b.n	800d8f6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d878:	69fa      	ldr	r2, [r7, #28]
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d1da      	bne.n	800d836 <create_chain+0x68>
 800d880:	2300      	movs	r3, #0
 800d882:	e038      	b.n	800d8f6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d884:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d886:	f04f 32ff 	mov.w	r2, #4294967295
 800d88a:	69f9      	ldr	r1, [r7, #28]
 800d88c:	6938      	ldr	r0, [r7, #16]
 800d88e:	f7ff fe4f 	bl	800d530 <put_fat>
 800d892:	4603      	mov	r3, r0
 800d894:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d896:	7dfb      	ldrb	r3, [r7, #23]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d109      	bne.n	800d8b0 <create_chain+0xe2>
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d006      	beq.n	800d8b0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d8a2:	69fa      	ldr	r2, [r7, #28]
 800d8a4:	6839      	ldr	r1, [r7, #0]
 800d8a6:	6938      	ldr	r0, [r7, #16]
 800d8a8:	f7ff fe42 	bl	800d530 <put_fat>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d8b0:	7dfb      	ldrb	r3, [r7, #23]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d116      	bne.n	800d8e4 <create_chain+0x116>
		fs->last_clst = ncl;
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	69fa      	ldr	r2, [r7, #28]
 800d8ba:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	691a      	ldr	r2, [r3, #16]
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	3b02      	subs	r3, #2
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d804      	bhi.n	800d8d4 <create_chain+0x106>
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	1e5a      	subs	r2, r3, #1
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	791b      	ldrb	r3, [r3, #4]
 800d8d8:	f043 0301 	orr.w	r3, r3, #1
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	711a      	strb	r2, [r3, #4]
 800d8e2:	e007      	b.n	800d8f4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d8e4:	7dfb      	ldrb	r3, [r7, #23]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d102      	bne.n	800d8f0 <create_chain+0x122>
 800d8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ee:	e000      	b.n	800d8f2 <create_chain+0x124>
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d8f4:	69fb      	ldr	r3, [r7, #28]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3720      	adds	r7, #32
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b087      	sub	sp, #28
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d912:	3304      	adds	r3, #4
 800d914:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	0a5b      	lsrs	r3, r3, #9
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	8952      	ldrh	r2, [r2, #10]
 800d91e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d922:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	1d1a      	adds	r2, r3, #4
 800d928:	613a      	str	r2, [r7, #16]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <clmt_clust+0x3a>
 800d934:	2300      	movs	r3, #0
 800d936:	e010      	b.n	800d95a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d938:	697a      	ldr	r2, [r7, #20]
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d307      	bcc.n	800d950 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	617b      	str	r3, [r7, #20]
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	3304      	adds	r3, #4
 800d94c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d94e:	e7e9      	b.n	800d924 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d950:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	4413      	add	r3, r2
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	371c      	adds	r7, #28
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b086      	sub	sp, #24
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
 800d96e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d97c:	d204      	bcs.n	800d988 <dir_sdi+0x22>
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	f003 031f 	and.w	r3, r3, #31
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <dir_sdi+0x26>
		return FR_INT_ERR;
 800d988:	2302      	movs	r3, #2
 800d98a:	e063      	b.n	800da54 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d106      	bne.n	800d9ac <dir_sdi+0x46>
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b02      	cmp	r3, #2
 800d9a4:	d902      	bls.n	800d9ac <dir_sdi+0x46>
		clst = fs->dirbase;
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d10c      	bne.n	800d9cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	095b      	lsrs	r3, r3, #5
 800d9b6:	693a      	ldr	r2, [r7, #16]
 800d9b8:	8912      	ldrh	r2, [r2, #8]
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d301      	bcc.n	800d9c2 <dir_sdi+0x5c>
 800d9be:	2302      	movs	r3, #2
 800d9c0:	e048      	b.n	800da54 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	61da      	str	r2, [r3, #28]
 800d9ca:	e029      	b.n	800da20 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	895b      	ldrh	r3, [r3, #10]
 800d9d0:	025b      	lsls	r3, r3, #9
 800d9d2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9d4:	e019      	b.n	800da0a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6979      	ldr	r1, [r7, #20]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7ff fd01 	bl	800d3e2 <get_fat>
 800d9e0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e8:	d101      	bne.n	800d9ee <dir_sdi+0x88>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e032      	b.n	800da54 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d904      	bls.n	800d9fe <dir_sdi+0x98>
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	697a      	ldr	r2, [r7, #20]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d301      	bcc.n	800da02 <dir_sdi+0x9c>
 800d9fe:	2302      	movs	r3, #2
 800da00:	e028      	b.n	800da54 <dir_sdi+0xee>
			ofs -= csz;
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d2e1      	bcs.n	800d9d6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800da12:	6979      	ldr	r1, [r7, #20]
 800da14:	6938      	ldr	r0, [r7, #16]
 800da16:	f7ff fcc5 	bl	800d3a4 <clust2sect>
 800da1a:	4602      	mov	r2, r0
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d101      	bne.n	800da32 <dir_sdi+0xcc>
 800da2e:	2302      	movs	r3, #2
 800da30:	e010      	b.n	800da54 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	69da      	ldr	r2, [r3, #28]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	0a5b      	lsrs	r3, r3, #9
 800da3a:	441a      	add	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da4c:	441a      	add	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3718      	adds	r7, #24
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b086      	sub	sp, #24
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	3320      	adds	r3, #32
 800da72:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	69db      	ldr	r3, [r3, #28]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d003      	beq.n	800da84 <dir_next+0x28>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da82:	d301      	bcc.n	800da88 <dir_next+0x2c>
 800da84:	2304      	movs	r3, #4
 800da86:	e0aa      	b.n	800dbde <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f040 8098 	bne.w	800dbc4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	69db      	ldr	r3, [r3, #28]
 800da98:	1c5a      	adds	r2, r3, #1
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10b      	bne.n	800dabe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	095b      	lsrs	r3, r3, #5
 800daaa:	68fa      	ldr	r2, [r7, #12]
 800daac:	8912      	ldrh	r2, [r2, #8]
 800daae:	4293      	cmp	r3, r2
 800dab0:	f0c0 8088 	bcc.w	800dbc4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	61da      	str	r2, [r3, #28]
 800daba:	2304      	movs	r3, #4
 800dabc:	e08f      	b.n	800dbde <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	0a5b      	lsrs	r3, r3, #9
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	8952      	ldrh	r2, [r2, #10]
 800dac6:	3a01      	subs	r2, #1
 800dac8:	4013      	ands	r3, r2
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d17a      	bne.n	800dbc4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	4619      	mov	r1, r3
 800dad6:	4610      	mov	r0, r2
 800dad8:	f7ff fc83 	bl	800d3e2 <get_fat>
 800dadc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d801      	bhi.n	800dae8 <dir_next+0x8c>
 800dae4:	2302      	movs	r3, #2
 800dae6:	e07a      	b.n	800dbde <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daee:	d101      	bne.n	800daf4 <dir_next+0x98>
 800daf0:	2301      	movs	r3, #1
 800daf2:	e074      	b.n	800dbde <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	695b      	ldr	r3, [r3, #20]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d358      	bcc.n	800dbb0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d104      	bne.n	800db0e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	61da      	str	r2, [r3, #28]
 800db0a:	2304      	movs	r3, #4
 800db0c:	e067      	b.n	800dbde <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	f7ff fe59 	bl	800d7ce <create_chain>
 800db1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <dir_next+0xcc>
 800db24:	2307      	movs	r3, #7
 800db26:	e05a      	b.n	800dbde <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d101      	bne.n	800db32 <dir_next+0xd6>
 800db2e:	2302      	movs	r3, #2
 800db30:	e055      	b.n	800dbde <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db38:	d101      	bne.n	800db3e <dir_next+0xe2>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e04f      	b.n	800dbde <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f7ff fb50 	bl	800d1e4 <sync_window>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <dir_next+0xf2>
 800db4a:	2301      	movs	r3, #1
 800db4c:	e047      	b.n	800dbde <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	3330      	adds	r3, #48	@ 0x30
 800db52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db56:	2100      	movs	r1, #0
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff f97a 	bl	800ce52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db5e:	2300      	movs	r3, #0
 800db60:	613b      	str	r3, [r7, #16]
 800db62:	6979      	ldr	r1, [r7, #20]
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f7ff fc1d 	bl	800d3a4 <clust2sect>
 800db6a:	4602      	mov	r2, r0
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db70:	e012      	b.n	800db98 <dir_next+0x13c>
						fs->wflag = 1;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2201      	movs	r2, #1
 800db76:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db78:	68f8      	ldr	r0, [r7, #12]
 800db7a:	f7ff fb33 	bl	800d1e4 <sync_window>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <dir_next+0x12c>
 800db84:	2301      	movs	r3, #1
 800db86:	e02a      	b.n	800dbde <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	3301      	adds	r3, #1
 800db8c:	613b      	str	r3, [r7, #16]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	895b      	ldrh	r3, [r3, #10]
 800db9c:	461a      	mov	r2, r3
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d3e6      	bcc.n	800db72 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	1ad2      	subs	r2, r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dbb6:	6979      	ldr	r1, [r7, #20]
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7ff fbf3 	bl	800d3a4 <clust2sect>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbd6:	441a      	add	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b086      	sub	sp, #24
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7ff feb4 	bl	800d966 <dir_sdi>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc02:	7dfb      	ldrb	r3, [r7, #23]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d12b      	bne.n	800dc60 <dir_alloc+0x7a>
		n = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	69db      	ldr	r3, [r3, #28]
 800dc10:	4619      	mov	r1, r3
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f7ff fb2a 	bl	800d26c <move_window>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc1c:	7dfb      	ldrb	r3, [r7, #23]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d11d      	bne.n	800dc5e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	2be5      	cmp	r3, #229	@ 0xe5
 800dc2a:	d004      	beq.n	800dc36 <dir_alloc+0x50>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a1b      	ldr	r3, [r3, #32]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d107      	bne.n	800dc46 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	613b      	str	r3, [r7, #16]
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d102      	bne.n	800dc4a <dir_alloc+0x64>
 800dc44:	e00c      	b.n	800dc60 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc46:	2300      	movs	r3, #0
 800dc48:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc4a:	2101      	movs	r1, #1
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff ff05 	bl	800da5c <dir_next>
 800dc52:	4603      	mov	r3, r0
 800dc54:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d0d7      	beq.n	800dc0c <dir_alloc+0x26>
 800dc5c:	e000      	b.n	800dc60 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc5e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc60:	7dfb      	ldrb	r3, [r7, #23]
 800dc62:	2b04      	cmp	r3, #4
 800dc64:	d101      	bne.n	800dc6a <dir_alloc+0x84>
 800dc66:	2307      	movs	r3, #7
 800dc68:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	331a      	adds	r3, #26
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff f842 	bl	800cd0c <ld_word>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	2b03      	cmp	r3, #3
 800dc92:	d109      	bne.n	800dca8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	3314      	adds	r3, #20
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7ff f837 	bl	800cd0c <ld_word>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	041b      	lsls	r3, r3, #16
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	4313      	orrs	r3, r2
 800dca6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dca8:	68fb      	ldr	r3, [r7, #12]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	60f8      	str	r0, [r7, #12]
 800dcba:	60b9      	str	r1, [r7, #8]
 800dcbc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	331a      	adds	r3, #26
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	b292      	uxth	r2, r2
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7ff f85a 	bl	800cd82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d109      	bne.n	800dcea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	f103 0214 	add.w	r2, r3, #20
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	0c1b      	lsrs	r3, r3, #16
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	4619      	mov	r1, r3
 800dce4:	4610      	mov	r0, r2
 800dce6:	f7ff f84c 	bl	800cd82 <st_word>
	}
}
 800dcea:	bf00      	nop
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b086      	sub	sp, #24
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dd00:	2100      	movs	r1, #0
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f7ff fe2f 	bl	800d966 <dir_sdi>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dd0c:	7dfb      	ldrb	r3, [r7, #23]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <dir_find+0x24>
 800dd12:	7dfb      	ldrb	r3, [r7, #23]
 800dd14:	e03e      	b.n	800dd94 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	69db      	ldr	r3, [r3, #28]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	6938      	ldr	r0, [r7, #16]
 800dd1e:	f7ff faa5 	bl	800d26c <move_window>
 800dd22:	4603      	mov	r3, r0
 800dd24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dd26:	7dfb      	ldrb	r3, [r7, #23]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d12f      	bne.n	800dd8c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a1b      	ldr	r3, [r3, #32]
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d102      	bne.n	800dd40 <dir_find+0x4e>
 800dd3a:	2304      	movs	r3, #4
 800dd3c:	75fb      	strb	r3, [r7, #23]
 800dd3e:	e028      	b.n	800dd92 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	330b      	adds	r3, #11
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	330b      	adds	r3, #11
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	f003 0308 	and.w	r3, r3, #8
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10a      	bne.n	800dd78 <dir_find+0x86>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a18      	ldr	r0, [r3, #32]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	3324      	adds	r3, #36	@ 0x24
 800dd6a:	220b      	movs	r2, #11
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	f7ff f88b 	bl	800ce88 <mem_cmp>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00b      	beq.n	800dd90 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dd78:	2100      	movs	r1, #0
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff fe6e 	bl	800da5c <dir_next>
 800dd80:	4603      	mov	r3, r0
 800dd82:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dd84:	7dfb      	ldrb	r3, [r7, #23]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d0c5      	beq.n	800dd16 <dir_find+0x24>
 800dd8a:	e002      	b.n	800dd92 <dir_find+0xa0>
		if (res != FR_OK) break;
 800dd8c:	bf00      	nop
 800dd8e:	e000      	b.n	800dd92 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dd90:	bf00      	nop

	return res;
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ddaa:	2101      	movs	r1, #1
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff ff1a 	bl	800dbe6 <dir_alloc>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ddb6:	7bfb      	ldrb	r3, [r7, #15]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d11c      	bne.n	800ddf6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	68b8      	ldr	r0, [r7, #8]
 800ddc4:	f7ff fa52 	bl	800d26c <move_window>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d111      	bne.n	800ddf6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	2220      	movs	r2, #32
 800ddd8:	2100      	movs	r1, #0
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7ff f839 	bl	800ce52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a18      	ldr	r0, [r3, #32]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3324      	adds	r3, #36	@ 0x24
 800dde8:	220b      	movs	r2, #11
 800ddea:	4619      	mov	r1, r3
 800ddec:	f7ff f810 	bl	800ce10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	60fb      	str	r3, [r7, #12]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3324      	adds	r3, #36	@ 0x24
 800de14:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800de16:	220b      	movs	r2, #11
 800de18:	2120      	movs	r1, #32
 800de1a:	68b8      	ldr	r0, [r7, #8]
 800de1c:	f7ff f819 	bl	800ce52 <mem_set>
	si = i = 0; ni = 8;
 800de20:	2300      	movs	r3, #0
 800de22:	613b      	str	r3, [r7, #16]
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	61fb      	str	r3, [r7, #28]
 800de28:	2308      	movs	r3, #8
 800de2a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	1c5a      	adds	r2, r3, #1
 800de30:	61fa      	str	r2, [r7, #28]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	4413      	add	r3, r2
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800de3a:	7efb      	ldrb	r3, [r7, #27]
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	d94e      	bls.n	800dede <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800de40:	7efb      	ldrb	r3, [r7, #27]
 800de42:	2b2f      	cmp	r3, #47	@ 0x2f
 800de44:	d006      	beq.n	800de54 <create_name+0x54>
 800de46:	7efb      	ldrb	r3, [r7, #27]
 800de48:	2b5c      	cmp	r3, #92	@ 0x5c
 800de4a:	d110      	bne.n	800de6e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800de4c:	e002      	b.n	800de54 <create_name+0x54>
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	3301      	adds	r3, #1
 800de52:	61fb      	str	r3, [r7, #28]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	4413      	add	r3, r2
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	2b2f      	cmp	r3, #47	@ 0x2f
 800de5e:	d0f6      	beq.n	800de4e <create_name+0x4e>
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	4413      	add	r3, r2
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	2b5c      	cmp	r3, #92	@ 0x5c
 800de6a:	d0f0      	beq.n	800de4e <create_name+0x4e>
			break;
 800de6c:	e038      	b.n	800dee0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800de6e:	7efb      	ldrb	r3, [r7, #27]
 800de70:	2b2e      	cmp	r3, #46	@ 0x2e
 800de72:	d003      	beq.n	800de7c <create_name+0x7c>
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d30c      	bcc.n	800de96 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	2b0b      	cmp	r3, #11
 800de80:	d002      	beq.n	800de88 <create_name+0x88>
 800de82:	7efb      	ldrb	r3, [r7, #27]
 800de84:	2b2e      	cmp	r3, #46	@ 0x2e
 800de86:	d001      	beq.n	800de8c <create_name+0x8c>
 800de88:	2306      	movs	r3, #6
 800de8a:	e044      	b.n	800df16 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800de8c:	2308      	movs	r3, #8
 800de8e:	613b      	str	r3, [r7, #16]
 800de90:	230b      	movs	r3, #11
 800de92:	617b      	str	r3, [r7, #20]
			continue;
 800de94:	e022      	b.n	800dedc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800de96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	da04      	bge.n	800dea8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800de9e:	7efb      	ldrb	r3, [r7, #27]
 800dea0:	3b80      	subs	r3, #128	@ 0x80
 800dea2:	4a1f      	ldr	r2, [pc, #124]	@ (800df20 <create_name+0x120>)
 800dea4:	5cd3      	ldrb	r3, [r2, r3]
 800dea6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dea8:	7efb      	ldrb	r3, [r7, #27]
 800deaa:	4619      	mov	r1, r3
 800deac:	481d      	ldr	r0, [pc, #116]	@ (800df24 <create_name+0x124>)
 800deae:	f7ff f812 	bl	800ced6 <chk_chr>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d001      	beq.n	800debc <create_name+0xbc>
 800deb8:	2306      	movs	r3, #6
 800deba:	e02c      	b.n	800df16 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800debc:	7efb      	ldrb	r3, [r7, #27]
 800debe:	2b60      	cmp	r3, #96	@ 0x60
 800dec0:	d905      	bls.n	800dece <create_name+0xce>
 800dec2:	7efb      	ldrb	r3, [r7, #27]
 800dec4:	2b7a      	cmp	r3, #122	@ 0x7a
 800dec6:	d802      	bhi.n	800dece <create_name+0xce>
 800dec8:	7efb      	ldrb	r3, [r7, #27]
 800deca:	3b20      	subs	r3, #32
 800decc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	1c5a      	adds	r2, r3, #1
 800ded2:	613a      	str	r2, [r7, #16]
 800ded4:	68ba      	ldr	r2, [r7, #8]
 800ded6:	4413      	add	r3, r2
 800ded8:	7efa      	ldrb	r2, [r7, #27]
 800deda:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dedc:	e7a6      	b.n	800de2c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dede:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	441a      	add	r2, r3
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d101      	bne.n	800def4 <create_name+0xf4>
 800def0:	2306      	movs	r3, #6
 800def2:	e010      	b.n	800df16 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2be5      	cmp	r3, #229	@ 0xe5
 800defa:	d102      	bne.n	800df02 <create_name+0x102>
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	2205      	movs	r2, #5
 800df00:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800df02:	7efb      	ldrb	r3, [r7, #27]
 800df04:	2b20      	cmp	r3, #32
 800df06:	d801      	bhi.n	800df0c <create_name+0x10c>
 800df08:	2204      	movs	r2, #4
 800df0a:	e000      	b.n	800df0e <create_name+0x10e>
 800df0c:	2200      	movs	r2, #0
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	330b      	adds	r3, #11
 800df12:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800df14:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800df16:	4618      	mov	r0, r3
 800df18:	3720      	adds	r7, #32
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	08018124 	.word	0x08018124
 800df24:	080105f4 	.word	0x080105f4

0800df28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df3c:	e002      	b.n	800df44 <follow_path+0x1c>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	3301      	adds	r3, #1
 800df42:	603b      	str	r3, [r7, #0]
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	2b2f      	cmp	r3, #47	@ 0x2f
 800df4a:	d0f8      	beq.n	800df3e <follow_path+0x16>
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2b5c      	cmp	r3, #92	@ 0x5c
 800df52:	d0f4      	beq.n	800df3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	2200      	movs	r2, #0
 800df58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	2b1f      	cmp	r3, #31
 800df60:	d80a      	bhi.n	800df78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2280      	movs	r2, #128	@ 0x80
 800df66:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800df6a:	2100      	movs	r1, #0
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff fcfa 	bl	800d966 <dir_sdi>
 800df72:	4603      	mov	r3, r0
 800df74:	75fb      	strb	r3, [r7, #23]
 800df76:	e043      	b.n	800e000 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800df78:	463b      	mov	r3, r7
 800df7a:	4619      	mov	r1, r3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f7ff ff3f 	bl	800de00 <create_name>
 800df82:	4603      	mov	r3, r0
 800df84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d134      	bne.n	800dff6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff feb0 	bl	800dcf2 <dir_find>
 800df92:	4603      	mov	r3, r0
 800df94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800df9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800df9e:	7dfb      	ldrb	r3, [r7, #23]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00a      	beq.n	800dfba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dfa4:	7dfb      	ldrb	r3, [r7, #23]
 800dfa6:	2b04      	cmp	r3, #4
 800dfa8:	d127      	bne.n	800dffa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dfaa:	7afb      	ldrb	r3, [r7, #11]
 800dfac:	f003 0304 	and.w	r3, r3, #4
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d122      	bne.n	800dffa <follow_path+0xd2>
 800dfb4:	2305      	movs	r3, #5
 800dfb6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dfb8:	e01f      	b.n	800dffa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dfba:	7afb      	ldrb	r3, [r7, #11]
 800dfbc:	f003 0304 	and.w	r3, r3, #4
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d11c      	bne.n	800dffe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	799b      	ldrb	r3, [r3, #6]
 800dfc8:	f003 0310 	and.w	r3, r3, #16
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d102      	bne.n	800dfd6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dfd0:	2305      	movs	r3, #5
 800dfd2:	75fb      	strb	r3, [r7, #23]
 800dfd4:	e014      	b.n	800e000 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfe4:	4413      	add	r3, r2
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f7ff fe43 	bl	800dc74 <ld_clust>
 800dfee:	4602      	mov	r2, r0
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dff4:	e7c0      	b.n	800df78 <follow_path+0x50>
			if (res != FR_OK) break;
 800dff6:	bf00      	nop
 800dff8:	e002      	b.n	800e000 <follow_path+0xd8>
				break;
 800dffa:	bf00      	nop
 800dffc:	e000      	b.n	800e000 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dffe:	bf00      	nop
			}
		}
	}

	return res;
 800e000:	7dfb      	ldrb	r3, [r7, #23]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3718      	adds	r7, #24
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e00a:	b480      	push	{r7}
 800e00c:	b087      	sub	sp, #28
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e012:	f04f 33ff 	mov.w	r3, #4294967295
 800e016:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d031      	beq.n	800e084 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	617b      	str	r3, [r7, #20]
 800e026:	e002      	b.n	800e02e <get_ldnumber+0x24>
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	3301      	adds	r3, #1
 800e02c:	617b      	str	r3, [r7, #20]
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b20      	cmp	r3, #32
 800e034:	d903      	bls.n	800e03e <get_ldnumber+0x34>
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b3a      	cmp	r3, #58	@ 0x3a
 800e03c:	d1f4      	bne.n	800e028 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	2b3a      	cmp	r3, #58	@ 0x3a
 800e044:	d11c      	bne.n	800e080 <get_ldnumber+0x76>
			tp = *path;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	1c5a      	adds	r2, r3, #1
 800e050:	60fa      	str	r2, [r7, #12]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	3b30      	subs	r3, #48	@ 0x30
 800e056:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	2b09      	cmp	r3, #9
 800e05c:	d80e      	bhi.n	800e07c <get_ldnumber+0x72>
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	429a      	cmp	r2, r3
 800e064:	d10a      	bne.n	800e07c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d107      	bne.n	800e07c <get_ldnumber+0x72>
					vol = (int)i;
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	3301      	adds	r3, #1
 800e074:	617b      	str	r3, [r7, #20]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	697a      	ldr	r2, [r7, #20]
 800e07a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	e002      	b.n	800e086 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e080:	2300      	movs	r3, #0
 800e082:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e084:	693b      	ldr	r3, [r7, #16]
}
 800e086:	4618      	mov	r0, r3
 800e088:	371c      	adds	r7, #28
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
	...

0800e094 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	70da      	strb	r2, [r3, #3]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e0ac:	6839      	ldr	r1, [r7, #0]
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff f8dc 	bl	800d26c <move_window>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <check_fs+0x2a>
 800e0ba:	2304      	movs	r3, #4
 800e0bc:	e038      	b.n	800e130 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3330      	adds	r3, #48	@ 0x30
 800e0c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fe fe20 	bl	800cd0c <ld_word>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d001      	beq.n	800e0dc <check_fs+0x48>
 800e0d8:	2303      	movs	r3, #3
 800e0da:	e029      	b.n	800e130 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e0e2:	2be9      	cmp	r3, #233	@ 0xe9
 800e0e4:	d009      	beq.n	800e0fa <check_fs+0x66>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e0ec:	2beb      	cmp	r3, #235	@ 0xeb
 800e0ee:	d11e      	bne.n	800e12e <check_fs+0x9a>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e0f6:	2b90      	cmp	r3, #144	@ 0x90
 800e0f8:	d119      	bne.n	800e12e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	3330      	adds	r3, #48	@ 0x30
 800e0fe:	3336      	adds	r3, #54	@ 0x36
 800e100:	4618      	mov	r0, r3
 800e102:	f7fe fe1b 	bl	800cd3c <ld_dword>
 800e106:	4603      	mov	r3, r0
 800e108:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e10c:	4a0a      	ldr	r2, [pc, #40]	@ (800e138 <check_fs+0xa4>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d101      	bne.n	800e116 <check_fs+0x82>
 800e112:	2300      	movs	r3, #0
 800e114:	e00c      	b.n	800e130 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3330      	adds	r3, #48	@ 0x30
 800e11a:	3352      	adds	r3, #82	@ 0x52
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fe0d 	bl	800cd3c <ld_dword>
 800e122:	4603      	mov	r3, r0
 800e124:	4a05      	ldr	r2, [pc, #20]	@ (800e13c <check_fs+0xa8>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d101      	bne.n	800e12e <check_fs+0x9a>
 800e12a:	2300      	movs	r3, #0
 800e12c:	e000      	b.n	800e130 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e12e:	2302      	movs	r3, #2
}
 800e130:	4618      	mov	r0, r3
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	00544146 	.word	0x00544146
 800e13c:	33544146 	.word	0x33544146

0800e140 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b096      	sub	sp, #88	@ 0x58
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	4613      	mov	r3, r2
 800e14c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2200      	movs	r2, #0
 800e152:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f7ff ff58 	bl	800e00a <get_ldnumber>
 800e15a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e15c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	da01      	bge.n	800e166 <find_volume+0x26>
 800e162:	230b      	movs	r3, #11
 800e164:	e22d      	b.n	800e5c2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e166:	4aa1      	ldr	r2, [pc, #644]	@ (800e3ec <find_volume+0x2ac>)
 800e168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e16e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <find_volume+0x3a>
 800e176:	230c      	movs	r3, #12
 800e178:	e223      	b.n	800e5c2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e17e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e180:	79fb      	ldrb	r3, [r7, #7]
 800e182:	f023 0301 	bic.w	r3, r3, #1
 800e186:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d01a      	beq.n	800e1c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e192:	785b      	ldrb	r3, [r3, #1]
 800e194:	4618      	mov	r0, r3
 800e196:	f7fe fd19 	bl	800cbcc <disk_status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e1a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10c      	bne.n	800e1c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e1ac:	79fb      	ldrb	r3, [r7, #7]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d007      	beq.n	800e1c2 <find_volume+0x82>
 800e1b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1b6:	f003 0304 	and.w	r3, r3, #4
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d001      	beq.n	800e1c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e1be:	230a      	movs	r3, #10
 800e1c0:	e1ff      	b.n	800e5c2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	e1fd      	b.n	800e5c2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e1cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d6:	785b      	ldrb	r3, [r3, #1]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe fd11 	bl	800cc00 <disk_initialize>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e1e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1e8:	f003 0301 	and.w	r3, r3, #1
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d001      	beq.n	800e1f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e1f0:	2303      	movs	r3, #3
 800e1f2:	e1e6      	b.n	800e5c2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d007      	beq.n	800e20a <find_volume+0xca>
 800e1fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1fe:	f003 0304 	and.w	r3, r3, #4
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e206:	230a      	movs	r3, #10
 800e208:	e1db      	b.n	800e5c2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e20a:	2300      	movs	r3, #0
 800e20c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e20e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e210:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e212:	f7ff ff3f 	bl	800e094 <check_fs>
 800e216:	4603      	mov	r3, r0
 800e218:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e21c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e220:	2b02      	cmp	r3, #2
 800e222:	d149      	bne.n	800e2b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e224:	2300      	movs	r3, #0
 800e226:	643b      	str	r3, [r7, #64]	@ 0x40
 800e228:	e01e      	b.n	800e268 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e22c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e232:	011b      	lsls	r3, r3, #4
 800e234:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e238:	4413      	add	r3, r2
 800e23a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e23e:	3304      	adds	r3, #4
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d006      	beq.n	800e254 <find_volume+0x114>
 800e246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e248:	3308      	adds	r3, #8
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fe fd76 	bl	800cd3c <ld_dword>
 800e250:	4602      	mov	r2, r0
 800e252:	e000      	b.n	800e256 <find_volume+0x116>
 800e254:	2200      	movs	r2, #0
 800e256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	3358      	adds	r3, #88	@ 0x58
 800e25c:	443b      	add	r3, r7
 800e25e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e264:	3301      	adds	r3, #1
 800e266:	643b      	str	r3, [r7, #64]	@ 0x40
 800e268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e26a:	2b03      	cmp	r3, #3
 800e26c:	d9dd      	bls.n	800e22a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e26e:	2300      	movs	r3, #0
 800e270:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <find_volume+0x13e>
 800e278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e27a:	3b01      	subs	r3, #1
 800e27c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e27e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	3358      	adds	r3, #88	@ 0x58
 800e284:	443b      	add	r3, r7
 800e286:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e28a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e28c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d005      	beq.n	800e29e <find_volume+0x15e>
 800e292:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e294:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e296:	f7ff fefd 	bl	800e094 <check_fs>
 800e29a:	4603      	mov	r3, r0
 800e29c:	e000      	b.n	800e2a0 <find_volume+0x160>
 800e29e:	2303      	movs	r3, #3
 800e2a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d905      	bls.n	800e2b8 <find_volume+0x178>
 800e2ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2b4:	2b03      	cmp	r3, #3
 800e2b6:	d9e2      	bls.n	800e27e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e2b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2bc:	2b04      	cmp	r3, #4
 800e2be:	d101      	bne.n	800e2c4 <find_volume+0x184>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e17e      	b.n	800e5c2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e2c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d901      	bls.n	800e2d0 <find_volume+0x190>
 800e2cc:	230d      	movs	r3, #13
 800e2ce:	e178      	b.n	800e5c2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d2:	3330      	adds	r3, #48	@ 0x30
 800e2d4:	330b      	adds	r3, #11
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fe fd18 	bl	800cd0c <ld_word>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2e2:	d001      	beq.n	800e2e8 <find_volume+0x1a8>
 800e2e4:	230d      	movs	r3, #13
 800e2e6:	e16c      	b.n	800e5c2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ea:	3330      	adds	r3, #48	@ 0x30
 800e2ec:	3316      	adds	r3, #22
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe fd0c 	bl	800cd0c <ld_word>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e2f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d106      	bne.n	800e30c <find_volume+0x1cc>
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e300:	3330      	adds	r3, #48	@ 0x30
 800e302:	3324      	adds	r3, #36	@ 0x24
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe fd19 	bl	800cd3c <ld_dword>
 800e30a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e310:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e314:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31e:	789b      	ldrb	r3, [r3, #2]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d005      	beq.n	800e330 <find_volume+0x1f0>
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	789b      	ldrb	r3, [r3, #2]
 800e328:	2b02      	cmp	r3, #2
 800e32a:	d001      	beq.n	800e330 <find_volume+0x1f0>
 800e32c:	230d      	movs	r3, #13
 800e32e:	e148      	b.n	800e5c2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e332:	789b      	ldrb	r3, [r3, #2]
 800e334:	461a      	mov	r2, r3
 800e336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e338:	fb02 f303 	mul.w	r3, r2, r3
 800e33c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e344:	461a      	mov	r2, r3
 800e346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e348:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34c:	895b      	ldrh	r3, [r3, #10]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d008      	beq.n	800e364 <find_volume+0x224>
 800e352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e354:	895b      	ldrh	r3, [r3, #10]
 800e356:	461a      	mov	r2, r3
 800e358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e35a:	895b      	ldrh	r3, [r3, #10]
 800e35c:	3b01      	subs	r3, #1
 800e35e:	4013      	ands	r3, r2
 800e360:	2b00      	cmp	r3, #0
 800e362:	d001      	beq.n	800e368 <find_volume+0x228>
 800e364:	230d      	movs	r3, #13
 800e366:	e12c      	b.n	800e5c2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36a:	3330      	adds	r3, #48	@ 0x30
 800e36c:	3311      	adds	r3, #17
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fe fccc 	bl	800cd0c <ld_word>
 800e374:	4603      	mov	r3, r0
 800e376:	461a      	mov	r2, r3
 800e378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37e:	891b      	ldrh	r3, [r3, #8]
 800e380:	f003 030f 	and.w	r3, r3, #15
 800e384:	b29b      	uxth	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <find_volume+0x24e>
 800e38a:	230d      	movs	r3, #13
 800e38c:	e119      	b.n	800e5c2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e390:	3330      	adds	r3, #48	@ 0x30
 800e392:	3313      	adds	r3, #19
 800e394:	4618      	mov	r0, r3
 800e396:	f7fe fcb9 	bl	800cd0c <ld_word>
 800e39a:	4603      	mov	r3, r0
 800e39c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e39e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d106      	bne.n	800e3b2 <find_volume+0x272>
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a6:	3330      	adds	r3, #48	@ 0x30
 800e3a8:	3320      	adds	r3, #32
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fe fcc6 	bl	800cd3c <ld_dword>
 800e3b0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b4:	3330      	adds	r3, #48	@ 0x30
 800e3b6:	330e      	adds	r3, #14
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fe fca7 	bl	800cd0c <ld_word>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e3c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d101      	bne.n	800e3cc <find_volume+0x28c>
 800e3c8:	230d      	movs	r3, #13
 800e3ca:	e0fa      	b.n	800e5c2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e3cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e3ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3d0:	4413      	add	r3, r2
 800e3d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3d4:	8912      	ldrh	r2, [r2, #8]
 800e3d6:	0912      	lsrs	r2, r2, #4
 800e3d8:	b292      	uxth	r2, r2
 800e3da:	4413      	add	r3, r2
 800e3dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e3de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d204      	bcs.n	800e3f0 <find_volume+0x2b0>
 800e3e6:	230d      	movs	r3, #13
 800e3e8:	e0eb      	b.n	800e5c2 <find_volume+0x482>
 800e3ea:	bf00      	nop
 800e3ec:	2000043c 	.word	0x2000043c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e3f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f4:	1ad3      	subs	r3, r2, r3
 800e3f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3f8:	8952      	ldrh	r2, [r2, #10]
 800e3fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3fe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e402:	2b00      	cmp	r3, #0
 800e404:	d101      	bne.n	800e40a <find_volume+0x2ca>
 800e406:	230d      	movs	r3, #13
 800e408:	e0db      	b.n	800e5c2 <find_volume+0x482>
		fmt = FS_FAT32;
 800e40a:	2303      	movs	r3, #3
 800e40c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e412:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e416:	4293      	cmp	r3, r2
 800e418:	d802      	bhi.n	800e420 <find_volume+0x2e0>
 800e41a:	2302      	movs	r3, #2
 800e41c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e422:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e426:	4293      	cmp	r3, r2
 800e428:	d802      	bhi.n	800e430 <find_volume+0x2f0>
 800e42a:	2301      	movs	r3, #1
 800e42c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e432:	1c9a      	adds	r2, r3, #2
 800e434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e436:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e43c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e43e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e442:	441a      	add	r2, r3
 800e444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e446:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e448:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e44c:	441a      	add	r2, r3
 800e44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e450:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e452:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e456:	2b03      	cmp	r3, #3
 800e458:	d11e      	bne.n	800e498 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45c:	3330      	adds	r3, #48	@ 0x30
 800e45e:	332a      	adds	r3, #42	@ 0x2a
 800e460:	4618      	mov	r0, r3
 800e462:	f7fe fc53 	bl	800cd0c <ld_word>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d001      	beq.n	800e470 <find_volume+0x330>
 800e46c:	230d      	movs	r3, #13
 800e46e:	e0a8      	b.n	800e5c2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e472:	891b      	ldrh	r3, [r3, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d001      	beq.n	800e47c <find_volume+0x33c>
 800e478:	230d      	movs	r3, #13
 800e47a:	e0a2      	b.n	800e5c2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47e:	3330      	adds	r3, #48	@ 0x30
 800e480:	332c      	adds	r3, #44	@ 0x2c
 800e482:	4618      	mov	r0, r3
 800e484:	f7fe fc5a 	bl	800cd3c <ld_dword>
 800e488:	4602      	mov	r2, r0
 800e48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e490:	695b      	ldr	r3, [r3, #20]
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	647b      	str	r3, [r7, #68]	@ 0x44
 800e496:	e01f      	b.n	800e4d8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e49a:	891b      	ldrh	r3, [r3, #8]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d101      	bne.n	800e4a4 <find_volume+0x364>
 800e4a0:	230d      	movs	r3, #13
 800e4a2:	e08e      	b.n	800e5c2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a6:	6a1a      	ldr	r2, [r3, #32]
 800e4a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4aa:	441a      	add	r2, r3
 800e4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ae:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e4b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	d103      	bne.n	800e4c0 <find_volume+0x380>
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ba:	695b      	ldr	r3, [r3, #20]
 800e4bc:	005b      	lsls	r3, r3, #1
 800e4be:	e00a      	b.n	800e4d6 <find_volume+0x396>
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c2:	695a      	ldr	r2, [r3, #20]
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	4413      	add	r3, r2
 800e4ca:	085a      	lsrs	r2, r3, #1
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ce:	695b      	ldr	r3, [r3, #20]
 800e4d0:	f003 0301 	and.w	r3, r3, #1
 800e4d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e4d6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4da:	699a      	ldr	r2, [r3, #24]
 800e4dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4de:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e4e2:	0a5b      	lsrs	r3, r3, #9
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d201      	bcs.n	800e4ec <find_volume+0x3ac>
 800e4e8:	230d      	movs	r3, #13
 800e4ea:	e06a      	b.n	800e5c2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f2:	611a      	str	r2, [r3, #16]
 800e4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f6:	691a      	ldr	r2, [r3, #16]
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fe:	2280      	movs	r2, #128	@ 0x80
 800e500:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e502:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e506:	2b03      	cmp	r3, #3
 800e508:	d149      	bne.n	800e59e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e50c:	3330      	adds	r3, #48	@ 0x30
 800e50e:	3330      	adds	r3, #48	@ 0x30
 800e510:	4618      	mov	r0, r3
 800e512:	f7fe fbfb 	bl	800cd0c <ld_word>
 800e516:	4603      	mov	r3, r0
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d140      	bne.n	800e59e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e51e:	3301      	adds	r3, #1
 800e520:	4619      	mov	r1, r3
 800e522:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e524:	f7fe fea2 	bl	800d26c <move_window>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d137      	bne.n	800e59e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e530:	2200      	movs	r2, #0
 800e532:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e536:	3330      	adds	r3, #48	@ 0x30
 800e538:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7fe fbe5 	bl	800cd0c <ld_word>
 800e542:	4603      	mov	r3, r0
 800e544:	461a      	mov	r2, r3
 800e546:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d127      	bne.n	800e59e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e550:	3330      	adds	r3, #48	@ 0x30
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe fbf2 	bl	800cd3c <ld_dword>
 800e558:	4603      	mov	r3, r0
 800e55a:	4a1c      	ldr	r2, [pc, #112]	@ (800e5cc <find_volume+0x48c>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d11e      	bne.n	800e59e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e562:	3330      	adds	r3, #48	@ 0x30
 800e564:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fe fbe7 	bl	800cd3c <ld_dword>
 800e56e:	4603      	mov	r3, r0
 800e570:	4a17      	ldr	r2, [pc, #92]	@ (800e5d0 <find_volume+0x490>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d113      	bne.n	800e59e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e578:	3330      	adds	r3, #48	@ 0x30
 800e57a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fbdc 	bl	800cd3c <ld_dword>
 800e584:	4602      	mov	r2, r0
 800e586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e588:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e58c:	3330      	adds	r3, #48	@ 0x30
 800e58e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e592:	4618      	mov	r0, r3
 800e594:	f7fe fbd2 	bl	800cd3c <ld_dword>
 800e598:	4602      	mov	r2, r0
 800e59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e5a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e5d4 <find_volume+0x494>)
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	4b09      	ldr	r3, [pc, #36]	@ (800e5d4 <find_volume+0x494>)
 800e5b0:	801a      	strh	r2, [r3, #0]
 800e5b2:	4b08      	ldr	r3, [pc, #32]	@ (800e5d4 <find_volume+0x494>)
 800e5b4:	881a      	ldrh	r2, [r3, #0]
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e5ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5bc:	f7fe fdee 	bl	800d19c <clear_lock>
#endif
	return FR_OK;
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3758      	adds	r7, #88	@ 0x58
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	41615252 	.word	0x41615252
 800e5d0:	61417272 	.word	0x61417272
 800e5d4:	20000440 	.word	0x20000440

0800e5d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e5e2:	2309      	movs	r3, #9
 800e5e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d01c      	beq.n	800e626 <validate+0x4e>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d018      	beq.n	800e626 <validate+0x4e>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d013      	beq.n	800e626 <validate+0x4e>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	889a      	ldrh	r2, [r3, #4]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	88db      	ldrh	r3, [r3, #6]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d10c      	bne.n	800e626 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	785b      	ldrb	r3, [r3, #1]
 800e612:	4618      	mov	r0, r3
 800e614:	f7fe fada 	bl	800cbcc <disk_status>
 800e618:	4603      	mov	r3, r0
 800e61a:	f003 0301 	and.w	r3, r3, #1
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <validate+0x4e>
			res = FR_OK;
 800e622:	2300      	movs	r3, #0
 800e624:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e626:	7bfb      	ldrb	r3, [r7, #15]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d102      	bne.n	800e632 <validate+0x5a>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	e000      	b.n	800e634 <validate+0x5c>
 800e632:	2300      	movs	r3, #0
 800e634:	683a      	ldr	r2, [r7, #0]
 800e636:	6013      	str	r3, [r2, #0]
	return res;
 800e638:	7bfb      	ldrb	r3, [r7, #15]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
	...

0800e644 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b088      	sub	sp, #32
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	4613      	mov	r3, r2
 800e650:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e656:	f107 0310 	add.w	r3, r7, #16
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff fcd5 	bl	800e00a <get_ldnumber>
 800e660:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	2b00      	cmp	r3, #0
 800e666:	da01      	bge.n	800e66c <f_mount+0x28>
 800e668:	230b      	movs	r3, #11
 800e66a:	e02b      	b.n	800e6c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e66c:	4a17      	ldr	r2, [pc, #92]	@ (800e6cc <f_mount+0x88>)
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e674:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d005      	beq.n	800e688 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e67c:	69b8      	ldr	r0, [r7, #24]
 800e67e:	f7fe fd8d 	bl	800d19c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	2200      	movs	r2, #0
 800e686:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	490d      	ldr	r1, [pc, #52]	@ (800e6cc <f_mount+0x88>)
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <f_mount+0x66>
 800e6a4:	79fb      	ldrb	r3, [r7, #7]
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d001      	beq.n	800e6ae <f_mount+0x6a>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e00a      	b.n	800e6c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e6ae:	f107 010c 	add.w	r1, r7, #12
 800e6b2:	f107 0308 	add.w	r3, r7, #8
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff fd41 	bl	800e140 <find_volume>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3720      	adds	r7, #32
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	2000043c 	.word	0x2000043c

0800e6d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b098      	sub	sp, #96	@ 0x60
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d101      	bne.n	800e6e8 <f_open+0x18>
 800e6e4:	2309      	movs	r3, #9
 800e6e6:	e1a9      	b.n	800ea3c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e6e8:	79fb      	ldrb	r3, [r7, #7]
 800e6ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e6ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e6f0:	79fa      	ldrb	r2, [r7, #7]
 800e6f2:	f107 0110 	add.w	r1, r7, #16
 800e6f6:	f107 0308 	add.w	r3, r7, #8
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff fd20 	bl	800e140 <find_volume>
 800e700:	4603      	mov	r3, r0
 800e702:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e706:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f040 818d 	bne.w	800ea2a <f_open+0x35a>
		dj.obj.fs = fs;
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e714:	68ba      	ldr	r2, [r7, #8]
 800e716:	f107 0314 	add.w	r3, r7, #20
 800e71a:	4611      	mov	r1, r2
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7ff fc03 	bl	800df28 <follow_path>
 800e722:	4603      	mov	r3, r0
 800e724:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e728:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d118      	bne.n	800e762 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e730:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e734:	b25b      	sxtb	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	da03      	bge.n	800e742 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e73a:	2306      	movs	r3, #6
 800e73c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e740:	e00f      	b.n	800e762 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e742:	79fb      	ldrb	r3, [r7, #7]
 800e744:	2b01      	cmp	r3, #1
 800e746:	bf8c      	ite	hi
 800e748:	2301      	movhi	r3, #1
 800e74a:	2300      	movls	r3, #0
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	461a      	mov	r2, r3
 800e750:	f107 0314 	add.w	r3, r7, #20
 800e754:	4611      	mov	r1, r2
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe fbd8 	bl	800cf0c <chk_lock>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e762:	79fb      	ldrb	r3, [r7, #7]
 800e764:	f003 031c 	and.w	r3, r3, #28
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d07f      	beq.n	800e86c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e76c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e770:	2b00      	cmp	r3, #0
 800e772:	d017      	beq.n	800e7a4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e774:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e778:	2b04      	cmp	r3, #4
 800e77a:	d10e      	bne.n	800e79a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e77c:	f7fe fc22 	bl	800cfc4 <enq_lock>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d006      	beq.n	800e794 <f_open+0xc4>
 800e786:	f107 0314 	add.w	r3, r7, #20
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7ff fb06 	bl	800dd9c <dir_register>
 800e790:	4603      	mov	r3, r0
 800e792:	e000      	b.n	800e796 <f_open+0xc6>
 800e794:	2312      	movs	r3, #18
 800e796:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e79a:	79fb      	ldrb	r3, [r7, #7]
 800e79c:	f043 0308 	orr.w	r3, r3, #8
 800e7a0:	71fb      	strb	r3, [r7, #7]
 800e7a2:	e010      	b.n	800e7c6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e7a4:	7ebb      	ldrb	r3, [r7, #26]
 800e7a6:	f003 0311 	and.w	r3, r3, #17
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d003      	beq.n	800e7b6 <f_open+0xe6>
					res = FR_DENIED;
 800e7ae:	2307      	movs	r3, #7
 800e7b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e7b4:	e007      	b.n	800e7c6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e7b6:	79fb      	ldrb	r3, [r7, #7]
 800e7b8:	f003 0304 	and.w	r3, r3, #4
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <f_open+0xf6>
 800e7c0:	2308      	movs	r3, #8
 800e7c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d168      	bne.n	800e8a0 <f_open+0x1d0>
 800e7ce:	79fb      	ldrb	r3, [r7, #7]
 800e7d0:	f003 0308 	and.w	r3, r3, #8
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d063      	beq.n	800e8a0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e7d8:	f7fc f9c8 	bl	800ab6c <get_fattime>
 800e7dc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7e0:	330e      	adds	r3, #14
 800e7e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe fae7 	bl	800cdb8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7ec:	3316      	adds	r3, #22
 800e7ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fe fae1 	bl	800cdb8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7f8:	330b      	adds	r3, #11
 800e7fa:	2220      	movs	r2, #32
 800e7fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e802:	4611      	mov	r1, r2
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff fa35 	bl	800dc74 <ld_clust>
 800e80a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e810:	2200      	movs	r2, #0
 800e812:	4618      	mov	r0, r3
 800e814:	f7ff fa4d 	bl	800dcb2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e81a:	331c      	adds	r3, #28
 800e81c:	2100      	movs	r1, #0
 800e81e:	4618      	mov	r0, r3
 800e820:	f7fe faca 	bl	800cdb8 <st_dword>
					fs->wflag = 1;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	2201      	movs	r2, #1
 800e828:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e82a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d037      	beq.n	800e8a0 <f_open+0x1d0>
						dw = fs->winsect;
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e834:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e836:	f107 0314 	add.w	r3, r7, #20
 800e83a:	2200      	movs	r2, #0
 800e83c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fe ff60 	bl	800d704 <remove_chain>
 800e844:	4603      	mov	r3, r0
 800e846:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e84a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d126      	bne.n	800e8a0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe fd08 	bl	800d26c <move_window>
 800e85c:	4603      	mov	r3, r0
 800e85e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e866:	3a01      	subs	r2, #1
 800e868:	60da      	str	r2, [r3, #12]
 800e86a:	e019      	b.n	800e8a0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e86c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e870:	2b00      	cmp	r3, #0
 800e872:	d115      	bne.n	800e8a0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e874:	7ebb      	ldrb	r3, [r7, #26]
 800e876:	f003 0310 	and.w	r3, r3, #16
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e87e:	2304      	movs	r3, #4
 800e880:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e884:	e00c      	b.n	800e8a0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	f003 0302 	and.w	r3, r3, #2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d007      	beq.n	800e8a0 <f_open+0x1d0>
 800e890:	7ebb      	ldrb	r3, [r7, #26]
 800e892:	f003 0301 	and.w	r3, r3, #1
 800e896:	2b00      	cmp	r3, #0
 800e898:	d002      	beq.n	800e8a0 <f_open+0x1d0>
						res = FR_DENIED;
 800e89a:	2307      	movs	r3, #7
 800e89c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e8a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d126      	bne.n	800e8f6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e8a8:	79fb      	ldrb	r3, [r7, #7]
 800e8aa:	f003 0308 	and.w	r3, r3, #8
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e8b2:	79fb      	ldrb	r3, [r7, #7]
 800e8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e8c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8c8:	79fb      	ldrb	r3, [r7, #7]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	bf8c      	ite	hi
 800e8ce:	2301      	movhi	r3, #1
 800e8d0:	2300      	movls	r3, #0
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	f107 0314 	add.w	r3, r7, #20
 800e8da:	4611      	mov	r1, r2
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7fe fb93 	bl	800d008 <inc_lock>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	691b      	ldr	r3, [r3, #16]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d102      	bne.n	800e8f6 <f_open+0x226>
 800e8f0:	2302      	movs	r3, #2
 800e8f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e8f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f040 8095 	bne.w	800ea2a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e904:	4611      	mov	r1, r2
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff f9b4 	bl	800dc74 <ld_clust>
 800e90c:	4602      	mov	r2, r0
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e914:	331c      	adds	r3, #28
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe fa10 	bl	800cd3c <ld_dword>
 800e91c:	4602      	mov	r2, r0
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	88da      	ldrh	r2, [r3, #6]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	79fa      	ldrb	r2, [r7, #7]
 800e93a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2200      	movs	r2, #0
 800e940:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2200      	movs	r2, #0
 800e946:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2200      	movs	r2, #0
 800e94c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	3330      	adds	r3, #48	@ 0x30
 800e952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e956:	2100      	movs	r1, #0
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fe fa7a 	bl	800ce52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e95e:	79fb      	ldrb	r3, [r7, #7]
 800e960:	f003 0320 	and.w	r3, r3, #32
 800e964:	2b00      	cmp	r3, #0
 800e966:	d060      	beq.n	800ea2a <f_open+0x35a>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d05c      	beq.n	800ea2a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	68da      	ldr	r2, [r3, #12]
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	895b      	ldrh	r3, [r3, #10]
 800e97c:	025b      	lsls	r3, r3, #9
 800e97e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e98c:	e016      	b.n	800e9bc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e992:	4618      	mov	r0, r3
 800e994:	f7fe fd25 	bl	800d3e2 <get_fat>
 800e998:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e99a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d802      	bhi.n	800e9a6 <f_open+0x2d6>
 800e9a0:	2302      	movs	r3, #2
 800e9a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e9a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ac:	d102      	bne.n	800e9b4 <f_open+0x2e4>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e9b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d103      	bne.n	800e9cc <f_open+0x2fc>
 800e9c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e9c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d8e0      	bhi.n	800e98e <f_open+0x2be>
				}
				fp->clust = clst;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e9d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e9d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d127      	bne.n	800ea2a <f_open+0x35a>
 800e9da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d022      	beq.n	800ea2a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fe fcdb 	bl	800d3a4 <clust2sect>
 800e9ee:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d103      	bne.n	800e9fe <f_open+0x32e>
						res = FR_INT_ERR;
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e9fc:	e015      	b.n	800ea2a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e9fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea00:	0a5a      	lsrs	r2, r3, #9
 800ea02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea04:	441a      	add	r2, r3
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	7858      	ldrb	r0, [r3, #1]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6a1a      	ldr	r2, [r3, #32]
 800ea18:	2301      	movs	r3, #1
 800ea1a:	f7fe f919 	bl	800cc50 <disk_read>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <f_open+0x35a>
 800ea24:	2301      	movs	r3, #1
 800ea26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ea2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <f_open+0x368>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3760      	adds	r7, #96	@ 0x60
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b08e      	sub	sp, #56	@ 0x38
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
 800ea50:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f107 0214 	add.w	r2, r7, #20
 800ea62:	4611      	mov	r1, r2
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7ff fdb7 	bl	800e5d8 <validate>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ea70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d107      	bne.n	800ea88 <f_read+0x44>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	7d5b      	ldrb	r3, [r3, #21]
 800ea7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ea80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d002      	beq.n	800ea8e <f_read+0x4a>
 800ea88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ea8c:	e115      	b.n	800ecba <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	7d1b      	ldrb	r3, [r3, #20]
 800ea92:	f003 0301 	and.w	r3, r3, #1
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d101      	bne.n	800ea9e <f_read+0x5a>
 800ea9a:	2307      	movs	r3, #7
 800ea9c:	e10d      	b.n	800ecba <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	68da      	ldr	r2, [r3, #12]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	699b      	ldr	r3, [r3, #24]
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	6a3b      	ldr	r3, [r7, #32]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	f240 80fe 	bls.w	800ecb0 <f_read+0x26c>
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eab8:	e0fa      	b.n	800ecb0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	699b      	ldr	r3, [r3, #24]
 800eabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f040 80c6 	bne.w	800ec54 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	0a5b      	lsrs	r3, r3, #9
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	8952      	ldrh	r2, [r2, #10]
 800ead2:	3a01      	subs	r2, #1
 800ead4:	4013      	ands	r3, r2
 800ead6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d12f      	bne.n	800eb3e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	699b      	ldr	r3, [r3, #24]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d103      	bne.n	800eaee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	633b      	str	r3, [r7, #48]	@ 0x30
 800eaec:	e013      	b.n	800eb16 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d007      	beq.n	800eb06 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	4619      	mov	r1, r3
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f7fe fefe 	bl	800d8fe <clmt_clust>
 800eb02:	6338      	str	r0, [r7, #48]	@ 0x30
 800eb04:	e007      	b.n	800eb16 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	69db      	ldr	r3, [r3, #28]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	4610      	mov	r0, r2
 800eb10:	f7fe fc67 	bl	800d3e2 <get_fat>
 800eb14:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d804      	bhi.n	800eb26 <f_read+0xe2>
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2202      	movs	r2, #2
 800eb20:	755a      	strb	r2, [r3, #21]
 800eb22:	2302      	movs	r3, #2
 800eb24:	e0c9      	b.n	800ecba <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2c:	d104      	bne.n	800eb38 <f_read+0xf4>
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2201      	movs	r2, #1
 800eb32:	755a      	strb	r2, [r3, #21]
 800eb34:	2301      	movs	r3, #1
 800eb36:	e0c0      	b.n	800ecba <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb3c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eb3e:	697a      	ldr	r2, [r7, #20]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	69db      	ldr	r3, [r3, #28]
 800eb44:	4619      	mov	r1, r3
 800eb46:	4610      	mov	r0, r2
 800eb48:	f7fe fc2c 	bl	800d3a4 <clust2sect>
 800eb4c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d104      	bne.n	800eb5e <f_read+0x11a>
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2202      	movs	r2, #2
 800eb58:	755a      	strb	r2, [r3, #21]
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	e0ad      	b.n	800ecba <f_read+0x276>
			sect += csect;
 800eb5e:	69ba      	ldr	r2, [r7, #24]
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	4413      	add	r3, r2
 800eb64:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	0a5b      	lsrs	r3, r3, #9
 800eb6a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d039      	beq.n	800ebe6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eb72:	69fa      	ldr	r2, [r7, #28]
 800eb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb76:	4413      	add	r3, r2
 800eb78:	697a      	ldr	r2, [r7, #20]
 800eb7a:	8952      	ldrh	r2, [r2, #10]
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d905      	bls.n	800eb8c <f_read+0x148>
					cc = fs->csize - csect;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	895b      	ldrh	r3, [r3, #10]
 800eb84:	461a      	mov	r2, r3
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	7858      	ldrb	r0, [r3, #1]
 800eb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb92:	69ba      	ldr	r2, [r7, #24]
 800eb94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb96:	f7fe f85b 	bl	800cc50 <disk_read>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d004      	beq.n	800ebaa <f_read+0x166>
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2201      	movs	r2, #1
 800eba4:	755a      	strb	r2, [r3, #21]
 800eba6:	2301      	movs	r3, #1
 800eba8:	e087      	b.n	800ecba <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	7d1b      	ldrb	r3, [r3, #20]
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	da14      	bge.n	800ebde <f_read+0x19a>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6a1a      	ldr	r2, [r3, #32]
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d90d      	bls.n	800ebde <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6a1a      	ldr	r2, [r3, #32]
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	025b      	lsls	r3, r3, #9
 800ebcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebce:	18d0      	adds	r0, r2, r3
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3330      	adds	r3, #48	@ 0x30
 800ebd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebd8:	4619      	mov	r1, r3
 800ebda:	f7fe f919 	bl	800ce10 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ebde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe0:	025b      	lsls	r3, r3, #9
 800ebe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ebe4:	e050      	b.n	800ec88 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	6a1b      	ldr	r3, [r3, #32]
 800ebea:	69ba      	ldr	r2, [r7, #24]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d02e      	beq.n	800ec4e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	7d1b      	ldrb	r3, [r3, #20]
 800ebf4:	b25b      	sxtb	r3, r3
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	da18      	bge.n	800ec2c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	7858      	ldrb	r0, [r3, #1]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6a1a      	ldr	r2, [r3, #32]
 800ec08:	2301      	movs	r3, #1
 800ec0a:	f7fe f841 	bl	800cc90 <disk_write>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d004      	beq.n	800ec1e <f_read+0x1da>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2201      	movs	r2, #1
 800ec18:	755a      	strb	r2, [r3, #21]
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e04d      	b.n	800ecba <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	7d1b      	ldrb	r3, [r3, #20]
 800ec22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	7858      	ldrb	r0, [r3, #1]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec36:	2301      	movs	r3, #1
 800ec38:	69ba      	ldr	r2, [r7, #24]
 800ec3a:	f7fe f809 	bl	800cc50 <disk_read>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d004      	beq.n	800ec4e <f_read+0x20a>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2201      	movs	r2, #1
 800ec48:	755a      	strb	r2, [r3, #21]
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e035      	b.n	800ecba <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	69ba      	ldr	r2, [r7, #24]
 800ec52:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec5c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ec60:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ec62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d901      	bls.n	800ec6e <f_read+0x22a>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	699b      	ldr	r3, [r3, #24]
 800ec78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec7c:	4413      	add	r3, r2
 800ec7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec80:	4619      	mov	r1, r3
 800ec82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec84:	f7fe f8c4 	bl	800ce10 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ec88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8c:	4413      	add	r3, r2
 800ec8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	699a      	ldr	r2, [r3, #24]
 800ec94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec96:	441a      	add	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	619a      	str	r2, [r3, #24]
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca2:	441a      	add	r2, r3
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	601a      	str	r2, [r3, #0]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f47f af01 	bne.w	800eaba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3738      	adds	r7, #56	@ 0x38
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b086      	sub	sp, #24
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f107 0208 	add.w	r2, r7, #8
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7ff fc80 	bl	800e5d8 <validate>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d168      	bne.n	800edb4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	7d1b      	ldrb	r3, [r3, #20]
 800ece6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d062      	beq.n	800edb4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	7d1b      	ldrb	r3, [r3, #20]
 800ecf2:	b25b      	sxtb	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	da15      	bge.n	800ed24 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	7858      	ldrb	r0, [r3, #1]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a1a      	ldr	r2, [r3, #32]
 800ed06:	2301      	movs	r3, #1
 800ed08:	f7fd ffc2 	bl	800cc90 <disk_write>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <f_sync+0x54>
 800ed12:	2301      	movs	r3, #1
 800ed14:	e04f      	b.n	800edb6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	7d1b      	ldrb	r3, [r3, #20]
 800ed1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ed24:	f7fb ff22 	bl	800ab6c <get_fattime>
 800ed28:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ed2a:	68ba      	ldr	r2, [r7, #8]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed30:	4619      	mov	r1, r3
 800ed32:	4610      	mov	r0, r2
 800ed34:	f7fe fa9a 	bl	800d26c <move_window>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ed3c:	7dfb      	ldrb	r3, [r7, #23]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d138      	bne.n	800edb4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed46:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	330b      	adds	r3, #11
 800ed4c:	781a      	ldrb	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	330b      	adds	r3, #11
 800ed52:	f042 0220 	orr.w	r2, r2, #32
 800ed56:	b2d2      	uxtb	r2, r2
 800ed58:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6818      	ldr	r0, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	461a      	mov	r2, r3
 800ed64:	68f9      	ldr	r1, [r7, #12]
 800ed66:	f7fe ffa4 	bl	800dcb2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f103 021c 	add.w	r2, r3, #28
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	4619      	mov	r1, r3
 800ed76:	4610      	mov	r0, r2
 800ed78:	f7fe f81e 	bl	800cdb8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	3316      	adds	r3, #22
 800ed80:	6939      	ldr	r1, [r7, #16]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe f818 	bl	800cdb8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3312      	adds	r3, #18
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fd fff7 	bl	800cd82 <st_word>
					fs->wflag = 1;
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2201      	movs	r2, #1
 800ed98:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fe fa93 	bl	800d2c8 <sync_fs>
 800eda2:	4603      	mov	r3, r0
 800eda4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	7d1b      	ldrb	r3, [r3, #20]
 800edaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800edae:	b2da      	uxtb	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800edb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3718      	adds	r7, #24
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b084      	sub	sp, #16
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7ff ff7b 	bl	800ecc2 <f_sync>
 800edcc:	4603      	mov	r3, r0
 800edce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d118      	bne.n	800ee08 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f107 0208 	add.w	r2, r7, #8
 800eddc:	4611      	mov	r1, r2
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff fbfa 	bl	800e5d8 <validate>
 800ede4:	4603      	mov	r3, r0
 800ede6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10c      	bne.n	800ee08 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	691b      	ldr	r3, [r3, #16]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7fe f996 	bl	800d124 <dec_lock>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d102      	bne.n	800ee08 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
	...

0800ee14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b087      	sub	sp, #28
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ee22:	2301      	movs	r3, #1
 800ee24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ee26:	2300      	movs	r3, #0
 800ee28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ee2a:	4b1f      	ldr	r3, [pc, #124]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee2c:	7a5b      	ldrb	r3, [r3, #9]
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d131      	bne.n	800ee98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ee34:	4b1c      	ldr	r3, [pc, #112]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee36:	7a5b      	ldrb	r3, [r3, #9]
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	4b1a      	ldr	r3, [pc, #104]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee3e:	2100      	movs	r1, #0
 800ee40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ee42:	4b19      	ldr	r3, [pc, #100]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee44:	7a5b      	ldrb	r3, [r3, #9]
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	4a17      	ldr	r2, [pc, #92]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	4413      	add	r3, r2
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ee52:	4b15      	ldr	r3, [pc, #84]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee54:	7a5b      	ldrb	r3, [r3, #9]
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	461a      	mov	r2, r3
 800ee5a:	4b13      	ldr	r3, [pc, #76]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee5c:	4413      	add	r3, r2
 800ee5e:	79fa      	ldrb	r2, [r7, #7]
 800ee60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ee62:	4b11      	ldr	r3, [pc, #68]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee64:	7a5b      	ldrb	r3, [r3, #9]
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	1c5a      	adds	r2, r3, #1
 800ee6a:	b2d1      	uxtb	r1, r2
 800ee6c:	4a0e      	ldr	r2, [pc, #56]	@ (800eea8 <FATFS_LinkDriverEx+0x94>)
 800ee6e:	7251      	strb	r1, [r2, #9]
 800ee70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ee72:	7dbb      	ldrb	r3, [r7, #22]
 800ee74:	3330      	adds	r3, #48	@ 0x30
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	223a      	movs	r2, #58	@ 0x3a
 800ee82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	3302      	adds	r3, #2
 800ee88:	222f      	movs	r2, #47	@ 0x2f
 800ee8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	3303      	adds	r3, #3
 800ee90:	2200      	movs	r2, #0
 800ee92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ee94:	2300      	movs	r3, #0
 800ee96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ee98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	371c      	adds	r7, #28
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	20000464 	.word	0x20000464

0800eeac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	6839      	ldr	r1, [r7, #0]
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff ffaa 	bl	800ee14 <FATFS_LinkDriverEx>
 800eec0:	4603      	mov	r3, r0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
	...

0800eecc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eed0:	2200      	movs	r2, #0
 800eed2:	4912      	ldr	r1, [pc, #72]	@ (800ef1c <MX_USB_DEVICE_Init+0x50>)
 800eed4:	4812      	ldr	r0, [pc, #72]	@ (800ef20 <MX_USB_DEVICE_Init+0x54>)
 800eed6:	f7fc fb77 	bl	800b5c8 <USBD_Init>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d001      	beq.n	800eee4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eee0:	f7f2 fc6a 	bl	80017b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eee4:	490f      	ldr	r1, [pc, #60]	@ (800ef24 <MX_USB_DEVICE_Init+0x58>)
 800eee6:	480e      	ldr	r0, [pc, #56]	@ (800ef20 <MX_USB_DEVICE_Init+0x54>)
 800eee8:	f7fc fb9e 	bl	800b628 <USBD_RegisterClass>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eef2:	f7f2 fc61 	bl	80017b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eef6:	490c      	ldr	r1, [pc, #48]	@ (800ef28 <MX_USB_DEVICE_Init+0x5c>)
 800eef8:	4809      	ldr	r0, [pc, #36]	@ (800ef20 <MX_USB_DEVICE_Init+0x54>)
 800eefa:	f7fc fa95 	bl	800b428 <USBD_CDC_RegisterInterface>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef04:	f7f2 fc58 	bl	80017b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef08:	4805      	ldr	r0, [pc, #20]	@ (800ef20 <MX_USB_DEVICE_Init+0x54>)
 800ef0a:	f7fc fbc3 	bl	800b694 <USBD_Start>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef14:	f7f2 fc50 	bl	80017b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef18:	bf00      	nop
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	200000ec 	.word	0x200000ec
 800ef20:	20000470 	.word	0x20000470
 800ef24:	20000058 	.word	0x20000058
 800ef28:	200000d8 	.word	0x200000d8

0800ef2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ef30:	2200      	movs	r2, #0
 800ef32:	4905      	ldr	r1, [pc, #20]	@ (800ef48 <CDC_Init_FS+0x1c>)
 800ef34:	4805      	ldr	r0, [pc, #20]	@ (800ef4c <CDC_Init_FS+0x20>)
 800ef36:	f7fc fa91 	bl	800b45c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ef3a:	4905      	ldr	r1, [pc, #20]	@ (800ef50 <CDC_Init_FS+0x24>)
 800ef3c:	4803      	ldr	r0, [pc, #12]	@ (800ef4c <CDC_Init_FS+0x20>)
 800ef3e:	f7fc faaf 	bl	800b4a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ef42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	20000b4c 	.word	0x20000b4c
 800ef4c:	20000470 	.word	0x20000470
 800ef50:	2000074c 	.word	0x2000074c

0800ef54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ef54:	b480      	push	{r7}
 800ef56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ef58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	6039      	str	r1, [r7, #0]
 800ef6e:	71fb      	strb	r3, [r7, #7]
 800ef70:	4613      	mov	r3, r2
 800ef72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ef74:	79fb      	ldrb	r3, [r7, #7]
 800ef76:	2b23      	cmp	r3, #35	@ 0x23
 800ef78:	d84a      	bhi.n	800f010 <CDC_Control_FS+0xac>
 800ef7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef80 <CDC_Control_FS+0x1c>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800f011 	.word	0x0800f011
 800ef84:	0800f011 	.word	0x0800f011
 800ef88:	0800f011 	.word	0x0800f011
 800ef8c:	0800f011 	.word	0x0800f011
 800ef90:	0800f011 	.word	0x0800f011
 800ef94:	0800f011 	.word	0x0800f011
 800ef98:	0800f011 	.word	0x0800f011
 800ef9c:	0800f011 	.word	0x0800f011
 800efa0:	0800f011 	.word	0x0800f011
 800efa4:	0800f011 	.word	0x0800f011
 800efa8:	0800f011 	.word	0x0800f011
 800efac:	0800f011 	.word	0x0800f011
 800efb0:	0800f011 	.word	0x0800f011
 800efb4:	0800f011 	.word	0x0800f011
 800efb8:	0800f011 	.word	0x0800f011
 800efbc:	0800f011 	.word	0x0800f011
 800efc0:	0800f011 	.word	0x0800f011
 800efc4:	0800f011 	.word	0x0800f011
 800efc8:	0800f011 	.word	0x0800f011
 800efcc:	0800f011 	.word	0x0800f011
 800efd0:	0800f011 	.word	0x0800f011
 800efd4:	0800f011 	.word	0x0800f011
 800efd8:	0800f011 	.word	0x0800f011
 800efdc:	0800f011 	.word	0x0800f011
 800efe0:	0800f011 	.word	0x0800f011
 800efe4:	0800f011 	.word	0x0800f011
 800efe8:	0800f011 	.word	0x0800f011
 800efec:	0800f011 	.word	0x0800f011
 800eff0:	0800f011 	.word	0x0800f011
 800eff4:	0800f011 	.word	0x0800f011
 800eff8:	0800f011 	.word	0x0800f011
 800effc:	0800f011 	.word	0x0800f011
 800f000:	0800f011 	.word	0x0800f011
 800f004:	0800f011 	.word	0x0800f011
 800f008:	0800f011 	.word	0x0800f011
 800f00c:	0800f011 	.word	0x0800f011
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f010:	bf00      	nop
  }

  return (USBD_OK);
 800f012:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f014:	4618      	mov	r0, r3
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	4805      	ldr	r0, [pc, #20]	@ (800f044 <CDC_Receive_FS+0x24>)
 800f02e:	f7fc fa37 	bl	800b4a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f032:	4804      	ldr	r0, [pc, #16]	@ (800f044 <CDC_Receive_FS+0x24>)
 800f034:	f7fc fa92 	bl	800b55c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f038:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	20000470 	.word	0x20000470

0800f048 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	460b      	mov	r3, r1
 800f052:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f058:	4b0d      	ldr	r3, [pc, #52]	@ (800f090 <CDC_Transmit_FS+0x48>)
 800f05a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f05e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f06a:	2301      	movs	r3, #1
 800f06c:	e00b      	b.n	800f086 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f06e:	887b      	ldrh	r3, [r7, #2]
 800f070:	461a      	mov	r2, r3
 800f072:	6879      	ldr	r1, [r7, #4]
 800f074:	4806      	ldr	r0, [pc, #24]	@ (800f090 <CDC_Transmit_FS+0x48>)
 800f076:	f7fc f9f1 	bl	800b45c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f07a:	4805      	ldr	r0, [pc, #20]	@ (800f090 <CDC_Transmit_FS+0x48>)
 800f07c:	f7fc fa2e 	bl	800b4dc <USBD_CDC_TransmitPacket>
 800f080:	4603      	mov	r3, r0
 800f082:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f084:	7bfb      	ldrb	r3, [r7, #15]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	20000470 	.word	0x20000470

0800f094 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f094:	b480      	push	{r7}
 800f096:	b087      	sub	sp, #28
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	4613      	mov	r3, r2
 800f0a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f0a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	371c      	adds	r7, #28
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
	...

0800f0b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	4603      	mov	r3, r0
 800f0c0:	6039      	str	r1, [r7, #0]
 800f0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	2212      	movs	r2, #18
 800f0c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f0ca:	4b03      	ldr	r3, [pc, #12]	@ (800f0d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	20000108 	.word	0x20000108

0800f0dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	6039      	str	r1, [r7, #0]
 800f0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	2204      	movs	r2, #4
 800f0ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f0ee:	4b03      	ldr	r3, [pc, #12]	@ (800f0fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	2000011c 	.word	0x2000011c

0800f100 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	4603      	mov	r3, r0
 800f108:	6039      	str	r1, [r7, #0]
 800f10a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f10c:	79fb      	ldrb	r3, [r7, #7]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d105      	bne.n	800f11e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	4907      	ldr	r1, [pc, #28]	@ (800f134 <USBD_FS_ProductStrDescriptor+0x34>)
 800f116:	4808      	ldr	r0, [pc, #32]	@ (800f138 <USBD_FS_ProductStrDescriptor+0x38>)
 800f118:	f7fd fc6c 	bl	800c9f4 <USBD_GetString>
 800f11c:	e004      	b.n	800f128 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	4904      	ldr	r1, [pc, #16]	@ (800f134 <USBD_FS_ProductStrDescriptor+0x34>)
 800f122:	4805      	ldr	r0, [pc, #20]	@ (800f138 <USBD_FS_ProductStrDescriptor+0x38>)
 800f124:	f7fd fc66 	bl	800c9f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f128:	4b02      	ldr	r3, [pc, #8]	@ (800f134 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	20000f4c 	.word	0x20000f4c
 800f138:	08010638 	.word	0x08010638

0800f13c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	4603      	mov	r3, r0
 800f144:	6039      	str	r1, [r7, #0]
 800f146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	4904      	ldr	r1, [pc, #16]	@ (800f15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f14c:	4804      	ldr	r0, [pc, #16]	@ (800f160 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f14e:	f7fd fc51 	bl	800c9f4 <USBD_GetString>
  return USBD_StrDesc;
 800f152:	4b02      	ldr	r3, [pc, #8]	@ (800f15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f154:	4618      	mov	r0, r3
 800f156:	3708      	adds	r7, #8
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	20000f4c 	.word	0x20000f4c
 800f160:	08010650 	.word	0x08010650

0800f164 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	4603      	mov	r3, r0
 800f16c:	6039      	str	r1, [r7, #0]
 800f16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	221a      	movs	r2, #26
 800f174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f176:	f000 f843 	bl	800f200 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f17a:	4b02      	ldr	r3, [pc, #8]	@ (800f184 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20000120 	.word	0x20000120

0800f188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	6039      	str	r1, [r7, #0]
 800f192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f194:	79fb      	ldrb	r3, [r7, #7]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d105      	bne.n	800f1a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	4907      	ldr	r1, [pc, #28]	@ (800f1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f19e:	4808      	ldr	r0, [pc, #32]	@ (800f1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1a0:	f7fd fc28 	bl	800c9f4 <USBD_GetString>
 800f1a4:	e004      	b.n	800f1b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1a6:	683a      	ldr	r2, [r7, #0]
 800f1a8:	4904      	ldr	r1, [pc, #16]	@ (800f1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1aa:	4805      	ldr	r0, [pc, #20]	@ (800f1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1ac:	f7fd fc22 	bl	800c9f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1b0:	4b02      	ldr	r3, [pc, #8]	@ (800f1bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20000f4c 	.word	0x20000f4c
 800f1c0:	08010664 	.word	0x08010664

0800f1c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b082      	sub	sp, #8
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	6039      	str	r1, [r7, #0]
 800f1ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d105      	bne.n	800f1e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	4907      	ldr	r1, [pc, #28]	@ (800f1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f1da:	4808      	ldr	r0, [pc, #32]	@ (800f1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f1dc:	f7fd fc0a 	bl	800c9f4 <USBD_GetString>
 800f1e0:	e004      	b.n	800f1ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f1e2:	683a      	ldr	r2, [r7, #0]
 800f1e4:	4904      	ldr	r1, [pc, #16]	@ (800f1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f1e6:	4805      	ldr	r0, [pc, #20]	@ (800f1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f1e8:	f7fd fc04 	bl	800c9f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1ec:	4b02      	ldr	r3, [pc, #8]	@ (800f1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	20000f4c 	.word	0x20000f4c
 800f1fc:	08010670 	.word	0x08010670

0800f200 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f206:	4b0f      	ldr	r3, [pc, #60]	@ (800f244 <Get_SerialNum+0x44>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f20c:	4b0e      	ldr	r3, [pc, #56]	@ (800f248 <Get_SerialNum+0x48>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f212:	4b0e      	ldr	r3, [pc, #56]	@ (800f24c <Get_SerialNum+0x4c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4413      	add	r3, r2
 800f21e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d009      	beq.n	800f23a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f226:	2208      	movs	r2, #8
 800f228:	4909      	ldr	r1, [pc, #36]	@ (800f250 <Get_SerialNum+0x50>)
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f000 f814 	bl	800f258 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f230:	2204      	movs	r2, #4
 800f232:	4908      	ldr	r1, [pc, #32]	@ (800f254 <Get_SerialNum+0x54>)
 800f234:	68b8      	ldr	r0, [r7, #8]
 800f236:	f000 f80f 	bl	800f258 <IntToUnicode>
  }
}
 800f23a:	bf00      	nop
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	1fff7a10 	.word	0x1fff7a10
 800f248:	1fff7a14 	.word	0x1fff7a14
 800f24c:	1fff7a18 	.word	0x1fff7a18
 800f250:	20000122 	.word	0x20000122
 800f254:	20000132 	.word	0x20000132

0800f258 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f258:	b480      	push	{r7}
 800f25a:	b087      	sub	sp, #28
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	4613      	mov	r3, r2
 800f264:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f266:	2300      	movs	r3, #0
 800f268:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f26a:	2300      	movs	r3, #0
 800f26c:	75fb      	strb	r3, [r7, #23]
 800f26e:	e027      	b.n	800f2c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	0f1b      	lsrs	r3, r3, #28
 800f274:	2b09      	cmp	r3, #9
 800f276:	d80b      	bhi.n	800f290 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	0f1b      	lsrs	r3, r3, #28
 800f27c:	b2da      	uxtb	r2, r3
 800f27e:	7dfb      	ldrb	r3, [r7, #23]
 800f280:	005b      	lsls	r3, r3, #1
 800f282:	4619      	mov	r1, r3
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	440b      	add	r3, r1
 800f288:	3230      	adds	r2, #48	@ 0x30
 800f28a:	b2d2      	uxtb	r2, r2
 800f28c:	701a      	strb	r2, [r3, #0]
 800f28e:	e00a      	b.n	800f2a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	0f1b      	lsrs	r3, r3, #28
 800f294:	b2da      	uxtb	r2, r3
 800f296:	7dfb      	ldrb	r3, [r7, #23]
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	4619      	mov	r1, r3
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	440b      	add	r3, r1
 800f2a0:	3237      	adds	r2, #55	@ 0x37
 800f2a2:	b2d2      	uxtb	r2, r2
 800f2a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	011b      	lsls	r3, r3, #4
 800f2aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f2ac:	7dfb      	ldrb	r3, [r7, #23]
 800f2ae:	005b      	lsls	r3, r3, #1
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	68ba      	ldr	r2, [r7, #8]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	75fb      	strb	r3, [r7, #23]
 800f2c0:	7dfa      	ldrb	r2, [r7, #23]
 800f2c2:	79fb      	ldrb	r3, [r7, #7]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d3d3      	bcc.n	800f270 <IntToUnicode+0x18>
  }
}
 800f2c8:	bf00      	nop
 800f2ca:	bf00      	nop
 800f2cc:	371c      	adds	r7, #28
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
	...

0800f2d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	@ 0x28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2e0:	f107 0314 	add.w	r3, r7, #20
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	601a      	str	r2, [r3, #0]
 800f2e8:	605a      	str	r2, [r3, #4]
 800f2ea:	609a      	str	r2, [r3, #8]
 800f2ec:	60da      	str	r2, [r3, #12]
 800f2ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f2f8:	d13a      	bne.n	800f370 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	613b      	str	r3, [r7, #16]
 800f2fe:	4b1e      	ldr	r3, [pc, #120]	@ (800f378 <HAL_PCD_MspInit+0xa0>)
 800f300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f302:	4a1d      	ldr	r2, [pc, #116]	@ (800f378 <HAL_PCD_MspInit+0xa0>)
 800f304:	f043 0301 	orr.w	r3, r3, #1
 800f308:	6313      	str	r3, [r2, #48]	@ 0x30
 800f30a:	4b1b      	ldr	r3, [pc, #108]	@ (800f378 <HAL_PCD_MspInit+0xa0>)
 800f30c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f30e:	f003 0301 	and.w	r3, r3, #1
 800f312:	613b      	str	r3, [r7, #16]
 800f314:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f316:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f31a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f31c:	2302      	movs	r3, #2
 800f31e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f320:	2300      	movs	r3, #0
 800f322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f324:	2303      	movs	r3, #3
 800f326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f328:	230a      	movs	r3, #10
 800f32a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f32c:	f107 0314 	add.w	r3, r7, #20
 800f330:	4619      	mov	r1, r3
 800f332:	4812      	ldr	r0, [pc, #72]	@ (800f37c <HAL_PCD_MspInit+0xa4>)
 800f334:	f7f6 f89c 	bl	8005470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f338:	4b0f      	ldr	r3, [pc, #60]	@ (800f378 <HAL_PCD_MspInit+0xa0>)
 800f33a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f33c:	4a0e      	ldr	r2, [pc, #56]	@ (800f378 <HAL_PCD_MspInit+0xa0>)
 800f33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f342:	6353      	str	r3, [r2, #52]	@ 0x34
 800f344:	2300      	movs	r3, #0
 800f346:	60fb      	str	r3, [r7, #12]
 800f348:	4b0b      	ldr	r3, [pc, #44]	@ (800f378 <HAL_PCD_MspInit+0xa0>)
 800f34a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f34c:	4a0a      	ldr	r2, [pc, #40]	@ (800f378 <HAL_PCD_MspInit+0xa0>)
 800f34e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f352:	6453      	str	r3, [r2, #68]	@ 0x44
 800f354:	4b08      	ldr	r3, [pc, #32]	@ (800f378 <HAL_PCD_MspInit+0xa0>)
 800f356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f35c:	60fb      	str	r3, [r7, #12]
 800f35e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f360:	2200      	movs	r2, #0
 800f362:	2100      	movs	r1, #0
 800f364:	2043      	movs	r0, #67	@ 0x43
 800f366:	f7f5 fcba 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f36a:	2043      	movs	r0, #67	@ 0x43
 800f36c:	f7f5 fcd3 	bl	8004d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f370:	bf00      	nop
 800f372:	3728      	adds	r7, #40	@ 0x28
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	40023800 	.word	0x40023800
 800f37c:	40020000 	.word	0x40020000

0800f380 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f394:	4619      	mov	r1, r3
 800f396:	4610      	mov	r0, r2
 800f398:	f7fc f9c9 	bl	800b72e <USBD_LL_SetupStage>
}
 800f39c:	bf00      	nop
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f3b6:	78fa      	ldrb	r2, [r7, #3]
 800f3b8:	6879      	ldr	r1, [r7, #4]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	00db      	lsls	r3, r3, #3
 800f3be:	4413      	add	r3, r2
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	440b      	add	r3, r1
 800f3c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	78fb      	ldrb	r3, [r7, #3]
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	f7fc fa03 	bl	800b7d8 <USBD_LL_DataOutStage>
}
 800f3d2:	bf00      	nop
 800f3d4:	3708      	adds	r7, #8
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}

0800f3da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b082      	sub	sp, #8
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f3ec:	78fa      	ldrb	r2, [r7, #3]
 800f3ee:	6879      	ldr	r1, [r7, #4]
 800f3f0:	4613      	mov	r3, r2
 800f3f2:	00db      	lsls	r3, r3, #3
 800f3f4:	4413      	add	r3, r2
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	440b      	add	r3, r1
 800f3fa:	3320      	adds	r3, #32
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	78fb      	ldrb	r3, [r7, #3]
 800f400:	4619      	mov	r1, r3
 800f402:	f7fc fa9c 	bl	800b93e <USBD_LL_DataInStage>
}
 800f406:	bf00      	nop
 800f408:	3708      	adds	r7, #8
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b082      	sub	sp, #8
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fc fbd6 	bl	800bbce <USBD_LL_SOF>
}
 800f422:	bf00      	nop
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b084      	sub	sp, #16
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f432:	2301      	movs	r3, #1
 800f434:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	79db      	ldrb	r3, [r3, #7]
 800f43a:	2b02      	cmp	r3, #2
 800f43c:	d001      	beq.n	800f442 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f43e:	f7f2 f9bb 	bl	80017b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f448:	7bfa      	ldrb	r2, [r7, #15]
 800f44a:	4611      	mov	r1, r2
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fc fb7a 	bl	800bb46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fc fb22 	bl	800baa2 <USBD_LL_Reset>
}
 800f45e:	bf00      	nop
 800f460:	3710      	adds	r7, #16
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
	...

0800f468 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f476:	4618      	mov	r0, r3
 800f478:	f7fc fb75 	bl	800bb66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	6812      	ldr	r2, [r2, #0]
 800f48a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f48e:	f043 0301 	orr.w	r3, r3, #1
 800f492:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	7adb      	ldrb	r3, [r3, #11]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d005      	beq.n	800f4a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f49c:	4b04      	ldr	r3, [pc, #16]	@ (800f4b0 <HAL_PCD_SuspendCallback+0x48>)
 800f49e:	691b      	ldr	r3, [r3, #16]
 800f4a0:	4a03      	ldr	r2, [pc, #12]	@ (800f4b0 <HAL_PCD_SuspendCallback+0x48>)
 800f4a2:	f043 0306 	orr.w	r3, r3, #6
 800f4a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f4a8:	bf00      	nop
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	e000ed00 	.word	0xe000ed00

0800f4b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fc fb6b 	bl	800bb9e <USBD_LL_Resume>
}
 800f4c8:	bf00      	nop
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4e2:	78fa      	ldrb	r2, [r7, #3]
 800f4e4:	4611      	mov	r1, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fc fbc3 	bl	800bc72 <USBD_LL_IsoOUTIncomplete>
}
 800f4ec:	bf00      	nop
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f506:	78fa      	ldrb	r2, [r7, #3]
 800f508:	4611      	mov	r1, r2
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fc fb7f 	bl	800bc0e <USBD_LL_IsoINIncomplete>
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f526:	4618      	mov	r0, r3
 800f528:	f7fc fbd5 	bl	800bcd6 <USBD_LL_DevConnected>
}
 800f52c:	bf00      	nop
 800f52e:	3708      	adds	r7, #8
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f542:	4618      	mov	r0, r3
 800f544:	f7fc fbd2 	bl	800bcec <USBD_LL_DevDisconnected>
}
 800f548:	bf00      	nop
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d13c      	bne.n	800f5da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f560:	4a20      	ldr	r2, [pc, #128]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a1e      	ldr	r2, [pc, #120]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f56c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f570:	4b1c      	ldr	r3, [pc, #112]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f572:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f576:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f578:	4b1a      	ldr	r3, [pc, #104]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f57a:	2204      	movs	r2, #4
 800f57c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f57e:	4b19      	ldr	r3, [pc, #100]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f580:	2202      	movs	r2, #2
 800f582:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f584:	4b17      	ldr	r3, [pc, #92]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f586:	2200      	movs	r2, #0
 800f588:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f58a:	4b16      	ldr	r3, [pc, #88]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f58c:	2202      	movs	r2, #2
 800f58e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f590:	4b14      	ldr	r3, [pc, #80]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f592:	2200      	movs	r2, #0
 800f594:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f596:	4b13      	ldr	r3, [pc, #76]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f598:	2200      	movs	r2, #0
 800f59a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f59c:	4b11      	ldr	r3, [pc, #68]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f59e:	2200      	movs	r2, #0
 800f5a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f5a2:	4b10      	ldr	r3, [pc, #64]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f5a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f5ae:	480d      	ldr	r0, [pc, #52]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f5b0:	f7f6 f914 	bl	80057dc <HAL_PCD_Init>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d001      	beq.n	800f5be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f5ba:	f7f2 f8fd 	bl	80017b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f5be:	2180      	movs	r1, #128	@ 0x80
 800f5c0:	4808      	ldr	r0, [pc, #32]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f5c2:	f7f7 fb40 	bl	8006c46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f5c6:	2240      	movs	r2, #64	@ 0x40
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	4806      	ldr	r0, [pc, #24]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f5cc:	f7f7 faf4 	bl	8006bb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f5d0:	2280      	movs	r2, #128	@ 0x80
 800f5d2:	2101      	movs	r1, #1
 800f5d4:	4803      	ldr	r0, [pc, #12]	@ (800f5e4 <USBD_LL_Init+0x94>)
 800f5d6:	f7f7 faef 	bl	8006bb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	2000114c 	.word	0x2000114c

0800f5e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7f6 f9fb 	bl	80059fa <HAL_PCD_Start>
 800f604:	4603      	mov	r3, r0
 800f606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f608:	7bfb      	ldrb	r3, [r7, #15]
 800f60a:	4618      	mov	r0, r3
 800f60c:	f000 f942 	bl	800f894 <USBD_Get_USB_Status>
 800f610:	4603      	mov	r3, r0
 800f612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f614:	7bbb      	ldrb	r3, [r7, #14]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3710      	adds	r7, #16
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}

0800f61e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f61e:	b580      	push	{r7, lr}
 800f620:	b084      	sub	sp, #16
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
 800f626:	4608      	mov	r0, r1
 800f628:	4611      	mov	r1, r2
 800f62a:	461a      	mov	r2, r3
 800f62c:	4603      	mov	r3, r0
 800f62e:	70fb      	strb	r3, [r7, #3]
 800f630:	460b      	mov	r3, r1
 800f632:	70bb      	strb	r3, [r7, #2]
 800f634:	4613      	mov	r3, r2
 800f636:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f646:	78bb      	ldrb	r3, [r7, #2]
 800f648:	883a      	ldrh	r2, [r7, #0]
 800f64a:	78f9      	ldrb	r1, [r7, #3]
 800f64c:	f7f6 fecf 	bl	80063ee <HAL_PCD_EP_Open>
 800f650:	4603      	mov	r3, r0
 800f652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f654:	7bfb      	ldrb	r3, [r7, #15]
 800f656:	4618      	mov	r0, r3
 800f658:	f000 f91c 	bl	800f894 <USBD_Get_USB_Status>
 800f65c:	4603      	mov	r3, r0
 800f65e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f660:	7bbb      	ldrb	r3, [r7, #14]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b084      	sub	sp, #16
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
 800f672:	460b      	mov	r3, r1
 800f674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f676:	2300      	movs	r3, #0
 800f678:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f684:	78fa      	ldrb	r2, [r7, #3]
 800f686:	4611      	mov	r1, r2
 800f688:	4618      	mov	r0, r3
 800f68a:	f7f6 ff1a 	bl	80064c2 <HAL_PCD_EP_Close>
 800f68e:	4603      	mov	r3, r0
 800f690:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f692:	7bfb      	ldrb	r3, [r7, #15]
 800f694:	4618      	mov	r0, r3
 800f696:	f000 f8fd 	bl	800f894 <USBD_Get_USB_Status>
 800f69a:	4603      	mov	r3, r0
 800f69c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f69e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3710      	adds	r7, #16
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6c2:	78fa      	ldrb	r2, [r7, #3]
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f6 ffd2 	bl	8006670 <HAL_PCD_EP_SetStall>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6d0:	7bfb      	ldrb	r3, [r7, #15]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f000 f8de 	bl	800f894 <USBD_Get_USB_Status>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f700:	78fa      	ldrb	r2, [r7, #3]
 800f702:	4611      	mov	r1, r2
 800f704:	4618      	mov	r0, r3
 800f706:	f7f7 f816 	bl	8006736 <HAL_PCD_EP_ClrStall>
 800f70a:	4603      	mov	r3, r0
 800f70c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f70e:	7bfb      	ldrb	r3, [r7, #15]
 800f710:	4618      	mov	r0, r3
 800f712:	f000 f8bf 	bl	800f894 <USBD_Get_USB_Status>
 800f716:	4603      	mov	r3, r0
 800f718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3710      	adds	r7, #16
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	460b      	mov	r3, r1
 800f72e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f736:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	da0b      	bge.n	800f758 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f740:	78fb      	ldrb	r3, [r7, #3]
 800f742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f746:	68f9      	ldr	r1, [r7, #12]
 800f748:	4613      	mov	r3, r2
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	4413      	add	r3, r2
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	440b      	add	r3, r1
 800f752:	3316      	adds	r3, #22
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	e00b      	b.n	800f770 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f758:	78fb      	ldrb	r3, [r7, #3]
 800f75a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f75e:	68f9      	ldr	r1, [r7, #12]
 800f760:	4613      	mov	r3, r2
 800f762:	00db      	lsls	r3, r3, #3
 800f764:	4413      	add	r3, r2
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	440b      	add	r3, r1
 800f76a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f76e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f770:	4618      	mov	r0, r3
 800f772:	3714      	adds	r7, #20
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	460b      	mov	r3, r1
 800f786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f788:	2300      	movs	r3, #0
 800f78a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f78c:	2300      	movs	r3, #0
 800f78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f796:	78fa      	ldrb	r2, [r7, #3]
 800f798:	4611      	mov	r1, r2
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7f6 fe03 	bl	80063a6 <HAL_PCD_SetAddress>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f000 f874 	bl	800f894 <USBD_Get_USB_Status>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3710      	adds	r7, #16
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b086      	sub	sp, #24
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	60f8      	str	r0, [r7, #12]
 800f7c2:	607a      	str	r2, [r7, #4]
 800f7c4:	603b      	str	r3, [r7, #0]
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f7d8:	7af9      	ldrb	r1, [r7, #11]
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	f7f6 ff0d 	bl	80065fc <HAL_PCD_EP_Transmit>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f000 f853 	bl	800f894 <USBD_Get_USB_Status>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3718      	adds	r7, #24
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	607a      	str	r2, [r7, #4]
 800f806:	603b      	str	r3, [r7, #0]
 800f808:	460b      	mov	r3, r1
 800f80a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f80c:	2300      	movs	r3, #0
 800f80e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f810:	2300      	movs	r3, #0
 800f812:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f81a:	7af9      	ldrb	r1, [r7, #11]
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	f7f6 fe99 	bl	8006556 <HAL_PCD_EP_Receive>
 800f824:	4603      	mov	r3, r0
 800f826:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f828:	7dfb      	ldrb	r3, [r7, #23]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f000 f832 	bl	800f894 <USBD_Get_USB_Status>
 800f830:	4603      	mov	r3, r0
 800f832:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f834:	7dbb      	ldrb	r3, [r7, #22]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3718      	adds	r7, #24
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b082      	sub	sp, #8
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	460b      	mov	r3, r1
 800f848:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f850:	78fa      	ldrb	r2, [r7, #3]
 800f852:	4611      	mov	r1, r2
 800f854:	4618      	mov	r0, r3
 800f856:	f7f6 feb9 	bl	80065cc <HAL_PCD_EP_GetRxCount>
 800f85a:	4603      	mov	r3, r0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f86c:	4b03      	ldr	r3, [pc, #12]	@ (800f87c <USBD_static_malloc+0x18>)
}
 800f86e:	4618      	mov	r0, r3
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	20001630 	.word	0x20001630

0800f880 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]

}
 800f888:	bf00      	nop
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	4603      	mov	r3, r0
 800f89c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f8a2:	79fb      	ldrb	r3, [r7, #7]
 800f8a4:	2b03      	cmp	r3, #3
 800f8a6:	d817      	bhi.n	800f8d8 <USBD_Get_USB_Status+0x44>
 800f8a8:	a201      	add	r2, pc, #4	@ (adr r2, 800f8b0 <USBD_Get_USB_Status+0x1c>)
 800f8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ae:	bf00      	nop
 800f8b0:	0800f8c1 	.word	0x0800f8c1
 800f8b4:	0800f8c7 	.word	0x0800f8c7
 800f8b8:	0800f8cd 	.word	0x0800f8cd
 800f8bc:	0800f8d3 	.word	0x0800f8d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c4:	e00b      	b.n	800f8de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8c6:	2303      	movs	r3, #3
 800f8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f8ca:	e008      	b.n	800f8de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f8d0:	e005      	b.n	800f8de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f8d2:	2303      	movs	r3, #3
 800f8d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f8d6:	e002      	b.n	800f8de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f8d8:	2303      	movs	r3, #3
 800f8da:	73fb      	strb	r3, [r7, #15]
    break;
 800f8dc:	bf00      	nop
  }
  return usb_status;
 800f8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3714      	adds	r7, #20
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <_ZdlPvj>:
 800f8ec:	f000 b811 	b.w	800f912 <_ZdlPv>

0800f8f0 <_Znwj>:
 800f8f0:	2801      	cmp	r0, #1
 800f8f2:	bf38      	it	cc
 800f8f4:	2001      	movcc	r0, #1
 800f8f6:	b510      	push	{r4, lr}
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f000 f836 	bl	800f96c <malloc>
 800f900:	b100      	cbz	r0, 800f904 <_Znwj+0x14>
 800f902:	bd10      	pop	{r4, pc}
 800f904:	f000 f808 	bl	800f918 <_ZSt15get_new_handlerv>
 800f908:	b908      	cbnz	r0, 800f90e <_Znwj+0x1e>
 800f90a:	f000 f80d 	bl	800f928 <abort>
 800f90e:	4780      	blx	r0
 800f910:	e7f3      	b.n	800f8fa <_Znwj+0xa>

0800f912 <_ZdlPv>:
 800f912:	f000 b833 	b.w	800f97c <free>
	...

0800f918 <_ZSt15get_new_handlerv>:
 800f918:	4b02      	ldr	r3, [pc, #8]	@ (800f924 <_ZSt15get_new_handlerv+0xc>)
 800f91a:	6818      	ldr	r0, [r3, #0]
 800f91c:	f3bf 8f5b 	dmb	ish
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	20001850 	.word	0x20001850

0800f928 <abort>:
 800f928:	b508      	push	{r3, lr}
 800f92a:	2006      	movs	r0, #6
 800f92c:	f000 f9ae 	bl	800fc8c <raise>
 800f930:	2001      	movs	r0, #1
 800f932:	f7f2 fbdb 	bl	80020ec <_exit>

0800f936 <__itoa>:
 800f936:	1e93      	subs	r3, r2, #2
 800f938:	2b22      	cmp	r3, #34	@ 0x22
 800f93a:	b510      	push	{r4, lr}
 800f93c:	460c      	mov	r4, r1
 800f93e:	d904      	bls.n	800f94a <__itoa+0x14>
 800f940:	2300      	movs	r3, #0
 800f942:	700b      	strb	r3, [r1, #0]
 800f944:	461c      	mov	r4, r3
 800f946:	4620      	mov	r0, r4
 800f948:	bd10      	pop	{r4, pc}
 800f94a:	2a0a      	cmp	r2, #10
 800f94c:	d109      	bne.n	800f962 <__itoa+0x2c>
 800f94e:	2800      	cmp	r0, #0
 800f950:	da07      	bge.n	800f962 <__itoa+0x2c>
 800f952:	232d      	movs	r3, #45	@ 0x2d
 800f954:	700b      	strb	r3, [r1, #0]
 800f956:	4240      	negs	r0, r0
 800f958:	2101      	movs	r1, #1
 800f95a:	4421      	add	r1, r4
 800f95c:	f000 f8c4 	bl	800fae8 <__utoa>
 800f960:	e7f1      	b.n	800f946 <__itoa+0x10>
 800f962:	2100      	movs	r1, #0
 800f964:	e7f9      	b.n	800f95a <__itoa+0x24>

0800f966 <itoa>:
 800f966:	f7ff bfe6 	b.w	800f936 <__itoa>
	...

0800f96c <malloc>:
 800f96c:	4b02      	ldr	r3, [pc, #8]	@ (800f978 <malloc+0xc>)
 800f96e:	4601      	mov	r1, r0
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	f000 b82d 	b.w	800f9d0 <_malloc_r>
 800f976:	bf00      	nop
 800f978:	2000013c 	.word	0x2000013c

0800f97c <free>:
 800f97c:	4b02      	ldr	r3, [pc, #8]	@ (800f988 <free+0xc>)
 800f97e:	4601      	mov	r1, r0
 800f980:	6818      	ldr	r0, [r3, #0]
 800f982:	f000 b9e9 	b.w	800fd58 <_free_r>
 800f986:	bf00      	nop
 800f988:	2000013c 	.word	0x2000013c

0800f98c <sbrk_aligned>:
 800f98c:	b570      	push	{r4, r5, r6, lr}
 800f98e:	4e0f      	ldr	r6, [pc, #60]	@ (800f9cc <sbrk_aligned+0x40>)
 800f990:	460c      	mov	r4, r1
 800f992:	6831      	ldr	r1, [r6, #0]
 800f994:	4605      	mov	r5, r0
 800f996:	b911      	cbnz	r1, 800f99e <sbrk_aligned+0x12>
 800f998:	f000 f994 	bl	800fcc4 <_sbrk_r>
 800f99c:	6030      	str	r0, [r6, #0]
 800f99e:	4621      	mov	r1, r4
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f000 f98f 	bl	800fcc4 <_sbrk_r>
 800f9a6:	1c43      	adds	r3, r0, #1
 800f9a8:	d103      	bne.n	800f9b2 <sbrk_aligned+0x26>
 800f9aa:	f04f 34ff 	mov.w	r4, #4294967295
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	bd70      	pop	{r4, r5, r6, pc}
 800f9b2:	1cc4      	adds	r4, r0, #3
 800f9b4:	f024 0403 	bic.w	r4, r4, #3
 800f9b8:	42a0      	cmp	r0, r4
 800f9ba:	d0f8      	beq.n	800f9ae <sbrk_aligned+0x22>
 800f9bc:	1a21      	subs	r1, r4, r0
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f000 f980 	bl	800fcc4 <_sbrk_r>
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	d1f2      	bne.n	800f9ae <sbrk_aligned+0x22>
 800f9c8:	e7ef      	b.n	800f9aa <sbrk_aligned+0x1e>
 800f9ca:	bf00      	nop
 800f9cc:	20001854 	.word	0x20001854

0800f9d0 <_malloc_r>:
 800f9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d4:	1ccd      	adds	r5, r1, #3
 800f9d6:	f025 0503 	bic.w	r5, r5, #3
 800f9da:	3508      	adds	r5, #8
 800f9dc:	2d0c      	cmp	r5, #12
 800f9de:	bf38      	it	cc
 800f9e0:	250c      	movcc	r5, #12
 800f9e2:	2d00      	cmp	r5, #0
 800f9e4:	4606      	mov	r6, r0
 800f9e6:	db01      	blt.n	800f9ec <_malloc_r+0x1c>
 800f9e8:	42a9      	cmp	r1, r5
 800f9ea:	d904      	bls.n	800f9f6 <_malloc_r+0x26>
 800f9ec:	230c      	movs	r3, #12
 800f9ee:	6033      	str	r3, [r6, #0]
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800facc <_malloc_r+0xfc>
 800f9fa:	f000 f869 	bl	800fad0 <__malloc_lock>
 800f9fe:	f8d8 3000 	ldr.w	r3, [r8]
 800fa02:	461c      	mov	r4, r3
 800fa04:	bb44      	cbnz	r4, 800fa58 <_malloc_r+0x88>
 800fa06:	4629      	mov	r1, r5
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f7ff ffbf 	bl	800f98c <sbrk_aligned>
 800fa0e:	1c43      	adds	r3, r0, #1
 800fa10:	4604      	mov	r4, r0
 800fa12:	d158      	bne.n	800fac6 <_malloc_r+0xf6>
 800fa14:	f8d8 4000 	ldr.w	r4, [r8]
 800fa18:	4627      	mov	r7, r4
 800fa1a:	2f00      	cmp	r7, #0
 800fa1c:	d143      	bne.n	800faa6 <_malloc_r+0xd6>
 800fa1e:	2c00      	cmp	r4, #0
 800fa20:	d04b      	beq.n	800faba <_malloc_r+0xea>
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	4639      	mov	r1, r7
 800fa26:	4630      	mov	r0, r6
 800fa28:	eb04 0903 	add.w	r9, r4, r3
 800fa2c:	f000 f94a 	bl	800fcc4 <_sbrk_r>
 800fa30:	4581      	cmp	r9, r0
 800fa32:	d142      	bne.n	800faba <_malloc_r+0xea>
 800fa34:	6821      	ldr	r1, [r4, #0]
 800fa36:	1a6d      	subs	r5, r5, r1
 800fa38:	4629      	mov	r1, r5
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f7ff ffa6 	bl	800f98c <sbrk_aligned>
 800fa40:	3001      	adds	r0, #1
 800fa42:	d03a      	beq.n	800faba <_malloc_r+0xea>
 800fa44:	6823      	ldr	r3, [r4, #0]
 800fa46:	442b      	add	r3, r5
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	f8d8 3000 	ldr.w	r3, [r8]
 800fa4e:	685a      	ldr	r2, [r3, #4]
 800fa50:	bb62      	cbnz	r2, 800faac <_malloc_r+0xdc>
 800fa52:	f8c8 7000 	str.w	r7, [r8]
 800fa56:	e00f      	b.n	800fa78 <_malloc_r+0xa8>
 800fa58:	6822      	ldr	r2, [r4, #0]
 800fa5a:	1b52      	subs	r2, r2, r5
 800fa5c:	d420      	bmi.n	800faa0 <_malloc_r+0xd0>
 800fa5e:	2a0b      	cmp	r2, #11
 800fa60:	d917      	bls.n	800fa92 <_malloc_r+0xc2>
 800fa62:	1961      	adds	r1, r4, r5
 800fa64:	42a3      	cmp	r3, r4
 800fa66:	6025      	str	r5, [r4, #0]
 800fa68:	bf18      	it	ne
 800fa6a:	6059      	strne	r1, [r3, #4]
 800fa6c:	6863      	ldr	r3, [r4, #4]
 800fa6e:	bf08      	it	eq
 800fa70:	f8c8 1000 	streq.w	r1, [r8]
 800fa74:	5162      	str	r2, [r4, r5]
 800fa76:	604b      	str	r3, [r1, #4]
 800fa78:	4630      	mov	r0, r6
 800fa7a:	f000 f82f 	bl	800fadc <__malloc_unlock>
 800fa7e:	f104 000b 	add.w	r0, r4, #11
 800fa82:	1d23      	adds	r3, r4, #4
 800fa84:	f020 0007 	bic.w	r0, r0, #7
 800fa88:	1ac2      	subs	r2, r0, r3
 800fa8a:	bf1c      	itt	ne
 800fa8c:	1a1b      	subne	r3, r3, r0
 800fa8e:	50a3      	strne	r3, [r4, r2]
 800fa90:	e7af      	b.n	800f9f2 <_malloc_r+0x22>
 800fa92:	6862      	ldr	r2, [r4, #4]
 800fa94:	42a3      	cmp	r3, r4
 800fa96:	bf0c      	ite	eq
 800fa98:	f8c8 2000 	streq.w	r2, [r8]
 800fa9c:	605a      	strne	r2, [r3, #4]
 800fa9e:	e7eb      	b.n	800fa78 <_malloc_r+0xa8>
 800faa0:	4623      	mov	r3, r4
 800faa2:	6864      	ldr	r4, [r4, #4]
 800faa4:	e7ae      	b.n	800fa04 <_malloc_r+0x34>
 800faa6:	463c      	mov	r4, r7
 800faa8:	687f      	ldr	r7, [r7, #4]
 800faaa:	e7b6      	b.n	800fa1a <_malloc_r+0x4a>
 800faac:	461a      	mov	r2, r3
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	42a3      	cmp	r3, r4
 800fab2:	d1fb      	bne.n	800faac <_malloc_r+0xdc>
 800fab4:	2300      	movs	r3, #0
 800fab6:	6053      	str	r3, [r2, #4]
 800fab8:	e7de      	b.n	800fa78 <_malloc_r+0xa8>
 800faba:	230c      	movs	r3, #12
 800fabc:	6033      	str	r3, [r6, #0]
 800fabe:	4630      	mov	r0, r6
 800fac0:	f000 f80c 	bl	800fadc <__malloc_unlock>
 800fac4:	e794      	b.n	800f9f0 <_malloc_r+0x20>
 800fac6:	6005      	str	r5, [r0, #0]
 800fac8:	e7d6      	b.n	800fa78 <_malloc_r+0xa8>
 800faca:	bf00      	nop
 800facc:	20001858 	.word	0x20001858

0800fad0 <__malloc_lock>:
 800fad0:	4801      	ldr	r0, [pc, #4]	@ (800fad8 <__malloc_lock+0x8>)
 800fad2:	f000 b931 	b.w	800fd38 <__retarget_lock_acquire_recursive>
 800fad6:	bf00      	nop
 800fad8:	20001998 	.word	0x20001998

0800fadc <__malloc_unlock>:
 800fadc:	4801      	ldr	r0, [pc, #4]	@ (800fae4 <__malloc_unlock+0x8>)
 800fade:	f000 b92c 	b.w	800fd3a <__retarget_lock_release_recursive>
 800fae2:	bf00      	nop
 800fae4:	20001998 	.word	0x20001998

0800fae8 <__utoa>:
 800fae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faea:	4c1f      	ldr	r4, [pc, #124]	@ (800fb68 <__utoa+0x80>)
 800faec:	b08b      	sub	sp, #44	@ 0x2c
 800faee:	4605      	mov	r5, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	466e      	mov	r6, sp
 800faf4:	f104 0c20 	add.w	ip, r4, #32
 800faf8:	6820      	ldr	r0, [r4, #0]
 800fafa:	6861      	ldr	r1, [r4, #4]
 800fafc:	4637      	mov	r7, r6
 800fafe:	c703      	stmia	r7!, {r0, r1}
 800fb00:	3408      	adds	r4, #8
 800fb02:	4564      	cmp	r4, ip
 800fb04:	463e      	mov	r6, r7
 800fb06:	d1f7      	bne.n	800faf8 <__utoa+0x10>
 800fb08:	7921      	ldrb	r1, [r4, #4]
 800fb0a:	7139      	strb	r1, [r7, #4]
 800fb0c:	1e91      	subs	r1, r2, #2
 800fb0e:	6820      	ldr	r0, [r4, #0]
 800fb10:	6038      	str	r0, [r7, #0]
 800fb12:	2922      	cmp	r1, #34	@ 0x22
 800fb14:	f04f 0100 	mov.w	r1, #0
 800fb18:	d904      	bls.n	800fb24 <__utoa+0x3c>
 800fb1a:	7019      	strb	r1, [r3, #0]
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	4618      	mov	r0, r3
 800fb20:	b00b      	add	sp, #44	@ 0x2c
 800fb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb24:	1e58      	subs	r0, r3, #1
 800fb26:	4684      	mov	ip, r0
 800fb28:	fbb5 f7f2 	udiv	r7, r5, r2
 800fb2c:	fb02 5617 	mls	r6, r2, r7, r5
 800fb30:	3628      	adds	r6, #40	@ 0x28
 800fb32:	446e      	add	r6, sp
 800fb34:	460c      	mov	r4, r1
 800fb36:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800fb3a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800fb3e:	462e      	mov	r6, r5
 800fb40:	42b2      	cmp	r2, r6
 800fb42:	f101 0101 	add.w	r1, r1, #1
 800fb46:	463d      	mov	r5, r7
 800fb48:	d9ee      	bls.n	800fb28 <__utoa+0x40>
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	545a      	strb	r2, [r3, r1]
 800fb4e:	1919      	adds	r1, r3, r4
 800fb50:	1aa5      	subs	r5, r4, r2
 800fb52:	42aa      	cmp	r2, r5
 800fb54:	dae3      	bge.n	800fb1e <__utoa+0x36>
 800fb56:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800fb5a:	780e      	ldrb	r6, [r1, #0]
 800fb5c:	7006      	strb	r6, [r0, #0]
 800fb5e:	3201      	adds	r2, #1
 800fb60:	f801 5901 	strb.w	r5, [r1], #-1
 800fb64:	e7f4      	b.n	800fb50 <__utoa+0x68>
 800fb66:	bf00      	nop
 800fb68:	080181a4 	.word	0x080181a4

0800fb6c <_vsniprintf_r>:
 800fb6c:	b530      	push	{r4, r5, lr}
 800fb6e:	4614      	mov	r4, r2
 800fb70:	2c00      	cmp	r4, #0
 800fb72:	b09b      	sub	sp, #108	@ 0x6c
 800fb74:	4605      	mov	r5, r0
 800fb76:	461a      	mov	r2, r3
 800fb78:	da05      	bge.n	800fb86 <_vsniprintf_r+0x1a>
 800fb7a:	238b      	movs	r3, #139	@ 0x8b
 800fb7c:	6003      	str	r3, [r0, #0]
 800fb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb82:	b01b      	add	sp, #108	@ 0x6c
 800fb84:	bd30      	pop	{r4, r5, pc}
 800fb86:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fb8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fb8e:	bf14      	ite	ne
 800fb90:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb94:	4623      	moveq	r3, r4
 800fb96:	9302      	str	r3, [sp, #8]
 800fb98:	9305      	str	r3, [sp, #20]
 800fb9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb9e:	9100      	str	r1, [sp, #0]
 800fba0:	9104      	str	r1, [sp, #16]
 800fba2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fba6:	4669      	mov	r1, sp
 800fba8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fbaa:	f000 f97b 	bl	800fea4 <_svfiprintf_r>
 800fbae:	1c43      	adds	r3, r0, #1
 800fbb0:	bfbc      	itt	lt
 800fbb2:	238b      	movlt	r3, #139	@ 0x8b
 800fbb4:	602b      	strlt	r3, [r5, #0]
 800fbb6:	2c00      	cmp	r4, #0
 800fbb8:	d0e3      	beq.n	800fb82 <_vsniprintf_r+0x16>
 800fbba:	9b00      	ldr	r3, [sp, #0]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	701a      	strb	r2, [r3, #0]
 800fbc0:	e7df      	b.n	800fb82 <_vsniprintf_r+0x16>
	...

0800fbc4 <vsniprintf>:
 800fbc4:	b507      	push	{r0, r1, r2, lr}
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	4613      	mov	r3, r2
 800fbca:	460a      	mov	r2, r1
 800fbcc:	4601      	mov	r1, r0
 800fbce:	4803      	ldr	r0, [pc, #12]	@ (800fbdc <vsniprintf+0x18>)
 800fbd0:	6800      	ldr	r0, [r0, #0]
 800fbd2:	f7ff ffcb 	bl	800fb6c <_vsniprintf_r>
 800fbd6:	b003      	add	sp, #12
 800fbd8:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbdc:	2000013c 	.word	0x2000013c

0800fbe0 <memset>:
 800fbe0:	4402      	add	r2, r0
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d100      	bne.n	800fbea <memset+0xa>
 800fbe8:	4770      	bx	lr
 800fbea:	f803 1b01 	strb.w	r1, [r3], #1
 800fbee:	e7f9      	b.n	800fbe4 <memset+0x4>

0800fbf0 <strncat>:
 800fbf0:	b530      	push	{r4, r5, lr}
 800fbf2:	4604      	mov	r4, r0
 800fbf4:	7825      	ldrb	r5, [r4, #0]
 800fbf6:	4623      	mov	r3, r4
 800fbf8:	3401      	adds	r4, #1
 800fbfa:	2d00      	cmp	r5, #0
 800fbfc:	d1fa      	bne.n	800fbf4 <strncat+0x4>
 800fbfe:	3a01      	subs	r2, #1
 800fc00:	d304      	bcc.n	800fc0c <strncat+0x1c>
 800fc02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc06:	f803 4b01 	strb.w	r4, [r3], #1
 800fc0a:	b904      	cbnz	r4, 800fc0e <strncat+0x1e>
 800fc0c:	bd30      	pop	{r4, r5, pc}
 800fc0e:	2a00      	cmp	r2, #0
 800fc10:	d1f5      	bne.n	800fbfe <strncat+0xe>
 800fc12:	701a      	strb	r2, [r3, #0]
 800fc14:	e7f3      	b.n	800fbfe <strncat+0xe>

0800fc16 <strncpy>:
 800fc16:	b510      	push	{r4, lr}
 800fc18:	3901      	subs	r1, #1
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	b132      	cbz	r2, 800fc2c <strncpy+0x16>
 800fc1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fc22:	f803 4b01 	strb.w	r4, [r3], #1
 800fc26:	3a01      	subs	r2, #1
 800fc28:	2c00      	cmp	r4, #0
 800fc2a:	d1f7      	bne.n	800fc1c <strncpy+0x6>
 800fc2c:	441a      	add	r2, r3
 800fc2e:	2100      	movs	r1, #0
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d100      	bne.n	800fc36 <strncpy+0x20>
 800fc34:	bd10      	pop	{r4, pc}
 800fc36:	f803 1b01 	strb.w	r1, [r3], #1
 800fc3a:	e7f9      	b.n	800fc30 <strncpy+0x1a>

0800fc3c <_raise_r>:
 800fc3c:	291f      	cmp	r1, #31
 800fc3e:	b538      	push	{r3, r4, r5, lr}
 800fc40:	4605      	mov	r5, r0
 800fc42:	460c      	mov	r4, r1
 800fc44:	d904      	bls.n	800fc50 <_raise_r+0x14>
 800fc46:	2316      	movs	r3, #22
 800fc48:	6003      	str	r3, [r0, #0]
 800fc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc52:	b112      	cbz	r2, 800fc5a <_raise_r+0x1e>
 800fc54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc58:	b94b      	cbnz	r3, 800fc6e <_raise_r+0x32>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f000 f830 	bl	800fcc0 <_getpid_r>
 800fc60:	4622      	mov	r2, r4
 800fc62:	4601      	mov	r1, r0
 800fc64:	4628      	mov	r0, r5
 800fc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc6a:	f000 b817 	b.w	800fc9c <_kill_r>
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d00a      	beq.n	800fc88 <_raise_r+0x4c>
 800fc72:	1c59      	adds	r1, r3, #1
 800fc74:	d103      	bne.n	800fc7e <_raise_r+0x42>
 800fc76:	2316      	movs	r3, #22
 800fc78:	6003      	str	r3, [r0, #0]
 800fc7a:	2001      	movs	r0, #1
 800fc7c:	e7e7      	b.n	800fc4e <_raise_r+0x12>
 800fc7e:	2100      	movs	r1, #0
 800fc80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc84:	4620      	mov	r0, r4
 800fc86:	4798      	blx	r3
 800fc88:	2000      	movs	r0, #0
 800fc8a:	e7e0      	b.n	800fc4e <_raise_r+0x12>

0800fc8c <raise>:
 800fc8c:	4b02      	ldr	r3, [pc, #8]	@ (800fc98 <raise+0xc>)
 800fc8e:	4601      	mov	r1, r0
 800fc90:	6818      	ldr	r0, [r3, #0]
 800fc92:	f7ff bfd3 	b.w	800fc3c <_raise_r>
 800fc96:	bf00      	nop
 800fc98:	2000013c 	.word	0x2000013c

0800fc9c <_kill_r>:
 800fc9c:	b538      	push	{r3, r4, r5, lr}
 800fc9e:	4d07      	ldr	r5, [pc, #28]	@ (800fcbc <_kill_r+0x20>)
 800fca0:	2300      	movs	r3, #0
 800fca2:	4604      	mov	r4, r0
 800fca4:	4608      	mov	r0, r1
 800fca6:	4611      	mov	r1, r2
 800fca8:	602b      	str	r3, [r5, #0]
 800fcaa:	f7f2 fa0f 	bl	80020cc <_kill>
 800fcae:	1c43      	adds	r3, r0, #1
 800fcb0:	d102      	bne.n	800fcb8 <_kill_r+0x1c>
 800fcb2:	682b      	ldr	r3, [r5, #0]
 800fcb4:	b103      	cbz	r3, 800fcb8 <_kill_r+0x1c>
 800fcb6:	6023      	str	r3, [r4, #0]
 800fcb8:	bd38      	pop	{r3, r4, r5, pc}
 800fcba:	bf00      	nop
 800fcbc:	20001994 	.word	0x20001994

0800fcc0 <_getpid_r>:
 800fcc0:	f7f2 b9fc 	b.w	80020bc <_getpid>

0800fcc4 <_sbrk_r>:
 800fcc4:	b538      	push	{r3, r4, r5, lr}
 800fcc6:	4d06      	ldr	r5, [pc, #24]	@ (800fce0 <_sbrk_r+0x1c>)
 800fcc8:	2300      	movs	r3, #0
 800fcca:	4604      	mov	r4, r0
 800fccc:	4608      	mov	r0, r1
 800fcce:	602b      	str	r3, [r5, #0]
 800fcd0:	f7f2 fa18 	bl	8002104 <_sbrk>
 800fcd4:	1c43      	adds	r3, r0, #1
 800fcd6:	d102      	bne.n	800fcde <_sbrk_r+0x1a>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	b103      	cbz	r3, 800fcde <_sbrk_r+0x1a>
 800fcdc:	6023      	str	r3, [r4, #0]
 800fcde:	bd38      	pop	{r3, r4, r5, pc}
 800fce0:	20001994 	.word	0x20001994

0800fce4 <__errno>:
 800fce4:	4b01      	ldr	r3, [pc, #4]	@ (800fcec <__errno+0x8>)
 800fce6:	6818      	ldr	r0, [r3, #0]
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	2000013c 	.word	0x2000013c

0800fcf0 <__libc_init_array>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	4d0d      	ldr	r5, [pc, #52]	@ (800fd28 <__libc_init_array+0x38>)
 800fcf4:	4c0d      	ldr	r4, [pc, #52]	@ (800fd2c <__libc_init_array+0x3c>)
 800fcf6:	1b64      	subs	r4, r4, r5
 800fcf8:	10a4      	asrs	r4, r4, #2
 800fcfa:	2600      	movs	r6, #0
 800fcfc:	42a6      	cmp	r6, r4
 800fcfe:	d109      	bne.n	800fd14 <__libc_init_array+0x24>
 800fd00:	4d0b      	ldr	r5, [pc, #44]	@ (800fd30 <__libc_init_array+0x40>)
 800fd02:	4c0c      	ldr	r4, [pc, #48]	@ (800fd34 <__libc_init_array+0x44>)
 800fd04:	f000 fba8 	bl	8010458 <_init>
 800fd08:	1b64      	subs	r4, r4, r5
 800fd0a:	10a4      	asrs	r4, r4, #2
 800fd0c:	2600      	movs	r6, #0
 800fd0e:	42a6      	cmp	r6, r4
 800fd10:	d105      	bne.n	800fd1e <__libc_init_array+0x2e>
 800fd12:	bd70      	pop	{r4, r5, r6, pc}
 800fd14:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd18:	4798      	blx	r3
 800fd1a:	3601      	adds	r6, #1
 800fd1c:	e7ee      	b.n	800fcfc <__libc_init_array+0xc>
 800fd1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd22:	4798      	blx	r3
 800fd24:	3601      	adds	r6, #1
 800fd26:	e7f2      	b.n	800fd0e <__libc_init_array+0x1e>
 800fd28:	08018204 	.word	0x08018204
 800fd2c:	08018204 	.word	0x08018204
 800fd30:	08018204 	.word	0x08018204
 800fd34:	08018210 	.word	0x08018210

0800fd38 <__retarget_lock_acquire_recursive>:
 800fd38:	4770      	bx	lr

0800fd3a <__retarget_lock_release_recursive>:
 800fd3a:	4770      	bx	lr

0800fd3c <memcpy>:
 800fd3c:	440a      	add	r2, r1
 800fd3e:	4291      	cmp	r1, r2
 800fd40:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd44:	d100      	bne.n	800fd48 <memcpy+0xc>
 800fd46:	4770      	bx	lr
 800fd48:	b510      	push	{r4, lr}
 800fd4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd52:	4291      	cmp	r1, r2
 800fd54:	d1f9      	bne.n	800fd4a <memcpy+0xe>
 800fd56:	bd10      	pop	{r4, pc}

0800fd58 <_free_r>:
 800fd58:	b538      	push	{r3, r4, r5, lr}
 800fd5a:	4605      	mov	r5, r0
 800fd5c:	2900      	cmp	r1, #0
 800fd5e:	d041      	beq.n	800fde4 <_free_r+0x8c>
 800fd60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd64:	1f0c      	subs	r4, r1, #4
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	bfb8      	it	lt
 800fd6a:	18e4      	addlt	r4, r4, r3
 800fd6c:	f7ff feb0 	bl	800fad0 <__malloc_lock>
 800fd70:	4a1d      	ldr	r2, [pc, #116]	@ (800fde8 <_free_r+0x90>)
 800fd72:	6813      	ldr	r3, [r2, #0]
 800fd74:	b933      	cbnz	r3, 800fd84 <_free_r+0x2c>
 800fd76:	6063      	str	r3, [r4, #4]
 800fd78:	6014      	str	r4, [r2, #0]
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd80:	f7ff beac 	b.w	800fadc <__malloc_unlock>
 800fd84:	42a3      	cmp	r3, r4
 800fd86:	d908      	bls.n	800fd9a <_free_r+0x42>
 800fd88:	6820      	ldr	r0, [r4, #0]
 800fd8a:	1821      	adds	r1, r4, r0
 800fd8c:	428b      	cmp	r3, r1
 800fd8e:	bf01      	itttt	eq
 800fd90:	6819      	ldreq	r1, [r3, #0]
 800fd92:	685b      	ldreq	r3, [r3, #4]
 800fd94:	1809      	addeq	r1, r1, r0
 800fd96:	6021      	streq	r1, [r4, #0]
 800fd98:	e7ed      	b.n	800fd76 <_free_r+0x1e>
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	b10b      	cbz	r3, 800fda4 <_free_r+0x4c>
 800fda0:	42a3      	cmp	r3, r4
 800fda2:	d9fa      	bls.n	800fd9a <_free_r+0x42>
 800fda4:	6811      	ldr	r1, [r2, #0]
 800fda6:	1850      	adds	r0, r2, r1
 800fda8:	42a0      	cmp	r0, r4
 800fdaa:	d10b      	bne.n	800fdc4 <_free_r+0x6c>
 800fdac:	6820      	ldr	r0, [r4, #0]
 800fdae:	4401      	add	r1, r0
 800fdb0:	1850      	adds	r0, r2, r1
 800fdb2:	4283      	cmp	r3, r0
 800fdb4:	6011      	str	r1, [r2, #0]
 800fdb6:	d1e0      	bne.n	800fd7a <_free_r+0x22>
 800fdb8:	6818      	ldr	r0, [r3, #0]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	6053      	str	r3, [r2, #4]
 800fdbe:	4408      	add	r0, r1
 800fdc0:	6010      	str	r0, [r2, #0]
 800fdc2:	e7da      	b.n	800fd7a <_free_r+0x22>
 800fdc4:	d902      	bls.n	800fdcc <_free_r+0x74>
 800fdc6:	230c      	movs	r3, #12
 800fdc8:	602b      	str	r3, [r5, #0]
 800fdca:	e7d6      	b.n	800fd7a <_free_r+0x22>
 800fdcc:	6820      	ldr	r0, [r4, #0]
 800fdce:	1821      	adds	r1, r4, r0
 800fdd0:	428b      	cmp	r3, r1
 800fdd2:	bf04      	itt	eq
 800fdd4:	6819      	ldreq	r1, [r3, #0]
 800fdd6:	685b      	ldreq	r3, [r3, #4]
 800fdd8:	6063      	str	r3, [r4, #4]
 800fdda:	bf04      	itt	eq
 800fddc:	1809      	addeq	r1, r1, r0
 800fdde:	6021      	streq	r1, [r4, #0]
 800fde0:	6054      	str	r4, [r2, #4]
 800fde2:	e7ca      	b.n	800fd7a <_free_r+0x22>
 800fde4:	bd38      	pop	{r3, r4, r5, pc}
 800fde6:	bf00      	nop
 800fde8:	20001858 	.word	0x20001858

0800fdec <__ssputs_r>:
 800fdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdf0:	688e      	ldr	r6, [r1, #8]
 800fdf2:	461f      	mov	r7, r3
 800fdf4:	42be      	cmp	r6, r7
 800fdf6:	680b      	ldr	r3, [r1, #0]
 800fdf8:	4682      	mov	sl, r0
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	4690      	mov	r8, r2
 800fdfe:	d82d      	bhi.n	800fe5c <__ssputs_r+0x70>
 800fe00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe08:	d026      	beq.n	800fe58 <__ssputs_r+0x6c>
 800fe0a:	6965      	ldr	r5, [r4, #20]
 800fe0c:	6909      	ldr	r1, [r1, #16]
 800fe0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe12:	eba3 0901 	sub.w	r9, r3, r1
 800fe16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe1a:	1c7b      	adds	r3, r7, #1
 800fe1c:	444b      	add	r3, r9
 800fe1e:	106d      	asrs	r5, r5, #1
 800fe20:	429d      	cmp	r5, r3
 800fe22:	bf38      	it	cc
 800fe24:	461d      	movcc	r5, r3
 800fe26:	0553      	lsls	r3, r2, #21
 800fe28:	d527      	bpl.n	800fe7a <__ssputs_r+0x8e>
 800fe2a:	4629      	mov	r1, r5
 800fe2c:	f7ff fdd0 	bl	800f9d0 <_malloc_r>
 800fe30:	4606      	mov	r6, r0
 800fe32:	b360      	cbz	r0, 800fe8e <__ssputs_r+0xa2>
 800fe34:	6921      	ldr	r1, [r4, #16]
 800fe36:	464a      	mov	r2, r9
 800fe38:	f7ff ff80 	bl	800fd3c <memcpy>
 800fe3c:	89a3      	ldrh	r3, [r4, #12]
 800fe3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe46:	81a3      	strh	r3, [r4, #12]
 800fe48:	6126      	str	r6, [r4, #16]
 800fe4a:	6165      	str	r5, [r4, #20]
 800fe4c:	444e      	add	r6, r9
 800fe4e:	eba5 0509 	sub.w	r5, r5, r9
 800fe52:	6026      	str	r6, [r4, #0]
 800fe54:	60a5      	str	r5, [r4, #8]
 800fe56:	463e      	mov	r6, r7
 800fe58:	42be      	cmp	r6, r7
 800fe5a:	d900      	bls.n	800fe5e <__ssputs_r+0x72>
 800fe5c:	463e      	mov	r6, r7
 800fe5e:	6820      	ldr	r0, [r4, #0]
 800fe60:	4632      	mov	r2, r6
 800fe62:	4641      	mov	r1, r8
 800fe64:	f000 faa8 	bl	80103b8 <memmove>
 800fe68:	68a3      	ldr	r3, [r4, #8]
 800fe6a:	1b9b      	subs	r3, r3, r6
 800fe6c:	60a3      	str	r3, [r4, #8]
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	4433      	add	r3, r6
 800fe72:	6023      	str	r3, [r4, #0]
 800fe74:	2000      	movs	r0, #0
 800fe76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe7a:	462a      	mov	r2, r5
 800fe7c:	f000 fab6 	bl	80103ec <_realloc_r>
 800fe80:	4606      	mov	r6, r0
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d1e0      	bne.n	800fe48 <__ssputs_r+0x5c>
 800fe86:	6921      	ldr	r1, [r4, #16]
 800fe88:	4650      	mov	r0, sl
 800fe8a:	f7ff ff65 	bl	800fd58 <_free_r>
 800fe8e:	230c      	movs	r3, #12
 800fe90:	f8ca 3000 	str.w	r3, [sl]
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe9a:	81a3      	strh	r3, [r4, #12]
 800fe9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fea0:	e7e9      	b.n	800fe76 <__ssputs_r+0x8a>
	...

0800fea4 <_svfiprintf_r>:
 800fea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea8:	4698      	mov	r8, r3
 800feaa:	898b      	ldrh	r3, [r1, #12]
 800feac:	061b      	lsls	r3, r3, #24
 800feae:	b09d      	sub	sp, #116	@ 0x74
 800feb0:	4607      	mov	r7, r0
 800feb2:	460d      	mov	r5, r1
 800feb4:	4614      	mov	r4, r2
 800feb6:	d510      	bpl.n	800feda <_svfiprintf_r+0x36>
 800feb8:	690b      	ldr	r3, [r1, #16]
 800feba:	b973      	cbnz	r3, 800feda <_svfiprintf_r+0x36>
 800febc:	2140      	movs	r1, #64	@ 0x40
 800febe:	f7ff fd87 	bl	800f9d0 <_malloc_r>
 800fec2:	6028      	str	r0, [r5, #0]
 800fec4:	6128      	str	r0, [r5, #16]
 800fec6:	b930      	cbnz	r0, 800fed6 <_svfiprintf_r+0x32>
 800fec8:	230c      	movs	r3, #12
 800feca:	603b      	str	r3, [r7, #0]
 800fecc:	f04f 30ff 	mov.w	r0, #4294967295
 800fed0:	b01d      	add	sp, #116	@ 0x74
 800fed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed6:	2340      	movs	r3, #64	@ 0x40
 800fed8:	616b      	str	r3, [r5, #20]
 800feda:	2300      	movs	r3, #0
 800fedc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fede:	2320      	movs	r3, #32
 800fee0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fee4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fee8:	2330      	movs	r3, #48	@ 0x30
 800feea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010088 <_svfiprintf_r+0x1e4>
 800feee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fef2:	f04f 0901 	mov.w	r9, #1
 800fef6:	4623      	mov	r3, r4
 800fef8:	469a      	mov	sl, r3
 800fefa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fefe:	b10a      	cbz	r2, 800ff04 <_svfiprintf_r+0x60>
 800ff00:	2a25      	cmp	r2, #37	@ 0x25
 800ff02:	d1f9      	bne.n	800fef8 <_svfiprintf_r+0x54>
 800ff04:	ebba 0b04 	subs.w	fp, sl, r4
 800ff08:	d00b      	beq.n	800ff22 <_svfiprintf_r+0x7e>
 800ff0a:	465b      	mov	r3, fp
 800ff0c:	4622      	mov	r2, r4
 800ff0e:	4629      	mov	r1, r5
 800ff10:	4638      	mov	r0, r7
 800ff12:	f7ff ff6b 	bl	800fdec <__ssputs_r>
 800ff16:	3001      	adds	r0, #1
 800ff18:	f000 80a7 	beq.w	801006a <_svfiprintf_r+0x1c6>
 800ff1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff1e:	445a      	add	r2, fp
 800ff20:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff22:	f89a 3000 	ldrb.w	r3, [sl]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f000 809f 	beq.w	801006a <_svfiprintf_r+0x1c6>
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff36:	f10a 0a01 	add.w	sl, sl, #1
 800ff3a:	9304      	str	r3, [sp, #16]
 800ff3c:	9307      	str	r3, [sp, #28]
 800ff3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff42:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff44:	4654      	mov	r4, sl
 800ff46:	2205      	movs	r2, #5
 800ff48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff4c:	484e      	ldr	r0, [pc, #312]	@ (8010088 <_svfiprintf_r+0x1e4>)
 800ff4e:	f7f0 f94f 	bl	80001f0 <memchr>
 800ff52:	9a04      	ldr	r2, [sp, #16]
 800ff54:	b9d8      	cbnz	r0, 800ff8e <_svfiprintf_r+0xea>
 800ff56:	06d0      	lsls	r0, r2, #27
 800ff58:	bf44      	itt	mi
 800ff5a:	2320      	movmi	r3, #32
 800ff5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff60:	0711      	lsls	r1, r2, #28
 800ff62:	bf44      	itt	mi
 800ff64:	232b      	movmi	r3, #43	@ 0x2b
 800ff66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff70:	d015      	beq.n	800ff9e <_svfiprintf_r+0xfa>
 800ff72:	9a07      	ldr	r2, [sp, #28]
 800ff74:	4654      	mov	r4, sl
 800ff76:	2000      	movs	r0, #0
 800ff78:	f04f 0c0a 	mov.w	ip, #10
 800ff7c:	4621      	mov	r1, r4
 800ff7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff82:	3b30      	subs	r3, #48	@ 0x30
 800ff84:	2b09      	cmp	r3, #9
 800ff86:	d94b      	bls.n	8010020 <_svfiprintf_r+0x17c>
 800ff88:	b1b0      	cbz	r0, 800ffb8 <_svfiprintf_r+0x114>
 800ff8a:	9207      	str	r2, [sp, #28]
 800ff8c:	e014      	b.n	800ffb8 <_svfiprintf_r+0x114>
 800ff8e:	eba0 0308 	sub.w	r3, r0, r8
 800ff92:	fa09 f303 	lsl.w	r3, r9, r3
 800ff96:	4313      	orrs	r3, r2
 800ff98:	9304      	str	r3, [sp, #16]
 800ff9a:	46a2      	mov	sl, r4
 800ff9c:	e7d2      	b.n	800ff44 <_svfiprintf_r+0xa0>
 800ff9e:	9b03      	ldr	r3, [sp, #12]
 800ffa0:	1d19      	adds	r1, r3, #4
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	9103      	str	r1, [sp, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	bfbb      	ittet	lt
 800ffaa:	425b      	neglt	r3, r3
 800ffac:	f042 0202 	orrlt.w	r2, r2, #2
 800ffb0:	9307      	strge	r3, [sp, #28]
 800ffb2:	9307      	strlt	r3, [sp, #28]
 800ffb4:	bfb8      	it	lt
 800ffb6:	9204      	strlt	r2, [sp, #16]
 800ffb8:	7823      	ldrb	r3, [r4, #0]
 800ffba:	2b2e      	cmp	r3, #46	@ 0x2e
 800ffbc:	d10a      	bne.n	800ffd4 <_svfiprintf_r+0x130>
 800ffbe:	7863      	ldrb	r3, [r4, #1]
 800ffc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffc2:	d132      	bne.n	801002a <_svfiprintf_r+0x186>
 800ffc4:	9b03      	ldr	r3, [sp, #12]
 800ffc6:	1d1a      	adds	r2, r3, #4
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	9203      	str	r2, [sp, #12]
 800ffcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffd0:	3402      	adds	r4, #2
 800ffd2:	9305      	str	r3, [sp, #20]
 800ffd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010098 <_svfiprintf_r+0x1f4>
 800ffd8:	7821      	ldrb	r1, [r4, #0]
 800ffda:	2203      	movs	r2, #3
 800ffdc:	4650      	mov	r0, sl
 800ffde:	f7f0 f907 	bl	80001f0 <memchr>
 800ffe2:	b138      	cbz	r0, 800fff4 <_svfiprintf_r+0x150>
 800ffe4:	9b04      	ldr	r3, [sp, #16]
 800ffe6:	eba0 000a 	sub.w	r0, r0, sl
 800ffea:	2240      	movs	r2, #64	@ 0x40
 800ffec:	4082      	lsls	r2, r0
 800ffee:	4313      	orrs	r3, r2
 800fff0:	3401      	adds	r4, #1
 800fff2:	9304      	str	r3, [sp, #16]
 800fff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fff8:	4824      	ldr	r0, [pc, #144]	@ (801008c <_svfiprintf_r+0x1e8>)
 800fffa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fffe:	2206      	movs	r2, #6
 8010000:	f7f0 f8f6 	bl	80001f0 <memchr>
 8010004:	2800      	cmp	r0, #0
 8010006:	d036      	beq.n	8010076 <_svfiprintf_r+0x1d2>
 8010008:	4b21      	ldr	r3, [pc, #132]	@ (8010090 <_svfiprintf_r+0x1ec>)
 801000a:	bb1b      	cbnz	r3, 8010054 <_svfiprintf_r+0x1b0>
 801000c:	9b03      	ldr	r3, [sp, #12]
 801000e:	3307      	adds	r3, #7
 8010010:	f023 0307 	bic.w	r3, r3, #7
 8010014:	3308      	adds	r3, #8
 8010016:	9303      	str	r3, [sp, #12]
 8010018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801001a:	4433      	add	r3, r6
 801001c:	9309      	str	r3, [sp, #36]	@ 0x24
 801001e:	e76a      	b.n	800fef6 <_svfiprintf_r+0x52>
 8010020:	fb0c 3202 	mla	r2, ip, r2, r3
 8010024:	460c      	mov	r4, r1
 8010026:	2001      	movs	r0, #1
 8010028:	e7a8      	b.n	800ff7c <_svfiprintf_r+0xd8>
 801002a:	2300      	movs	r3, #0
 801002c:	3401      	adds	r4, #1
 801002e:	9305      	str	r3, [sp, #20]
 8010030:	4619      	mov	r1, r3
 8010032:	f04f 0c0a 	mov.w	ip, #10
 8010036:	4620      	mov	r0, r4
 8010038:	f810 2b01 	ldrb.w	r2, [r0], #1
 801003c:	3a30      	subs	r2, #48	@ 0x30
 801003e:	2a09      	cmp	r2, #9
 8010040:	d903      	bls.n	801004a <_svfiprintf_r+0x1a6>
 8010042:	2b00      	cmp	r3, #0
 8010044:	d0c6      	beq.n	800ffd4 <_svfiprintf_r+0x130>
 8010046:	9105      	str	r1, [sp, #20]
 8010048:	e7c4      	b.n	800ffd4 <_svfiprintf_r+0x130>
 801004a:	fb0c 2101 	mla	r1, ip, r1, r2
 801004e:	4604      	mov	r4, r0
 8010050:	2301      	movs	r3, #1
 8010052:	e7f0      	b.n	8010036 <_svfiprintf_r+0x192>
 8010054:	ab03      	add	r3, sp, #12
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	462a      	mov	r2, r5
 801005a:	4b0e      	ldr	r3, [pc, #56]	@ (8010094 <_svfiprintf_r+0x1f0>)
 801005c:	a904      	add	r1, sp, #16
 801005e:	4638      	mov	r0, r7
 8010060:	f3af 8000 	nop.w
 8010064:	1c42      	adds	r2, r0, #1
 8010066:	4606      	mov	r6, r0
 8010068:	d1d6      	bne.n	8010018 <_svfiprintf_r+0x174>
 801006a:	89ab      	ldrh	r3, [r5, #12]
 801006c:	065b      	lsls	r3, r3, #25
 801006e:	f53f af2d 	bmi.w	800fecc <_svfiprintf_r+0x28>
 8010072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010074:	e72c      	b.n	800fed0 <_svfiprintf_r+0x2c>
 8010076:	ab03      	add	r3, sp, #12
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	462a      	mov	r2, r5
 801007c:	4b05      	ldr	r3, [pc, #20]	@ (8010094 <_svfiprintf_r+0x1f0>)
 801007e:	a904      	add	r1, sp, #16
 8010080:	4638      	mov	r0, r7
 8010082:	f000 f879 	bl	8010178 <_printf_i>
 8010086:	e7ed      	b.n	8010064 <_svfiprintf_r+0x1c0>
 8010088:	080181c9 	.word	0x080181c9
 801008c:	080181d3 	.word	0x080181d3
 8010090:	00000000 	.word	0x00000000
 8010094:	0800fded 	.word	0x0800fded
 8010098:	080181cf 	.word	0x080181cf

0801009c <_printf_common>:
 801009c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100a0:	4616      	mov	r6, r2
 80100a2:	4698      	mov	r8, r3
 80100a4:	688a      	ldr	r2, [r1, #8]
 80100a6:	690b      	ldr	r3, [r1, #16]
 80100a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80100ac:	4293      	cmp	r3, r2
 80100ae:	bfb8      	it	lt
 80100b0:	4613      	movlt	r3, r2
 80100b2:	6033      	str	r3, [r6, #0]
 80100b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80100b8:	4607      	mov	r7, r0
 80100ba:	460c      	mov	r4, r1
 80100bc:	b10a      	cbz	r2, 80100c2 <_printf_common+0x26>
 80100be:	3301      	adds	r3, #1
 80100c0:	6033      	str	r3, [r6, #0]
 80100c2:	6823      	ldr	r3, [r4, #0]
 80100c4:	0699      	lsls	r1, r3, #26
 80100c6:	bf42      	ittt	mi
 80100c8:	6833      	ldrmi	r3, [r6, #0]
 80100ca:	3302      	addmi	r3, #2
 80100cc:	6033      	strmi	r3, [r6, #0]
 80100ce:	6825      	ldr	r5, [r4, #0]
 80100d0:	f015 0506 	ands.w	r5, r5, #6
 80100d4:	d106      	bne.n	80100e4 <_printf_common+0x48>
 80100d6:	f104 0a19 	add.w	sl, r4, #25
 80100da:	68e3      	ldr	r3, [r4, #12]
 80100dc:	6832      	ldr	r2, [r6, #0]
 80100de:	1a9b      	subs	r3, r3, r2
 80100e0:	42ab      	cmp	r3, r5
 80100e2:	dc26      	bgt.n	8010132 <_printf_common+0x96>
 80100e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80100e8:	6822      	ldr	r2, [r4, #0]
 80100ea:	3b00      	subs	r3, #0
 80100ec:	bf18      	it	ne
 80100ee:	2301      	movne	r3, #1
 80100f0:	0692      	lsls	r2, r2, #26
 80100f2:	d42b      	bmi.n	801014c <_printf_common+0xb0>
 80100f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80100f8:	4641      	mov	r1, r8
 80100fa:	4638      	mov	r0, r7
 80100fc:	47c8      	blx	r9
 80100fe:	3001      	adds	r0, #1
 8010100:	d01e      	beq.n	8010140 <_printf_common+0xa4>
 8010102:	6823      	ldr	r3, [r4, #0]
 8010104:	6922      	ldr	r2, [r4, #16]
 8010106:	f003 0306 	and.w	r3, r3, #6
 801010a:	2b04      	cmp	r3, #4
 801010c:	bf02      	ittt	eq
 801010e:	68e5      	ldreq	r5, [r4, #12]
 8010110:	6833      	ldreq	r3, [r6, #0]
 8010112:	1aed      	subeq	r5, r5, r3
 8010114:	68a3      	ldr	r3, [r4, #8]
 8010116:	bf0c      	ite	eq
 8010118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801011c:	2500      	movne	r5, #0
 801011e:	4293      	cmp	r3, r2
 8010120:	bfc4      	itt	gt
 8010122:	1a9b      	subgt	r3, r3, r2
 8010124:	18ed      	addgt	r5, r5, r3
 8010126:	2600      	movs	r6, #0
 8010128:	341a      	adds	r4, #26
 801012a:	42b5      	cmp	r5, r6
 801012c:	d11a      	bne.n	8010164 <_printf_common+0xc8>
 801012e:	2000      	movs	r0, #0
 8010130:	e008      	b.n	8010144 <_printf_common+0xa8>
 8010132:	2301      	movs	r3, #1
 8010134:	4652      	mov	r2, sl
 8010136:	4641      	mov	r1, r8
 8010138:	4638      	mov	r0, r7
 801013a:	47c8      	blx	r9
 801013c:	3001      	adds	r0, #1
 801013e:	d103      	bne.n	8010148 <_printf_common+0xac>
 8010140:	f04f 30ff 	mov.w	r0, #4294967295
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010148:	3501      	adds	r5, #1
 801014a:	e7c6      	b.n	80100da <_printf_common+0x3e>
 801014c:	18e1      	adds	r1, r4, r3
 801014e:	1c5a      	adds	r2, r3, #1
 8010150:	2030      	movs	r0, #48	@ 0x30
 8010152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010156:	4422      	add	r2, r4
 8010158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801015c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010160:	3302      	adds	r3, #2
 8010162:	e7c7      	b.n	80100f4 <_printf_common+0x58>
 8010164:	2301      	movs	r3, #1
 8010166:	4622      	mov	r2, r4
 8010168:	4641      	mov	r1, r8
 801016a:	4638      	mov	r0, r7
 801016c:	47c8      	blx	r9
 801016e:	3001      	adds	r0, #1
 8010170:	d0e6      	beq.n	8010140 <_printf_common+0xa4>
 8010172:	3601      	adds	r6, #1
 8010174:	e7d9      	b.n	801012a <_printf_common+0x8e>
	...

08010178 <_printf_i>:
 8010178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801017c:	7e0f      	ldrb	r7, [r1, #24]
 801017e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010180:	2f78      	cmp	r7, #120	@ 0x78
 8010182:	4691      	mov	r9, r2
 8010184:	4680      	mov	r8, r0
 8010186:	460c      	mov	r4, r1
 8010188:	469a      	mov	sl, r3
 801018a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801018e:	d807      	bhi.n	80101a0 <_printf_i+0x28>
 8010190:	2f62      	cmp	r7, #98	@ 0x62
 8010192:	d80a      	bhi.n	80101aa <_printf_i+0x32>
 8010194:	2f00      	cmp	r7, #0
 8010196:	f000 80d2 	beq.w	801033e <_printf_i+0x1c6>
 801019a:	2f58      	cmp	r7, #88	@ 0x58
 801019c:	f000 80b9 	beq.w	8010312 <_printf_i+0x19a>
 80101a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80101a8:	e03a      	b.n	8010220 <_printf_i+0xa8>
 80101aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80101ae:	2b15      	cmp	r3, #21
 80101b0:	d8f6      	bhi.n	80101a0 <_printf_i+0x28>
 80101b2:	a101      	add	r1, pc, #4	@ (adr r1, 80101b8 <_printf_i+0x40>)
 80101b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101b8:	08010211 	.word	0x08010211
 80101bc:	08010225 	.word	0x08010225
 80101c0:	080101a1 	.word	0x080101a1
 80101c4:	080101a1 	.word	0x080101a1
 80101c8:	080101a1 	.word	0x080101a1
 80101cc:	080101a1 	.word	0x080101a1
 80101d0:	08010225 	.word	0x08010225
 80101d4:	080101a1 	.word	0x080101a1
 80101d8:	080101a1 	.word	0x080101a1
 80101dc:	080101a1 	.word	0x080101a1
 80101e0:	080101a1 	.word	0x080101a1
 80101e4:	08010325 	.word	0x08010325
 80101e8:	0801024f 	.word	0x0801024f
 80101ec:	080102df 	.word	0x080102df
 80101f0:	080101a1 	.word	0x080101a1
 80101f4:	080101a1 	.word	0x080101a1
 80101f8:	08010347 	.word	0x08010347
 80101fc:	080101a1 	.word	0x080101a1
 8010200:	0801024f 	.word	0x0801024f
 8010204:	080101a1 	.word	0x080101a1
 8010208:	080101a1 	.word	0x080101a1
 801020c:	080102e7 	.word	0x080102e7
 8010210:	6833      	ldr	r3, [r6, #0]
 8010212:	1d1a      	adds	r2, r3, #4
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	6032      	str	r2, [r6, #0]
 8010218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801021c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010220:	2301      	movs	r3, #1
 8010222:	e09d      	b.n	8010360 <_printf_i+0x1e8>
 8010224:	6833      	ldr	r3, [r6, #0]
 8010226:	6820      	ldr	r0, [r4, #0]
 8010228:	1d19      	adds	r1, r3, #4
 801022a:	6031      	str	r1, [r6, #0]
 801022c:	0606      	lsls	r6, r0, #24
 801022e:	d501      	bpl.n	8010234 <_printf_i+0xbc>
 8010230:	681d      	ldr	r5, [r3, #0]
 8010232:	e003      	b.n	801023c <_printf_i+0xc4>
 8010234:	0645      	lsls	r5, r0, #25
 8010236:	d5fb      	bpl.n	8010230 <_printf_i+0xb8>
 8010238:	f9b3 5000 	ldrsh.w	r5, [r3]
 801023c:	2d00      	cmp	r5, #0
 801023e:	da03      	bge.n	8010248 <_printf_i+0xd0>
 8010240:	232d      	movs	r3, #45	@ 0x2d
 8010242:	426d      	negs	r5, r5
 8010244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010248:	4859      	ldr	r0, [pc, #356]	@ (80103b0 <_printf_i+0x238>)
 801024a:	230a      	movs	r3, #10
 801024c:	e011      	b.n	8010272 <_printf_i+0xfa>
 801024e:	6821      	ldr	r1, [r4, #0]
 8010250:	6833      	ldr	r3, [r6, #0]
 8010252:	0608      	lsls	r0, r1, #24
 8010254:	f853 5b04 	ldr.w	r5, [r3], #4
 8010258:	d402      	bmi.n	8010260 <_printf_i+0xe8>
 801025a:	0649      	lsls	r1, r1, #25
 801025c:	bf48      	it	mi
 801025e:	b2ad      	uxthmi	r5, r5
 8010260:	2f6f      	cmp	r7, #111	@ 0x6f
 8010262:	4853      	ldr	r0, [pc, #332]	@ (80103b0 <_printf_i+0x238>)
 8010264:	6033      	str	r3, [r6, #0]
 8010266:	bf14      	ite	ne
 8010268:	230a      	movne	r3, #10
 801026a:	2308      	moveq	r3, #8
 801026c:	2100      	movs	r1, #0
 801026e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010272:	6866      	ldr	r6, [r4, #4]
 8010274:	60a6      	str	r6, [r4, #8]
 8010276:	2e00      	cmp	r6, #0
 8010278:	bfa2      	ittt	ge
 801027a:	6821      	ldrge	r1, [r4, #0]
 801027c:	f021 0104 	bicge.w	r1, r1, #4
 8010280:	6021      	strge	r1, [r4, #0]
 8010282:	b90d      	cbnz	r5, 8010288 <_printf_i+0x110>
 8010284:	2e00      	cmp	r6, #0
 8010286:	d04b      	beq.n	8010320 <_printf_i+0x1a8>
 8010288:	4616      	mov	r6, r2
 801028a:	fbb5 f1f3 	udiv	r1, r5, r3
 801028e:	fb03 5711 	mls	r7, r3, r1, r5
 8010292:	5dc7      	ldrb	r7, [r0, r7]
 8010294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010298:	462f      	mov	r7, r5
 801029a:	42bb      	cmp	r3, r7
 801029c:	460d      	mov	r5, r1
 801029e:	d9f4      	bls.n	801028a <_printf_i+0x112>
 80102a0:	2b08      	cmp	r3, #8
 80102a2:	d10b      	bne.n	80102bc <_printf_i+0x144>
 80102a4:	6823      	ldr	r3, [r4, #0]
 80102a6:	07df      	lsls	r7, r3, #31
 80102a8:	d508      	bpl.n	80102bc <_printf_i+0x144>
 80102aa:	6923      	ldr	r3, [r4, #16]
 80102ac:	6861      	ldr	r1, [r4, #4]
 80102ae:	4299      	cmp	r1, r3
 80102b0:	bfde      	ittt	le
 80102b2:	2330      	movle	r3, #48	@ 0x30
 80102b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102bc:	1b92      	subs	r2, r2, r6
 80102be:	6122      	str	r2, [r4, #16]
 80102c0:	f8cd a000 	str.w	sl, [sp]
 80102c4:	464b      	mov	r3, r9
 80102c6:	aa03      	add	r2, sp, #12
 80102c8:	4621      	mov	r1, r4
 80102ca:	4640      	mov	r0, r8
 80102cc:	f7ff fee6 	bl	801009c <_printf_common>
 80102d0:	3001      	adds	r0, #1
 80102d2:	d14a      	bne.n	801036a <_printf_i+0x1f2>
 80102d4:	f04f 30ff 	mov.w	r0, #4294967295
 80102d8:	b004      	add	sp, #16
 80102da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102de:	6823      	ldr	r3, [r4, #0]
 80102e0:	f043 0320 	orr.w	r3, r3, #32
 80102e4:	6023      	str	r3, [r4, #0]
 80102e6:	4833      	ldr	r0, [pc, #204]	@ (80103b4 <_printf_i+0x23c>)
 80102e8:	2778      	movs	r7, #120	@ 0x78
 80102ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80102ee:	6823      	ldr	r3, [r4, #0]
 80102f0:	6831      	ldr	r1, [r6, #0]
 80102f2:	061f      	lsls	r7, r3, #24
 80102f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80102f8:	d402      	bmi.n	8010300 <_printf_i+0x188>
 80102fa:	065f      	lsls	r7, r3, #25
 80102fc:	bf48      	it	mi
 80102fe:	b2ad      	uxthmi	r5, r5
 8010300:	6031      	str	r1, [r6, #0]
 8010302:	07d9      	lsls	r1, r3, #31
 8010304:	bf44      	itt	mi
 8010306:	f043 0320 	orrmi.w	r3, r3, #32
 801030a:	6023      	strmi	r3, [r4, #0]
 801030c:	b11d      	cbz	r5, 8010316 <_printf_i+0x19e>
 801030e:	2310      	movs	r3, #16
 8010310:	e7ac      	b.n	801026c <_printf_i+0xf4>
 8010312:	4827      	ldr	r0, [pc, #156]	@ (80103b0 <_printf_i+0x238>)
 8010314:	e7e9      	b.n	80102ea <_printf_i+0x172>
 8010316:	6823      	ldr	r3, [r4, #0]
 8010318:	f023 0320 	bic.w	r3, r3, #32
 801031c:	6023      	str	r3, [r4, #0]
 801031e:	e7f6      	b.n	801030e <_printf_i+0x196>
 8010320:	4616      	mov	r6, r2
 8010322:	e7bd      	b.n	80102a0 <_printf_i+0x128>
 8010324:	6833      	ldr	r3, [r6, #0]
 8010326:	6825      	ldr	r5, [r4, #0]
 8010328:	6961      	ldr	r1, [r4, #20]
 801032a:	1d18      	adds	r0, r3, #4
 801032c:	6030      	str	r0, [r6, #0]
 801032e:	062e      	lsls	r6, r5, #24
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	d501      	bpl.n	8010338 <_printf_i+0x1c0>
 8010334:	6019      	str	r1, [r3, #0]
 8010336:	e002      	b.n	801033e <_printf_i+0x1c6>
 8010338:	0668      	lsls	r0, r5, #25
 801033a:	d5fb      	bpl.n	8010334 <_printf_i+0x1bc>
 801033c:	8019      	strh	r1, [r3, #0]
 801033e:	2300      	movs	r3, #0
 8010340:	6123      	str	r3, [r4, #16]
 8010342:	4616      	mov	r6, r2
 8010344:	e7bc      	b.n	80102c0 <_printf_i+0x148>
 8010346:	6833      	ldr	r3, [r6, #0]
 8010348:	1d1a      	adds	r2, r3, #4
 801034a:	6032      	str	r2, [r6, #0]
 801034c:	681e      	ldr	r6, [r3, #0]
 801034e:	6862      	ldr	r2, [r4, #4]
 8010350:	2100      	movs	r1, #0
 8010352:	4630      	mov	r0, r6
 8010354:	f7ef ff4c 	bl	80001f0 <memchr>
 8010358:	b108      	cbz	r0, 801035e <_printf_i+0x1e6>
 801035a:	1b80      	subs	r0, r0, r6
 801035c:	6060      	str	r0, [r4, #4]
 801035e:	6863      	ldr	r3, [r4, #4]
 8010360:	6123      	str	r3, [r4, #16]
 8010362:	2300      	movs	r3, #0
 8010364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010368:	e7aa      	b.n	80102c0 <_printf_i+0x148>
 801036a:	6923      	ldr	r3, [r4, #16]
 801036c:	4632      	mov	r2, r6
 801036e:	4649      	mov	r1, r9
 8010370:	4640      	mov	r0, r8
 8010372:	47d0      	blx	sl
 8010374:	3001      	adds	r0, #1
 8010376:	d0ad      	beq.n	80102d4 <_printf_i+0x15c>
 8010378:	6823      	ldr	r3, [r4, #0]
 801037a:	079b      	lsls	r3, r3, #30
 801037c:	d413      	bmi.n	80103a6 <_printf_i+0x22e>
 801037e:	68e0      	ldr	r0, [r4, #12]
 8010380:	9b03      	ldr	r3, [sp, #12]
 8010382:	4298      	cmp	r0, r3
 8010384:	bfb8      	it	lt
 8010386:	4618      	movlt	r0, r3
 8010388:	e7a6      	b.n	80102d8 <_printf_i+0x160>
 801038a:	2301      	movs	r3, #1
 801038c:	4632      	mov	r2, r6
 801038e:	4649      	mov	r1, r9
 8010390:	4640      	mov	r0, r8
 8010392:	47d0      	blx	sl
 8010394:	3001      	adds	r0, #1
 8010396:	d09d      	beq.n	80102d4 <_printf_i+0x15c>
 8010398:	3501      	adds	r5, #1
 801039a:	68e3      	ldr	r3, [r4, #12]
 801039c:	9903      	ldr	r1, [sp, #12]
 801039e:	1a5b      	subs	r3, r3, r1
 80103a0:	42ab      	cmp	r3, r5
 80103a2:	dcf2      	bgt.n	801038a <_printf_i+0x212>
 80103a4:	e7eb      	b.n	801037e <_printf_i+0x206>
 80103a6:	2500      	movs	r5, #0
 80103a8:	f104 0619 	add.w	r6, r4, #25
 80103ac:	e7f5      	b.n	801039a <_printf_i+0x222>
 80103ae:	bf00      	nop
 80103b0:	080181da 	.word	0x080181da
 80103b4:	080181eb 	.word	0x080181eb

080103b8 <memmove>:
 80103b8:	4288      	cmp	r0, r1
 80103ba:	b510      	push	{r4, lr}
 80103bc:	eb01 0402 	add.w	r4, r1, r2
 80103c0:	d902      	bls.n	80103c8 <memmove+0x10>
 80103c2:	4284      	cmp	r4, r0
 80103c4:	4623      	mov	r3, r4
 80103c6:	d807      	bhi.n	80103d8 <memmove+0x20>
 80103c8:	1e43      	subs	r3, r0, #1
 80103ca:	42a1      	cmp	r1, r4
 80103cc:	d008      	beq.n	80103e0 <memmove+0x28>
 80103ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103d6:	e7f8      	b.n	80103ca <memmove+0x12>
 80103d8:	4402      	add	r2, r0
 80103da:	4601      	mov	r1, r0
 80103dc:	428a      	cmp	r2, r1
 80103de:	d100      	bne.n	80103e2 <memmove+0x2a>
 80103e0:	bd10      	pop	{r4, pc}
 80103e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103ea:	e7f7      	b.n	80103dc <memmove+0x24>

080103ec <_realloc_r>:
 80103ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f0:	4680      	mov	r8, r0
 80103f2:	4615      	mov	r5, r2
 80103f4:	460c      	mov	r4, r1
 80103f6:	b921      	cbnz	r1, 8010402 <_realloc_r+0x16>
 80103f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103fc:	4611      	mov	r1, r2
 80103fe:	f7ff bae7 	b.w	800f9d0 <_malloc_r>
 8010402:	b92a      	cbnz	r2, 8010410 <_realloc_r+0x24>
 8010404:	f7ff fca8 	bl	800fd58 <_free_r>
 8010408:	2400      	movs	r4, #0
 801040a:	4620      	mov	r0, r4
 801040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010410:	f000 f81a 	bl	8010448 <_malloc_usable_size_r>
 8010414:	4285      	cmp	r5, r0
 8010416:	4606      	mov	r6, r0
 8010418:	d802      	bhi.n	8010420 <_realloc_r+0x34>
 801041a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801041e:	d8f4      	bhi.n	801040a <_realloc_r+0x1e>
 8010420:	4629      	mov	r1, r5
 8010422:	4640      	mov	r0, r8
 8010424:	f7ff fad4 	bl	800f9d0 <_malloc_r>
 8010428:	4607      	mov	r7, r0
 801042a:	2800      	cmp	r0, #0
 801042c:	d0ec      	beq.n	8010408 <_realloc_r+0x1c>
 801042e:	42b5      	cmp	r5, r6
 8010430:	462a      	mov	r2, r5
 8010432:	4621      	mov	r1, r4
 8010434:	bf28      	it	cs
 8010436:	4632      	movcs	r2, r6
 8010438:	f7ff fc80 	bl	800fd3c <memcpy>
 801043c:	4621      	mov	r1, r4
 801043e:	4640      	mov	r0, r8
 8010440:	f7ff fc8a 	bl	800fd58 <_free_r>
 8010444:	463c      	mov	r4, r7
 8010446:	e7e0      	b.n	801040a <_realloc_r+0x1e>

08010448 <_malloc_usable_size_r>:
 8010448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801044c:	1f18      	subs	r0, r3, #4
 801044e:	2b00      	cmp	r3, #0
 8010450:	bfbc      	itt	lt
 8010452:	580b      	ldrlt	r3, [r1, r0]
 8010454:	18c0      	addlt	r0, r0, r3
 8010456:	4770      	bx	lr

08010458 <_init>:
 8010458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801045a:	bf00      	nop
 801045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801045e:	bc08      	pop	{r3}
 8010460:	469e      	mov	lr, r3
 8010462:	4770      	bx	lr

08010464 <_fini>:
 8010464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010466:	bf00      	nop
 8010468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801046a:	bc08      	pop	{r3}
 801046c:	469e      	mov	lr, r3
 801046e:	4770      	bx	lr
