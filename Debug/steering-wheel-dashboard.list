
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010128  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007d84  080102c8  080102c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801804c  0801804c  0001a18c  2**0
                  CONTENTS
  4 .ARM          00000008  0801804c  0801804c  0001904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018054  08018054  0001a18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018054  08018054  00019054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018060  08018060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08018064  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f8  2000018c  080181f0  0001a18c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001984  080181f0  0001a984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a18c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e08  00000000  00000000  0001a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fbc  00000000  00000000  0003dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  00043f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001680  00000000  00000000  00045d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020552  00000000  00000000  000473a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027755  00000000  00000000  000678f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abf6  00000000  00000000  0008f047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129c3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008140  00000000  00000000  00129c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00131dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080102b0 	.word	0x080102b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	080102b0 	.word	0x080102b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200b      	movs	r0, #11
 80005c4:	f004 fab7 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f004 fad0 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	203b      	movs	r0, #59	@ 0x3b
 80005d4:	f004 faaf 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005d8:	203b      	movs	r0, #59	@ 0x3b
 80005da:	f004 fac8 	bl	8004b6e <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SELECT+0x18>)
 80005f6:	f004 ffeb 	bl	80055d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f004 f99c 	bl	8004938 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400

08000608 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <DESELECT+0x18>)
 8000612:	f004 ffdd 	bl	80055d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f004 f98e 	bl	8004938 <HAL_Delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <SPI_TxByte+0x30>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SPI_TxByte+0x30>)
 8000646:	f006 ff00 	bl	800744a <HAL_SPI_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000021c 	.word	0x2000021c

08000658 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000664:	bf00      	nop
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <SPI_TxBuffer+0x30>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b02      	cmp	r3, #2
 8000672:	d1f8      	bne.n	8000666 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_TxBuffer+0x30>)
 800067c:	f006 fee5 	bl	800744a <HAL_SPI_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000021c 	.word	0x2000021c

0800068c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000696:	bf00      	nop
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <SPI_RxByte+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d1f8      	bne.n	8000698 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006a6:	1dba      	adds	r2, r7, #6
 80006a8:	1df9      	adds	r1, r7, #7
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <SPI_RxByte+0x34>)
 80006b2:	f007 f927 	bl	8007904 <HAL_SPI_TransmitReceive>

	return data;
 80006b6:	79bb      	ldrb	r3, [r7, #6]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000021c 	.word	0x2000021c

080006c4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006cc:	f7ff ffde 	bl	800068c <SPI_RxByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <SD_ReadyWait+0x30>)
 80006e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ec:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006ee:	f7ff ffcd 	bl	800068c <SPI_RxByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2bff      	cmp	r3, #255	@ 0xff
 80006fa:	d003      	beq.n	8000704 <SD_ReadyWait+0x24>
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <SD_ReadyWait+0x30>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f4      	bne.n	80006ee <SD_ReadyWait+0xe>

	return res;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001aa 	.word	0x200001aa

08000714 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800071a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800071e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000720:	f7ff ff72 	bl	8000608 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e005      	b.n	8000736 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	f7ff ff7a 	bl	8000624 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b09      	cmp	r3, #9
 800073a:	ddf6      	ble.n	800072a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800073c:	f7ff ff56 	bl	80005ec <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000754:	2395      	movs	r3, #149	@ 0x95
 8000756:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000758:	463b      	mov	r3, r7
 800075a:	2106      	movs	r1, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff7b 	bl	8000658 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000762:	e002      	b.n	800076a <SD_PowerOn+0x56>
	{
		cnt--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3b01      	subs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800076a:	f7ff ff8f 	bl	800068c <SPI_RxByte>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d002      	beq.n	800077a <SD_PowerOn+0x66>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_PowerOn+0x50>
	}

	DESELECT();
 800077a:	f7ff ff45 	bl	8000608 <DESELECT>
	SPI_TxByte(0XFF);
 800077e:	20ff      	movs	r0, #255	@ 0xff
 8000780:	f7ff ff50 	bl	8000624 <SPI_TxByte>

	PowerFlag = 1;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SD_PowerOn+0x80>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200001ad 	.word	0x200001ad

08000798 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <SD_PowerOff+0x14>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200001ad 	.word	0x200001ad

080007b0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <SD_CheckPower+0x14>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	200001ad 	.word	0x200001ad

080007c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007d4:	22c8      	movs	r2, #200	@ 0xc8
 80007d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007d8:	f7ff ff58 	bl	800068c <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d103      	bne.n	80007ee <SD_RxDataBlock+0x26>
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f4      	bne.n	80007d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007f2:	d001      	beq.n	80007f8 <SD_RxDataBlock+0x30>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e00f      	b.n	8000818 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff60 	bl	80006c4 <SPI_RxBytePtr>
	} while(len--);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	603a      	str	r2, [r7, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f4      	bne.n	80007f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800080e:	f7ff ff3d 	bl	800068c <SPI_RxByte>
	SPI_RxByte();
 8000812:	f7ff ff3b 	bl	800068c <SPI_RxByte>

	return TRUE;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200001a8 	.word	0x200001a8

08000824 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000834:	f7ff ff54 	bl	80006e0 <SD_ReadyWait>
 8000838:	4603      	mov	r3, r0
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	d001      	beq.n	8000842 <SD_TxDataBlock+0x1e>
 800083e:	2300      	movs	r3, #0
 8000840:	e02f      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff feed 	bl	8000624 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2bfd      	cmp	r3, #253	@ 0xfd
 800084e:	d020      	beq.n	8000892 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff feff 	bl	8000658 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800085a:	f7ff ff17 	bl	800068c <SPI_RxByte>
		SPI_RxByte();
 800085e:	f7ff ff15 	bl	800068c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000862:	e00b      	b.n	800087c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000864:	f7ff ff12 	bl	800068c <SPI_RxByte>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b05      	cmp	r3, #5
 8000874:	d006      	beq.n	8000884 <SD_TxDataBlock+0x60>
			i++;
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	2b40      	cmp	r3, #64	@ 0x40
 8000880:	d9f0      	bls.n	8000864 <SD_TxDataBlock+0x40>
 8000882:	e000      	b.n	8000886 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000884:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000886:	bf00      	nop
 8000888:	f7ff ff00 	bl	800068c <SPI_RxByte>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fa      	beq.n	8000888 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2b05      	cmp	r3, #5
 800089a:	d101      	bne.n	80008a0 <SD_TxDataBlock+0x7c>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008b6:	f7ff ff13 	bl	80006e0 <SD_ReadyWait>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d001      	beq.n	80008c4 <SD_SendCmd+0x1a>
 80008c0:	23ff      	movs	r3, #255	@ 0xff
 80008c2:	e042      	b.n	800094a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff feac 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	0e1b      	lsrs	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fea6 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fea0 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe9a 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe95 	bl	8000624 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d102      	bne.n	8000906 <SD_SendCmd+0x5c>
 8000900:	2395      	movs	r3, #149	@ 0x95
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e007      	b.n	8000916 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b48      	cmp	r3, #72	@ 0x48
 800090a:	d102      	bne.n	8000912 <SD_SendCmd+0x68>
 800090c:	2387      	movs	r3, #135	@ 0x87
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e001      	b.n	8000916 <SD_SendCmd+0x6c>
	else crc = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe83 	bl	8000624 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b4c      	cmp	r3, #76	@ 0x4c
 8000922:	d101      	bne.n	8000928 <SD_SendCmd+0x7e>
 8000924:	f7ff feb2 	bl	800068c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800092c:	f7ff feae 	bl	800068c <SPI_RxByte>
 8000930:	4603      	mov	r3, r0
 8000932:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000934:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da05      	bge.n	8000948 <SD_SendCmd+0x9e>
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3b01      	subs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <SD_SendCmd+0x82>

	return res;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SD_disk_initialize+0x14>
 8000964:	2301      	movs	r3, #1
 8000966:	e0d1      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000968:	4b6a      	ldr	r3, [pc, #424]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SD_disk_initialize+0x2a>
 8000976:	4b67      	ldr	r3, [pc, #412]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	e0c6      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800097e:	f7ff fec9 	bl	8000714 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000982:	f7ff fe33 	bl	80005ec <SELECT>

	/* check disk type */
	type = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800098a:	2100      	movs	r1, #0
 800098c:	2040      	movs	r0, #64	@ 0x40
 800098e:	f7ff ff8c 	bl	80008aa <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	f040 80a1 	bne.w	8000adc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800099a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 800099c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009a2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009a6:	2048      	movs	r0, #72	@ 0x48
 80009a8:	f7ff ff7f 	bl	80008aa <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d155      	bne.n	8000a5e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e00c      	b.n	80009d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009b8:	7bfc      	ldrb	r4, [r7, #15]
 80009ba:	f7ff fe67 	bl	800068c <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	f104 0310 	add.w	r3, r4, #16
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d9ef      	bls.n	80009b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d17e      	bne.n	8000adc <SD_disk_initialize+0x188>
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2baa      	cmp	r3, #170	@ 0xaa
 80009e2:	d17b      	bne.n	8000adc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	2100      	movs	r1, #0
 80009e6:	2077      	movs	r0, #119	@ 0x77
 80009e8:	f7ff ff5f 	bl	80008aa <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d807      	bhi.n	8000a02 <SD_disk_initialize+0xae>
 80009f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009f6:	2069      	movs	r0, #105	@ 0x69
 80009f8:	f7ff ff57 	bl	80008aa <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ec      	bne.n	80009e4 <SD_disk_initialize+0x90>
 8000a0a:	e000      	b.n	8000a0e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d062      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f7ff ff46 	bl	80008aa <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15b      	bne.n	8000adc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e00c      	b.n	8000a44 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	f7ff fe2e 	bl	800068c <SPI_RxByte>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	f104 0310 	add.w	r3, r4, #16
 8000a38:	443b      	add	r3, r7
 8000a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3301      	adds	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9ef      	bls.n	8000a2a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a4a:	7a3b      	ldrb	r3, [r7, #8]
 8000a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x104>
 8000a54:	230c      	movs	r3, #12
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x106>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
 8000a5c:	e03e      	b.n	8000adc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2077      	movs	r0, #119	@ 0x77
 8000a62:	f7ff ff22 	bl	80008aa <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d808      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2069      	movs	r0, #105	@ 0x69
 8000a70:	f7ff ff1b 	bl	80008aa <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d801      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x12c>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d10e      	bne.n	8000aa6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff0d 	bl	80008aa <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d80e      	bhi.n	8000ab4 <SD_disk_initialize+0x160>
 8000a96:	2100      	movs	r1, #0
 8000a98:	2069      	movs	r0, #105	@ 0x69
 8000a9a:	f7ff ff06 	bl	80008aa <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <SD_disk_initialize+0x160>
 8000aa4:	e00c      	b.n	8000ac0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f7ff fefe 	bl	80008aa <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e2      	bne.n	8000a82 <SD_disk_initialize+0x12e>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000abe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <SD_disk_initialize+0x184>
 8000ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000acc:	2050      	movs	r0, #80	@ 0x50
 8000ace:	f7ff feec 	bl	80008aa <SD_SendCmd>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <SD_disk_initialize+0x1c8>)
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ae2:	f7ff fd91 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000ae6:	f7ff fdd1 	bl	800068c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e001      	b.n	8000b06 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b02:	f7ff fe49 	bl	8000798 <SD_PowerOff>
	}

	return Stat;
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	200001a8 	.word	0x200001a8
 8000b1c:	200001ac 	.word	0x200001ac

08000b20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SD_disk_status+0x14>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e002      	b.n	8000b3a <SD_disk_status+0x1a>
	return Stat;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SD_disk_status+0x28>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_read+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_read+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e051      	b.n	8000c10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <SD_disk_read+0xcc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_read+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e048      	b.n	8000c10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SD_disk_read+0xd0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_read+0x44>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b90:	f7ff fd2c 	bl	80005ec <SELECT>

	if (count == 1)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d111      	bne.n	8000bbe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2051      	movs	r0, #81	@ 0x51
 8000b9e:	f7ff fe84 	bl	80008aa <SD_SendCmd>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d129      	bne.n	8000bfc <SD_disk_read+0xb0>
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fe0b 	bl	80007c8 <SD_RxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <SD_disk_read+0xb0>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e01e      	b.n	8000bfc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2052      	movs	r0, #82	@ 0x52
 8000bc2:	f7ff fe72 	bl	80008aa <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d117      	bne.n	8000bfc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fdf9 	bl	80007c8 <SD_RxDataBlock>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <SD_disk_read+0xa6>
				buff += 512;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ed      	bne.n	8000bcc <SD_disk_read+0x80>
 8000bf0:	e000      	b.n	8000bf4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bf2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	204c      	movs	r0, #76	@ 0x4c
 8000bf8:	f7ff fe57 	bl	80008aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bfc:	f7ff fd04 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000c00:	f7ff fd44 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	200001ac 	.word	0x200001ac

08000c20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <SD_disk_write+0x1c>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <SD_disk_write+0x20>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e06b      	b.n	8000d18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c40:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <SD_disk_write+0x100>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SD_disk_write+0x32>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e062      	b.n	8000d18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SD_disk_write+0x100>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SD_disk_write+0x44>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e059      	b.n	8000d18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <SD_disk_write+0x104>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <SD_disk_write+0x56>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c76:	f7ff fcb9 	bl	80005ec <SELECT>

	if (count == 1)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d110      	bne.n	8000ca2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2058      	movs	r0, #88	@ 0x58
 8000c84:	f7ff fe11 	bl	80008aa <SD_SendCmd>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13a      	bne.n	8000d04 <SD_disk_write+0xe4>
 8000c8e:	21fe      	movs	r1, #254	@ 0xfe
 8000c90:	68b8      	ldr	r0, [r7, #8]
 8000c92:	f7ff fdc7 	bl	8000824 <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d033      	beq.n	8000d04 <SD_disk_write+0xe4>
			count = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e030      	b.n	8000d04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <SD_disk_write+0x104>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2077      	movs	r0, #119	@ 0x77
 8000cb2:	f7ff fdfa 	bl	80008aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	2057      	movs	r0, #87	@ 0x57
 8000cba:	f7ff fdf6 	bl	80008aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2059      	movs	r0, #89	@ 0x59
 8000cc2:	f7ff fdf2 	bl	80008aa <SD_SendCmd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ccc:	21fc      	movs	r1, #252	@ 0xfc
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f7ff fda8 	bl	8000824 <SD_TxDataBlock>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <SD_disk_write+0xd0>
				buff += 512;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ce0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1ee      	bne.n	8000ccc <SD_disk_write+0xac>
 8000cee:	e000      	b.n	8000cf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cf2:	21fd      	movs	r1, #253	@ 0xfd
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fd95 	bl	8000824 <SD_TxDataBlock>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d04:	f7ff fc80 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000d08:	f7ff fcc0 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	200001ac 	.word	0x200001ac

08000d28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	@ 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	603a      	str	r2, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	460b      	mov	r3, r1
 8000d36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x1e>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e113      	b.n	8000f6e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d124      	bne.n	8000d9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d012      	beq.n	8000d80 <SD_disk_ioctl+0x58>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	dc1a      	bgt.n	8000d94 <SD_disk_ioctl+0x6c>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <SD_disk_ioctl+0x40>
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d006      	beq.n	8000d74 <SD_disk_ioctl+0x4c>
 8000d66:	e015      	b.n	8000d94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d68:	f7ff fd16 	bl	8000798 <SD_PowerOff>
			res = RES_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d72:	e0fa      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d74:	f7ff fcce 	bl	8000714 <SD_PowerOn>
			res = RES_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d7e:	e0f4      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	1c5c      	adds	r4, r3, #1
 8000d84:	f7ff fd14 	bl	80007b0 <SD_CheckPower>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d92:	e0ea      	b.n	8000f6a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d9a:	e0e6      	b.n	8000f6a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d9c:	4b76      	ldr	r3, [pc, #472]	@ (8000f78 <SD_disk_ioctl+0x250>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SD_disk_ioctl+0x86>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0df      	b.n	8000f6e <SD_disk_ioctl+0x246>

		SELECT();
 8000dae:	f7ff fc1d 	bl	80005ec <SELECT>

		switch (ctrl)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b0d      	cmp	r3, #13
 8000db6:	f200 80c9 	bhi.w	8000f4c <SD_disk_ioctl+0x224>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <SD_disk_ioctl+0x98>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000eb7 	.word	0x08000eb7
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000ea7 	.word	0x08000ea7
 8000dcc:	08000f4d 	.word	0x08000f4d
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f4d 	.word	0x08000f4d
 8000dd8:	08000f4d 	.word	0x08000f4d
 8000ddc:	08000f4d 	.word	0x08000f4d
 8000de0:	08000f4d 	.word	0x08000f4d
 8000de4:	08000f4d 	.word	0x08000f4d
 8000de8:	08000f4d 	.word	0x08000f4d
 8000dec:	08000ec9 	.word	0x08000ec9
 8000df0:	08000eed 	.word	0x08000eed
 8000df4:	08000f11 	.word	0x08000f11
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2049      	movs	r0, #73	@ 0x49
 8000dfc:	f7ff fd55 	bl	80008aa <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80a6 	bne.w	8000f54 <SD_disk_ioctl+0x22c>
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fcda 	bl	80007c8 <SD_RxDataBlock>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 809c 	beq.w	8000f54 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10d      	bne.n	8000e42 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e26:	7d7b      	ldrb	r3, [r7, #21]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	029a      	lsls	r2, r3, #10
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02d      	b.n	8000e9e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e42:	7c7b      	ldrb	r3, [r7, #17]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	09db      	lsrs	r3, r3, #7
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 0306 	and.w	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3302      	adds	r3, #2
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e6a:	7d3b      	ldrb	r3, [r7, #20]
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	7cbb      	ldrb	r3, [r7, #18]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e90:	8bfa      	ldrh	r2, [r7, #30]
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	3b09      	subs	r3, #9
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ea4:	e056      	b.n	8000f54 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb4:	e055      	b.n	8000f62 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000eb6:	f7ff fc13 	bl	80006e0 <SD_ReadyWait>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2bff      	cmp	r3, #255	@ 0xff
 8000ebe:	d14b      	bne.n	8000f58 <SD_disk_ioctl+0x230>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ec6:	e047      	b.n	8000f58 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	@ 0x49
 8000ecc:	f7ff fced 	bl	80008aa <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d142      	bne.n	8000f5c <SD_disk_ioctl+0x234>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc75 	bl	80007c8 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03b      	beq.n	8000f5c <SD_disk_ioctl+0x234>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eea:	e037      	b.n	8000f5c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eec:	2100      	movs	r1, #0
 8000eee:	204a      	movs	r0, #74	@ 0x4a
 8000ef0:	f7ff fcdb 	bl	80008aa <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d132      	bne.n	8000f60 <SD_disk_ioctl+0x238>
 8000efa:	2110      	movs	r1, #16
 8000efc:	6a38      	ldr	r0, [r7, #32]
 8000efe:	f7ff fc63 	bl	80007c8 <SD_RxDataBlock>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02b      	beq.n	8000f60 <SD_disk_ioctl+0x238>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f0e:	e027      	b.n	8000f60 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f10:	2100      	movs	r1, #0
 8000f12:	207a      	movs	r0, #122	@ 0x7a
 8000f14:	f7ff fcc9 	bl	80008aa <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f24:	e00b      	b.n	8000f3e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f26:	6a3c      	ldr	r4, [r7, #32]
 8000f28:	1c63      	adds	r3, r4, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	f7ff fbae 	bl	800068c <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9ef      	bls.n	8000f26 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f52:	e006      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f60:	bf00      	nop
		}

		DESELECT();
 8000f62:	f7ff fb51 	bl	8000608 <DESELECT>
		SPI_RxByte();
 8000f66:	f7ff fb91 	bl	800068c <SPI_RxByte>
	}

	return res;
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	372c      	adds	r7, #44	@ 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b5d      	ldr	r3, [pc, #372]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b56      	ldr	r3, [pc, #344]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a55      	ldr	r2, [pc, #340]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b53      	ldr	r3, [pc, #332]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b4f      	ldr	r3, [pc, #316]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b48      	ldr	r3, [pc, #288]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a47      	ldr	r2, [pc, #284]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b45      	ldr	r3, [pc, #276]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	4841      	ldr	r0, [pc, #260]	@ (8001110 <MX_GPIO_Init+0x194>)
 800100a:	f004 fae1 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2110      	movs	r1, #16
 8001012:	4840      	ldr	r0, [pc, #256]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001014:	f004 fadc 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001018:	2200      	movs	r2, #0
 800101a:	213b      	movs	r1, #59	@ 0x3b
 800101c:	483e      	ldr	r0, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800101e:	f004 fad7 	bl	80055d0 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 8001022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4835      	ldr	r0, [pc, #212]	@ (8001110 <MX_GPIO_Init+0x194>)
 800103c:	f004 f944 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 8001040:	2306      	movs	r3, #6
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4830      	ldr	r0, [pc, #192]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001054:	f004 f938 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001058:	2310      	movs	r3, #16
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4829      	ldr	r0, [pc, #164]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001070:	f004 f92a 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001074:	233b      	movs	r3, #59	@ 0x3b
 8001076:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4823      	ldr	r0, [pc, #140]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800108c:	f004 f91c 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <MX_GPIO_Init+0x19c>)
 80010a8:	f004 f90e 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010c4:	f004 f900 	bl	80052c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 80010c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010e0:	f004 f8f2 	bl	80052c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2017      	movs	r0, #23
 80010ea:	f003 fd24 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ee:	2017      	movs	r0, #23
 80010f0:	f003 fd3d 	bl	8004b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2028      	movs	r0, #40	@ 0x28
 80010fa:	f003 fd1c 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fe:	2028      	movs	r0, #40	@ 0x28
 8001100:	f003 fd35 	bl	8004b6e <HAL_NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	@ 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400

0800111c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == button1INT_Pin) {
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800112c:	d103      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x1a>
	  USB_Println("button 1 was pressed\n");
 800112e:	4812      	ldr	r0, [pc, #72]	@ (8001178 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001130:	f001 f928 	bl	8002384 <USB_Println>
  } else if (GPIO_Pin == button4INT_Pin) {
	  USB_Println("button 4 was pressed\n");
  } else {
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
  }
}
 8001134:	e01c      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button2INT_Pin) {
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800113c:	d103      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x2a>
	  USB_Println("button 2 was pressed\n");
 800113e:	480f      	ldr	r0, [pc, #60]	@ (800117c <HAL_GPIO_EXTI_Callback+0x60>)
 8001140:	f001 f920 	bl	8002384 <USB_Println>
}
 8001144:	e014      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button3INT_Pin ) {
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114c:	d103      	bne.n	8001156 <HAL_GPIO_EXTI_Callback+0x3a>
	  USB_Println("button 3 was pressed\n");
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x64>)
 8001150:	f001 f918 	bl	8002384 <USB_Println>
}
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button4INT_Pin) {
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800115c:	d103      	bne.n	8001166 <HAL_GPIO_EXTI_Callback+0x4a>
	  USB_Println("button 4 was pressed\n");
 800115e:	4809      	ldr	r0, [pc, #36]	@ (8001184 <HAL_GPIO_EXTI_Callback+0x68>)
 8001160:	f001 f910 	bl	8002384 <USB_Println>
}
 8001164:	e004      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4619      	mov	r1, r3
 800116a:	4807      	ldr	r0, [pc, #28]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x6c>)
 800116c:	f001 f90a 	bl	8002384 <USB_Println>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	080102c8 	.word	0x080102c8
 800117c:	080102e0 	.word	0x080102e0
 8001180:	080102f8 	.word	0x080102f8
 8001184:	08010310 	.word	0x08010310
 8001188:	08010328 	.word	0x08010328

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	f5ad 6def 	sub.w	sp, sp, #1912	@ 0x778
 8001192:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f003 fb5e 	bl	8004854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 faa6 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f7ff feee 	bl	8000f7c <MX_GPIO_Init>
  MX_DMA_Init();
 80011a0:	f7ff f9ee 	bl	8000580 <MX_DMA_Init>
  MX_SPI1_Init();
 80011a4:	f000 fd98 	bl	8001cd8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011a8:	f00d fdbc 	bl	800ed24 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011ac:	f000 fdcc 	bl	8001d48 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011b0:	f000 ffe4 	bl	800217c <MX_TIM4_Init>
  MX_FATFS_Init();
 80011b4:	f009 fbf4 	bl	800a9a0 <MX_FATFS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	@ 0x64
 80011ba:	f003 fbbd 	bl	8004938 <HAL_Delay>

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011be:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80011c2:	2201      	movs	r2, #1
 80011c4:	49a6      	ldr	r1, [pc, #664]	@ (8001460 <main+0x2d4>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00d f968 	bl	800e49c <f_mount>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 3763 	strb.w	r3, [r7, #1891]	@ 0x763
//	  USB_Println("There was an error: %d\n", fresult);
//  } else {
//	  USB_Println("the sdcard is mounted\n");
//  }

  initializeMCP2515();
 80011d2:	f000 fafb 	bl	80017cc <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 3000, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 80011d6:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80011da:	f5a3 63db 	sub.w	r3, r3, #1752	@ 0x6d8
 80011de:	4aa1      	ldr	r2, [pc, #644]	@ (8001464 <main+0x2d8>)
 80011e0:	461c      	mov	r4, r3
 80011e2:	4615      	mov	r5, r2
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10500};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80011f4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80011f8:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 80011fc:	2100      	movs	r1, #0
 80011fe:	489a      	ldr	r0, [pc, #616]	@ (8001468 <main+0x2dc>)
 8001200:	f000 fbaa 	bl	8001958 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001204:	2300      	movs	r3, #0
 8001206:	9303      	str	r3, [sp, #12]
 8001208:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	2300      	movs	r3, #0
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2300      	movs	r3, #0
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	4892      	ldr	r0, [pc, #584]	@ (8001468 <main+0x2dc>)
 8001220:	f000 fb1e 	bl	8001860 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001224:	2301      	movs	r3, #1
 8001226:	9303      	str	r3, [sp, #12]
 8001228:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	2300      	movs	r3, #0
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2300      	movs	r3, #0
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	488a      	ldr	r0, [pc, #552]	@ (8001468 <main+0x2dc>)
 8001240:	f000 fb0e 	bl	8001860 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001244:	230e      	movs	r3, #14
 8001246:	9303      	str	r3, [sp, #12]
 8001248:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	2300      	movs	r3, #0
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	4882      	ldr	r0, [pc, #520]	@ (8001468 <main+0x2dc>)
 8001260:	f000 fafe 	bl	8001860 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001264:	230f      	movs	r3, #15
 8001266:	9303      	str	r3, [sp, #12]
 8001268:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	487a      	ldr	r0, [pc, #488]	@ (8001468 <main+0x2dc>)
 8001280:	f000 faee 	bl	8001860 <setColor>

  resetScreen();
 8001284:	f001 fd94 	bl	8002db0 <resetScreen>
  initializeScreen();
 8001288:	f001 fdb0 	bl	8002dec <initializeScreen>
  //dosplashscene();
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 800128c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001290:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 8001294:	2100      	movs	r1, #0
 8001296:	4874      	ldr	r0, [pc, #464]	@ (8001468 <main+0x2dc>)
 8001298:	f000 fcb6 	bl	8001c08 <startUp>
  HAL_Delay(200);
 800129c:	20c8      	movs	r0, #200	@ 0xc8
 800129e:	f003 fb4b 	bl	8004938 <HAL_Delay>

  char result[20] = "null"; //rpm
 80012a2:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012a6:	f2a3 62ec 	subw	r2, r3, #1772	@ 0x6ec
 80012aa:	4970      	ldr	r1, [pc, #448]	@ (800146c <main+0x2e0>)
 80012ac:	4613      	mov	r3, r2
 80012ae:	c903      	ldmia	r1, {r0, r1}
 80012b0:	6018      	str	r0, [r3, #0]
 80012b2:	3304      	adds	r3, #4
 80012b4:	7019      	strb	r1, [r3, #0]
 80012b6:	1d53      	adds	r3, r2, #5
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	f8c3 200b 	str.w	r2, [r3, #11]
  char result2[20] = "null";//temp
 80012c4:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012c8:	f5a3 62e0 	sub.w	r2, r3, #1792	@ 0x700
 80012cc:	4967      	ldr	r1, [pc, #412]	@ (800146c <main+0x2e0>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	c903      	ldmia	r1, {r0, r1}
 80012d2:	6018      	str	r0, [r3, #0]
 80012d4:	3304      	adds	r3, #4
 80012d6:	7019      	strb	r1, [r3, #0]
 80012d8:	1d53      	adds	r3, r2, #5
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	f8c3 200b 	str.w	r2, [r3, #11]
  char result3[20] = "8";//gear
 80012e6:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012ea:	f2a3 7314 	subw	r3, r3, #1812	@ 0x714
 80012ee:	2238      	movs	r2, #56	@ 0x38
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	3304      	adds	r3, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 80012fe:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001302:	f5a3 62e5 	sub.w	r2, r3, #1832	@ 0x728
 8001306:	4959      	ldr	r1, [pc, #356]	@ (800146c <main+0x2e0>)
 8001308:	4613      	mov	r3, r2
 800130a:	c903      	ldmia	r1, {r0, r1}
 800130c:	6018      	str	r0, [r3, #0]
 800130e:	3304      	adds	r3, #4
 8001310:	7019      	strb	r1, [r3, #0]
 8001312:	1d53      	adds	r3, r2, #5
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	f8c3 200b 	str.w	r2, [r3, #11]
  char result5[20] = "null"; //speed
 8001320:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001324:	f2a3 723c 	subw	r2, r3, #1852	@ 0x73c
 8001328:	4950      	ldr	r1, [pc, #320]	@ (800146c <main+0x2e0>)
 800132a:	4613      	mov	r3, r2
 800132c:	c903      	ldmia	r1, {r0, r1}
 800132e:	6018      	str	r0, [r3, #0]
 8001330:	3304      	adds	r3, #4
 8001332:	7019      	strb	r1, [r3, #0]
 8001334:	1d53      	adds	r3, r2, #5
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	f8c3 200b 	str.w	r2, [r3, #11]
  settempdata(result2);
 8001342:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fae2 	bl	8003910 <settempdata>
  setgeardata(result3);
 800134c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fb09 	bl	8003968 <setgeardata>
  setrpmdata(result);
 8001356:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800135a:	4618      	mov	r0, r3
 800135c:	f002 faac 	bl	80038b8 <setrpmdata>
  setbattdata(result4);
 8001360:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fb29 	bl	80039bc <setbattdata>
  setspeeddata(result5);
 800136a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fb50 	bl	8003a14 <setspeeddata>
  domainscreen();
 8001374:	f002 fb7a 	bl	8003a6c <domainscreen>

  struct can_frame frame;

  while (1)
  {
	  for (int i = 0; i < 10; i++) {
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 800137e:	e19f      	b.n	80016c0 <main+0x534>
		  int canresult = readMessage(&frame);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fa33 	bl	80017f0 <readMessage>
 800138a:	f8c7 075c 	str.w	r0, [r7, #1884]	@ 0x75c
		  if (canresult == 0) {
 800138e:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 818f 	bne.w	80016b6 <main+0x52a>
			  if (frame.can_id == (1520 + 0)) {
 8001398:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800139c:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 80013a6:	d12b      	bne.n	8001400 <main+0x274>
				  uint16_t rpm = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 80013a8:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80013ac:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80013b0:	7b9b      	ldrb	r3, [r3, #14]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 80013ba:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 80013be:	7bd2      	ldrb	r2, [r2, #15]
 80013c0:	4413      	add	r3, r2
 80013c2:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
				  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80013c6:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 80013ca:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013ce:	f207 41ec 	addw	r1, r7, #1260	@ 0x4ec
 80013d2:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	2100      	movs	r1, #0
 80013e0:	4821      	ldr	r0, [pc, #132]	@ (8001468 <main+0x2dc>)
 80013e2:	f000 fb49 	bl	8001a78 <UpdateShiftLights>

				  itoa(rpm, (char*)(result), 10);
 80013e6:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 80013ea:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80013ee:	220a      	movs	r2, #10
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00e f9e4 	bl	800f7be <itoa>
				  setrpmdata(result);
 80013f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 fa5c 	bl	80038b8 <setrpmdata>
			  }
			  if (frame.can_id == (1520 + 2)) {
 8001400:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001404:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f240 52f2 	movw	r2, #1522	@ 0x5f2
 800140e:	4293      	cmp	r3, r2
 8001410:	d153      	bne.n	80014ba <main+0x32e>
				  uint16_t temp = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 8001412:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001416:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 800141a:	7b9b      	ldrb	r3, [r3, #14]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b29b      	uxth	r3, r3
 8001420:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 8001424:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 8001428:	7bd2      	ldrb	r2, [r2, #15]
 800142a:	4413      	add	r3, r2
 800142c:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758
				  if (temp > 2150) {
 8001430:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 8001434:	f640 0266 	movw	r2, #2150	@ 0x866
 8001438:	4293      	cmp	r3, r2
 800143a:	d919      	bls.n	8001470 <main+0x2e4>
					setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 800143c:	230f      	movs	r3, #15
 800143e:	9303      	str	r3, [sp, #12]
 8001440:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	2300      	movs	r3, #0
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	23ff      	movs	r3, #255	@ 0xff
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	4804      	ldr	r0, [pc, #16]	@ (8001468 <main+0x2dc>)
 8001458:	f000 fa02 	bl	8001860 <setColor>
 800145c:	e018      	b.n	8001490 <main+0x304>
 800145e:	bf00      	nop
 8001460:	08010348 	.word	0x08010348
 8001464:	0801035c 	.word	0x0801035c
 8001468:	200002dc 	.word	0x200002dc
 800146c:	0801038c 	.word	0x0801038c
				  } else {
					setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001470:	230f      	movs	r3, #15
 8001472:	9303      	str	r3, [sp, #12]
 8001474:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	4891      	ldr	r0, [pc, #580]	@ (80016d0 <main+0x544>)
 800148c:	f000 f9e8 	bl	8001860 <setColor>
				  }
				  temp /= 10;
 8001490:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 8001494:	4a8f      	ldr	r2, [pc, #572]	@ (80016d4 <main+0x548>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758
				  itoa(temp, result2, 10);
 80014a0:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 80014a4:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80014a8:	220a      	movs	r2, #10
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00e f987 	bl	800f7be <itoa>
				  settempdata(result2);
 80014b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fa2b 	bl	8003910 <settempdata>
			  }
			  if (frame.can_id == 1520 + 33) {
 80014ba:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80014be:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f240 6211 	movw	r2, #1553	@ 0x611
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d117      	bne.n	80014fc <main+0x370>
				  uint8_t gear = ((uint8_t)frame.data[6]);
 80014cc:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80014d0:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80014d4:	7b9b      	ldrb	r3, [r3, #14]
 80014d6:	f887 3757 	strb.w	r3, [r7, #1879]	@ 0x757
				  if (gear != 0) {
 80014da:	f897 3757 	ldrb.w	r3, [r7, #1879]	@ 0x757
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00c      	beq.n	80014fc <main+0x370>
					  //USB_Println("the gear value is %d\n", gear);
					  itoa(gear, result3, 10);
 80014e2:	f897 3757 	ldrb.w	r3, [r7, #1879]	@ 0x757
 80014e6:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80014ea:	220a      	movs	r2, #10
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00e f966 	bl	800f7be <itoa>
					  setgeardata(result3);
 80014f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 fa36 	bl	8003968 <setgeardata>
				  }
			  }
			  if (frame.can_id == (1520 + 3)) {
 80014fc:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001500:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f240 52f3 	movw	r2, #1523	@ 0x5f3
 800150a:	4293      	cmp	r3, r2
 800150c:	d155      	bne.n	80015ba <main+0x42e>
				  uint8_t battvalue = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 800150e:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001512:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001516:	7adb      	ldrb	r3, [r3, #11]
 8001518:	f887 3751 	strb.w	r3, [r7, #1873]	@ 0x751
				  uint8_t batIntPart = battvalue / 10;
 800151c:	f897 3751 	ldrb.w	r3, [r7, #1873]	@ 0x751
 8001520:	4a6c      	ldr	r2, [pc, #432]	@ (80016d4 <main+0x548>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	08db      	lsrs	r3, r3, #3
 8001528:	f887 3750 	strb.w	r3, [r7, #1872]	@ 0x750
				  uint8_t batDecimalPart = battvalue % 10;
 800152c:	f897 2751 	ldrb.w	r2, [r7, #1873]	@ 0x751
 8001530:	4b68      	ldr	r3, [pc, #416]	@ (80016d4 <main+0x548>)
 8001532:	fba3 1302 	umull	r1, r3, r3, r2
 8001536:	08d9      	lsrs	r1, r3, #3
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
				  char batint[10];
				  char batdec[10];
				  itoa(batIntPart, batint, 10);
 8001546:	f897 3750 	ldrb.w	r3, [r7, #1872]	@ 0x750
 800154a:	f107 010c 	add.w	r1, r7, #12
 800154e:	220a      	movs	r2, #10
 8001550:	4618      	mov	r0, r3
 8001552:	f00e f934 	bl	800f7be <itoa>
				  itoa(batDecimalPart, batdec, 10);
 8001556:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 800155a:	4639      	mov	r1, r7
 800155c:	220a      	movs	r2, #10
 800155e:	4618      	mov	r0, r3
 8001560:	f00e f92d 	bl	800f7be <itoa>
				  strncpy(result4, "", 20);
 8001564:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001568:	2214      	movs	r2, #20
 800156a:	495b      	ldr	r1, [pc, #364]	@ (80016d8 <main+0x54c>)
 800156c:	4618      	mov	r0, r3
 800156e:	f00e fa7e 	bl	800fa6e <strncpy>
				  strncat(result4, batint, 5);
 8001572:	f107 010c 	add.w	r1, r7, #12
 8001576:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800157a:	2205      	movs	r2, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f00e fa63 	bl	800fa48 <strncat>
				  strncat(result4, ".", 5);
 8001582:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe2a 	bl	80001e0 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001594:	4413      	add	r3, r2
 8001596:	4951      	ldr	r1, [pc, #324]	@ (80016dc <main+0x550>)
 8001598:	461a      	mov	r2, r3
 800159a:	460b      	mov	r3, r1
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	8013      	strh	r3, [r2, #0]
				  strncat(result4, batdec, 1);
 80015a0:	4639      	mov	r1, r7
 80015a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a6:	2201      	movs	r2, #1
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00e fa4d 	bl	800fa48 <strncat>
				  setbattdata(result4);
 80015ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fa02 	bl	80039bc <setbattdata>
 80015b8:	e07d      	b.n	80016b6 <main+0x52a>
			  } else if (frame.can_id == 504) {
 80015ba:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015be:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80015c8:	d14f      	bne.n	800166a <main+0x4de>
				  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 80015ca:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015ce:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015d2:	7b9b      	ldrb	r3, [r3, #14]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015dc:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015e0:	7bdb      	ldrb	r3, [r3, #15]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  if (neutrallight < 1024) {
 80015ec:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 80015f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015f4:	d21c      	bcs.n	8001630 <main+0x4a4>
					  setColor(&htim4, TIM_CHANNEL_1, 128, 255, 0, ledcolors, ledbytes, 0);
 80015f6:	2300      	movs	r3, #0
 80015f8:	9303      	str	r3, [sp, #12]
 80015fa:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	2300      	movs	r3, #0
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	23ff      	movs	r3, #255	@ 0xff
 800160c:	2280      	movs	r2, #128	@ 0x80
 800160e:	2100      	movs	r1, #0
 8001610:	482f      	ldr	r0, [pc, #188]	@ (80016d0 <main+0x544>)
 8001612:	f000 f925 	bl	8001860 <setColor>
					  strncpy(result3, "7", 10);
 8001616:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800161a:	220a      	movs	r2, #10
 800161c:	4930      	ldr	r1, [pc, #192]	@ (80016e0 <main+0x554>)
 800161e:	4618      	mov	r0, r3
 8001620:	f00e fa25 	bl	800fa6e <strncpy>
					  setgeardata(result3);
 8001624:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001628:	4618      	mov	r0, r3
 800162a:	f002 f99d 	bl	8003968 <setgeardata>
 800162e:	e042      	b.n	80016b6 <main+0x52a>
				  } else {
					  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001630:	2300      	movs	r3, #0
 8001632:	9303      	str	r3, [sp, #12]
 8001634:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	4821      	ldr	r0, [pc, #132]	@ (80016d0 <main+0x544>)
 800164c:	f000 f908 	bl	8001860 <setColor>
					  strncpy(result3, "8", 10);
 8001650:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001654:	220a      	movs	r2, #10
 8001656:	4923      	ldr	r1, [pc, #140]	@ (80016e4 <main+0x558>)
 8001658:	4618      	mov	r0, r3
 800165a:	f00e fa08 	bl	800fa6e <strncpy>
					  setgeardata(result3);
 800165e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001662:	4618      	mov	r0, r3
 8001664:	f002 f980 	bl	8003968 <setgeardata>
 8001668:	e025      	b.n	80016b6 <main+0x52a>
				  }
				  //USB_Println("the neutral light value is %d\n", neutrallight);
			  } else if (frame.can_id == 1520) {
 800166a:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800166e:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 8001678:	d11d      	bne.n	80016b6 <main+0x52a>
				  uint16_t speed = (uint16_t)((frame.data[0] << 8) | (frame.data[1]));
 800167a:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800167e:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800168c:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001690:	7a5b      	ldrb	r3, [r3, #9]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  itoa(speed, (char*) result5, 10);
 800169c:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 80016a0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80016a4:	220a      	movs	r2, #10
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00e f889 	bl	800f7be <itoa>
				  setspeeddata(result5);
 80016ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 f9af 	bl	8003a14 <setspeeddata>
	  for (int i = 0; i < 10; i++) {
 80016b6:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 80016ba:	3301      	adds	r3, #1
 80016bc:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 80016c0:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	f77f ae5b 	ble.w	8001380 <main+0x1f4>
			  }
		  }
	  }

	  domainscreen();
 80016ca:	f002 f9cf 	bl	8003a6c <domainscreen>
	  for (int i = 0; i < 10; i++) {
 80016ce:	e653      	b.n	8001378 <main+0x1ec>
 80016d0:	200002dc 	.word	0x200002dc
 80016d4:	cccccccd 	.word	0xcccccccd
 80016d8:	0801034c 	.word	0x0801034c
 80016dc:	08010350 	.word	0x08010350
 80016e0:	08010354 	.word	0x08010354
 80016e4:	08010358 	.word	0x08010358

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b094      	sub	sp, #80	@ 0x50
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	2230      	movs	r2, #48	@ 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00e f99e 	bl	800fa38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <SystemClock_Config+0xd0>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	4a28      	ldr	r2, [pc, #160]	@ (80017b8 <SystemClock_Config+0xd0>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6413      	str	r3, [r2, #64]	@ 0x40
 800171c:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <SystemClock_Config+0xd0>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <SystemClock_Config+0xd4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001734:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <SystemClock_Config+0xd4>)
 8001736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <SystemClock_Config+0xd4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001748:	2301      	movs	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800174c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2302      	movs	r3, #2
 8001754:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001756:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800175c:	2319      	movs	r3, #25
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001760:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001766:	2304      	movs	r3, #4
 8001768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800176a:	2307      	movs	r3, #7
 800176c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	4618      	mov	r0, r3
 8001774:	f005 f9b0 	bl	8006ad8 <HAL_RCC_OscConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800177e:	f000 f81f 	bl	80017c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001782:	230f      	movs	r3, #15
 8001784:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001786:	2302      	movs	r3, #2
 8001788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800178e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2102      	movs	r1, #2
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 fc12 	bl	8006fc8 <HAL_RCC_ClockConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017aa:	f000 f809 	bl	80017c0 <Error_Handler>
  }
}
 80017ae:	bf00      	nop
 80017b0:	3750      	adds	r7, #80	@ 0x50
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <Error_Handler+0x8>

080017cc <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	myMCP.reset();
 80017d0:	4806      	ldr	r0, [pc, #24]	@ (80017ec <initializeMCP2515+0x20>)
 80017d2:	f002 fb01 	bl	8003dd8 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80017d6:	2202      	movs	r2, #2
 80017d8:	210e      	movs	r1, #14
 80017da:	4804      	ldr	r0, [pc, #16]	@ (80017ec <initializeMCP2515+0x20>)
 80017dc:	f002 fcce 	bl	800417c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <initializeMCP2515+0x20>)
 80017e2:	f002 fc7f 	bl	80040e4 <_ZN7MCP251513setNormalModeEv>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200001b0 	.word	0x200001b0

080017f0 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4804      	ldr	r0, [pc, #16]	@ (800180c <readMessage+0x1c>)
 80017fc:	f002 ffd4 	bl	80047a8 <_ZN7MCP251511readMessageEP9can_frame>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001b0 	.word	0x200001b0

08001810 <_Z41__static_initialization_and_destruction_0ii>:
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af02      	add	r7, sp, #8
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10c      	bne.n	800183a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001826:	4293      	cmp	r3, r2
 8001828:	d107      	bne.n	800183a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 800182a:	2310      	movs	r3, #16
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001830:	220a      	movs	r2, #10
 8001832:	4905      	ldr	r1, [pc, #20]	@ (8001848 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001836:	f002 fa6f 	bl	8003d18 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40020000 	.word	0x40020000
 8001848:	2000021c 	.word	0x2000021c
 800184c:	200001b0 	.word	0x200001b0

08001850 <_GLOBAL__sub_I_myMCP>:
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
 8001854:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff ffd9 	bl	8001810 <_Z41__static_initialization_and_destruction_0ii>
 800185e:	bd80      	pop	{r7, pc}

08001860 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	460b      	mov	r3, r1
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	4613      	mov	r3, r2
 8001874:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8001876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001884:	4413      	add	r3, r2
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	3301      	adds	r3, #1
 800188e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001890:	4413      	add	r3, r2
 8001892:	79ba      	ldrb	r2, [r7, #6]
 8001894:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3302      	adds	r3, #2
 800189a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800189c:	4413      	add	r3, r2
 800189e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018a2:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e02a      	b.n	8001900 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	e021      	b.n	80018f4 <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b4:	4413      	add	r3, r2
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	00da      	lsls	r2, r3, #3
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018d4:	4413      	add	r3, r2
 80018d6:	2246      	movs	r2, #70	@ 0x46
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	e008      	b.n	80018ee <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	00da      	lsls	r2, r3, #3
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	4413      	add	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018e8:	4413      	add	r3, r2
 80018ea:	2223      	movs	r2, #35	@ 0x23
 80018ec:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	ddda      	ble.n	80018b0 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	3302      	adds	r3, #2
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	429a      	cmp	r2, r3
 8001908:	ddcf      	ble.n	80018aa <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800190a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e008      	b.n	8001924 <setColor+0xc4>
    	ledbytes[i] = 0;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001918:	4413      	add	r3, r2
 800191a:	2200      	movs	r2, #0
 800191c:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f240 2215 	movw	r2, #533	@ 0x215
 800192a:	4293      	cmp	r3, r2
 800192c:	ddf1      	ble.n	8001912 <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 800192e:	f240 2316 	movw	r3, #534	@ 0x216
 8001932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f006 fcc0 	bl	80082bc <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 800193c:	bf00      	nop
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <setColor+0xf4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0fb      	beq.n	800193e <setColor+0xde>
    datasentflag = 0;
 8001946:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <setColor+0xf4>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200001c0 	.word	0x200001c0

08001958 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e013      	b.n	8001994 <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3302      	adds	r3, #2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	22ff      	movs	r2, #255	@ 0xff
 800198c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3303      	adds	r3, #3
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b2f      	cmp	r3, #47	@ 0x2f
 8001998:	dde8      	ble.n	800196c <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e02a      	b.n	80019f6 <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e021      	b.n	80019ea <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	00da      	lsls	r2, r3, #3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	4413      	add	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	2246      	movs	r2, #70	@ 0x46
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	e008      	b.n	80019e4 <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	00da      	lsls	r2, r3, #3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4413      	add	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	2223      	movs	r2, #35	@ 0x23
 80019e2:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	ddda      	ble.n	80019a6 <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80019fa:	ddd1      	ble.n	80019a0 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80019fc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e008      	b.n	8001a16 <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	3301      	adds	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f240 2215 	movw	r2, #533	@ 0x215
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	ddf1      	ble.n	8001a04 <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001a20:	f240 2316 	movw	r3, #534	@ 0x216
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f006 fc47 	bl	80082bc <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8001a2e:	bf00      	nop
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <shiftLightsInit+0xf4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0fb      	beq.n	8001a30 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <shiftLightsInit+0xf4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200001c0 	.word	0x200001c0

08001a50 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a5c:	f006 fdde 	bl	800861c <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200002dc 	.word	0x200002dc
 8001a74:	200001c0 	.word	0x200001c0

08001a78 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af04      	add	r7, sp, #16
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	dd06      	ble.n	8001a9e <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f8b6 	bl	8001c08 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001a9c:	e02a      	b.n	8001af4 <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e024      	b.n	8001aee <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001aaa:	3b02      	subs	r3, #2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6a3a      	ldr	r2, [r7, #32]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	db08      	blt.n	8001acc <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f819 	bl	8001afc <lightOn>
 8001aca:	e00d      	b.n	8001ae8 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	9303      	str	r3, [sp, #12]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f7ff febc 	bl	8001860 <setColor>
	for (int i = 2; i < 14; i++) {
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b0d      	cmp	r3, #13
 8001af2:	ddd7      	ble.n	8001aa4 <UpdateShiftLights+0x2c>
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b0d      	cmp	r3, #13
 8001b0e:	d140      	bne.n	8001b92 <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff ff1e 	bl	8001958 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	4834      	ldr	r0, [pc, #208]	@ (8001c04 <lightOn+0x108>)
 8001b34:	f7ff fe94 	bl	8001860 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9303      	str	r3, [sp, #12]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	482d      	ldr	r0, [pc, #180]	@ (8001c04 <lightOn+0x108>)
 8001b50:	f7ff fe86 	bl	8001860 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001b54:	230e      	movs	r3, #14
 8001b56:	9303      	str	r3, [sp, #12]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2300      	movs	r3, #0
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4826      	ldr	r0, [pc, #152]	@ (8001c04 <lightOn+0x108>)
 8001b6c:	f7ff fe78 	bl	8001860 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001b70:	230f      	movs	r3, #15
 8001b72:	9303      	str	r3, [sp, #12]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	481f      	ldr	r0, [pc, #124]	@ (8001c04 <lightOn+0x108>)
 8001b88:	f7ff fe6a 	bl	8001860 <setColor>
		HAL_Delay(5);
 8001b8c:	2005      	movs	r0, #5
 8001b8e:	f002 fed3 	bl	8004938 <HAL_Delay>
	}
	if (index < 6) {
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	dc0e      	bgt.n	8001bb6 <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	9303      	str	r3, [sp, #12]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	22ff      	movs	r2, #255	@ 0xff
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff fe56 	bl	8001860 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001bb4:	e022      	b.n	8001bfc <lightOn+0x100>
	} else if (index < 10) {
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	dc0e      	bgt.n	8001bda <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	9303      	str	r3, [sp, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	23ff      	movs	r3, #255	@ 0xff
 8001bce:	2200      	movs	r2, #0
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff fe44 	bl	8001860 <setColor>
}
 8001bd8:	e010      	b.n	8001bfc <lightOn+0x100>
	} else if (index < 14){
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b0d      	cmp	r3, #13
 8001bde:	dc0d      	bgt.n	8001bfc <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	23ff      	movs	r3, #255	@ 0xff
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff fe32 	bl	8001860 <setColor>
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200002dc 	.word	0x200002dc

08001c08 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	@ 0x30
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001c16:	2307      	movs	r3, #7
 8001c18:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e026      	b.n	8001c6e <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	9303      	str	r3, [sp, #12]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2300      	movs	r3, #0
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	23ff      	movs	r3, #255	@ 0xff
 8001c36:	2200      	movs	r2, #0
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fe10 	bl	8001860 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4413      	add	r3, r2
 8001c46:	3301      	adds	r3, #1
 8001c48:	9303      	str	r3, [sp, #12]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	23ff      	movs	r3, #255	@ 0xff
 8001c58:	2200      	movs	r2, #0
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff fdff 	bl	8001860 <setColor>
		HAL_Delay(20);
 8001c62:	2014      	movs	r0, #20
 8001c64:	f002 fe68 	bl	8004938 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	ddd5      	ble.n	8001c20 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	e026      	b.n	8001cc8 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	9303      	str	r3, [sp, #12]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	9302      	str	r3, [sp, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2200      	movs	r2, #0
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fde3 	bl	8001860 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	9303      	str	r3, [sp, #12]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff fdd2 	bl	8001860 <setColor>
		HAL_Delay(20);
 8001cbc:	2014      	movs	r0, #20
 8001cbe:	f002 fe3b 	bl	8004938 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	ddd5      	ble.n	8001c7a <startUp+0x72>
	}
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001cde:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <MX_SPI1_Init+0x6c>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001ce4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ce8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d04:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d26:	220a      	movs	r2, #10
 8001d28:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_SPI1_Init+0x68>)
 8001d2c:	f005 fb04 	bl	8007338 <HAL_SPI_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d36:	f7ff fd43 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200001c4 	.word	0x200001c4
 8001d44:	40013000 	.word	0x40013000

08001d48 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d4e:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <MX_SPI2_Init+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d52:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d86:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d94:	220a      	movs	r2, #10
 8001d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	@ (8001dac <MX_SPI2_Init+0x64>)
 8001d9a:	f005 facd 	bl	8007338 <HAL_SPI_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001da4:	f7ff fd0c 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2000021c 	.word	0x2000021c
 8001db0:	40003800 	.word	0x40003800

08001db4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	@ 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8001efc <HAL_SPI_MspInit+0x148>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d15c      	bne.n	8001e90 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	4b49      	ldr	r3, [pc, #292]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	4a48      	ldr	r2, [pc, #288]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001de0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de6:	4b46      	ldr	r3, [pc, #280]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	4b42      	ldr	r3, [pc, #264]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a41      	ldr	r2, [pc, #260]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e0e:	23a0      	movs	r3, #160	@ 0xa0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	4836      	ldr	r0, [pc, #216]	@ (8001f04 <HAL_SPI_MspInit+0x150>)
 8001e2a:	f003 fa4d 	bl	80052c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e2e:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e30:	4a36      	ldr	r2, [pc, #216]	@ (8001f0c <HAL_SPI_MspInit+0x158>)
 8001e32:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e34:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e36:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e3a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e3c:	4b32      	ldr	r3, [pc, #200]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e42:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e48:	4b2f      	ldr	r3, [pc, #188]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e50:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e56:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e58:	4b2b      	ldr	r3, [pc, #172]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e60:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e66:	4b28      	ldr	r3, [pc, #160]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6c:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e72:	4825      	ldr	r0, [pc, #148]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e74:	f002 fe96 	bl	8004ba4 <HAL_DMA_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001e7e:	f7ff fc9f 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a20      	ldr	r2, [pc, #128]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e86:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e88:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_SPI_MspInit+0x154>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e8e:	e031      	b.n	8001ef4 <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_SPI_MspInit+0x15c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d12c      	bne.n	8001ef4 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <HAL_SPI_MspInit+0x14c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001ed2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4809      	ldr	r0, [pc, #36]	@ (8001f14 <HAL_SPI_MspInit+0x160>)
 8001ef0:	f003 f9ea 	bl	80052c8 <HAL_GPIO_Init>
}
 8001ef4:	bf00      	nop
 8001ef6:	3730      	adds	r7, #48	@ 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013000 	.word	0x40013000
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000
 8001f08:	20000274 	.word	0x20000274
 8001f0c:	40026458 	.word	0x40026458
 8001f10:	40003800 	.word	0x40003800
 8001f14:	40020400 	.word	0x40020400

08001f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	4a0f      	ldr	r2, [pc, #60]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <SDTimer_Handler+0x40>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <SDTimer_Handler+0x1c>
    Timer1--;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <SDTimer_Handler+0x40>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <SDTimer_Handler+0x40>)
 8001f82:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <SDTimer_Handler+0x44>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <SDTimer_Handler+0x34>
    Timer2--;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <SDTimer_Handler+0x44>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <SDTimer_Handler+0x44>)
 8001f9a:	801a      	strh	r2, [r3, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200001a8 	.word	0x200001a8
 8001fac:	200001aa 	.word	0x200001aa

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002008:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <SysTick_Handler+0x30>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <SysTick_Handler+0x30>)
 8002014:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <SysTick_Handler+0x30>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b09      	cmp	r3, #9
 800201e:	d904      	bls.n	800202a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002020:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <SysTick_Handler+0x30>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002026:	f7ff ff9f 	bl	8001f68 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202a:	f002 fc65 	bl	80048f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200002d4 	.word	0x200002d4

08002038 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <DMA1_Stream0_IRQHandler+0x10>)
 800203e:	f002 fed9 	bl	8004df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000324 	.word	0x20000324

0800204c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 8002050:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002054:	f003 fad6 	bl	8005604 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 8002058:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800205c:	f003 fad2 	bl	8005604 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 8002068:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800206c:	f003 faca 	bl	8005604 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 8002070:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002074:	f003 fac6 	bl	8005604 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA2_Stream3_IRQHandler+0x10>)
 8002082:	f002 feb7 	bl	8004df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000274 	.word	0x20000274

08002090 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <OTG_FS_IRQHandler+0x10>)
 8002096:	f003 fc11 	bl	80058bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20001134 	.word	0x20001134

080020a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_kill>:

int _kill(int pid, int sig)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020be:	f00d fd3d 	bl	800fb3c <__errno>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2216      	movs	r2, #22
 80020c6:	601a      	str	r2, [r3, #0]
  return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffe7 	bl	80020b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e6:	bf00      	nop
 80020e8:	e7fd      	b.n	80020e6 <_exit+0x12>
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	@ (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f00d fd0e 	bl	800fb3c <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20010000 	.word	0x20010000
 800214c:	00000400 	.word	0x00000400
 8002150:	200002d8 	.word	0x200002d8
 8002154:	20001988 	.word	0x20001988

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	@ 0x38
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <MX_TIM4_Init+0xe8>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 80021be:	4b28      	ldr	r3, [pc, #160]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021c0:	2269      	movs	r2, #105	@ 0x69
 80021c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021d0:	4823      	ldr	r0, [pc, #140]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021d2:	f005 ffcb 	bl	800816c <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80021dc:	f7ff faf0 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ea:	4619      	mov	r1, r3
 80021ec:	481c      	ldr	r0, [pc, #112]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021ee:	f006 fb9d 	bl	800892c <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80021f8:	f7ff fae2 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021fc:	4818      	ldr	r0, [pc, #96]	@ (8002260 <MX_TIM4_Init+0xe4>)
 80021fe:	f006 f804 	bl	800820a <HAL_TIM_PWM_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002208:	f7ff fada 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002214:	f107 0320 	add.w	r3, r7, #32
 8002218:	4619      	mov	r1, r3
 800221a:	4811      	ldr	r0, [pc, #68]	@ (8002260 <MX_TIM4_Init+0xe4>)
 800221c:	f007 f80a 	bl	8009234 <HAL_TIMEx_MasterConfigSynchronization>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002226:	f7ff facb 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222a:	2360      	movs	r3, #96	@ 0x60
 800222c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	@ (8002260 <MX_TIM4_Init+0xe4>)
 8002242:	f006 fab1 	bl	80087a8 <HAL_TIM_PWM_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800224c:	f7ff fab8 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002250:	4803      	ldr	r0, [pc, #12]	@ (8002260 <MX_TIM4_Init+0xe4>)
 8002252:	f000 f85d 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8002256:	bf00      	nop
 8002258:	3738      	adds	r7, #56	@ 0x38
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200002dc 	.word	0x200002dc
 8002264:	40000800 	.word	0x40000800

08002268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a22      	ldr	r2, [pc, #136]	@ (8002300 <HAL_TIM_Base_MspInit+0x98>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d13d      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <HAL_TIM_Base_MspInit+0x9c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <HAL_TIM_Base_MspInit+0x9c>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6413      	str	r3, [r2, #64]	@ 0x40
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_TIM_Base_MspInit+0x9c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 8002298:	4a1c      	ldr	r2, [pc, #112]	@ (800230c <HAL_TIM_Base_MspInit+0xa4>)
 800229a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 800229e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022a2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a4:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022b0:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022be:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80022da:	480b      	ldr	r0, [pc, #44]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022dc:	f002 fc62 	bl	8004ba4 <HAL_DMA_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80022e6:	f7ff fa6b 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a06      	ldr	r2, [pc, #24]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80022f0:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <HAL_TIM_Base_MspInit+0xa0>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40000800 	.word	0x40000800
 8002304:	40023800 	.word	0x40023800
 8002308:	20000324 	.word	0x20000324
 800230c:	40026010 	.word	0x40026010

08002310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_TIM_MspPostInit+0x68>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11d      	bne.n	800236e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800234e:	2340      	movs	r3, #64	@ 0x40
 8002350:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800235e:	2302      	movs	r3, #2
 8002360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	@ (8002380 <HAL_TIM_MspPostInit+0x70>)
 800236a:	f002 ffad 	bl	80052c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40000800 	.word	0x40000800
 800237c:	40023800 	.word	0x40023800
 8002380:	40020400 	.word	0x40020400

08002384 <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 8002384:	b40f      	push	{r0, r1, r2, r3}
 8002386:	b580      	push	{r7, lr}
 8002388:	b0a2      	sub	sp, #136	@ 0x88
 800238a:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 800238c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002390:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002392:	f107 0008 	add.w	r0, r7, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800239c:	2180      	movs	r1, #128	@ 0x80
 800239e:	f00d fb3d 	bl	800fa1c <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fd ff1a 	bl	80001e0 <strlen>
 80023ac:	4603      	mov	r3, r0
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00c fd72 	bl	800eea0 <CDC_Transmit_FS>
}
 80023bc:	bf00      	nop
 80023be:	3788      	adds	r7, #136	@ 0x88
 80023c0:	46bd      	mov	sp, r7
 80023c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023c6:	b004      	add	sp, #16
 80023c8:	4770      	bx	lr
	...

080023cc <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <transmitdma+0x28>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f005 fc36 	bl	8007c58 <HAL_SPI_Transmit_DMA>
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000384 	.word	0x20000384

080023f8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a05      	ldr	r2, [pc, #20]	@ (800241c <HAL_SPI_TxCpltCallback+0x24>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d102      	bne.n	8002410 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_SPI_TxCpltCallback+0x28>)
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
	}
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40013000 	.word	0x40013000
 8002420:	20000384 	.word	0x20000384

08002424 <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	461a      	mov	r2, r3
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f805 	bl	8002448 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e014      	b.n	800249e <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4413      	add	r3, r2
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f9da 	bl	8002838 <_ZN13DisplayObject11getpriorityEv>
 8002484:	4603      	mov	r3, r0
 8002486:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	799b      	ldrb	r3, [r3, #6]
 800248c:	7cfa      	ldrb	r2, [r7, #19]
 800248e:	429a      	cmp	r2, r3
 8002490:	d902      	bls.n	8002498 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	7cfa      	ldrb	r2, [r7, #19]
 8002496:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbe6      	blt.n	8002474 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024be:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024c2:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 80024c4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024c8:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	795b      	ldrb	r3, [r3, #5]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 813e 	beq.w	8002752 <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 80024d6:	f240 133f 	movw	r3, #319	@ 0x13f
 80024da:	f240 12df 	movw	r2, #479	@ 0x1df
 80024de:	2100      	movs	r1, #0
 80024e0:	2000      	movs	r0, #0
 80024e2:	f000 fd3c 	bl	8002f5e <modifySpace>
		startCommand(WRITE_COMMAND);
 80024e6:	202c      	movs	r0, #44	@ 0x2c
 80024e8:	f000 fc46 	bl	8002d78 <startCommand>
		dataOrRegister(1);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 fc01 	bl	8002cf4 <dataOrRegister>
		uint8_t anychanges = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024f8:	f102 021f 	add.w	r2, r2, #31
 80024fc:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80024fe:	2300      	movs	r3, #0
 8002500:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002504:	f102 0218 	add.w	r2, r2, #24
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e028      	b.n	800255e <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 800250c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002510:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800251c:	f103 0318 	add.w	r3, r3, #24
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f9a0 	bl	800286e <_ZN13DisplayObject13getChangeFlagEv>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002536:	f103 031f 	add.w	r3, r3, #31
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4413      	add	r3, r2
 800253e:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002542:	f102 021f 	add.w	r2, r2, #31
 8002546:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002548:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800254c:	f103 0318 	add.w	r3, r3, #24
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002558:	f102 0218 	add.w	r2, r2, #24
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002562:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	791b      	ldrb	r3, [r3, #4]
 800256a:	461a      	mov	r2, r3
 800256c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002570:	f103 0318 	add.w	r3, r3, #24
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4293      	cmp	r3, r2
 8002578:	dbc8      	blt.n	800250c <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 800257a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800257e:	f103 031f 	add.w	r3, r3, #31
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80ec 	beq.w	8002762 <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 800258a:	2300      	movs	r3, #0
 800258c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002590:	f102 0214 	add.w	r2, r2, #20
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e0d2      	b.n	800273e <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 8002598:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800259c:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 80025a0:	4618      	mov	r0, r3
 80025a2:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80025a6:	461a      	mov	r2, r3
 80025a8:	2100      	movs	r1, #0
 80025aa:	f00d fa45 	bl	800fa38 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 80025ae:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025b2:	f103 0314 	add.w	r3, r3, #20
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025c4:	f102 0208 	add.w	r2, r2, #8
 80025c8:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 80025ca:	2300      	movs	r3, #0
 80025cc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025d0:	f102 0210 	add.w	r2, r2, #16
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e084      	b.n	80026e2 <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 80025d8:	2300      	movs	r3, #0
 80025da:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025de:	f102 020c 	add.w	r2, r2, #12
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	e064      	b.n	80026b0 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 80025e6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025ea:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025f6:	f103 030c 	add.w	r3, r3, #12
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f918 	bl	8002838 <_ZN13DisplayObject11getpriorityEv>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002610:	f103 0310 	add.w	r3, r3, #16
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4293      	cmp	r3, r2
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03a      	beq.n	800269a <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 8002624:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002628:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002634:	f103 030c 	add.w	r3, r3, #12
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002644:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002650:	f103 030c 	add.w	r3, r3, #12
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3308      	adds	r3, #8
 8002660:	681c      	ldr	r4, [r3, #0]
 8002662:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002666:	f103 0308 	add.w	r3, r3, #8
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	f107 0120 	add.w	r1, r7, #32
 8002672:	3918      	subs	r1, #24
 8002674:	2250      	movs	r2, #80	@ 0x50
 8002676:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 8002678:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800267c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002688:	f103 030c 	add.w	r3, r3, #12
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f87f 	bl	8002798 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 800269a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800269e:	f103 030c 	add.w	r3, r3, #12
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026aa:	f102 020c 	add.w	r2, r2, #12
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026b4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	461a      	mov	r2, r3
 80026be:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026c2:	f103 030c 	add.w	r3, r3, #12
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4293      	cmp	r3, r2
 80026ca:	db8c      	blt.n	80025e6 <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 80026cc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026d0:	f103 0310 	add.w	r3, r3, #16
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026dc:	f102 0210 	add.w	r2, r2, #16
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026e6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	799b      	ldrb	r3, [r3, #6]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026f4:	f103 0310 	add.w	r3, r3, #16
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	f77f af6c 	ble.w	80025d8 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	3b18      	subs	r3, #24
 8002706:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800270a:	4619      	mov	r1, r3
 800270c:	4818      	ldr	r0, [pc, #96]	@ (8002770 <_ZN5Scene9drawSceneEv+0x2c0>)
 800270e:	f7ff fe5d 	bl	80023cc <transmitdma>
			while(!spidatasentflag) {}
 8002712:	bf00      	nop
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <_ZN5Scene9drawSceneEv+0x2c4>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f5      	bne.n	8002714 <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002728:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800272c:	f103 0314 	add.w	r3, r3, #20
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002738:	f102 0214 	add.w	r2, r2, #20
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002742:	f103 0314 	add.w	r3, r3, #20
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b05      	cmp	r3, #5
 800274a:	f77f af25 	ble.w	8002598 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 800274e:	f000 fb29 	bl	8002da4 <endCommand>
	}
	this->changed = 0;
 8002752:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002756:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	715a      	strb	r2, [r3, #5]
 8002760:	e000      	b.n	8002764 <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 8002762:	bf00      	nop
}
 8002764:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	200001c4 	.word	0x200001c4
 8002774:	20000384 	.word	0x20000384

08002778 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <_ZN13DisplayObjectD1Ev+0x1c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	08010530 	.word	0x08010530

08002798 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	715a      	strb	r2, [r3, #5]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	715a      	strb	r2, [r3, #5]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	return this->xpos;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	88db      	ldrh	r3, [r3, #6]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	80da      	strh	r2, [r3, #6]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
	return this->ypos;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	891b      	ldrh	r3, [r3, #8]
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	887a      	ldrh	r2, [r7, #2]
 800282a:	811a      	strh	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	return this->priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	791b      	ldrb	r3, [r3, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	711a      	strb	r2, [r3, #4]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
	return this->changed;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	795b      	ldrb	r3, [r3, #5]
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <_ZN13DisplayObjectC1Ev+0x1c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	08010530 	.word	0x08010530

080028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	460b      	mov	r3, r1
 80028bc:	813b      	strh	r3, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ffdf 	bl	8002888 <_ZN13DisplayObjectC1Ev>
 80028ca:	4a15      	ldr	r2, [pc, #84]	@ (8002920 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a3a      	ldr	r2, [r7, #32]
 80028d4:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	897a      	ldrh	r2, [r7, #10]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff81 	bl	80027e4 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	893a      	ldrh	r2, [r7, #8]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff96 	bl	800281a <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7f3a      	ldrb	r2, [r7, #28]
 80028f8:	751a      	strb	r2, [r3, #20]
	this->font = font;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ffa1 	bl	8002850 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff4e 	bl	80027b2 <_ZN13DisplayObject12redrawObjectEv>
}
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	0801051c 	.word	0x0801051c

08002924 <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002928:	b08a      	sub	sp, #40	@ 0x28
 800292a:	af06      	add	r7, sp, #24
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	4611      	mov	r1, r2
 8002932:	461a      	mov	r2, r3
 8002934:	460b      	mov	r3, r1
 8002936:	80fb      	strh	r3, [r7, #6]
 8002938:	4613      	mov	r3, r2
 800293a:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	68dc      	ldr	r4, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691d      	ldr	r5, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	895e      	ldrh	r6, [r3, #10]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ff3e 	bl	80027cc <_ZN13DisplayObject7getxposEv>
 8002950:	4603      	mov	r3, r0
 8002952:	4698      	mov	r8, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff53 	bl	8002802 <_ZN13DisplayObject7getyposEv>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	7d1b      	ldrb	r3, [r3, #20]
 8002964:	88ba      	ldrh	r2, [r7, #4]
 8002966:	9204      	str	r2, [sp, #16]
 8002968:	88fa      	ldrh	r2, [r7, #6]
 800296a:	9203      	str	r2, [sp, #12]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	9202      	str	r2, [sp, #8]
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	9100      	str	r1, [sp, #0]
 8002974:	4643      	mov	r3, r8
 8002976:	4632      	mov	r2, r6
 8002978:	4629      	mov	r1, r5
 800297a:	4620      	mov	r0, r4
 800297c:	f000 fdcc 	bl	8003518 <drawStringIntoFramebuffer>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	460b      	mov	r3, r1
 800299c:	71fb      	strb	r3, [r7, #7]
 800299e:	4613      	mov	r3, r2
 80029a0:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88ba      	ldrh	r2, [r7, #4]
 80029b2:	815a      	strh	r2, [r3, #10]
	this->font = font;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8bba      	ldrh	r2, [r7, #28]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff0f 	bl	80027e4 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8c3a      	ldrh	r2, [r7, #32]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff24 	bl	800281a <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff38 	bl	8002850 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fee5 	bl	80027b2 <_ZN13DisplayObject12redrawObjectEv>
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_ZN17OutlineRectObjectC1Ettttthh>:

/*
 * the following are all OutlineRectObject definitions
 */

OutlineRectObject::OutlineRectObject(uint16_t xpos, uint16_t ypos, uint16_t length, uint16_t height, uint16_t colorvalue, uint8_t positioning, uint8_t priority) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	817b      	strh	r3, [r7, #10]
 8002a02:	460b      	mov	r3, r1
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff3b 	bl	8002888 <_ZN13DisplayObjectC1Ev>
 8002a12:	4a16      	ldr	r2, [pc, #88]	@ (8002a6c <_ZN17OutlineRectObjectC1Ettttthh+0x7c>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]
	this->setxpos(xpos);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	897a      	ldrh	r2, [r7, #10]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fee0 	bl	80027e4 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	893a      	ldrh	r2, [r7, #8]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fef5 	bl	800281a <_ZN13DisplayObject7setyposEt>
	this->length = length;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	819a      	strh	r2, [r3, #12]
	this->height = height;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8b3a      	ldrh	r2, [r7, #24]
 8002a3a:	81da      	strh	r2, [r3, #14]
	this->colorvalue = colorvalue;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8bba      	ldrh	r2, [r7, #28]
 8002a40:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a48:	741a      	strb	r2, [r3, #16]
	this->setpriority(priority);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fefc 	bl	8002850 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fea9 	bl	80027b2 <_ZN13DisplayObject12redrawObjectEv>
}
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	08010508 	.word	0x08010508

08002a70 <_ZN17OutlineRectObject19drawIntoFramebufferEPttt>:

uint16_t OutlineRectObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a72:	b08b      	sub	sp, #44	@ 0x2c
 8002a74:	af06      	add	r7, sp, #24
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	460b      	mov	r3, r1
 8002a80:	80fb      	strh	r3, [r7, #6]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80bb      	strh	r3, [r7, #4]
	drawRectangleOutlineIntoFramebuffer(this->getxpos(), this->getypos(), this->length, this->height, this->colorvalue, this->positioning, framebuffer, framewidth, xstart);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fe9f 	bl	80027cc <_ZN13DisplayObject7getxposEv>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461d      	mov	r5, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff feb4 	bl	8002802 <_ZN13DisplayObject7getyposEv>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461e      	mov	r6, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8998      	ldrh	r0, [r3, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	89dc      	ldrh	r4, [r3, #14]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	895b      	ldrh	r3, [r3, #10]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	7c12      	ldrb	r2, [r2, #16]
 8002aae:	88b9      	ldrh	r1, [r7, #4]
 8002ab0:	9104      	str	r1, [sp, #16]
 8002ab2:	88f9      	ldrh	r1, [r7, #6]
 8002ab4:	9103      	str	r1, [sp, #12]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	9102      	str	r1, [sp, #8]
 8002aba:	9201      	str	r2, [sp, #4]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4623      	mov	r3, r4
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4631      	mov	r1, r6
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f000 fb26 	bl	8003116 <drawRectangleOutlineIntoFramebuffer>
	return 0;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad4 <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af04      	add	r7, sp, #16
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	80fb      	strh	r3, [r7, #6]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80bb      	strh	r3, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fecb 	bl	8002888 <_ZN13DisplayObjectC1Ev>
 8002af2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <_ZN11ImageObjectC1EPctttthh+0x50>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8002af8:	88b9      	ldrh	r1, [r7, #4]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b00:	9303      	str	r3, [sp, #12]
 8002b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b06:	9302      	str	r3, [sp, #8]
 8002b08:	8bbb      	ldrh	r3, [r7, #28]
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	8b3b      	ldrh	r3, [r7, #24]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	460b      	mov	r3, r1
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f83b 	bl	8002b90 <_ZN11ImageObject11updateImageEPctttthh>
}
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	080104f4 	.word	0x080104f4

08002b28 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2c:	b08a      	sub	sp, #40	@ 0x28
 8002b2e:	af06      	add	r7, sp, #24
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	4611      	mov	r1, r2
 8002b36:	461a      	mov	r2, r3
 8002b38:	460b      	mov	r3, r1
 8002b3a:	80fb      	strh	r3, [r7, #6]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691c      	ldr	r4, [r3, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	895d      	ldrh	r5, [r3, #10]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	899e      	ldrh	r6, [r3, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fe3c 	bl	80027cc <_ZN13DisplayObject7getxposEv>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4698      	mov	r8, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fe51 	bl	8002802 <_ZN13DisplayObject7getyposEv>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4619      	mov	r1, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	7b9b      	ldrb	r3, [r3, #14]
 8002b68:	88ba      	ldrh	r2, [r7, #4]
 8002b6a:	9204      	str	r2, [sp, #16]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	9203      	str	r2, [sp, #12]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	9202      	str	r2, [sp, #8]
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	9100      	str	r1, [sp, #0]
 8002b78:	4643      	mov	r3, r8
 8002b7a:	4632      	mov	r2, r6
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f000 fd42 	bl	8003608 <drawImageIntoFramebuffer>
	return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b90 <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	80fb      	strh	r3, [r7, #6]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8b3a      	ldrh	r2, [r7, #24]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe19 	bl	80027e4 <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8bba      	ldrh	r2, [r7, #28]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fe2e 	bl	800281a <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	88ba      	ldrh	r2, [r7, #4]
 8002bce:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002bd6:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fe35 	bl	8002850 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fde2 	bl	80027b2 <_ZN13DisplayObject12redrawObjectEv>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <_ZN11ImageObjectD1Ev+0x20>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fdb5 	bl	8002778 <_ZN13DisplayObjectD1Ev>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	080104f4 	.word	0x080104f4

08002c1c <_ZN11ImageObjectD0Ev>:
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ffe7 	bl	8002bf8 <_ZN11ImageObjectD1Ev>
 8002c2a:	2114      	movs	r1, #20
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f00c fd89 	bl	800f744 <_ZdlPvj>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZN17OutlineRectObjectD1Ev>:
class OutlineRectObject : public DisplayObject {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	4a05      	ldr	r2, [pc, #20]	@ (8002c5c <_ZN17OutlineRectObjectD1Ev+0x20>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fd93 	bl	8002778 <_ZN13DisplayObjectD1Ev>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	08010508 	.word	0x08010508

08002c60 <_ZN17OutlineRectObjectD0Ev>:
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ffe7 	bl	8002c3c <_ZN17OutlineRectObjectD1Ev>
 8002c6e:	2114      	movs	r1, #20
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f00c fd67 	bl	800f744 <_ZdlPvj>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <_ZN12StringObjectD1Ev+0x20>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fd71 	bl	8002778 <_ZN13DisplayObjectD1Ev>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	0801051c 	.word	0x0801051c

08002ca4 <_ZN12StringObjectD0Ev>:
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ffe7 	bl	8002c80 <_ZN12StringObjectD1Ev>
 8002cb2:	2118      	movs	r1, #24
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f00c fd45 	bl	800f744 <_ZdlPvj>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2108      	movs	r1, #8
 8002ccc:	4802      	ldr	r0, [pc, #8]	@ (8002cd8 <startTransaction+0x14>)
 8002cce:	f002 fc7f 	bl	80055d0 <HAL_GPIO_WritePin>
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40020400 	.word	0x40020400

08002cdc <endTransaction>:

void endTransaction() {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	4802      	ldr	r0, [pc, #8]	@ (8002cf0 <endTransaction+0x14>)
 8002ce6:	f002 fc73 	bl	80055d0 <HAL_GPIO_WritePin>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40020400 	.word	0x40020400

08002cf4 <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002d04:	2201      	movs	r2, #1
 8002d06:	2110      	movs	r1, #16
 8002d08:	4806      	ldr	r0, [pc, #24]	@ (8002d24 <dataOrRegister+0x30>)
 8002d0a:	f002 fc61 	bl	80055d0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002d0e:	e004      	b.n	8002d1a <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2110      	movs	r1, #16
 8002d14:	4803      	ldr	r0, [pc, #12]	@ (8002d24 <dataOrRegister+0x30>)
 8002d16:	f002 fc5b 	bl	80055d0 <HAL_GPIO_WritePin>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40020400 	.word	0x40020400

08002d28 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002d36:	f7ff ffc5 	bl	8002cc4 <startTransaction>

	dataOrRegister(0);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7ff ffda 	bl	8002cf4 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002d40:	f107 010e 	add.w	r1, r7, #14
 8002d44:	230a      	movs	r3, #10
 8002d46:	2201      	movs	r2, #1
 8002d48:	480a      	ldr	r0, [pc, #40]	@ (8002d74 <commandAndData+0x4c>)
 8002d4a:	f004 fb7e 	bl	800744a <HAL_SPI_Transmit>

	if (size) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <commandAndData+0x40>
		dataOrRegister(1);
 8002d54:	2001      	movs	r0, #1
 8002d56:	f7ff ffcd 	bl	8002cf4 <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	230a      	movs	r3, #10
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	4804      	ldr	r0, [pc, #16]	@ (8002d74 <commandAndData+0x4c>)
 8002d64:	f004 fb71 	bl	800744a <HAL_SPI_Transmit>
	}

	endTransaction();
 8002d68:	f7ff ffb8 	bl	8002cdc <endTransaction>
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200001c4 	.word	0x200001c4

08002d78 <startCommand>:

void startCommand(uint16_t command) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002d82:	f7ff ff9f 	bl	8002cc4 <startTransaction>
	dataOrRegister(0);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff ffb4 	bl	8002cf4 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002d8c:	1db9      	adds	r1, r7, #6
 8002d8e:	230a      	movs	r3, #10
 8002d90:	2201      	movs	r2, #1
 8002d92:	4803      	ldr	r0, [pc, #12]	@ (8002da0 <startCommand+0x28>)
 8002d94:	f004 fb59 	bl	800744a <HAL_SPI_Transmit>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200001c4 	.word	0x200001c4

08002da4 <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	endTransaction();
 8002da8:	f7ff ff98 	bl	8002cdc <endTransaction>
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <resetScreen>:

void resetScreen() {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002db4:	2201      	movs	r2, #1
 8002db6:	2120      	movs	r1, #32
 8002db8:	480b      	ldr	r0, [pc, #44]	@ (8002de8 <resetScreen+0x38>)
 8002dba:	f002 fc09 	bl	80055d0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002dbe:	2014      	movs	r0, #20
 8002dc0:	f001 fdba 	bl	8004938 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	4807      	ldr	r0, [pc, #28]	@ (8002de8 <resetScreen+0x38>)
 8002dca:	f002 fc01 	bl	80055d0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002dce:	2014      	movs	r0, #20
 8002dd0:	f001 fdb2 	bl	8004938 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	2120      	movs	r1, #32
 8002dd8:	4803      	ldr	r0, [pc, #12]	@ (8002de8 <resetScreen+0x38>)
 8002dda:	f002 fbf9 	bl	80055d0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002dde:	2064      	movs	r0, #100	@ 0x64
 8002de0:	f001 fdaa 	bl	8004938 <HAL_Delay>
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40020400 	.word	0x40020400

08002dec <initializeScreen>:

void initializeScreen() {
 8002dec:	b5b0      	push	{r4, r5, r7, lr}
 8002dee:	b09c      	sub	sp, #112	@ 0x70
 8002df0:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7ff ff96 	bl	8002d28 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2011      	movs	r0, #17
 8002e02:	f7ff ff91 	bl	8002d28 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002e06:	2355      	movs	r3, #85	@ 0x55
 8002e08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002e0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e10:	2202      	movs	r2, #2
 8002e12:	4619      	mov	r1, r3
 8002e14:	203a      	movs	r0, #58	@ 0x3a
 8002e16:	f7ff ff87 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002e1a:	4b47      	ldr	r3, [pc, #284]	@ (8002f38 <initializeScreen+0x14c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002e20:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e24:	2204      	movs	r2, #4
 8002e26:	4619      	mov	r1, r3
 8002e28:	20c0      	movs	r0, #192	@ 0xc0
 8002e2a:	f7ff ff7d 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002e2e:	2345      	movs	r3, #69	@ 0x45
 8002e30:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002e3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e3e:	2204      	movs	r2, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	20c1      	movs	r0, #193	@ 0xc1
 8002e44:	f7ff ff70 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002e48:	2333      	movs	r3, #51	@ 0x33
 8002e4a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002e4e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e52:	2202      	movs	r2, #2
 8002e54:	4619      	mov	r1, r3
 8002e56:	20c2      	movs	r0, #194	@ 0xc2
 8002e58:	f7ff ff66 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002e62:	2328      	movs	r3, #40	@ 0x28
 8002e64:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002e68:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	20c5      	movs	r0, #197	@ 0xc5
 8002e72:	f7ff ff59 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <initializeScreen+0x150>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002e7c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e80:	2204      	movs	r2, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	20b1      	movs	r0, #177	@ 0xb1
 8002e86:	f7ff ff4f 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002e90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e94:	2202      	movs	r2, #2
 8002e96:	4619      	mov	r1, r3
 8002e98:	20b4      	movs	r0, #180	@ 0xb4
 8002e9a:	f7ff ff45 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002e9e:	4a28      	ldr	r2, [pc, #160]	@ (8002f40 <initializeScreen+0x154>)
 8002ea0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea8:	6018      	str	r0, [r3, #0]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002eae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002eb2:	2206      	movs	r2, #6
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	20b6      	movs	r0, #182	@ 0xb6
 8002eb8:	f7ff ff36 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002ebc:	4b21      	ldr	r3, [pc, #132]	@ (8002f44 <initializeScreen+0x158>)
 8002ebe:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002ec2:	461d      	mov	r5, r3
 8002ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ec8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ecc:	c407      	stmia	r4!, {r0, r1, r2}
 8002ece:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed4:	221e      	movs	r2, #30
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	20e0      	movs	r0, #224	@ 0xe0
 8002eda:	f7ff ff25 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002ede:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <initializeScreen+0x15c>)
 8002ee0:	f107 040c 	add.w	r4, r7, #12
 8002ee4:	461d      	mov	r5, r3
 8002ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002eee:	c407      	stmia	r4!, {r0, r1, r2}
 8002ef0:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	221e      	movs	r2, #30
 8002ef8:	4619      	mov	r1, r3
 8002efa:	20e1      	movs	r0, #225	@ 0xe1
 8002efc:	f7ff ff14 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002f00:	2300      	movs	r3, #0
 8002f02:	813b      	strh	r3, [r7, #8]
 8002f04:	2322      	movs	r3, #34	@ 0x22
 8002f06:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002f08:	f107 0308 	add.w	r3, r7, #8
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	4619      	mov	r1, r3
 8002f10:	20b6      	movs	r0, #182	@ 0xb6
 8002f12:	f7ff ff09 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002f16:	2308      	movs	r3, #8
 8002f18:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	2036      	movs	r0, #54	@ 0x36
 8002f22:	f7ff ff01 	bl	8002d28 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f000 f85a 	bl	8002fe0 <clearScreenfast>
	displayOn();
 8002f2c:	f000 f80e 	bl	8002f4c <displayOn>
}
 8002f30:	bf00      	nop
 8002f32:	3770      	adds	r7, #112	@ 0x70
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bdb0      	pop	{r4, r5, r7, pc}
 8002f38:	080103a0 	.word	0x080103a0
 8002f3c:	080103a4 	.word	0x080103a4
 8002f40:	080103a8 	.word	0x080103a8
 8002f44:	080103b0 	.word	0x080103b0
 8002f48:	080103d0 	.word	0x080103d0

08002f4c <displayOn>:

void displayOn() {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	2029      	movs	r0, #41	@ 0x29
 8002f56:	f7ff fee7 	bl	8002d28 <commandAndData>
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002f5e:	b590      	push	{r4, r7, lr}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4604      	mov	r4, r0
 8002f66:	4608      	mov	r0, r1
 8002f68:	4611      	mov	r1, r2
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4623      	mov	r3, r4
 8002f6e:	80fb      	strh	r3, [r7, #6]
 8002f70:	4603      	mov	r3, r0
 8002f72:	80bb      	strh	r3, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002f7c:	88bb      	ldrh	r3, [r7, #4]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	823b      	strh	r3, [r7, #16]
 8002f84:	88bb      	ldrh	r3, [r7, #4]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	827b      	strh	r3, [r7, #18]
 8002f8c:	883b      	ldrh	r3, [r7, #0]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	82bb      	strh	r3, [r7, #20]
 8002f94:	883b      	ldrh	r3, [r7, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	202a      	movs	r0, #42	@ 0x2a
 8002fa6:	f7ff febf 	bl	8002d28 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	817b      	strh	r3, [r7, #10]
 8002fba:	887b      	ldrh	r3, [r7, #2]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	81bb      	strh	r3, [r7, #12]
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8002fca:	f107 0308 	add.w	r3, r7, #8
 8002fce:	2208      	movs	r2, #8
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	202b      	movs	r0, #43	@ 0x2b
 8002fd4:	f7ff fea8 	bl	8002d28 <commandAndData>
	}
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd90      	pop	{r4, r7, pc}

08002fe0 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4602      	mov	r2, r0
 8002fec:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002ff0:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8002ff4:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ffc:	f102 020c 	add.w	r2, r2, #12
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e01a      	b.n	800303a <clearScreenfast+0x5a>
		buffer1[i] = color;
 8003004:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003008:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 800300c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003010:	f102 020c 	add.w	r2, r2, #12
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 800301a:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 800301e:	8809      	ldrh	r1, [r1, #0]
 8003020:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8003024:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003028:	f103 030c 	add.w	r3, r3, #12
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003034:	f102 020c 	add.w	r2, r2, #12
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800303e:	f103 030c 	add.w	r3, r3, #12
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8003048:	dbdc      	blt.n	8003004 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 800304a:	f240 133f 	movw	r3, #319	@ 0x13f
 800304e:	f240 12df 	movw	r2, #479	@ 0x1df
 8003052:	2100      	movs	r1, #0
 8003054:	2000      	movs	r0, #0
 8003056:	f7ff ff82 	bl	8002f5e <modifySpace>
	startCommand(0x2C);
 800305a:	202c      	movs	r0, #44	@ 0x2c
 800305c:	f7ff fe8c 	bl	8002d78 <startCommand>
	dataOrRegister(1);
 8003060:	2001      	movs	r0, #1
 8003062:	f7ff fe47 	bl	8002cf4 <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8003066:	2300      	movs	r3, #0
 8003068:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800306c:	f102 0208 	add.w	r2, r2, #8
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e019      	b.n	80030a8 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	3b08      	subs	r3, #8
 800307a:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800307e:	4619      	mov	r1, r3
 8003080:	4811      	ldr	r0, [pc, #68]	@ (80030c8 <clearScreenfast+0xe8>)
 8003082:	f7ff f9a3 	bl	80023cc <transmitdma>
		while (!spidatasentflag) {}
 8003086:	bf00      	nop
 8003088:	4b10      	ldr	r3, [pc, #64]	@ (80030cc <clearScreenfast+0xec>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0fa      	beq.n	8003088 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8003092:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003096:	f103 0308 	add.w	r3, r3, #8
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80030a2:	f102 0208 	add.w	r2, r2, #8
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80030ac:	f103 0308 	add.w	r3, r3, #8
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	ddde      	ble.n	8003074 <clearScreenfast+0x94>
	}
	endCommand();
 80030b6:	f7ff fe75 	bl	8002da4 <endCommand>
}
 80030ba:	bf00      	nop
 80030bc:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200001c4 	.word	0x200001c4
 80030cc:	20000384 	.word	0x20000384

080030d0 <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	4611      	mov	r1, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	460b      	mov	r3, r1
 80030e0:	80fb      	strh	r3, [r7, #6]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	881a      	ldrh	r2, [r3, #0]
 80030fc:	88bb      	ldrh	r3, [r7, #4]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	b29b      	uxth	r3, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b29a      	uxth	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	801a      	strh	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <drawRectangleOutlineIntoFramebuffer>:
	drawVLine(x1 + length, y1, height, color);
	drawHLine(x1, y1, length, color);
	drawHLine(x1, y1 + height, length, color);
}

void drawRectangleOutlineIntoFramebuffer(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color, uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003116:	b590      	push	{r4, r7, lr}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	4604      	mov	r4, r0
 800311e:	4608      	mov	r0, r1
 8003120:	4611      	mov	r1, r2
 8003122:	461a      	mov	r2, r3
 8003124:	4623      	mov	r3, r4
 8003126:	80fb      	strh	r3, [r7, #6]
 8003128:	4603      	mov	r3, r0
 800312a:	80bb      	strh	r3, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	803b      	strh	r3, [r7, #0]
	if (positioning & CENTER_OBJECT) {
 8003134:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <drawRectangleOutlineIntoFramebuffer+0x36>
		getRectCenter(&x1, &y1, length, height);
 8003140:	883b      	ldrh	r3, [r7, #0]
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	1d39      	adds	r1, r7, #4
 8003146:	1db8      	adds	r0, r7, #6
 8003148:	f7ff ffc2 	bl	80030d0 <getRectCenter>
	}
	for (int x = x1; x < x1 + length; x++) {
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	e09c      	b.n	800328c <drawRectangleOutlineIntoFramebuffer+0x176>
		for (int y = y1; y < y1 + height; y++) {
 8003152:	88bb      	ldrh	r3, [r7, #4]
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	e08e      	b.n	8003276 <drawRectangleOutlineIntoFramebuffer+0x160>
			if ((x >= xstart) & (x < (xstart + framewidth))) {
 8003158:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	bfac      	ite	ge
 8003160:	2301      	movge	r3, #1
 8003162:	2300      	movlt	r3, #0
 8003164:	b2da      	uxtb	r2, r3
 8003166:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8003168:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800316a:	440b      	add	r3, r1
 800316c:	68f9      	ldr	r1, [r7, #12]
 800316e:	4299      	cmp	r1, r3
 8003170:	bfb4      	ite	lt
 8003172:	2301      	movlt	r3, #1
 8003174:	2300      	movge	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4013      	ands	r3, r2
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d077      	beq.n	8003270 <drawRectangleOutlineIntoFramebuffer+0x15a>
				if ((x == x1) | (x == (x1 + length - 1))) {
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4293      	cmp	r3, r2
 8003188:	bf0c      	ite	eq
 800318a:	2301      	moveq	r3, #1
 800318c:	2300      	movne	r3, #0
 800318e:	b2da      	uxtb	r2, r3
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	4619      	mov	r1, r3
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	440b      	add	r3, r1
 8003198:	3b01      	subs	r3, #1
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	4299      	cmp	r1, r3
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d024      	beq.n	80031f8 <drawRectangleOutlineIntoFramebuffer+0xe2>
					if ((y >= y1) & (y < y1 + height)) {
 80031ae:	88bb      	ldrh	r3, [r7, #4]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bfac      	ite	ge
 80031b8:	2301      	movge	r3, #1
 80031ba:	2300      	movlt	r3, #0
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	4619      	mov	r1, r3
 80031c2:	883b      	ldrh	r3, [r7, #0]
 80031c4:	440b      	add	r3, r1
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	4299      	cmp	r1, r3
 80031ca:	bfb4      	ite	lt
 80031cc:	2301      	movlt	r3, #1
 80031ce:	2300      	movge	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	4013      	ands	r3, r2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00e      	beq.n	80031f8 <drawRectangleOutlineIntoFramebuffer+0xe2>
							framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 80031da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	1ad2      	subs	r2, r2, r3
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	019b      	lsls	r3, r3, #6
 80031e8:	461a      	mov	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4413      	add	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031f2:	4413      	add	r3, r2
 80031f4:	8c3a      	ldrh	r2, [r7, #32]
 80031f6:	801a      	strh	r2, [r3, #0]
					}
				}
				if ((y == y1) | (y == (y1 + height - 1))) {
 80031f8:	88bb      	ldrh	r3, [r7, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4293      	cmp	r3, r2
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2da      	uxtb	r2, r3
 8003208:	88bb      	ldrh	r3, [r7, #4]
 800320a:	4619      	mov	r1, r3
 800320c:	883b      	ldrh	r3, [r7, #0]
 800320e:	440b      	add	r3, r1
 8003210:	3b01      	subs	r3, #1
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	4299      	cmp	r1, r3
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	4313      	orrs	r3, r2
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d024      	beq.n	8003270 <drawRectangleOutlineIntoFramebuffer+0x15a>
					if ((x >= x1) & (x < (x1 + length))) {
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4293      	cmp	r3, r2
 800322e:	bfac      	ite	ge
 8003230:	2301      	movge	r3, #1
 8003232:	2300      	movlt	r3, #0
 8003234:	b2da      	uxtb	r2, r3
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	4619      	mov	r1, r3
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	440b      	add	r3, r1
 800323e:	68f9      	ldr	r1, [r7, #12]
 8003240:	4299      	cmp	r1, r3
 8003242:	bfb4      	ite	lt
 8003244:	2301      	movlt	r3, #1
 8003246:	2300      	movge	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4013      	ands	r3, r2
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00e      	beq.n	8003270 <drawRectangleOutlineIntoFramebuffer+0x15a>
						framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 8003252:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	1ad2      	subs	r2, r2, r3
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	019b      	lsls	r3, r3, #6
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4413      	add	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800326a:	4413      	add	r3, r2
 800326c:	8c3a      	ldrh	r2, [r7, #32]
 800326e:	801a      	strh	r2, [r3, #0]
		for (int y = y1; y < y1 + height; y++) {
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	3301      	adds	r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	88bb      	ldrh	r3, [r7, #4]
 8003278:	461a      	mov	r2, r3
 800327a:	883b      	ldrh	r3, [r7, #0]
 800327c:	4413      	add	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	f6ff af69 	blt.w	8003158 <drawRectangleOutlineIntoFramebuffer+0x42>
	for (int x = x1; x < x1 + length; x++) {
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3301      	adds	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	461a      	mov	r2, r3
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	4413      	add	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	429a      	cmp	r2, r3
 8003298:	f6ff af5b 	blt.w	8003152 <drawRectangleOutlineIntoFramebuffer+0x3c>
					}
				}
			}
		}
	}
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}

080032a6 <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 80032a6:	b480      	push	{r7}
 80032a8:	b089      	sub	sp, #36	@ 0x24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 80032bc:	e015      	b.n	80032ea <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	4619      	mov	r1, r3
 80032c8:	460b      	mov	r3, r1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032d4:	4413      	add	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	791b      	ldrb	r3, [r3, #4]
 80032dc:	461a      	mov	r2, r3
 80032de:	8b7b      	ldrh	r3, [r7, #26]
 80032e0:	4413      	add	r3, r2
 80032e2:	837b      	strh	r3, [r7, #26]
		currentletter++;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	3301      	adds	r3, #1
 80032e8:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e5      	bne.n	80032be <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	8b7b      	ldrh	r3, [r7, #26]
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8003304:	bf00      	nop
 8003306:	3724      	adds	r7, #36	@ 0x24
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	@ 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003326:	e015      	b.n	8003354 <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	460b      	mov	r3, r1
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800333e:	4413      	add	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	791b      	ldrb	r3, [r3, #4]
 8003346:	461a      	mov	r2, r3
 8003348:	8b7b      	ldrh	r3, [r7, #26]
 800334a:	4413      	add	r3, r2
 800334c:	837b      	strh	r3, [r7, #26]
		currentletter++;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3301      	adds	r3, #1
 8003352:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	881a      	ldrh	r2, [r3, #0]
 8003360:	8b7b      	ldrh	r3, [r7, #26]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 800336a:	bf00      	nop
 800336c:	3724      	adds	r7, #36	@ 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <getCharXadv>:
	}

	return (uint16_t)xadv;
}

uint16_t getCharXadv(char letter, const GFXfont *font) {
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	6039      	str	r1, [r7, #0]
 8003380:	71fb      	strb	r3, [r7, #7]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	79fa      	ldrb	r2, [r7, #7]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003394:	440b      	add	r3, r1
 8003396:	60fb      	str	r3, [r7, #12]
	return toDraw->xAdvance;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	791b      	ldrb	r3, [r3, #4]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <drawCharIntoFramebuffer>:

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80033a8:	b480      	push	{r7}
 80033aa:	b08d      	sub	sp, #52	@ 0x34
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	4611      	mov	r1, r2
 80033b2:	461a      	mov	r2, r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	460b      	mov	r3, r1
 80033ba:	81bb      	strh	r3, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033d2:	440b      	add	r3, r1
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	789b      	ldrb	r3, [r3, #2]
 80033da:	847b      	strh	r3, [r7, #34]	@ 0x22
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	78db      	ldrb	r3, [r3, #3]
 80033e0:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033f0:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	791b      	ldrb	r3, [r3, #4]
 80033f6:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 8003410:	2300      	movs	r3, #0
 8003412:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003414:	e071      	b.n	80034fa <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 8003416:	2300      	movs	r3, #0
 8003418:	853b      	strh	r3, [r7, #40]	@ 0x28
 800341a:	e062      	b.n	80034e2 <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 800341c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 800342e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8003434:	461a      	mov	r2, r3
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4413      	add	r3, r2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 8003440:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8003444:	2b00      	cmp	r3, #0
 8003446:	da41      	bge.n	80034cc <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 8003448:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800344c:	b29a      	uxth	r2, r3
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	4413      	add	r3, r2
 8003452:	b29a      	uxth	r2, r3
 8003454:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003458:	b29b      	uxth	r3, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	b29a      	uxth	r2, r3
 800345e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 8003464:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003466:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	b29a      	uxth	r2, r3
 800346c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003470:	b29b      	uxth	r3, r3
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 8003476:	8afa      	ldrh	r2, [r7, #22]
 8003478:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800347c:	429a      	cmp	r2, r3
 800347e:	bf2c      	ite	cs
 8003480:	2301      	movcs	r3, #1
 8003482:	2300      	movcc	r3, #0
 8003484:	b2da      	uxtb	r2, r3
 8003486:	8af9      	ldrh	r1, [r7, #22]
 8003488:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 800348c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003490:	4403      	add	r3, r0
 8003492:	4299      	cmp	r1, r3
 8003494:	bfb4      	ite	lt
 8003496:	2301      	movlt	r3, #1
 8003498:	2300      	movge	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4013      	ands	r3, r2
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 80034a4:	8abb      	ldrh	r3, [r7, #20]
 80034a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034aa:	d20f      	bcs.n	80034cc <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80034ac:	8afa      	ldrh	r2, [r7, #22]
 80034ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80034b2:	1ad2      	subs	r2, r2, r3
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	019b      	lsls	r3, r3, #6
 80034bc:	461a      	mov	r2, r3
 80034be:	8abb      	ldrh	r3, [r7, #20]
 80034c0:	4413      	add	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034c6:	4413      	add	r3, r2
 80034c8:	89ba      	ldrh	r2, [r7, #12]
 80034ca:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 80034cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 80034d6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	b29b      	uxth	r3, r3
 80034e0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80034e2:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80034e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80034ea:	429a      	cmp	r2, r3
 80034ec:	db96      	blt.n	800341c <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 80034ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80034fa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80034fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003502:	429a      	cmp	r2, r3
 8003504:	db87      	blt.n	8003416 <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 8003506:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800350a:	b29b      	uxth	r3, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	3734      	adds	r7, #52	@ 0x34
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b08d      	sub	sp, #52	@ 0x34
 800351c:	af06      	add	r7, sp, #24
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	460b      	mov	r3, r1
 8003528:	80fb      	strh	r3, [r7, #6]
 800352a:	4613      	mov	r3, r2
 800352c:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 800352e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 800353a:	1d38      	adds	r0, r7, #4
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003544:	f7ff feaf 	bl	80032a6 <getStringCenter>
 8003548:	e00c      	b.n	8003564 <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 800354a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 8003556:	1d38      	adds	r0, r7, #4
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003560:	f7ff fed6 	bl	8003310 <getStringLeft>
	}
	uint16_t xAdvance = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 800356c:	bf00      	nop
 800356e:	8abb      	ldrh	r3, [r7, #20]
 8003570:	3301      	adds	r3, #1
 8003572:	82bb      	strh	r3, [r7, #20]
 8003574:	8abb      	ldrh	r3, [r7, #20]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f6      	bne.n	800356e <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 8003580:	8abb      	ldrh	r3, [r7, #20]
 8003582:	3b01      	subs	r3, #1
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e036      	b.n	80035f6 <drawStringIntoFramebuffer+0xde>
		if ((stringxpos + xAdvance) > (xstart + framewidth)) {
 8003588:	88bb      	ldrh	r3, [r7, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	8afb      	ldrh	r3, [r7, #22]
 800358e:	441a      	add	r2, r3
 8003590:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8003592:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003594:	440b      	add	r3, r1
 8003596:	429a      	cmp	r2, r3
 8003598:	dd0d      	ble.n	80035b6 <drawStringIntoFramebuffer+0x9e>
			xAdvance += getCharXadv(buffer[i], font);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fee6 	bl	8003376 <getCharXadv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	8afb      	ldrh	r3, [r7, #22]
 80035b0:	4413      	add	r3, r2
 80035b2:	82fb      	strh	r3, [r7, #22]
			break;
 80035b4:	e022      	b.n	80035fc <drawStringIntoFramebuffer+0xe4>
		}
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	7818      	ldrb	r0, [r3, #0]
 80035be:	88ba      	ldrh	r2, [r7, #4]
 80035c0:	8afb      	ldrh	r3, [r7, #22]
 80035c2:	4413      	add	r3, r2
 80035c4:	b29c      	uxth	r4, r3
 80035c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035c8:	88f9      	ldrh	r1, [r7, #6]
 80035ca:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80035cc:	9204      	str	r2, [sp, #16]
 80035ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035d0:	9203      	str	r2, [sp, #12]
 80035d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035d4:	9202      	str	r2, [sp, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	9201      	str	r2, [sp, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	4623      	mov	r3, r4
 80035de:	460a      	mov	r2, r1
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	f7ff fee1 	bl	80033a8 <drawCharIntoFramebuffer>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461a      	mov	r2, r3
 80035ea:	8afb      	ldrh	r3, [r7, #22]
 80035ec:	4413      	add	r3, r2
 80035ee:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	dac5      	bge.n	8003588 <drawStringIntoFramebuffer+0x70>
	}
	return font->yAdvance;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	7b1b      	ldrb	r3, [r3, #12]
}
 8003600:	4618      	mov	r0, r3
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd90      	pop	{r4, r7, pc}

08003608 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800360c:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8003610:	af00      	add	r7, sp, #0
 8003612:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 8003616:	f5a6 7619 	sub.w	r6, r6, #612	@ 0x264
 800361a:	6030      	str	r0, [r6, #0]
 800361c:	460e      	mov	r6, r1
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003626:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800362a:	4632      	mov	r2, r6
 800362c:	801a      	strh	r2, [r3, #0]
 800362e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003632:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003636:	4602      	mov	r2, r0
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800363e:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003642:	460a      	mov	r2, r1
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	466b      	mov	r3, sp
 8003648:	469a      	mov	sl, r3
	length = 400;
 800364a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800364e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003652:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003656:	801a      	strh	r2, [r3, #0]
	height = 215;
 8003658:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800365c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003660:	22d7      	movs	r2, #215	@ 0xd7
 8003662:	801a      	strh	r2, [r3, #0]
	if (positioning & CENTER_OBJECT) {
 8003664:	f897 3294 	ldrb.w	r3, [r7, #660]	@ 0x294
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00f      	beq.n	8003690 <drawImageIntoFramebuffer+0x88>
		 getRectCenter(&x, &y, length, height);
 8003670:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003674:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003678:	8819      	ldrh	r1, [r3, #0]
 800367a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800367e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003682:	881a      	ldrh	r2, [r3, #0]
 8003684:	1db8      	adds	r0, r7, #6
 8003686:	460b      	mov	r3, r1
 8003688:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 800368c:	f7ff fd20 	bl	80030d0 <getRectCenter>
	}
	FIL newfile;
	FRESULT fresult = f_open(&newfile, image, FA_READ);
 8003690:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003694:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003698:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800369c:	2201      	movs	r2, #1
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	f00a ff42 	bl	800e528 <f_open>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (fresult == FR_OK) {
 80036aa:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <drawImageIntoFramebuffer+0xb2>
		USB_Println("the file was opened good\n");
 80036b2:	487e      	ldr	r0, [pc, #504]	@ (80038ac <drawImageIntoFramebuffer+0x2a4>)
 80036b4:	f7fe fe66 	bl	8002384 <USB_Println>
 80036b8:	e007      	b.n	80036ca <drawImageIntoFramebuffer+0xc2>
	} else {
		USB_Println("failure to open %s\n", image);
 80036ba:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036be:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	487a      	ldr	r0, [pc, #488]	@ (80038b0 <drawImageIntoFramebuffer+0x2a8>)
 80036c6:	f7fe fe5d 	bl	8002384 <USB_Println>
	}
	uint16_t readbuffer[height];
 80036ca:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036ce:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80036d2:	881e      	ldrh	r6, [r3, #0]
 80036d4:	4633      	mov	r3, r6
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80036dc:	b2b3      	uxth	r3, r6
 80036de:	2200      	movs	r2, #0
 80036e0:	4698      	mov	r8, r3
 80036e2:	4691      	mov	r9, r2
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80036f0:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80036f4:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80036f8:	b2b3      	uxth	r3, r6
 80036fa:	2200      	movs	r2, #0
 80036fc:	461c      	mov	r4, r3
 80036fe:	4615      	mov	r5, r2
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	012b      	lsls	r3, r5, #4
 800370a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800370e:	0122      	lsls	r2, r4, #4
 8003710:	4633      	mov	r3, r6
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	3307      	adds	r3, #7
 8003716:	08db      	lsrs	r3, r3, #3
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	ebad 0d03 	sub.w	sp, sp, r3
 800371e:	466b      	mov	r3, sp
 8003720:	3301      	adds	r3, #1
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	unsigned int br = 0;
 800372a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800372e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
	for (int xx = x; xx < x + length; xx++) {
 8003736:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800373a:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003744:	e093      	b.n	800386e <drawImageIntoFramebuffer+0x266>
		f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 8003746:	4633      	mov	r3, r6
 8003748:	005a      	lsls	r2, r3, #1
 800374a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800374e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003752:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 8003756:	f00b f8a1 	bl	800e89c <f_read>
		if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 800375a:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 800375e:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003762:	429a      	cmp	r2, r3
 8003764:	bfac      	ite	ge
 8003766:	2301      	movge	r3, #1
 8003768:	2300      	movlt	r3, #0
 800376a:	b2da      	uxtb	r2, r3
 800376c:	f8b7 12a0 	ldrh.w	r1, [r7, #672]	@ 0x2a0
 8003770:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 8003774:	440b      	add	r3, r1
 8003776:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800377a:	4299      	cmp	r1, r3
 800377c:	bfb4      	ite	lt
 800377e:	2301      	movlt	r3, #1
 8003780:	2300      	movge	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4013      	ands	r3, r2
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d062      	beq.n	8003852 <drawImageIntoFramebuffer+0x24a>
			for (int i = 0; i < height; i++) {
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003792:	e055      	b.n	8003840 <drawImageIntoFramebuffer+0x238>
				//USB_Println("writing to screen, x:%d, y:%d\n",xx, y + i);
				int coordinate = ((xx - xstart) * SCREEN_HEIGHT) + y + i;
 8003794:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003798:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800379c:	1ad2      	subs	r2, r2, r3
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	461a      	mov	r2, r3
 80037a8:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 80037ac:	4413      	add	r3, r2
 80037ae:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80037b2:	4413      	add	r3, r2
 80037b4:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
				char whatbuffer[20];
				itoa(coordinate, whatbuffer, 10);
 80037b8:	f107 0310 	add.w	r3, r7, #16
 80037bc:	220a      	movs	r2, #10
 80037be:	4619      	mov	r1, r3
 80037c0:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 80037c4:	f00b fffb 	bl	800f7be <itoa>
				strncat(whatbuffer, "\n", 10);
 80037c8:	f107 0310 	add.w	r3, r7, #16
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fc fd07 	bl	80001e0 <strlen>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	f107 0310 	add.w	r3, r7, #16
 80037da:	4413      	add	r3, r2
 80037dc:	4935      	ldr	r1, [pc, #212]	@ (80038b4 <drawImageIntoFramebuffer+0x2ac>)
 80037de:	461a      	mov	r2, r3
 80037e0:	460b      	mov	r3, r1
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)whatbuffer, strlen(whatbuffer));
 80037e6:	f107 0310 	add.w	r3, r7, #16
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fc fcf8 	bl	80001e0 <strlen>
 80037f0:	4603      	mov	r3, r0
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f00b fb50 	bl	800eea0 <CDC_Transmit_FS>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + y + i] = readbuffer[i];
 8003800:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003804:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003808:	1ad2      	subs	r2, r2, r3
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	461a      	mov	r2, r3
 8003814:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8003818:	441a      	add	r2, r3
 800381a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800381e:	4413      	add	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8003826:	4413      	add	r3, r2
 8003828:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800382c:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 8003830:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003834:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < height; i++) {
 8003836:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800383a:	3301      	adds	r3, #1
 800383c:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003840:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003844:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800384e:	429a      	cmp	r2, r3
 8003850:	dba0      	blt.n	8003794 <drawImageIntoFramebuffer+0x18c>
			}
		}
		if (xx > (xstart + framewidth)) {
 8003852:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 8003856:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 800385a:	4413      	add	r3, r2
 800385c:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003860:	429a      	cmp	r2, r3
 8003862:	dc16      	bgt.n	8003892 <drawImageIntoFramebuffer+0x28a>
	for (int xx = x; xx < x + length; xx++) {
 8003864:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8003868:	3301      	adds	r3, #1
 800386a:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800386e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003872:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800387e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	4413      	add	r3, r2
 8003886:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800388a:	429a      	cmp	r2, r3
 800388c:	f6ff af5b 	blt.w	8003746 <drawImageIntoFramebuffer+0x13e>
 8003890:	e000      	b.n	8003894 <drawImageIntoFramebuffer+0x28c>
			break;
 8003892:	bf00      	nop
		}
	}
	f_close(&newfile);
 8003894:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003898:	4618      	mov	r0, r3
 800389a:	f00b f9bc 	bl	800ec16 <f_close>
 800389e:	46d5      	mov	sp, sl
}
 80038a0:	bf00      	nop
 80038a2:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80038a6:	46bd      	mov	sp, r7
 80038a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ac:	08010400 	.word	0x08010400
 80038b0:	0801041c 	.word	0x0801041c
 80038b4:	08010430 	.word	0x08010430

080038b8 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af04      	add	r7, sp, #16
 80038be:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 80038c0:	220a      	movs	r2, #10
 80038c2:	490f      	ldr	r1, [pc, #60]	@ (8003900 <setrpmdata+0x48>)
 80038c4:	480f      	ldr	r0, [pc, #60]	@ (8003904 <setrpmdata+0x4c>)
 80038c6:	f00c f8d2 	bl	800fa6e <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 80038ca:	220a      	movs	r2, #10
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	480d      	ldr	r0, [pc, #52]	@ (8003904 <setrpmdata+0x4c>)
 80038d0:	f00c f8ba 	bl	800fa48 <strncat>
	((StringObject*)otherobjects[0])->updateString(rpmresult, NO_CENTER_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 200, 260, 1);
 80038d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <setrpmdata+0x50>)
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	2301      	movs	r3, #1
 80038da:	9303      	str	r3, [sp, #12]
 80038dc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80038e0:	9302      	str	r3, [sp, #8]
 80038e2:	23c8      	movs	r3, #200	@ 0xc8
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	4b09      	ldr	r3, [pc, #36]	@ (800390c <setrpmdata+0x54>)
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038ee:	2200      	movs	r2, #0
 80038f0:	4904      	ldr	r1, [pc, #16]	@ (8003904 <setrpmdata+0x4c>)
 80038f2:	f7ff f84b 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	08010440 	.word	0x08010440
 8003904:	20000388 	.word	0x20000388
 8003908:	200003d8 	.word	0x200003d8
 800390c:	0801378c 	.word	0x0801378c

08003910 <settempdata>:

void settempdata(char *tempvalue) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af04      	add	r7, sp, #16
 8003916:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 8003918:	220a      	movs	r2, #10
 800391a:	490f      	ldr	r1, [pc, #60]	@ (8003958 <settempdata+0x48>)
 800391c:	480f      	ldr	r0, [pc, #60]	@ (800395c <settempdata+0x4c>)
 800391e:	f00c f8a6 	bl	800fa6e <strncpy>
	strncat(tempresult, tempvalue, 10);
 8003922:	220a      	movs	r2, #10
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	480d      	ldr	r0, [pc, #52]	@ (800395c <settempdata+0x4c>)
 8003928:	f00c f88e 	bl	800fa48 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 800392c:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <settempdata+0x50>)
 800392e:	6858      	ldr	r0, [r3, #4]
 8003930:	2303      	movs	r3, #3
 8003932:	9303      	str	r3, [sp, #12]
 8003934:	2364      	movs	r3, #100	@ 0x64
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	4b09      	ldr	r3, [pc, #36]	@ (8003964 <settempdata+0x54>)
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003946:	2202      	movs	r2, #2
 8003948:	4904      	ldr	r1, [pc, #16]	@ (800395c <settempdata+0x4c>)
 800394a:	f7ff f81f 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	08010440 	.word	0x08010440
 800395c:	2000039c 	.word	0x2000039c
 8003960:	200003d8 	.word	0x200003d8
 8003964:	08011934 	.word	0x08011934

08003968 <setgeardata>:

void setgeardata(char *gearvalue) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af04      	add	r7, sp, #16
 800396e:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 8003970:	220a      	movs	r2, #10
 8003972:	490e      	ldr	r1, [pc, #56]	@ (80039ac <setgeardata+0x44>)
 8003974:	480e      	ldr	r0, [pc, #56]	@ (80039b0 <setgeardata+0x48>)
 8003976:	f00c f87a 	bl	800fa6e <strncpy>
	strncat(gearresult, gearvalue, 10);
 800397a:	220a      	movs	r2, #10
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	480c      	ldr	r0, [pc, #48]	@ (80039b0 <setgeardata+0x48>)
 8003980:	f00c f862 	bl	800fa48 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 8003984:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <setgeardata+0x4c>)
 8003986:	68d8      	ldr	r0, [r3, #12]
 8003988:	2302      	movs	r3, #2
 800398a:	9303      	str	r3, [sp, #12]
 800398c:	23f0      	movs	r3, #240	@ 0xf0
 800398e:	9302      	str	r3, [sp, #8]
 8003990:	2364      	movs	r3, #100	@ 0x64
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <setgeardata+0x50>)
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800399c:	2202      	movs	r2, #2
 800399e:	4904      	ldr	r1, [pc, #16]	@ (80039b0 <setgeardata+0x48>)
 80039a0:	f7fe fff4 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	08010440 	.word	0x08010440
 80039b0:	20000008 	.word	0x20000008
 80039b4:	200003d8 	.word	0x200003d8
 80039b8:	08017b98 	.word	0x08017b98

080039bc <setbattdata>:

void setbattdata(char *battvalue) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af04      	add	r7, sp, #16
 80039c2:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 80039c4:	220a      	movs	r2, #10
 80039c6:	490f      	ldr	r1, [pc, #60]	@ (8003a04 <setbattdata+0x48>)
 80039c8:	480f      	ldr	r0, [pc, #60]	@ (8003a08 <setbattdata+0x4c>)
 80039ca:	f00c f850 	bl	800fa6e <strncpy>
	strncat(battresult, battvalue, 10);
 80039ce:	220a      	movs	r2, #10
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	480d      	ldr	r0, [pc, #52]	@ (8003a08 <setbattdata+0x4c>)
 80039d4:	f00c f838 	bl	800fa48 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 80039d8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <setbattdata+0x50>)
 80039da:	6898      	ldr	r0, [r3, #8]
 80039dc:	2306      	movs	r3, #6
 80039de:	9303      	str	r3, [sp, #12]
 80039e0:	233c      	movs	r3, #60	@ 0x3c
 80039e2:	9302      	str	r3, [sp, #8]
 80039e4:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <setbattdata+0x54>)
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039f2:	2202      	movs	r2, #2
 80039f4:	4904      	ldr	r1, [pc, #16]	@ (8003a08 <setbattdata+0x4c>)
 80039f6:	f7fe ffc9 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	08010440 	.word	0x08010440
 8003a08:	200003c4 	.word	0x200003c4
 8003a0c:	200003d8 	.word	0x200003d8
 8003a10:	08011934 	.word	0x08011934

08003a14 <setspeeddata>:

void setspeeddata(char *speedvalue) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af04      	add	r7, sp, #16
 8003a1a:	6078      	str	r0, [r7, #4]
	strncpy(speedresult, "", 10);
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	490f      	ldr	r1, [pc, #60]	@ (8003a5c <setspeeddata+0x48>)
 8003a20:	480f      	ldr	r0, [pc, #60]	@ (8003a60 <setspeeddata+0x4c>)
 8003a22:	f00c f824 	bl	800fa6e <strncpy>
	strncat(speedresult, speedvalue, 10);
 8003a26:	220a      	movs	r2, #10
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	480d      	ldr	r0, [pc, #52]	@ (8003a60 <setspeeddata+0x4c>)
 8003a2c:	f00c f80c 	bl	800fa48 <strncat>
	((StringObject*)otherobjects[6])->updateString(speedresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 375, 185, 7);
 8003a30:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <setspeeddata+0x50>)
 8003a32:	6998      	ldr	r0, [r3, #24]
 8003a34:	2307      	movs	r3, #7
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	23b9      	movs	r3, #185	@ 0xb9
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	f240 1377 	movw	r3, #375	@ 0x177
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <setspeeddata+0x54>)
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4904      	ldr	r1, [pc, #16]	@ (8003a60 <setspeeddata+0x4c>)
 8003a4e:	f7fe ff9d 	bl	800298c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	08010440 	.word	0x08010440
 8003a60:	200003b0 	.word	0x200003b0
 8003a64:	200003d8 	.word	0x200003d8
 8003a68:	08011934 	.word	0x08011934

08003a6c <domainscreen>:

void domainscreen() {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 8003a70:	4804      	ldr	r0, [pc, #16]	@ (8003a84 <domainscreen+0x18>)
 8003a72:	f7fe fd1d 	bl	80024b0 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 10);
 8003a76:	220a      	movs	r2, #10
 8003a78:	4903      	ldr	r1, [pc, #12]	@ (8003a88 <domainscreen+0x1c>)
 8003a7a:	4802      	ldr	r0, [pc, #8]	@ (8003a84 <domainscreen+0x18>)
 8003a7c:	f7fe fce4 	bl	8002448 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000400 	.word	0x20000400
 8003a88:	200003d8 	.word	0x200003d8

08003a8c <_Z41__static_initialization_and_destruction_0ii>:

void dosplashscene() {
	splashScene.drawScene();
	splashScene.setScene(splashobjects, 1);
}
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f040 810d 	bne.w	8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x22c>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	f040 8107 	bne.w	8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x22c>
		new StringObject(200, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, NO_CENTER_OBJECT, rpmresult, 1),
 8003aaa:	2018      	movs	r0, #24
 8003aac:	f00b fe4c 	bl	800f748 <_Znwj>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	9303      	str	r3, [sp, #12]
 8003ab8:	4b81      	ldr	r3, [pc, #516]	@ (8003cc0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003aba:	9302      	str	r3, [sp, #8]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	4b80      	ldr	r3, [pc, #512]	@ (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003acc:	21c8      	movs	r1, #200	@ 0xc8
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7fe feea 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003ad4:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003ad6:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 8003ad8:	2018      	movs	r0, #24
 8003ada:	f00b fe35 	bl	800f748 <_Znwj>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461c      	mov	r4, r3
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	9303      	str	r3, [sp, #12]
 8003ae6:	4b79      	ldr	r3, [pc, #484]	@ (8003ccc <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003ae8:	9302      	str	r3, [sp, #8]
 8003aea:	2302      	movs	r3, #2
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	4b78      	ldr	r3, [pc, #480]	@ (8003cd0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003af6:	2264      	movs	r2, #100	@ 0x64
 8003af8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7fe fed3 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b02:	4b71      	ldr	r3, [pc, #452]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b04:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 8003b06:	2018      	movs	r0, #24
 8003b08:	f00b fe1e 	bl	800f748 <_Znwj>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461c      	mov	r4, r3
 8003b10:	2306      	movs	r3, #6
 8003b12:	9303      	str	r3, [sp, #12]
 8003b14:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003b16:	9302      	str	r3, [sp, #8]
 8003b18:	2302      	movs	r3, #2
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b24:	223c      	movs	r2, #60	@ 0x3c
 8003b26:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7fe febc 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b30:	4b65      	ldr	r3, [pc, #404]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b32:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 8003b34:	2018      	movs	r0, #24
 8003b36:	f00b fe07 	bl	800f748 <_Znwj>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	461c      	mov	r4, r3
 8003b3e:	2302      	movs	r3, #2
 8003b40:	9303      	str	r3, [sp, #12]
 8003b42:	4b65      	ldr	r3, [pc, #404]	@ (8003cd8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003b44:	9302      	str	r3, [sp, #8]
 8003b46:	2302      	movs	r3, #2
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	4b64      	ldr	r3, [pc, #400]	@ (8003cdc <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b52:	22f0      	movs	r2, #240	@ 0xf0
 8003b54:	2164      	movs	r1, #100	@ 0x64
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fe fea6 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b5e:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 8003b60:	2018      	movs	r0, #24
 8003b62:	f00b fdf1 	bl	800f748 <_Znwj>
 8003b66:	4603      	mov	r3, r0
 8003b68:	461c      	mov	r4, r3
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	9303      	str	r3, [sp, #12]
 8003b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	2302      	movs	r3, #2
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b7e:	2282      	movs	r2, #130	@ 0x82
 8003b80:	f240 118b 	movw	r1, #395	@ 0x18b
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7fe fe8f 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003b8c:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5),
 8003b8e:	2018      	movs	r0, #24
 8003b90:	f00b fdda 	bl	800f748 <_Znwj>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461c      	mov	r4, r3
 8003b98:	2305      	movs	r3, #5
 8003b9a:	9303      	str	r3, [sp, #12]
 8003b9c:	4b52      	ldr	r3, [pc, #328]	@ (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8003b9e:	9302      	str	r3, [sp, #8]
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bac:	225a      	movs	r2, #90	@ 0x5a
 8003bae:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7fe fe78 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003bb8:	4b43      	ldr	r3, [pc, #268]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003bba:	615c      	str	r4, [r3, #20]
		new StringObject(375, 185, 0xFFFF, FREE_SANS_18PT7B, LEFTDRAW_OBJECT, speedresult, 7),
 8003bbc:	2018      	movs	r0, #24
 8003bbe:	f00b fdc3 	bl	800f748 <_Znwj>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461c      	mov	r4, r3
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	9303      	str	r3, [sp, #12]
 8003bca:	4b48      	ldr	r3, [pc, #288]	@ (8003cec <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003bcc:	9302      	str	r3, [sp, #8]
 8003bce:	2301      	movs	r3, #1
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bda:	22b9      	movs	r2, #185	@ 0xb9
 8003bdc:	f240 1177 	movw	r1, #375	@ 0x177
 8003be0:	4620      	mov	r0, r4
 8003be2:	f7fe fe61 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003be6:	4b38      	ldr	r3, [pc, #224]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003be8:	619c      	str	r4, [r3, #24]
		new StringObject(440, 288, 0xFFFF, ICONFONT, LEFTDRAW_OBJECT, rpmicon, 8),
 8003bea:	2018      	movs	r0, #24
 8003bec:	f00b fdac 	bl	800f748 <_Znwj>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461c      	mov	r4, r3
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	9303      	str	r3, [sp, #12]
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8003bfa:	9302      	str	r3, [sp, #8]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	4b38      	ldr	r3, [pc, #224]	@ (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c08:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8003c0c:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7fe fe49 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003c16:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c18:	61dc      	str	r4, [r3, #28]
		new OutlineRectObject(190, 250, 260, 55, 0xFFFF, NO_CENTER_OBJECT, 9),
 8003c1a:	2014      	movs	r0, #20
 8003c1c:	f00b fd94 	bl	800f748 <_Znwj>
 8003c20:	4603      	mov	r3, r0
 8003c22:	461c      	mov	r4, r3
 8003c24:	2309      	movs	r3, #9
 8003c26:	9303      	str	r3, [sp, #12]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9302      	str	r3, [sp, #8]
 8003c2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	2337      	movs	r3, #55	@ 0x37
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003c3a:	22fa      	movs	r2, #250	@ 0xfa
 8003c3c:	21be      	movs	r1, #190	@ 0xbe
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7fe fed6 	bl	80029f0 <_ZN17OutlineRectObjectC1Ettttthh>
};
 8003c44:	4b20      	ldr	r3, [pc, #128]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c46:	621c      	str	r4, [r3, #32]
		new StringObject(405, 210, 0xFFFF, ICONFONT, CENTER_OBJECT, speedicon, 10)
 8003c48:	2018      	movs	r0, #24
 8003c4a:	f00b fd7d 	bl	800f748 <_Znwj>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461c      	mov	r4, r3
 8003c52:	230a      	movs	r3, #10
 8003c54:	9303      	str	r3, [sp, #12]
 8003c56:	4b27      	ldr	r3, [pc, #156]	@ (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8003c58:	9302      	str	r3, [sp, #8]
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	4b21      	ldr	r3, [pc, #132]	@ (8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c66:	22d2      	movs	r2, #210	@ 0xd2
 8003c68:	f240 1195 	movw	r1, #405	@ 0x195
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7fe fe1b 	bl	80028a8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003c72:	4b15      	ldr	r3, [pc, #84]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c74:	625c      	str	r4, [r3, #36]	@ 0x24
Scene myScene2(otherobjects, 6);
 8003c76:	2206      	movs	r2, #6
 8003c78:	4913      	ldr	r1, [pc, #76]	@ (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c7a:	481f      	ldr	r0, [pc, #124]	@ (8003cf8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003c7c:	f7fe fbd2 	bl	8002424 <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003c80:	2014      	movs	r0, #20
 8003c82:	f00b fd61 	bl	800f748 <_Znwj>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461c      	mov	r4, r3
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	2302      	movs	r3, #2
 8003c90:	9303      	str	r3, [sp, #12]
 8003c92:	2302      	movs	r3, #2
 8003c94:	9302      	str	r3, [sp, #8]
 8003c96:	23a0      	movs	r3, #160	@ 0xa0
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	23f0      	movs	r3, #240	@ 0xf0
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	23d7      	movs	r3, #215	@ 0xd7
 8003ca0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7fe ff15 	bl	8002ad4 <_ZN11ImageObjectC1EPctttthh>
};
 8003caa:	4b15      	ldr	r3, [pc, #84]	@ (8003d00 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003cac:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4913      	ldr	r1, [pc, #76]	@ (8003d00 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003cb2:	4814      	ldr	r0, [pc, #80]	@ (8003d04 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8003cb4:	f7fe fbb6 	bl	8002424 <_ZN5SceneC1EPP13DisplayObjecth>
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}
 8003cc0:	20000388 	.word	0x20000388
 8003cc4:	0801378c 	.word	0x0801378c
 8003cc8:	200003d8 	.word	0x200003d8
 8003ccc:	2000039c 	.word	0x2000039c
 8003cd0:	08011934 	.word	0x08011934
 8003cd4:	200003c4 	.word	0x200003c4
 8003cd8:	20000008 	.word	0x20000008
 8003cdc:	08017b98 	.word	0x08017b98
 8003ce0:	2000001c 	.word	0x2000001c
 8003ce4:	08017f54 	.word	0x08017f54
 8003ce8:	20000020 	.word	0x20000020
 8003cec:	200003b0 	.word	0x200003b0
 8003cf0:	20000024 	.word	0x20000024
 8003cf4:	20000028 	.word	0x20000028
 8003cf8:	20000400 	.word	0x20000400
 8003cfc:	2000002c 	.word	0x2000002c
 8003d00:	20000408 	.word	0x20000408
 8003d04:	2000040c 	.word	0x2000040c

08003d08 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003d10:	2001      	movs	r0, #1
 8003d12:	f7ff febb 	bl	8003a8c <_Z41__static_initialization_and_destruction_0ii>
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	7e3a      	ldrb	r2, [r7, #24]
 8003d30:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	605a      	str	r2, [r3, #4]
    endSPI();
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f839 	bl	8003db6 <_ZN7MCP25156endSPIEv>
}
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	1cf9      	adds	r1, r7, #3
 8003d64:	2201      	movs	r2, #1
 8003d66:	f003 fb70 	bl	800744a <HAL_SPI_Transmit>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f107 010f 	add.w	r1, r7, #15
 8003d86:	2201      	movs	r2, #1
 8003d88:	f003 fca3 	bl	80076d2 <HAL_SPI_Receive>
	return retVal;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6898      	ldr	r0, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7b1b      	ldrb	r3, [r3, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	4619      	mov	r1, r3
 8003daa:	f001 fc11 	bl	80055d0 <HAL_GPIO_WritePin>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6898      	ldr	r0, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	7b1b      	ldrb	r3, [r3, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f001 fc01 	bl	80055d0 <HAL_GPIO_WritePin>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08c      	sub	sp, #48	@ 0x30
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	startSPI();
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ffd8 	bl	8003d96 <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8003de6:	21c0      	movs	r1, #192	@ 0xc0
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ffb0 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffe1 	bl	8003db6 <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	220e      	movs	r2, #14
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f00b fe1b 	bl	800fa38 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8003e02:	f107 0214 	add.w	r2, r7, #20
 8003e06:	230e      	movs	r3, #14
 8003e08:	2130      	movs	r1, #48	@ 0x30
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8ec 	bl	8003fe8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8003e10:	f107 0214 	add.w	r2, r7, #20
 8003e14:	230e      	movs	r3, #14
 8003e16:	2140      	movs	r1, #64	@ 0x40
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f8e5 	bl	8003fe8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8003e1e:	f107 0214 	add.w	r2, r7, #20
 8003e22:	230e      	movs	r3, #14
 8003e24:	2150      	movs	r1, #80	@ 0x50
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8de 	bl	8003fe8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2160      	movs	r1, #96	@ 0x60
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8b9 	bl	8003fa8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2170      	movs	r1, #112	@ 0x70
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8b4 	bl	8003fa8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8003e40:	22a3      	movs	r2, #163	@ 0xa3
 8003e42:	212b      	movs	r1, #43	@ 0x2b
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8af 	bl	8003fa8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	2267      	movs	r2, #103	@ 0x67
 8003e4e:	2160      	movs	r1, #96	@ 0x60
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f8f8 	bl	8004046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8003e56:	2301      	movs	r3, #1
 8003e58:	2267      	movs	r2, #103	@ 0x67
 8003e5a:	2170      	movs	r1, #112	@ 0x70
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8f2 	bl	8004046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003e62:	4a29      	ldr	r2, [pc, #164]	@ (8003f08 <_ZN7MCP25155resetEv+0x130>)
 8003e64:	f107 030c 	add.w	r3, r7, #12
 8003e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e6c:	6018      	str	r0, [r3, #0]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003e72:	2300      	movs	r3, #0
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e76:	e01e      	b.n	8003eb6 <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003e86:	f107 020c 	add.w	r2, r7, #12
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	4413      	add	r3, r2
 8003e8e:	7819      	ldrb	r1, [r3, #0]
 8003e90:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003e94:	2300      	movs	r3, #0
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fbcc 	bl	8004634 <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003ea2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003eaa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003eae:	e027      	b.n	8003f00 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	dddd      	ble.n	8003e78 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	723b      	strb	r3, [r7, #8]
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ec8:	e016      	b.n	8003ef8 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003eca:	f107 0208 	add.w	r2, r7, #8
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	4413      	add	r3, r2
 8003ed2:	7819      	ldrb	r1, [r3, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fb77 	bl	80045cc <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ef0:	e006      	b.n	8003f00 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	dde5      	ble.n	8003eca <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3730      	adds	r7, #48	@ 0x30
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	08010444 	.word	0x08010444

08003f0c <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff3c 	bl	8003d96 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003f1e:	2103      	movs	r1, #3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff14 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ff0f 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff1e 	bl	8003d72 <_ZN7MCP25156SPI_RxEv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ff3b 	bl	8003db6 <_ZN7MCP25156endSPIEv>

    return ret;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003f4a:	b590      	push	{r4, r7, lr}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	461a      	mov	r2, r3
 8003f56:	460b      	mov	r3, r1
 8003f58:	72fb      	strb	r3, [r7, #11]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff ff19 	bl	8003d96 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003f64:	2103      	movs	r1, #3
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fef1 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f6c:	7afb      	ldrb	r3, [r7, #11]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff feec 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]
 8003f7a:	e00a      	b.n	8003f92 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	18d4      	adds	r4, r2, r3
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff fef5 	bl	8003d72 <_ZN7MCP25156SPI_RxEv>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
 8003f92:	7dfa      	ldrb	r2, [r7, #23]
 8003f94:	7abb      	ldrb	r3, [r7, #10]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d3f0      	bcc.n	8003f7c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff ff0b 	bl	8003db6 <_ZN7MCP25156endSPIEv>
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}

08003fa8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff feec 	bl	8003d96 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fec4 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff febf 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003fd0:	78bb      	ldrb	r3, [r7, #2]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff feba 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff feeb 	bl	8003db6 <_ZN7MCP25156endSPIEv>
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	72fb      	strb	r3, [r7, #11]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff feca 	bl	8003d96 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8004002:	2102      	movs	r1, #2
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff fea2 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	4619      	mov	r1, r3
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff fe9d 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8004014:	2300      	movs	r3, #0
 8004016:	75fb      	strb	r3, [r7, #23]
 8004018:	e00a      	b.n	8004030 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 800401a:	7dfb      	ldrb	r3, [r7, #23]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fe92 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	3301      	adds	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
 8004030:	7dfa      	ldrb	r2, [r7, #23]
 8004032:	7abb      	ldrb	r3, [r7, #10]
 8004034:	429a      	cmp	r2, r3
 8004036:	d3f0      	bcc.n	800401a <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff febc 	bl	8003db6 <_ZN7MCP25156endSPIEv>
}
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	4608      	mov	r0, r1
 8004050:	4611      	mov	r1, r2
 8004052:	461a      	mov	r2, r3
 8004054:	4603      	mov	r3, r0
 8004056:	70fb      	strb	r3, [r7, #3]
 8004058:	460b      	mov	r3, r1
 800405a:	70bb      	strb	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
    startSPI();
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fe98 	bl	8003d96 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8004066:	2105      	movs	r1, #5
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fe70 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fe6b 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8004078:	78bb      	ldrb	r3, [r7, #2]
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fe66 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8004082:	787b      	ldrb	r3, [r7, #1]
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fe61 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    endSPI();
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fe92 	bl	8003db6 <_ZN7MCP25156endSPIEv>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
    startSPI();
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fe77 	bl	8003d96 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 80040a8:	21a0      	movs	r1, #160	@ 0xa0
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fe4f 	bl	8003d4e <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fe5e 	bl	8003d72 <_ZN7MCP25156SPI_RxEv>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]
    endSPI();
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fe7b 	bl	8003db6 <_ZN7MCP25156endSPIEv>

    return i;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 80040d2:	2180      	movs	r1, #128	@ 0x80
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f812 	bl	80040fe <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 80040da:	4603      	mov	r3, r0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 80040ec:	2100      	movs	r1, #0
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f805 	bl	80040fe <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 80040f4:	4603      	mov	r3, r0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	460b      	mov	r3, r1
 8004108:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	22e0      	movs	r2, #224	@ 0xe0
 800410e:	210f      	movs	r1, #15
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff98 	bl	8004046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8004116:	f000 fc03 	bl	8004920 <HAL_GetTick>
 800411a:	4603      	mov	r3, r0
 800411c:	330a      	adds	r3, #10
 800411e:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8004120:	2300      	movs	r3, #0
 8004122:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8004124:	e013      	b.n	800414e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8004126:	210e      	movs	r1, #14
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff feef 	bl	8003f0c <_ZN7MCP251512readRegisterENS_8REGISTERE>
 800412e:	4603      	mov	r3, r0
 8004130:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	f023 031f 	bic.w	r3, r3, #31
 8004138:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	429a      	cmp	r2, r3
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 800414e:	f000 fbe7 	bl	8004920 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4293      	cmp	r3, r2
 8004158:	bf8c      	ite	hi
 800415a:	2301      	movhi	r3, #1
 800415c:	2300      	movls	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e0      	bne.n	8004126 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8004164:	e000      	b.n	8004168 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8004166:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8004172:	2301      	movs	r3, #1

}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	70fb      	strb	r3, [r7, #3]
 8004188:	4613      	mov	r3, r2
 800418a:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff9c 	bl	80040ca <_ZN7MCP251513setConfigModeEv>
 8004192:	4603      	mov	r3, r0
 8004194:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 800419c:	7afb      	ldrb	r3, [r7, #11]
 800419e:	e1b5      	b.n	800450c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 80041a4:	78bb      	ldrb	r3, [r7, #2]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d009      	beq.n	80041be <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	f300 8193 	bgt.w	80044d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 811f 	beq.w	80043f4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	f000 808e 	beq.w	80042d8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 80041bc:	e18b      	b.n	80044d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	2b0f      	cmp	r3, #15
 80041c2:	f200 8085 	bhi.w	80042d0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	0800420d 	.word	0x0800420d
 80041d0:	0800421b 	.word	0x0800421b
 80041d4:	08004229 	.word	0x08004229
 80041d8:	08004237 	.word	0x08004237
 80041dc:	08004245 	.word	0x08004245
 80041e0:	08004253 	.word	0x08004253
 80041e4:	08004261 	.word	0x08004261
 80041e8:	0800426f 	.word	0x0800426f
 80041ec:	080042d1 	.word	0x080042d1
 80041f0:	080042d1 	.word	0x080042d1
 80041f4:	0800427d 	.word	0x0800427d
 80041f8:	0800428b 	.word	0x0800428b
 80041fc:	08004299 	.word	0x08004299
 8004200:	080042a7 	.word	0x080042a7
 8004204:	080042b5 	.word	0x080042b5
 8004208:	080042c3 	.word	0x080042c3
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 800420c:	231f      	movs	r3, #31
 800420e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8004210:	23bf      	movs	r3, #191	@ 0xbf
 8004212:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8004214:	2387      	movs	r3, #135	@ 0x87
 8004216:	733b      	strb	r3, [r7, #12]
            break;
 8004218:	e05d      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 800421a:	230f      	movs	r3, #15
 800421c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 800421e:	23bf      	movs	r3, #191	@ 0xbf
 8004220:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8004222:	2387      	movs	r3, #135	@ 0x87
 8004224:	733b      	strb	r3, [r7, #12]
            break;
 8004226:	e056      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8004228:	2307      	movs	r3, #7
 800422a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 800422c:	23bf      	movs	r3, #191	@ 0xbf
 800422e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8004230:	2387      	movs	r3, #135	@ 0x87
 8004232:	733b      	strb	r3, [r7, #12]
            break;
 8004234:	e04f      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8004236:	2307      	movs	r3, #7
 8004238:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 800423a:	23a4      	movs	r3, #164	@ 0xa4
 800423c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 800423e:	2384      	movs	r3, #132	@ 0x84
 8004240:	733b      	strb	r3, [r7, #12]
            break;
 8004242:	e048      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8004244:	2347      	movs	r3, #71	@ 0x47
 8004246:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8004248:	23e2      	movs	r3, #226	@ 0xe2
 800424a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 800424c:	2385      	movs	r3, #133	@ 0x85
 800424e:	733b      	strb	r3, [r7, #12]
            break;
 8004250:	e041      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8004252:	2303      	movs	r3, #3
 8004254:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8004256:	23bf      	movs	r3, #191	@ 0xbf
 8004258:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 800425a:	2387      	movs	r3, #135	@ 0x87
 800425c:	733b      	strb	r3, [r7, #12]
            break;
 800425e:	e03a      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8004260:	2303      	movs	r3, #3
 8004262:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8004264:	23b4      	movs	r3, #180	@ 0xb4
 8004266:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8004268:	2386      	movs	r3, #134	@ 0x86
 800426a:	733b      	strb	r3, [r7, #12]
            break;
 800426c:	e033      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 800426e:	2301      	movs	r3, #1
 8004270:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8004272:	23bf      	movs	r3, #191	@ 0xbf
 8004274:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8004276:	2387      	movs	r3, #135	@ 0x87
 8004278:	733b      	strb	r3, [r7, #12]
            break;
 800427a:	e02c      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 800427c:	2301      	movs	r3, #1
 800427e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8004280:	23b4      	movs	r3, #180	@ 0xb4
 8004282:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8004284:	2386      	movs	r3, #134	@ 0x86
 8004286:	733b      	strb	r3, [r7, #12]
            break;
 8004288:	e025      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 800428a:	2301      	movs	r3, #1
 800428c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 800428e:	23b1      	movs	r3, #177	@ 0xb1
 8004290:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8004292:	2385      	movs	r3, #133	@ 0x85
 8004294:	733b      	strb	r3, [r7, #12]
            break;
 8004296:	e01e      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8004298:	2300      	movs	r3, #0
 800429a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 800429c:	23b4      	movs	r3, #180	@ 0xb4
 800429e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 80042a0:	2386      	movs	r3, #134	@ 0x86
 80042a2:	733b      	strb	r3, [r7, #12]
            break;
 80042a4:	e017      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 80042aa:	23b1      	movs	r3, #177	@ 0xb1
 80042ac:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 80042ae:	2385      	movs	r3, #133	@ 0x85
 80042b0:	733b      	strb	r3, [r7, #12]
            break;
 80042b2:	e010      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 80042b4:	2300      	movs	r3, #0
 80042b6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 80042b8:	2390      	movs	r3, #144	@ 0x90
 80042ba:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 80042bc:	2382      	movs	r3, #130	@ 0x82
 80042be:	733b      	strb	r3, [r7, #12]
            break;
 80042c0:	e009      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	733b      	strb	r3, [r7, #12]
            break;
 80042ce:	e002      	b.n	80042d6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
            break;
 80042d4:	bf00      	nop
        }
        break;
 80042d6:	e101      	b.n	80044dc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	2b0f      	cmp	r3, #15
 80042dc:	f200 8086 	bhi.w	80043ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 80042e0:	a201      	add	r2, pc, #4	@ (adr r2, 80042e8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	08004329 	.word	0x08004329
 80042ec:	08004337 	.word	0x08004337
 80042f0:	08004345 	.word	0x08004345
 80042f4:	080043ed 	.word	0x080043ed
 80042f8:	08004353 	.word	0x08004353
 80042fc:	08004361 	.word	0x08004361
 8004300:	0800436f 	.word	0x0800436f
 8004304:	0800437d 	.word	0x0800437d
 8004308:	0800438b 	.word	0x0800438b
 800430c:	080043ed 	.word	0x080043ed
 8004310:	08004399 	.word	0x08004399
 8004314:	080043a7 	.word	0x080043a7
 8004318:	080043b5 	.word	0x080043b5
 800431c:	080043c3 	.word	0x080043c3
 8004320:	080043d1 	.word	0x080043d1
 8004324:	080043df 	.word	0x080043df
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8004328:	233f      	movs	r3, #63	@ 0x3f
 800432a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 800432c:	23ff      	movs	r3, #255	@ 0xff
 800432e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8004330:	2387      	movs	r3, #135	@ 0x87
 8004332:	733b      	strb	r3, [r7, #12]
            break;
 8004334:	e05d      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8004336:	231f      	movs	r3, #31
 8004338:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 800433a:	23ff      	movs	r3, #255	@ 0xff
 800433c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 800433e:	2387      	movs	r3, #135	@ 0x87
 8004340:	733b      	strb	r3, [r7, #12]
            break;
 8004342:	e056      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8004344:	230f      	movs	r3, #15
 8004346:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8004348:	23ff      	movs	r3, #255	@ 0xff
 800434a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 800434c:	2387      	movs	r3, #135	@ 0x87
 800434e:	733b      	strb	r3, [r7, #12]
            break;
 8004350:	e04f      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8004352:	234e      	movs	r3, #78	@ 0x4e
 8004354:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8004356:	23f1      	movs	r3, #241	@ 0xf1
 8004358:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 800435a:	2385      	movs	r3, #133	@ 0x85
 800435c:	733b      	strb	r3, [r7, #12]
            break;
 800435e:	e048      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8004360:	2307      	movs	r3, #7
 8004362:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8004364:	23ff      	movs	r3, #255	@ 0xff
 8004366:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8004368:	2387      	movs	r3, #135	@ 0x87
 800436a:	733b      	strb	r3, [r7, #12]
            break;
 800436c:	e041      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 800436e:	2307      	movs	r3, #7
 8004370:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8004372:	23fa      	movs	r3, #250	@ 0xfa
 8004374:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8004376:	2387      	movs	r3, #135	@ 0x87
 8004378:	733b      	strb	r3, [r7, #12]
            break;
 800437a:	e03a      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 800437c:	2303      	movs	r3, #3
 800437e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8004380:	23ff      	movs	r3, #255	@ 0xff
 8004382:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8004384:	2387      	movs	r3, #135	@ 0x87
 8004386:	733b      	strb	r3, [r7, #12]
            break;
 8004388:	e033      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 800438a:	2303      	movs	r3, #3
 800438c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 800438e:	23be      	movs	r3, #190	@ 0xbe
 8004390:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8004392:	2307      	movs	r3, #7
 8004394:	733b      	strb	r3, [r7, #12]
            break;
 8004396:	e02c      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8004398:	2303      	movs	r3, #3
 800439a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 800439c:	23fa      	movs	r3, #250	@ 0xfa
 800439e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 80043a0:	2387      	movs	r3, #135	@ 0x87
 80043a2:	733b      	strb	r3, [r7, #12]
            break;
 80043a4:	e025      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 80043a6:	2303      	movs	r3, #3
 80043a8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 80043aa:	23f0      	movs	r3, #240	@ 0xf0
 80043ac:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 80043ae:	2386      	movs	r3, #134	@ 0x86
 80043b0:	733b      	strb	r3, [r7, #12]
            break;
 80043b2:	e01e      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 80043b8:	23fa      	movs	r3, #250	@ 0xfa
 80043ba:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 80043bc:	2387      	movs	r3, #135	@ 0x87
 80043be:	733b      	strb	r3, [r7, #12]
            break;
 80043c0:	e017      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 80043c2:	2341      	movs	r3, #65	@ 0x41
 80043c4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 80043c6:	23f1      	movs	r3, #241	@ 0xf1
 80043c8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 80043ca:	2385      	movs	r3, #133	@ 0x85
 80043cc:	733b      	strb	r3, [r7, #12]
            break;
 80043ce:	e010      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 80043d0:	2300      	movs	r3, #0
 80043d2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 80043d4:	23f0      	movs	r3, #240	@ 0xf0
 80043d6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 80043d8:	2386      	movs	r3, #134	@ 0x86
 80043da:	733b      	strb	r3, [r7, #12]
            break;
 80043dc:	e009      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 80043de:	2300      	movs	r3, #0
 80043e0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 80043e2:	23d0      	movs	r3, #208	@ 0xd0
 80043e4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 80043e6:	2382      	movs	r3, #130	@ 0x82
 80043e8:	733b      	strb	r3, [r7, #12]
            break;
 80043ea:	e002      	b.n	80043f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	73fb      	strb	r3, [r7, #15]
            break;
 80043f0:	bf00      	nop
        }
        break;
 80043f2:	e073      	b.n	80044dc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	3b04      	subs	r3, #4
 80043f8:	2b0b      	cmp	r3, #11
 80043fa:	d868      	bhi.n	80044ce <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 80043fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004404 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004435 	.word	0x08004435
 8004408:	08004443 	.word	0x08004443
 800440c:	08004451 	.word	0x08004451
 8004410:	0800445f 	.word	0x0800445f
 8004414:	0800446d 	.word	0x0800446d
 8004418:	080044cf 	.word	0x080044cf
 800441c:	0800447b 	.word	0x0800447b
 8004420:	08004489 	.word	0x08004489
 8004424:	08004497 	.word	0x08004497
 8004428:	080044a5 	.word	0x080044a5
 800442c:	080044b3 	.word	0x080044b3
 8004430:	080044c1 	.word	0x080044c1
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8004434:	230b      	movs	r3, #11
 8004436:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8004438:	23ff      	movs	r3, #255	@ 0xff
 800443a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 800443c:	2387      	movs	r3, #135	@ 0x87
 800443e:	733b      	strb	r3, [r7, #12]
	    break;
 8004440:	e048      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8004442:	2309      	movs	r3, #9
 8004444:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8004446:	23ff      	movs	r3, #255	@ 0xff
 8004448:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 800444a:	2387      	movs	r3, #135	@ 0x87
 800444c:	733b      	strb	r3, [r7, #12]
            break;
 800444e:	e041      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8004450:	2309      	movs	r3, #9
 8004452:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8004454:	23fa      	movs	r3, #250	@ 0xfa
 8004456:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8004458:	2387      	movs	r3, #135	@ 0x87
 800445a:	733b      	strb	r3, [r7, #12]
            break;
 800445c:	e03a      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 800445e:	2304      	movs	r3, #4
 8004460:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8004462:	23ff      	movs	r3, #255	@ 0xff
 8004464:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8004466:	2387      	movs	r3, #135	@ 0x87
 8004468:	733b      	strb	r3, [r7, #12]
            break;
 800446a:	e033      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 800446c:	2304      	movs	r3, #4
 800446e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8004470:	23fe      	movs	r3, #254	@ 0xfe
 8004472:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8004474:	2387      	movs	r3, #135	@ 0x87
 8004476:	733b      	strb	r3, [r7, #12]
	    break;
 8004478:	e02c      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 800447a:	2304      	movs	r3, #4
 800447c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 800447e:	23fa      	movs	r3, #250	@ 0xfa
 8004480:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8004482:	2387      	movs	r3, #135	@ 0x87
 8004484:	733b      	strb	r3, [r7, #12]
            break;
 8004486:	e025      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8004488:	2303      	movs	r3, #3
 800448a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 800448c:	23fa      	movs	r3, #250	@ 0xfa
 800448e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8004490:	2387      	movs	r3, #135	@ 0x87
 8004492:	733b      	strb	r3, [r7, #12]
            break;
 8004494:	e01e      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8004496:	2301      	movs	r3, #1
 8004498:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 800449a:	23ff      	movs	r3, #255	@ 0xff
 800449c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 800449e:	2387      	movs	r3, #135	@ 0x87
 80044a0:	733b      	strb	r3, [r7, #12]
            break;
 80044a2:	e017      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 80044a4:	2341      	movs	r3, #65	@ 0x41
 80044a6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 80044a8:	23fb      	movs	r3, #251	@ 0xfb
 80044aa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 80044ac:	2386      	movs	r3, #134	@ 0x86
 80044ae:	733b      	strb	r3, [r7, #12]
            break;
 80044b0:	e010      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 80044b6:	23fa      	movs	r3, #250	@ 0xfa
 80044b8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 80044ba:	2387      	movs	r3, #135	@ 0x87
 80044bc:	733b      	strb	r3, [r7, #12]
            break;
 80044be:	e009      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 80044c0:	2300      	movs	r3, #0
 80044c2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 80044c4:	23d9      	movs	r3, #217	@ 0xd9
 80044c6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 80044c8:	2382      	movs	r3, #130	@ 0x82
 80044ca:	733b      	strb	r3, [r7, #12]
            break;
 80044cc:	e002      	b.n	80044d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
            break;
 80044d2:	bf00      	nop
        }
        break;
 80044d4:	e002      	b.n	80044dc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
        break;
 80044da:	bf00      	nop
    }

    if (set) {
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d013      	beq.n	800450a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 80044e2:	7bbb      	ldrb	r3, [r7, #14]
 80044e4:	461a      	mov	r2, r3
 80044e6:	212a      	movs	r1, #42	@ 0x2a
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff fd5d 	bl	8003fa8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 80044ee:	7b7b      	ldrb	r3, [r7, #13]
 80044f0:	461a      	mov	r2, r3
 80044f2:	2129      	movs	r1, #41	@ 0x29
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fd57 	bl	8003fa8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 80044fa:	7b3b      	ldrb	r3, [r7, #12]
 80044fc:	461a      	mov	r2, r3
 80044fe:	2128      	movs	r1, #40	@ 0x28
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fd51 	bl	8003fa8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 800450a:	2301      	movs	r3, #1
    }
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d034      	beq.n	8004598 <_ZN7MCP25159prepareIdEPhbm+0x84>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3303      	adds	r3, #3
 8004532:	8afa      	ldrh	r2, [r7, #22]
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8004538:	8afb      	ldrh	r3, [r7, #22]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	b29a      	uxth	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3302      	adds	r3, #2
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 800454c:	8afb      	ldrh	r3, [r7, #22]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3301      	adds	r3, #1
 8004554:	f002 0203 	and.w	r2, r2, #3
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	3301      	adds	r3, #1
 8004560:	7819      	ldrb	r1, [r3, #0]
 8004562:	8afb      	ldrh	r3, [r7, #22]
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f023 031f 	bic.w	r3, r3, #31
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	3301      	adds	r3, #1
 8004572:	440a      	add	r2, r1
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	3301      	adds	r3, #1
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3301      	adds	r3, #1
 8004582:	f042 0208 	orr.w	r2, r2, #8
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 800458a:	8afb      	ldrh	r3, [r7, #22]
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	b29b      	uxth	r3, r3
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 8004596:	e013      	b.n	80045c0 <_ZN7MCP25159prepareIdEPhbm+0xac>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8004598:	8afb      	ldrh	r3, [r7, #22]
 800459a:	08db      	lsrs	r3, r3, #3
 800459c:	b29b      	uxth	r3, r3
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 80045a4:	8afb      	ldrh	r3, [r7, #22]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	3301      	adds	r3, #1
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	3303      	adds	r3, #3
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3302      	adds	r3, #2
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	72fb      	strb	r3, [r7, #11]
 80045da:	4613      	mov	r3, r2
 80045dc:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff fd73 	bl	80040ca <_ZN7MCP251513setConfigModeEv>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80045e8:	7dbb      	ldrb	r3, [r7, #22]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 80045ee:	7dbb      	ldrb	r3, [r7, #22]
 80045f0:	e01c      	b.n	800462c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80045f2:	7aba      	ldrb	r2, [r7, #10]
 80045f4:	f107 0110 	add.w	r1, r7, #16
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff ff8a 	bl	8004514 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 8004600:	7afb      	ldrb	r3, [r7, #11]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 8004606:	2b01      	cmp	r3, #1
 8004608:	d003      	beq.n	8004612 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 800460a:	e005      	b.n	8004618 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 800460c:	2320      	movs	r3, #32
 800460e:	75fb      	strb	r3, [r7, #23]
 8004610:	e004      	b.n	800461c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 8004612:	2324      	movs	r3, #36	@ 0x24
 8004614:	75fb      	strb	r3, [r7, #23]
 8004616:	e001      	b.n	800461c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 8004618:	2301      	movs	r3, #1
 800461a:	e007      	b.n	800462c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 800461c:	f107 0210 	add.w	r2, r7, #16
 8004620:	7df9      	ldrb	r1, [r7, #23]
 8004622:	2304      	movs	r3, #4
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff fcdf 	bl	8003fe8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	72fb      	strb	r3, [r7, #11]
 8004642:	4613      	mov	r3, r2
 8004644:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff fd3f 	bl	80040ca <_ZN7MCP251513setConfigModeEv>
 800464c:	4603      	mov	r3, r0
 800464e:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004650:	7dbb      	ldrb	r3, [r7, #22]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 8004656:	7dbb      	ldrb	r3, [r7, #22]
 8004658:	e035      	b.n	80046c6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	2b05      	cmp	r3, #5
 800465e:	d821      	bhi.n	80046a4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8004660:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	08004681 	.word	0x08004681
 800466c:	08004687 	.word	0x08004687
 8004670:	0800468d 	.word	0x0800468d
 8004674:	08004693 	.word	0x08004693
 8004678:	08004699 	.word	0x08004699
 800467c:	0800469f 	.word	0x0800469f
        case RXF0: reg = MCP_RXF0SIDH; break;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
 8004684:	e010      	b.n	80046a8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 8004686:	2304      	movs	r3, #4
 8004688:	75fb      	strb	r3, [r7, #23]
 800468a:	e00d      	b.n	80046a8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 800468c:	2308      	movs	r3, #8
 800468e:	75fb      	strb	r3, [r7, #23]
 8004690:	e00a      	b.n	80046a8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 8004692:	2310      	movs	r3, #16
 8004694:	75fb      	strb	r3, [r7, #23]
 8004696:	e007      	b.n	80046a8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8004698:	2314      	movs	r3, #20
 800469a:	75fb      	strb	r3, [r7, #23]
 800469c:	e004      	b.n	80046a8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 800469e:	2318      	movs	r3, #24
 80046a0:	75fb      	strb	r3, [r7, #23]
 80046a2:	e001      	b.n	80046a8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e00e      	b.n	80046c6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80046a8:	7aba      	ldrb	r2, [r7, #10]
 80046aa:	f107 0110 	add.w	r1, r7, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff ff2f 	bl	8004514 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 80046b6:	f107 0210 	add.w	r2, r7, #16
 80046ba:	7df9      	ldrb	r1, [r7, #23]
 80046bc:	2304      	movs	r3, #4
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fc92 	bl	8003fe8 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop

080046d0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	460b      	mov	r3, r1
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 80046de:	7afb      	ldrb	r3, [r7, #11]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a30      	ldr	r2, [pc, #192]	@ (80047a4 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 80046e4:	4413      	add	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	7859      	ldrb	r1, [r3, #1]
 80046ec:	f107 0210 	add.w	r2, r7, #16
 80046f0:	2305      	movs	r3, #5
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff fc29 	bl	8003f4a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80046f8:	7c3b      	ldrb	r3, [r7, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	7c7a      	ldrb	r2, [r7, #17]
 80046fe:	0952      	lsrs	r2, r2, #5
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	4413      	add	r3, r2
 8004704:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 8004706:	7c7b      	ldrb	r3, [r7, #17]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d014      	beq.n	800473a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	009a      	lsls	r2, r3, #2
 8004714:	7c7b      	ldrb	r3, [r7, #17]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	7cba      	ldrb	r2, [r7, #18]
 8004724:	4413      	add	r3, r2
 8004726:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	7cfa      	ldrb	r2, [r7, #19]
 800472e:	4413      	add	r3, r2
 8004730:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004738:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 800473a:	7d3b      	ldrb	r3, [r7, #20]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d901      	bls.n	800474c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8004748:	2301      	movs	r3, #1
 800474a:	e027      	b.n	800479c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	4619      	mov	r1, r3
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff fbda 	bl	8003f0c <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004758:	4603      	mov	r3, r0
 800475a:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 800475c:	7dbb      	ldrb	r3, [r7, #22]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800476c:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7dfa      	ldrb	r2, [r7, #23]
 8004778:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	7899      	ldrb	r1, [r3, #2]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f103 0208 	add.w	r2, r3, #8
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff fbdf 	bl	8003f4a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	78da      	ldrb	r2, [r3, #3]
 8004790:	2300      	movs	r3, #0
 8004792:	212c      	movs	r1, #44	@ 0x2c
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7ff fc56 	bl	8004046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	08017f64 	.word	0x08017f64

080047a8 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fc71 	bl	800409a <_ZN7MCP25159getStatusEv>
 80047b8:	4603      	mov	r3, r0
 80047ba:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 80047bc:	7bbb      	ldrb	r3, [r7, #14]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	2100      	movs	r1, #0
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ff80 	bl	80046d0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e00e      	b.n	80047f4 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 80047d6:	7bbb      	ldrb	r3, [r7, #14]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	2101      	movs	r1, #1
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff73 	bl	80046d0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80047ea:	4603      	mov	r3, r0
 80047ec:	73fb      	strb	r3, [r7, #15]
 80047ee:	e001      	b.n	80047f4 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 80047f0:	2305      	movs	r3, #5
 80047f2:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004800:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004838 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004804:	f7fd fca8 	bl	8002158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004808:	480c      	ldr	r0, [pc, #48]	@ (800483c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800480a:	490d      	ldr	r1, [pc, #52]	@ (8004840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800480c:	4a0d      	ldr	r2, [pc, #52]	@ (8004844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800480e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004810:	e002      	b.n	8004818 <LoopCopyDataInit>

08004812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004816:	3304      	adds	r3, #4

08004818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800481a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800481c:	d3f9      	bcc.n	8004812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800481e:	4a0a      	ldr	r2, [pc, #40]	@ (8004848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004820:	4c0a      	ldr	r4, [pc, #40]	@ (800484c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004824:	e001      	b.n	800482a <LoopFillZerobss>

08004826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004828:	3204      	adds	r2, #4

0800482a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800482a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800482c:	d3fb      	bcc.n	8004826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800482e:	f00b f98b 	bl	800fb48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004832:	f7fc fcab 	bl	800118c <main>
  bx  lr    
 8004836:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004838:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800483c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004840:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8004844:	08018064 	.word	0x08018064
  ldr r2, =_sbss
 8004848:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800484c:	20001984 	.word	0x20001984

08004850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004850:	e7fe      	b.n	8004850 <ADC_IRQHandler>
	...

08004854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004858:	4b0e      	ldr	r3, [pc, #56]	@ (8004894 <HAL_Init+0x40>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0d      	ldr	r2, [pc, #52]	@ (8004894 <HAL_Init+0x40>)
 800485e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004864:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <HAL_Init+0x40>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0a      	ldr	r2, [pc, #40]	@ (8004894 <HAL_Init+0x40>)
 800486a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800486e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004870:	4b08      	ldr	r3, [pc, #32]	@ (8004894 <HAL_Init+0x40>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a07      	ldr	r2, [pc, #28]	@ (8004894 <HAL_Init+0x40>)
 8004876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800487c:	2003      	movs	r0, #3
 800487e:	f000 f94f 	bl	8004b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004882:	200f      	movs	r0, #15
 8004884:	f000 f808 	bl	8004898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004888:	f7fd fb46 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023c00 	.word	0x40023c00

08004898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048a0:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <HAL_InitTick+0x54>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <HAL_InitTick+0x58>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 f967 	bl	8004b8a <HAL_SYSTICK_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e00e      	b.n	80048e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b0f      	cmp	r3, #15
 80048ca:	d80a      	bhi.n	80048e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048cc:	2200      	movs	r2, #0
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	f000 f92f 	bl	8004b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048d8:	4a06      	ldr	r2, [pc, #24]	@ (80048f4 <HAL_InitTick+0x5c>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e000      	b.n	80048e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000004 	.word	0x20000004
 80048f0:	20000034 	.word	0x20000034
 80048f4:	20000030 	.word	0x20000030

080048f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048fc:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_IncTick+0x20>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_IncTick+0x24>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4413      	add	r3, r2
 8004908:	4a04      	ldr	r2, [pc, #16]	@ (800491c <HAL_IncTick+0x24>)
 800490a:	6013      	str	r3, [r2, #0]
}
 800490c:	bf00      	nop
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000034 	.word	0x20000034
 800491c:	20000414 	.word	0x20000414

08004920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return uwTick;
 8004924:	4b03      	ldr	r3, [pc, #12]	@ (8004934 <HAL_GetTick+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000414 	.word	0x20000414

08004938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004940:	f7ff ffee 	bl	8004920 <HAL_GetTick>
 8004944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d005      	beq.n	800495e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004952:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <HAL_Delay+0x44>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800495e:	bf00      	nop
 8004960:	f7ff ffde 	bl	8004920 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	429a      	cmp	r2, r3
 800496e:	d8f7      	bhi.n	8004960 <HAL_Delay+0x28>
  {
  }
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000034 	.word	0x20000034

08004980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b2:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	60d3      	str	r3, [r2, #12]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049cc:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <__NVIC_GetPriorityGrouping+0x18>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0307 	and.w	r3, r3, #7
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	db0b      	blt.n	8004a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4907      	ldr	r1, [pc, #28]	@ (8004a1c <__NVIC_EnableIRQ+0x38>)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2001      	movs	r0, #1
 8004a06:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db0a      	blt.n	8004a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	490c      	ldr	r1, [pc, #48]	@ (8004a6c <__NVIC_SetPriority+0x4c>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	0112      	lsls	r2, r2, #4
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	440b      	add	r3, r1
 8004a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a48:	e00a      	b.n	8004a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4908      	ldr	r1, [pc, #32]	@ (8004a70 <__NVIC_SetPriority+0x50>)
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	3b04      	subs	r3, #4
 8004a58:	0112      	lsls	r2, r2, #4
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	761a      	strb	r2, [r3, #24]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000e100 	.word	0xe000e100
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b089      	sub	sp, #36	@ 0x24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f1c3 0307 	rsb	r3, r3, #7
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	bf28      	it	cs
 8004a92:	2304      	movcs	r3, #4
 8004a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d902      	bls.n	8004aa4 <NVIC_EncodePriority+0x30>
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3b03      	subs	r3, #3
 8004aa2:	e000      	b.n	8004aa6 <NVIC_EncodePriority+0x32>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004abc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	43d9      	mvns	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004acc:	4313      	orrs	r3, r2
         );
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3724      	adds	r7, #36	@ 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aec:	d301      	bcc.n	8004af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00f      	b.n	8004b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004af2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b1c <SysTick_Config+0x40>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004afa:	210f      	movs	r1, #15
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	f7ff ff8e 	bl	8004a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b04:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <SysTick_Config+0x40>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b0a:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <SysTick_Config+0x40>)
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	e000e010 	.word	0xe000e010

08004b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff29 	bl	8004980 <__NVIC_SetPriorityGrouping>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b48:	f7ff ff3e 	bl	80049c8 <__NVIC_GetPriorityGrouping>
 8004b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	6978      	ldr	r0, [r7, #20]
 8004b54:	f7ff ff8e 	bl	8004a74 <NVIC_EncodePriority>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff5d 	bl	8004a20 <__NVIC_SetPriority>
}
 8004b66:	bf00      	nop
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff31 	bl	80049e4 <__NVIC_EnableIRQ>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ffa2 	bl	8004adc <SysTick_Config>
 8004b98:	4603      	mov	r3, r0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bb0:	f7ff feb6 	bl	8004920 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e099      	b.n	8004cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004be0:	e00f      	b.n	8004c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004be2:	f7ff fe9d 	bl	8004920 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b05      	cmp	r3, #5
 8004bee:	d908      	bls.n	8004c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e078      	b.n	8004cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e8      	bne.n	8004be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4b38      	ldr	r3, [pc, #224]	@ (8004cfc <HAL_DMA_Init+0x158>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d107      	bne.n	8004c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c64:	4313      	orrs	r3, r2
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0307 	bic.w	r3, r3, #7
 8004c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d117      	bne.n	8004cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fa91 	bl	80051d0 <DMA_CheckFifoParam>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2240      	movs	r2, #64	@ 0x40
 8004cb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e016      	b.n	8004cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa48 	bl	8005164 <DMA_CalcBaseAndBitshift>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cdc:	223f      	movs	r2, #63	@ 0x3f
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	f010803f 	.word	0xf010803f

08004d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_DMA_Start_IT+0x26>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e040      	b.n	8004da8 <HAL_DMA_Start_IT+0xa8>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d12f      	bne.n	8004d9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f9da 	bl	8005108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d58:	223f      	movs	r2, #63	@ 0x3f
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0216 	orr.w	r2, r2, #22
 8004d6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0208 	orr.w	r2, r2, #8
 8004d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e005      	b.n	8004da6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
 8004da4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d004      	beq.n	8004dce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2280      	movs	r2, #128	@ 0x80
 8004dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e00c      	b.n	8004de8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e00:	4b8e      	ldr	r3, [pc, #568]	@ (800503c <HAL_DMA_IRQHandler+0x248>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a8e      	ldr	r2, [pc, #568]	@ (8005040 <HAL_DMA_IRQHandler+0x24c>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	0a9b      	lsrs	r3, r3, #10
 8004e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e1e:	2208      	movs	r2, #8
 8004e20:	409a      	lsls	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01a      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d013      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0204 	bic.w	r2, r2, #4
 8004e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e58:	f043 0201 	orr.w	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e64:	2201      	movs	r2, #1
 8004e66:	409a      	lsls	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d012      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	2201      	movs	r2, #1
 8004e84:	409a      	lsls	r2, r3
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8e:	f043 0202 	orr.w	r2, r3, #2
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d012      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb8:	2204      	movs	r2, #4
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec4:	f043 0204 	orr.w	r2, r3, #4
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed0:	2210      	movs	r2, #16
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d043      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d03c      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eee:	2210      	movs	r2, #16
 8004ef0:	409a      	lsls	r2, r3
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d018      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d108      	bne.n	8004f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d024      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
 8004f22:	e01f      	b.n	8004f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
 8004f34:	e016      	b.n	8004f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0208 	bic.w	r2, r2, #8
 8004f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f68:	2220      	movs	r2, #32
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 808f 	beq.w	8005094 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8087 	beq.w	8005094 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d136      	bne.n	800500c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0216 	bic.w	r2, r2, #22
 8004fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <HAL_DMA_IRQHandler+0x1da>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0208 	bic.w	r2, r2, #8
 8004fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe2:	223f      	movs	r2, #63	@ 0x3f
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d07e      	beq.n	8005100 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
        }
        return;
 800500a:	e079      	b.n	8005100 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01d      	beq.n	8005056 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10d      	bne.n	8005044 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	2b00      	cmp	r3, #0
 800502e:	d031      	beq.n	8005094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	4798      	blx	r3
 8005038:	e02c      	b.n	8005094 <HAL_DMA_IRQHandler+0x2a0>
 800503a:	bf00      	nop
 800503c:	20000004 	.word	0x20000004
 8005040:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d023      	beq.n	8005094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
 8005054:	e01e      	b.n	8005094 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10f      	bne.n	8005084 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0210 	bic.w	r2, r2, #16
 8005072:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	2b00      	cmp	r3, #0
 800509a:	d032      	beq.n	8005102 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2205      	movs	r2, #5
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	3301      	adds	r3, #1
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d307      	bcc.n	80050dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f2      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x2cc>
 80050da:	e000      	b.n	80050de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
 80050fe:	e000      	b.n	8005102 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005100:	bf00      	nop
    }
  }
}
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b40      	cmp	r3, #64	@ 0x40
 8005134:	d108      	bne.n	8005148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005146:	e007      	b.n	8005158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	3b10      	subs	r3, #16
 8005174:	4a14      	ldr	r2, [pc, #80]	@ (80051c8 <DMA_CalcBaseAndBitshift+0x64>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800517e:	4a13      	ldr	r2, [pc, #76]	@ (80051cc <DMA_CalcBaseAndBitshift+0x68>)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d909      	bls.n	80051a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80051a4:	e007      	b.n	80051b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	aaaaaaab 	.word	0xaaaaaaab
 80051cc:	08017f6c 	.word	0x08017f6c

080051d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11f      	bne.n	800522a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d856      	bhi.n	800529e <DMA_CheckFifoParam+0xce>
 80051f0:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <DMA_CheckFifoParam+0x28>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	08005209 	.word	0x08005209
 80051fc:	0800521b 	.word	0x0800521b
 8005200:	08005209 	.word	0x08005209
 8005204:	0800529f 	.word	0x0800529f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d046      	beq.n	80052a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005218:	e043      	b.n	80052a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005222:	d140      	bne.n	80052a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005228:	e03d      	b.n	80052a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005232:	d121      	bne.n	8005278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b03      	cmp	r3, #3
 8005238:	d837      	bhi.n	80052aa <DMA_CheckFifoParam+0xda>
 800523a:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <DMA_CheckFifoParam+0x70>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005251 	.word	0x08005251
 8005244:	08005257 	.word	0x08005257
 8005248:	08005251 	.word	0x08005251
 800524c:	08005269 	.word	0x08005269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
      break;
 8005254:	e030      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d025      	beq.n	80052ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005266:	e022      	b.n	80052ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005270:	d11f      	bne.n	80052b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005276:	e01c      	b.n	80052b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d903      	bls.n	8005286 <DMA_CheckFifoParam+0xb6>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d003      	beq.n	800528c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005284:	e018      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      break;
 800528a:	e015      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00e      	beq.n	80052b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      break;
 800529c:	e00b      	b.n	80052b6 <DMA_CheckFifoParam+0xe6>
      break;
 800529e:	bf00      	nop
 80052a0:	e00a      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052a2:	bf00      	nop
 80052a4:	e008      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052a6:	bf00      	nop
 80052a8:	e006      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052aa:	bf00      	nop
 80052ac:	e004      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ae:	bf00      	nop
 80052b0:	e002      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <DMA_CheckFifoParam+0xe8>
      break;
 80052b6:	bf00      	nop
    }
  } 
  
  return status; 
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop

080052c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b089      	sub	sp, #36	@ 0x24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	e159      	b.n	8005598 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052e4:	2201      	movs	r2, #1
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4013      	ands	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	f040 8148 	bne.w	8005592 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b01      	cmp	r3, #1
 800530c:	d005      	beq.n	800531a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005316:	2b02      	cmp	r3, #2
 8005318:	d130      	bne.n	800537c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	2203      	movs	r2, #3
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4313      	orrs	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005350:	2201      	movs	r2, #1
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4013      	ands	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	f003 0201 	and.w	r2, r3, #1
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4313      	orrs	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b03      	cmp	r3, #3
 8005386:	d017      	beq.n	80053b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	2203      	movs	r2, #3
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d123      	bne.n	800540c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	08da      	lsrs	r2, r3, #3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3208      	adds	r2, #8
 80053cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	220f      	movs	r2, #15
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	08da      	lsrs	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3208      	adds	r2, #8
 8005406:	69b9      	ldr	r1, [r7, #24]
 8005408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	2203      	movs	r2, #3
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4013      	ands	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 0203 	and.w	r2, r3, #3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	4313      	orrs	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80a2 	beq.w	8005592 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	4b57      	ldr	r3, [pc, #348]	@ (80055b0 <HAL_GPIO_Init+0x2e8>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005456:	4a56      	ldr	r2, [pc, #344]	@ (80055b0 <HAL_GPIO_Init+0x2e8>)
 8005458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800545c:	6453      	str	r3, [r2, #68]	@ 0x44
 800545e:	4b54      	ldr	r3, [pc, #336]	@ (80055b0 <HAL_GPIO_Init+0x2e8>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800546a:	4a52      	ldr	r2, [pc, #328]	@ (80055b4 <HAL_GPIO_Init+0x2ec>)
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	3302      	adds	r3, #2
 8005472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	220f      	movs	r2, #15
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4013      	ands	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a49      	ldr	r2, [pc, #292]	@ (80055b8 <HAL_GPIO_Init+0x2f0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d019      	beq.n	80054ca <HAL_GPIO_Init+0x202>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a48      	ldr	r2, [pc, #288]	@ (80055bc <HAL_GPIO_Init+0x2f4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_GPIO_Init+0x1fe>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a47      	ldr	r2, [pc, #284]	@ (80055c0 <HAL_GPIO_Init+0x2f8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00d      	beq.n	80054c2 <HAL_GPIO_Init+0x1fa>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a46      	ldr	r2, [pc, #280]	@ (80055c4 <HAL_GPIO_Init+0x2fc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <HAL_GPIO_Init+0x1f6>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a45      	ldr	r2, [pc, #276]	@ (80055c8 <HAL_GPIO_Init+0x300>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d101      	bne.n	80054ba <HAL_GPIO_Init+0x1f2>
 80054b6:	2304      	movs	r3, #4
 80054b8:	e008      	b.n	80054cc <HAL_GPIO_Init+0x204>
 80054ba:	2307      	movs	r3, #7
 80054bc:	e006      	b.n	80054cc <HAL_GPIO_Init+0x204>
 80054be:	2303      	movs	r3, #3
 80054c0:	e004      	b.n	80054cc <HAL_GPIO_Init+0x204>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e002      	b.n	80054cc <HAL_GPIO_Init+0x204>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_GPIO_Init+0x204>
 80054ca:	2300      	movs	r3, #0
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	f002 0203 	and.w	r2, r2, #3
 80054d2:	0092      	lsls	r2, r2, #2
 80054d4:	4093      	lsls	r3, r2
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054dc:	4935      	ldr	r1, [pc, #212]	@ (80055b4 <HAL_GPIO_Init+0x2ec>)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	3302      	adds	r3, #2
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ea:	4b38      	ldr	r3, [pc, #224]	@ (80055cc <HAL_GPIO_Init+0x304>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800550e:	4a2f      	ldr	r2, [pc, #188]	@ (80055cc <HAL_GPIO_Init+0x304>)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005514:	4b2d      	ldr	r3, [pc, #180]	@ (80055cc <HAL_GPIO_Init+0x304>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005538:	4a24      	ldr	r2, [pc, #144]	@ (80055cc <HAL_GPIO_Init+0x304>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800553e:	4b23      	ldr	r3, [pc, #140]	@ (80055cc <HAL_GPIO_Init+0x304>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005562:	4a1a      	ldr	r2, [pc, #104]	@ (80055cc <HAL_GPIO_Init+0x304>)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005568:	4b18      	ldr	r3, [pc, #96]	@ (80055cc <HAL_GPIO_Init+0x304>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800558c:	4a0f      	ldr	r2, [pc, #60]	@ (80055cc <HAL_GPIO_Init+0x304>)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	f67f aea2 	bls.w	80052e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	3724      	adds	r7, #36	@ 0x24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40013800 	.word	0x40013800
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40020400 	.word	0x40020400
 80055c0:	40020800 	.word	0x40020800
 80055c4:	40020c00 	.word	0x40020c00
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40013c00 	.word	0x40013c00

080055d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	807b      	strh	r3, [r7, #2]
 80055dc:	4613      	mov	r3, r2
 80055de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055e0:	787b      	ldrb	r3, [r7, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055e6:	887a      	ldrh	r2, [r7, #2]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055ec:	e003      	b.n	80055f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055ee:	887b      	ldrh	r3, [r7, #2]
 80055f0:	041a      	lsls	r2, r3, #16
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	619a      	str	r2, [r3, #24]
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
	...

08005604 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800560e:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	4013      	ands	r3, r2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d006      	beq.n	8005628 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800561a:	4a05      	ldr	r2, [pc, #20]	@ (8005630 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	4618      	mov	r0, r3
 8005624:	f7fb fd7a 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40013c00 	.word	0x40013c00

08005634 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af02      	add	r7, sp, #8
 800563a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e101      	b.n	800584a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f009 fd65 	bl	800f130 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2203      	movs	r2, #3
 800566a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005674:	d102      	bne.n	800567c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f003 ff5c 	bl	800953e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	7c1a      	ldrb	r2, [r3, #16]
 800568e:	f88d 2000 	strb.w	r2, [sp]
 8005692:	3304      	adds	r3, #4
 8005694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005696:	f003 fe3b 	bl	8009310 <USB_CoreInit>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0ce      	b.n	800584a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2100      	movs	r1, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f003 ff54 	bl	8009560 <USB_SetCurrentMode>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e0bf      	b.n	800584a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
 80056ce:	e04a      	b.n	8005766 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056d0:	7bfa      	ldrb	r2, [r7, #15]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3315      	adds	r3, #21
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	3314      	adds	r3, #20
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	b298      	uxth	r0, r3
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	332e      	adds	r3, #46	@ 0x2e
 800570c:	4602      	mov	r2, r0
 800570e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005710:	7bfa      	ldrb	r2, [r7, #15]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	3318      	adds	r3, #24
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005724:	7bfa      	ldrb	r2, [r7, #15]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	331c      	adds	r3, #28
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	3320      	adds	r3, #32
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3324      	adds	r3, #36	@ 0x24
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	3301      	adds	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	791b      	ldrb	r3, [r3, #4]
 800576a:	7bfa      	ldrb	r2, [r7, #15]
 800576c:	429a      	cmp	r2, r3
 800576e:	d3af      	bcc.n	80056d0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	73fb      	strb	r3, [r7, #15]
 8005774:	e044      	b.n	8005800 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057b8:	7bfa      	ldrb	r2, [r7, #15]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057ce:	7bfa      	ldrb	r2, [r7, #15]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057e4:	7bfa      	ldrb	r2, [r7, #15]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	3301      	adds	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	791b      	ldrb	r3, [r3, #4]
 8005804:	7bfa      	ldrb	r2, [r7, #15]
 8005806:	429a      	cmp	r2, r3
 8005808:	d3b5      	bcc.n	8005776 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7c1a      	ldrb	r2, [r3, #16]
 8005812:	f88d 2000 	strb.w	r2, [sp]
 8005816:	3304      	adds	r3, #4
 8005818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800581a:	f003 feed 	bl	80095f8 <USB_DevInit>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e00c      	b.n	800584a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f004 ff37 	bl	800a6b6 <USB_DevDisconnect>

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_PCD_Start+0x1c>
 800586a:	2302      	movs	r3, #2
 800586c:	e022      	b.n	80058b4 <HAL_PCD_Start+0x62>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f003 fe3e 	bl	800951c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f004 fee5 	bl	800a674 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b08d      	sub	sp, #52	@ 0x34
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f004 ffa3 	bl	800a81e <USB_GetMode>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 848c 	bne.w	80061f8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f004 ff07 	bl	800a6f8 <USB_ReadInterrupts>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8482 	beq.w	80061f6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f004 fef4 	bl	800a6f8 <USB_ReadInterrupts>
 8005910:	4603      	mov	r3, r0
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b02      	cmp	r3, #2
 8005918:	d107      	bne.n	800592a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f002 0202 	and.w	r2, r2, #2
 8005928:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f004 fee2 	bl	800a6f8 <USB_ReadInterrupts>
 8005934:	4603      	mov	r3, r0
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b10      	cmp	r3, #16
 800593c:	d161      	bne.n	8005a02 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699a      	ldr	r2, [r3, #24]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0210 	bic.w	r2, r2, #16
 800594c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f003 020f 	and.w	r2, r3, #15
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	3304      	adds	r3, #4
 800596c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	0c5b      	lsrs	r3, r3, #17
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	2b02      	cmp	r3, #2
 8005978:	d124      	bne.n	80059c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005980:	4013      	ands	r3, r2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d035      	beq.n	80059f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	6a38      	ldr	r0, [r7, #32]
 800599a:	f004 fd19 	bl	800a3d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059aa:	441a      	add	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	091b      	lsrs	r3, r3, #4
 80059b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059bc:	441a      	add	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	615a      	str	r2, [r3, #20]
 80059c2:	e016      	b.n	80059f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	0c5b      	lsrs	r3, r3, #17
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	2b06      	cmp	r3, #6
 80059ce:	d110      	bne.n	80059f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059d6:	2208      	movs	r2, #8
 80059d8:	4619      	mov	r1, r3
 80059da:	6a38      	ldr	r0, [r7, #32]
 80059dc:	f004 fcf8 	bl	800a3d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	091b      	lsrs	r3, r3, #4
 80059e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ec:	441a      	add	r2, r3
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0210 	orr.w	r2, r2, #16
 8005a00:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f004 fe76 	bl	800a6f8 <USB_ReadInterrupts>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a16:	f040 80a7 	bne.w	8005b68 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f004 fe7b 	bl	800a71e <USB_ReadDevAllOutEpInterrupt>
 8005a28:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005a2a:	e099      	b.n	8005b60 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 808e 	beq.w	8005b54 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f004 fe9f 	bl	800a786 <USB_ReadDevOutEPInterrupt>
 8005a48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00c      	beq.n	8005a6e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a60:	461a      	mov	r2, r3
 8005a62:	2301      	movs	r3, #1
 8005a64:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fea3 	bl	80067b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	2308      	movs	r3, #8
 8005a88:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 ff79 	bl	8006984 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2310      	movs	r3, #16
 8005aac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d030      	beq.n	8005b1a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac0:	2b80      	cmp	r3, #128	@ 0x80
 8005ac2:	d109      	bne.n	8005ad8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ad6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ada:	4613      	mov	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4413      	add	r3, r2
 8005aea:	3304      	adds	r3, #4
 8005aec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d108      	bne.n	8005b08 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f009 fc10 	bl	800f328 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	2302      	movs	r3, #2
 8005b18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b30:	461a      	mov	r2, r3
 8005b32:	2320      	movs	r3, #32
 8005b34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	3301      	adds	r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f47f af62 	bne.w	8005a2c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f004 fdc3 	bl	800a6f8 <USB_ReadInterrupts>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b7c:	f040 80db 	bne.w	8005d36 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f004 fde4 	bl	800a752 <USB_ReadDevAllInEpInterrupt>
 8005b8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005b90:	e0cd      	b.n	8005d2e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80c2 	beq.w	8005d22 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f004 fe0a 	bl	800a7c2 <USB_ReadDevInEPInterrupt>
 8005bae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d057      	beq.n	8005c6a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	69f9      	ldr	r1, [r7, #28]
 8005bd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bda:	4013      	ands	r3, r2
 8005bdc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bea:	461a      	mov	r2, r3
 8005bec:	2301      	movs	r3, #1
 8005bee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	799b      	ldrb	r3, [r3, #6]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d132      	bne.n	8005c5e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	3320      	adds	r3, #32
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0e:	4613      	mov	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4403      	add	r3, r0
 8005c18:	331c      	adds	r3, #28
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4419      	add	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c22:	4613      	mov	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4403      	add	r3, r0
 8005c2c:	3320      	adds	r3, #32
 8005c2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d113      	bne.n	8005c5e <HAL_PCD_IRQHandler+0x3a2>
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	3324      	adds	r3, #36	@ 0x24
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c56:	461a      	mov	r2, r3
 8005c58:	2101      	movs	r1, #1
 8005c5a:	f004 fe11 	bl	800a880 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f009 fae4 	bl	800f232 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c80:	461a      	mov	r2, r3
 8005c82:	2308      	movs	r3, #8
 8005c84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2310      	movs	r3, #16
 8005ca0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2340      	movs	r3, #64	@ 0x40
 8005cbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cca:	6a38      	ldr	r0, [r7, #32]
 8005ccc:	f003 fdf8 	bl	80098c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	3310      	adds	r3, #16
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	4413      	add	r3, r2
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	78db      	ldrb	r3, [r3, #3]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d108      	bne.n	8005cfe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f009 fb27 	bl	800f34c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fcbd 	bl	800669c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	3301      	adds	r3, #1
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f47f af2e 	bne.w	8005b92 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f004 fcdc 	bl	800a6f8 <USB_ReadInterrupts>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d4a:	d122      	bne.n	8005d92 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d108      	bne.n	8005d7c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d72:	2100      	movs	r1, #0
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fea3 	bl	8006ac0 <HAL_PCDEx_LPM_Callback>
 8005d7a:	e002      	b.n	8005d82 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f009 fac5 	bl	800f30c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695a      	ldr	r2, [r3, #20]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f004 fcae 	bl	800a6f8 <USB_ReadInterrupts>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005da2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da6:	d112      	bne.n	8005dce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d102      	bne.n	8005dbe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f009 fa81 	bl	800f2c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005dcc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f004 fc90 	bl	800a6f8 <USB_ReadInterrupts>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005de2:	f040 80b7 	bne.w	8005f54 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2110      	movs	r1, #16
 8005e00:	4618      	mov	r0, r3
 8005e02:	f003 fd5d 	bl	80098c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e0a:	e046      	b.n	8005e9a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e96:	3301      	adds	r3, #1
 8005e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	791b      	ldrb	r3, [r3, #4]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d3b2      	bcc.n	8005e0c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eb4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005eb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7bdb      	ldrb	r3, [r3, #15]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d016      	beq.n	8005ef0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ed2:	f043 030b 	orr.w	r3, r3, #11
 8005ed6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ee8:	f043 030b 	orr.w	r3, r3, #11
 8005eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8005eee:	e015      	b.n	8005f1c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005efe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f02:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005f06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f16:	f043 030b 	orr.w	r3, r3, #11
 8005f1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f004 fc9e 	bl	800a880 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f004 fbcd 	bl	800a6f8 <USB_ReadInterrupts>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f68:	d123      	bne.n	8005fb2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f004 fc63 	bl	800a83a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f003 fd1a 	bl	80099b2 <USB_GetDevSpeed>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681c      	ldr	r4, [r3, #0]
 8005f8a:	f001 f9c9 	bl	8007320 <HAL_RCC_GetHCLKFreq>
 8005f8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f94:	461a      	mov	r2, r3
 8005f96:	4620      	mov	r0, r4
 8005f98:	f003 fa1e 	bl	80093d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f009 f970 	bl	800f282 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f004 fb9e 	bl	800a6f8 <USB_ReadInterrupts>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d10a      	bne.n	8005fdc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f009 f94d 	bl	800f266 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f002 0208 	and.w	r2, r2, #8
 8005fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f004 fb89 	bl	800a6f8 <USB_ReadInterrupts>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fec:	2b80      	cmp	r3, #128	@ 0x80
 8005fee:	d123      	bne.n	8006038 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006000:	e014      	b.n	800602c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006006:	4613      	mov	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d105      	bne.n	8006026 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	b2db      	uxtb	r3, r3
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fb0a 	bl	800663a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	3301      	adds	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	791b      	ldrb	r3, [r3, #4]
 8006030:	461a      	mov	r2, r3
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	4293      	cmp	r3, r2
 8006036:	d3e4      	bcc.n	8006002 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f004 fb5b 	bl	800a6f8 <USB_ReadInterrupts>
 8006042:	4603      	mov	r3, r0
 8006044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800604c:	d13c      	bne.n	80060c8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800604e:	2301      	movs	r3, #1
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
 8006052:	e02b      	b.n	80060ac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	3318      	adds	r3, #24
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d115      	bne.n	80060a6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800607a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800607c:	2b00      	cmp	r3, #0
 800607e:	da12      	bge.n	80060a6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	3317      	adds	r3, #23
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800609c:	b2db      	uxtb	r3, r3
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 faca 	bl	800663a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	3301      	adds	r3, #1
 80060aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	791b      	ldrb	r3, [r3, #4]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d3cd      	bcc.n	8006054 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80060c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f004 fb13 	bl	800a6f8 <USB_ReadInterrupts>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060dc:	d156      	bne.n	800618c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060de:	2301      	movs	r3, #1
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e2:	e045      	b.n	8006170 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f8:	4613      	mov	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d12e      	bne.n	800616a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800610c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800610e:	2b00      	cmp	r3, #0
 8006110:	da2b      	bge.n	800616a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800611e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006122:	429a      	cmp	r2, r3
 8006124:	d121      	bne.n	800616a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612a:	4613      	mov	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	69fa      	ldr	r2, [r7, #28]
 800615e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006166:	6053      	str	r3, [r2, #4]
            break;
 8006168:	e008      	b.n	800617c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	3301      	adds	r3, #1
 800616e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	461a      	mov	r2, r3
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	4293      	cmp	r3, r2
 800617a:	d3b3      	bcc.n	80060e4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800618a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f004 fab1 	bl	800a6f8 <USB_ReadInterrupts>
 8006196:	4603      	mov	r3, r0
 8006198:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a0:	d10a      	bne.n	80061b8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f009 f8e4 	bl	800f370 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695a      	ldr	r2, [r3, #20]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80061b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f004 fa9b 	bl	800a6f8 <USB_ReadInterrupts>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d115      	bne.n	80061f8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f009 f8d4 	bl	800f38c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6859      	ldr	r1, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	e000      	b.n	80061f8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80061f6:	bf00      	nop
    }
  }
}
 80061f8:	3734      	adds	r7, #52	@ 0x34
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd90      	pop	{r4, r7, pc}

080061fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_PCD_SetAddress+0x1a>
 8006214:	2302      	movs	r3, #2
 8006216:	e012      	b.n	800623e <HAL_PCD_SetAddress+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	4611      	mov	r1, r2
 800622e:	4618      	mov	r0, r3
 8006230:	f004 f9fa 	bl	800a628 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	461a      	mov	r2, r3
 8006254:	4603      	mov	r3, r0
 8006256:	70fb      	strb	r3, [r7, #3]
 8006258:	460b      	mov	r3, r1
 800625a:	803b      	strh	r3, [r7, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006268:	2b00      	cmp	r3, #0
 800626a:	da0f      	bge.n	800628c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 020f 	and.w	r2, r3, #15
 8006272:	4613      	mov	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	3310      	adds	r3, #16
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	3304      	adds	r3, #4
 8006282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	705a      	strb	r2, [r3, #1]
 800628a:	e00f      	b.n	80062ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 020f 	and.w	r2, r3, #15
 8006292:	4613      	mov	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	3304      	adds	r3, #4
 80062a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80062b8:	883b      	ldrh	r3, [r7, #0]
 80062ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	78ba      	ldrb	r2, [r7, #2]
 80062c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062da:	78bb      	ldrb	r3, [r7, #2]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d102      	bne.n	80062e6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_PCD_EP_Open+0xae>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e00e      	b.n	8006312 <HAL_PCD_EP_Open+0xcc>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	4618      	mov	r0, r3
 8006304:	f003 fb7a 	bl	80099fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006310:	7afb      	ldrb	r3, [r7, #11]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800632a:	2b00      	cmp	r3, #0
 800632c:	da0f      	bge.n	800634e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	f003 020f 	and.w	r2, r3, #15
 8006334:	4613      	mov	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	3310      	adds	r3, #16
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	3304      	adds	r3, #4
 8006344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	705a      	strb	r2, [r3, #1]
 800634c:	e00f      	b.n	800636e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4413      	add	r3, r2
 8006364:	3304      	adds	r3, #4
 8006366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_PCD_EP_Close+0x6e>
 8006384:	2302      	movs	r3, #2
 8006386:	e00e      	b.n	80063a6 <HAL_PCD_EP_Close+0x8c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68f9      	ldr	r1, [r7, #12]
 8006396:	4618      	mov	r0, r3
 8006398:	f003 fbb8 	bl	8009b0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	460b      	mov	r3, r1
 80063bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063be:	7afb      	ldrb	r3, [r7, #11]
 80063c0:	f003 020f 	and.w	r2, r3, #15
 80063c4:	4613      	mov	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	3304      	adds	r3, #4
 80063d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2200      	movs	r2, #0
 80063e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2200      	movs	r2, #0
 80063ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063f0:	7afb      	ldrb	r3, [r7, #11]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	799b      	ldrb	r3, [r3, #6]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d102      	bne.n	800640a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	799b      	ldrb	r3, [r3, #6]
 8006412:	461a      	mov	r2, r3
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	f003 fc55 	bl	8009cc4 <USB_EPStartXfer>

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	f003 020f 	and.w	r2, r3, #15
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	4613      	mov	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006446:	681b      	ldr	r3, [r3, #0]
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	460b      	mov	r3, r1
 8006462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006464:	7afb      	ldrb	r3, [r7, #11]
 8006466:	f003 020f 	and.w	r2, r3, #15
 800646a:	4613      	mov	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	3310      	adds	r3, #16
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	3304      	adds	r3, #4
 800647a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2200      	movs	r2, #0
 800648c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2201      	movs	r2, #1
 8006492:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006494:	7afb      	ldrb	r3, [r7, #11]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	b2da      	uxtb	r2, r3
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	799b      	ldrb	r3, [r3, #6]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d102      	bne.n	80064ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	799b      	ldrb	r3, [r3, #6]
 80064b6:	461a      	mov	r2, r3
 80064b8:	6979      	ldr	r1, [r7, #20]
 80064ba:	f003 fc03 	bl	8009cc4 <USB_EPStartXfer>

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	7912      	ldrb	r2, [r2, #4]
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e04f      	b.n	8006586 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da0f      	bge.n	800650e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	4613      	mov	r3, r2
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	3310      	adds	r3, #16
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	3304      	adds	r3, #4
 8006504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	705a      	strb	r2, [r3, #1]
 800650c:	e00d      	b.n	800652a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800650e:	78fa      	ldrb	r2, [r7, #3]
 8006510:	4613      	mov	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	3304      	adds	r3, #4
 8006522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_PCD_EP_SetStall+0x82>
 8006546:	2302      	movs	r3, #2
 8006548:	e01d      	b.n	8006586 <HAL_PCD_EP_SetStall+0xbe>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	4618      	mov	r0, r3
 800655a:	f003 ff91 	bl	800a480 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	2b00      	cmp	r3, #0
 8006566:	d109      	bne.n	800657c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	7999      	ldrb	r1, [r3, #6]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006576:	461a      	mov	r2, r3
 8006578:	f004 f982 	bl	800a880 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	7912      	ldrb	r2, [r2, #4]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e042      	b.n	8006632 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da0f      	bge.n	80065d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	f003 020f 	and.w	r2, r3, #15
 80065ba:	4613      	mov	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	3310      	adds	r3, #16
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4413      	add	r3, r2
 80065c8:	3304      	adds	r3, #4
 80065ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2201      	movs	r2, #1
 80065d0:	705a      	strb	r2, [r3, #1]
 80065d2:	e00f      	b.n	80065f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	f003 020f 	and.w	r2, r3, #15
 80065da:	4613      	mov	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4413      	add	r3, r2
 80065ea:	3304      	adds	r3, #4
 80065ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_PCD_EP_ClrStall+0x86>
 8006610:	2302      	movs	r3, #2
 8006612:	e00e      	b.n	8006632 <HAL_PCD_EP_ClrStall+0xa4>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	4618      	mov	r0, r3
 8006624:	f003 ff9a 	bl	800a55c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800664a:	2b00      	cmp	r3, #0
 800664c:	da0c      	bge.n	8006668 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 020f 	and.w	r2, r3, #15
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	3310      	adds	r3, #16
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	3304      	adds	r3, #4
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	e00c      	b.n	8006682 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	f003 020f 	and.w	r2, r3, #15
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	3304      	adds	r3, #4
 8006680:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	4618      	mov	r0, r3
 800668a:	f003 fdb9 	bl	800a200 <USB_EPStopXfer>
 800668e:	4603      	mov	r3, r0
 8006690:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006692:	7afb      	ldrb	r3, [r7, #11]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	@ 0x28
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	3310      	adds	r3, #16
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	4413      	add	r3, r2
 80066c0:	3304      	adds	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d901      	bls.n	80066d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e06b      	b.n	80067ac <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d902      	bls.n	80066f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3303      	adds	r3, #3
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066f8:	e02a      	b.n	8006750 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	429a      	cmp	r2, r3
 800670e:	d902      	bls.n	8006716 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	3303      	adds	r3, #3
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68d9      	ldr	r1, [r3, #12]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4603      	mov	r3, r0
 8006732:	6978      	ldr	r0, [r7, #20]
 8006734:	f003 fe0e 	bl	800a354 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	441a      	add	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	695a      	ldr	r2, [r3, #20]
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	441a      	add	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	429a      	cmp	r2, r3
 8006764:	d809      	bhi.n	800677a <PCD_WriteEmptyTxFifo+0xde>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800676e:	429a      	cmp	r2, r3
 8006770:	d203      	bcs.n	800677a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1bf      	bne.n	80066fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	429a      	cmp	r2, r3
 8006784:	d811      	bhi.n	80067aa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	2201      	movs	r2, #1
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800679a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	43db      	mvns	r3, r3
 80067a0:	6939      	ldr	r1, [r7, #16]
 80067a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067a6:	4013      	ands	r3, r2
 80067a8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	333c      	adds	r3, #60	@ 0x3c
 80067cc:	3304      	adds	r3, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	799b      	ldrb	r3, [r3, #6]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d17b      	bne.n	80068e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d015      	beq.n	8006820 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	4a61      	ldr	r2, [pc, #388]	@ (800697c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	f240 80b9 	bls.w	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80b3 	beq.w	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	461a      	mov	r2, r3
 8006818:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800681c:	6093      	str	r3, [r2, #8]
 800681e:	e0a7      	b.n	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006836:	461a      	mov	r2, r3
 8006838:	2320      	movs	r3, #32
 800683a:	6093      	str	r3, [r2, #8]
 800683c:	e098      	b.n	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 8093 	bne.w	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	4a4b      	ldr	r2, [pc, #300]	@ (800697c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d90f      	bls.n	8006872 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006868:	461a      	mov	r2, r3
 800686a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800686e:	6093      	str	r3, [r2, #8]
 8006870:	e07e      	b.n	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4413      	add	r3, r2
 8006884:	3304      	adds	r3, #4
 8006886:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	0159      	lsls	r1, r3, #5
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	440b      	add	r3, r1
 8006894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d114      	bne.n	80068d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80068bc:	461a      	mov	r2, r3
 80068be:	2101      	movs	r1, #1
 80068c0:	f003 ffde 	bl	800a880 <USB_EP0_OutStart>
 80068c4:	e006      	b.n	80068d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	441a      	add	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f008 fc8e 	bl	800f1fc <HAL_PCD_DataOutStageCallback>
 80068e0:	e046      	b.n	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d124      	bne.n	8006934 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006906:	6093      	str	r3, [r2, #8]
 8006908:	e032      	b.n	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006920:	461a      	mov	r2, r3
 8006922:	2320      	movs	r3, #32
 8006924:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f008 fc65 	bl	800f1fc <HAL_PCD_DataOutStageCallback>
 8006932:	e01d      	b.n	8006970 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d114      	bne.n	8006964 <PCD_EP_OutXfrComplete_int+0x1b0>
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	4613      	mov	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d108      	bne.n	8006964 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800695c:	461a      	mov	r2, r3
 800695e:	2100      	movs	r1, #0
 8006960:	f003 ff8e 	bl	800a880 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f008 fc46 	bl	800f1fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	4f54300a 	.word	0x4f54300a
 8006980:	4f54310a 	.word	0x4f54310a

08006984 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	333c      	adds	r3, #60	@ 0x3c
 800699c:	3304      	adds	r3, #4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4a15      	ldr	r2, [pc, #84]	@ (8006a0c <PCD_EP_OutSetupPacket_int+0x88>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d90e      	bls.n	80069d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d0:	461a      	mov	r2, r3
 80069d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f008 fbfd 	bl	800f1d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a0a      	ldr	r2, [pc, #40]	@ (8006a0c <PCD_EP_OutSetupPacket_int+0x88>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d90c      	bls.n	8006a00 <PCD_EP_OutSetupPacket_int+0x7c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	799b      	ldrb	r3, [r3, #6]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d108      	bne.n	8006a00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069f8:	461a      	mov	r2, r3
 80069fa:	2101      	movs	r1, #1
 80069fc:	f003 ff40 	bl	800a880 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	4f54300a 	.word	0x4f54300a

08006a10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d107      	bne.n	8006a3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a2e:	883b      	ldrh	r3, [r7, #0]
 8006a30:	0419      	lsls	r1, r3, #16
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a3c:	e028      	b.n	8006a90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	0c1b      	lsrs	r3, r3, #16
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4413      	add	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
 8006a50:	e00d      	b.n	8006a6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	3340      	adds	r3, #64	@ 0x40
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	4413      	add	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	73fb      	strb	r3, [r7, #15]
 8006a6e:	7bfa      	ldrb	r2, [r7, #15]
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d3ec      	bcc.n	8006a52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a78:	883b      	ldrh	r3, [r7, #0]
 8006a7a:	0418      	lsls	r0, r3, #16
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	4302      	orrs	r2, r0
 8006a88:	3340      	adds	r3, #64	@ 0x40
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	887a      	ldrh	r2, [r7, #2]
 8006ab0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e267      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d075      	beq.n	8006be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006af6:	4b88      	ldr	r3, [pc, #544]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 030c 	and.w	r3, r3, #12
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d00c      	beq.n	8006b1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b02:	4b85      	ldr	r3, [pc, #532]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d112      	bne.n	8006b34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b0e:	4b82      	ldr	r3, [pc, #520]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b1a:	d10b      	bne.n	8006b34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d05b      	beq.n	8006be0 <HAL_RCC_OscConfig+0x108>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d157      	bne.n	8006be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e242      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b3c:	d106      	bne.n	8006b4c <HAL_RCC_OscConfig+0x74>
 8006b3e:	4b76      	ldr	r3, [pc, #472]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a75      	ldr	r2, [pc, #468]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	e01d      	b.n	8006b88 <HAL_RCC_OscConfig+0xb0>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCC_OscConfig+0x98>
 8006b56:	4b70      	ldr	r3, [pc, #448]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a6f      	ldr	r2, [pc, #444]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	4b6d      	ldr	r3, [pc, #436]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a6c      	ldr	r2, [pc, #432]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e00b      	b.n	8006b88 <HAL_RCC_OscConfig+0xb0>
 8006b70:	4b69      	ldr	r3, [pc, #420]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a68      	ldr	r2, [pc, #416]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	4b66      	ldr	r3, [pc, #408]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a65      	ldr	r2, [pc, #404]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d013      	beq.n	8006bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b90:	f7fd fec6 	bl	8004920 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b98:	f7fd fec2 	bl	8004920 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b64      	cmp	r3, #100	@ 0x64
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e207      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006baa:	4b5b      	ldr	r3, [pc, #364]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0xc0>
 8006bb6:	e014      	b.n	8006be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb8:	f7fd feb2 	bl	8004920 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bc0:	f7fd feae 	bl	8004920 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b64      	cmp	r3, #100	@ 0x64
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e1f3      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bd2:	4b51      	ldr	r3, [pc, #324]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1f0      	bne.n	8006bc0 <HAL_RCC_OscConfig+0xe8>
 8006bde:	e000      	b.n	8006be2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d063      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006bee:	4b4a      	ldr	r3, [pc, #296]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 030c 	and.w	r3, r3, #12
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bfa:	4b47      	ldr	r3, [pc, #284]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d11c      	bne.n	8006c40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c06:	4b44      	ldr	r3, [pc, #272]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d116      	bne.n	8006c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c12:	4b41      	ldr	r3, [pc, #260]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_RCC_OscConfig+0x152>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d001      	beq.n	8006c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e1c7      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	4937      	ldr	r1, [pc, #220]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c3e:	e03a      	b.n	8006cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d020      	beq.n	8006c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c48:	4b34      	ldr	r3, [pc, #208]	@ (8006d1c <HAL_RCC_OscConfig+0x244>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4e:	f7fd fe67 	bl	8004920 <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c54:	e008      	b.n	8006c68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c56:	f7fd fe63 	bl	8004920 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e1a8      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c68:	4b2b      	ldr	r3, [pc, #172]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0f0      	beq.n	8006c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c74:	4b28      	ldr	r3, [pc, #160]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	4925      	ldr	r1, [pc, #148]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	600b      	str	r3, [r1, #0]
 8006c88:	e015      	b.n	8006cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c8a:	4b24      	ldr	r3, [pc, #144]	@ (8006d1c <HAL_RCC_OscConfig+0x244>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fd fe46 	bl	8004920 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c98:	f7fd fe42 	bl	8004920 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e187      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006caa:	4b1b      	ldr	r3, [pc, #108]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d036      	beq.n	8006d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d016      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cca:	4b15      	ldr	r3, [pc, #84]	@ (8006d20 <HAL_RCC_OscConfig+0x248>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd0:	f7fd fe26 	bl	8004920 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cd8:	f7fd fe22 	bl	8004920 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e167      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cea:	4b0b      	ldr	r3, [pc, #44]	@ (8006d18 <HAL_RCC_OscConfig+0x240>)
 8006cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0f0      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x200>
 8006cf6:	e01b      	b.n	8006d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cf8:	4b09      	ldr	r3, [pc, #36]	@ (8006d20 <HAL_RCC_OscConfig+0x248>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cfe:	f7fd fe0f 	bl	8004920 <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d04:	e00e      	b.n	8006d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d06:	f7fd fe0b 	bl	8004920 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d907      	bls.n	8006d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e150      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	42470000 	.word	0x42470000
 8006d20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d24:	4b88      	ldr	r3, [pc, #544]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1ea      	bne.n	8006d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8097 	beq.w	8006e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d42:	4b81      	ldr	r3, [pc, #516]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10f      	bne.n	8006d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	4b7d      	ldr	r3, [pc, #500]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	4a7c      	ldr	r2, [pc, #496]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d66:	60bb      	str	r3, [r7, #8]
 8006d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d6e:	4b77      	ldr	r3, [pc, #476]	@ (8006f4c <HAL_RCC_OscConfig+0x474>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d118      	bne.n	8006dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d7a:	4b74      	ldr	r3, [pc, #464]	@ (8006f4c <HAL_RCC_OscConfig+0x474>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a73      	ldr	r2, [pc, #460]	@ (8006f4c <HAL_RCC_OscConfig+0x474>)
 8006d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d86:	f7fd fdcb 	bl	8004920 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8e:	f7fd fdc7 	bl	8004920 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e10c      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da0:	4b6a      	ldr	r3, [pc, #424]	@ (8006f4c <HAL_RCC_OscConfig+0x474>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0f0      	beq.n	8006d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d106      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x2ea>
 8006db4:	4b64      	ldr	r3, [pc, #400]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db8:	4a63      	ldr	r2, [pc, #396]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc0:	e01c      	b.n	8006dfc <HAL_RCC_OscConfig+0x324>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b05      	cmp	r3, #5
 8006dc8:	d10c      	bne.n	8006de4 <HAL_RCC_OscConfig+0x30c>
 8006dca:	4b5f      	ldr	r3, [pc, #380]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dce:	4a5e      	ldr	r2, [pc, #376]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	f043 0304 	orr.w	r3, r3, #4
 8006dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dda:	4a5b      	ldr	r2, [pc, #364]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	f043 0301 	orr.w	r3, r3, #1
 8006de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006de2:	e00b      	b.n	8006dfc <HAL_RCC_OscConfig+0x324>
 8006de4:	4b58      	ldr	r3, [pc, #352]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de8:	4a57      	ldr	r2, [pc, #348]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df0:	4b55      	ldr	r3, [pc, #340]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df4:	4a54      	ldr	r2, [pc, #336]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006df6:	f023 0304 	bic.w	r3, r3, #4
 8006dfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d015      	beq.n	8006e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e04:	f7fd fd8c 	bl	8004920 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0a:	e00a      	b.n	8006e22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e0c:	f7fd fd88 	bl	8004920 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e0cb      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e22:	4b49      	ldr	r3, [pc, #292]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0ee      	beq.n	8006e0c <HAL_RCC_OscConfig+0x334>
 8006e2e:	e014      	b.n	8006e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e30:	f7fd fd76 	bl	8004920 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e36:	e00a      	b.n	8006e4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e38:	f7fd fd72 	bl	8004920 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e0b5      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1ee      	bne.n	8006e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d105      	bne.n	8006e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e60:	4b39      	ldr	r3, [pc, #228]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e64:	4a38      	ldr	r2, [pc, #224]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80a1 	beq.w	8006fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e76:	4b34      	ldr	r3, [pc, #208]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 030c 	and.w	r3, r3, #12
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d05c      	beq.n	8006f3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d141      	bne.n	8006f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8a:	4b31      	ldr	r3, [pc, #196]	@ (8006f50 <HAL_RCC_OscConfig+0x478>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fd fd46 	bl	8004920 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e98:	f7fd fd42 	bl	8004920 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e087      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eaa:	4b27      	ldr	r3, [pc, #156]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69da      	ldr	r2, [r3, #28]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	019b      	lsls	r3, r3, #6
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	041b      	lsls	r3, r3, #16
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed8:	061b      	lsls	r3, r3, #24
 8006eda:	491b      	ldr	r1, [pc, #108]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f50 <HAL_RCC_OscConfig+0x478>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee6:	f7fd fd1b 	bl	8004920 <HAL_GetTick>
 8006eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eee:	f7fd fd17 	bl	8004920 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e05c      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f00:	4b11      	ldr	r3, [pc, #68]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f0      	beq.n	8006eee <HAL_RCC_OscConfig+0x416>
 8006f0c:	e054      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0e:	4b10      	ldr	r3, [pc, #64]	@ (8006f50 <HAL_RCC_OscConfig+0x478>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f14:	f7fd fd04 	bl	8004920 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fd fd00 	bl	8004920 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e045      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2e:	4b06      	ldr	r3, [pc, #24]	@ (8006f48 <HAL_RCC_OscConfig+0x470>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x444>
 8006f3a:	e03d      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d107      	bne.n	8006f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e038      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	40007000 	.word	0x40007000
 8006f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f54:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc4 <HAL_RCC_OscConfig+0x4ec>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d028      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d121      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d11a      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f84:	4013      	ands	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d111      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d107      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d001      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40023800 	.word	0x40023800

08006fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0cc      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fdc:	4b68      	ldr	r3, [pc, #416]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d90c      	bls.n	8007004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fea:	4b65      	ldr	r3, [pc, #404]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff2:	4b63      	ldr	r3, [pc, #396]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d001      	beq.n	8007004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e0b8      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d020      	beq.n	8007052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800701c:	4b59      	ldr	r3, [pc, #356]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a58      	ldr	r2, [pc, #352]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007034:	4b53      	ldr	r3, [pc, #332]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	4a52      	ldr	r2, [pc, #328]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800703e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007040:	4b50      	ldr	r3, [pc, #320]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	494d      	ldr	r1, [pc, #308]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d044      	beq.n	80070e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d107      	bne.n	8007076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007066:	4b47      	ldr	r3, [pc, #284]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d119      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e07f      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d003      	beq.n	8007086 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007082:	2b03      	cmp	r3, #3
 8007084:	d107      	bne.n	8007096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007086:	4b3f      	ldr	r3, [pc, #252]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e06f      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007096:	4b3b      	ldr	r3, [pc, #236]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e067      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070a6:	4b37      	ldr	r3, [pc, #220]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f023 0203 	bic.w	r2, r3, #3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	4934      	ldr	r1, [pc, #208]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070b8:	f7fd fc32 	bl	8004920 <HAL_GetTick>
 80070bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070be:	e00a      	b.n	80070d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c0:	f7fd fc2e 	bl	8004920 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e04f      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 020c 	and.w	r2, r3, #12
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d1eb      	bne.n	80070c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070e8:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d20c      	bcs.n	8007110 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f6:	4b22      	ldr	r3, [pc, #136]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fe:	4b20      	ldr	r3, [pc, #128]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d001      	beq.n	8007110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e032      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800711c:	4b19      	ldr	r3, [pc, #100]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	4916      	ldr	r1, [pc, #88]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800713a:	4b12      	ldr	r3, [pc, #72]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	490e      	ldr	r1, [pc, #56]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800714a:	4313      	orrs	r3, r2
 800714c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800714e:	f000 f821 	bl	8007194 <HAL_RCC_GetSysClockFreq>
 8007152:	4602      	mov	r2, r0
 8007154:	4b0b      	ldr	r3, [pc, #44]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	091b      	lsrs	r3, r3, #4
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	490a      	ldr	r1, [pc, #40]	@ (8007188 <HAL_RCC_ClockConfig+0x1c0>)
 8007160:	5ccb      	ldrb	r3, [r1, r3]
 8007162:	fa22 f303 	lsr.w	r3, r2, r3
 8007166:	4a09      	ldr	r2, [pc, #36]	@ (800718c <HAL_RCC_ClockConfig+0x1c4>)
 8007168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800716a:	4b09      	ldr	r3, [pc, #36]	@ (8007190 <HAL_RCC_ClockConfig+0x1c8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f7fd fb92 	bl	8004898 <HAL_InitTick>

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40023c00 	.word	0x40023c00
 8007184:	40023800 	.word	0x40023800
 8007188:	080104dc 	.word	0x080104dc
 800718c:	20000004 	.word	0x20000004
 8007190:	20000030 	.word	0x20000030

08007194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007198:	b090      	sub	sp, #64	@ 0x40
 800719a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071ac:	4b59      	ldr	r3, [pc, #356]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x180>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f003 030c 	and.w	r3, r3, #12
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d00d      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x40>
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	f200 80a1 	bhi.w	8007300 <HAL_RCC_GetSysClockFreq+0x16c>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <HAL_RCC_GetSysClockFreq+0x34>
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d003      	beq.n	80071ce <HAL_RCC_GetSysClockFreq+0x3a>
 80071c6:	e09b      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c8:	4b53      	ldr	r3, [pc, #332]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x184>)
 80071ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071cc:	e09b      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ce:	4b53      	ldr	r3, [pc, #332]	@ (800731c <HAL_RCC_GetSysClockFreq+0x188>)
 80071d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071d2:	e098      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071d4:	4b4f      	ldr	r3, [pc, #316]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x180>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071de:	4b4d      	ldr	r3, [pc, #308]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x180>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d028      	beq.n	800723c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x180>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	099b      	lsrs	r3, r3, #6
 80071f0:	2200      	movs	r2, #0
 80071f2:	623b      	str	r3, [r7, #32]
 80071f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071fc:	2100      	movs	r1, #0
 80071fe:	4b47      	ldr	r3, [pc, #284]	@ (800731c <HAL_RCC_GetSysClockFreq+0x188>)
 8007200:	fb03 f201 	mul.w	r2, r3, r1
 8007204:	2300      	movs	r3, #0
 8007206:	fb00 f303 	mul.w	r3, r0, r3
 800720a:	4413      	add	r3, r2
 800720c:	4a43      	ldr	r2, [pc, #268]	@ (800731c <HAL_RCC_GetSysClockFreq+0x188>)
 800720e:	fba0 1202 	umull	r1, r2, r0, r2
 8007212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007214:	460a      	mov	r2, r1
 8007216:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800721a:	4413      	add	r3, r2
 800721c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800721e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007220:	2200      	movs	r2, #0
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	61fa      	str	r2, [r7, #28]
 8007226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800722a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800722e:	f7f9 f82f 	bl	8000290 <__aeabi_uldivmod>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4613      	mov	r3, r2
 8007238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800723a:	e053      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800723c:	4b35      	ldr	r3, [pc, #212]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x180>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	099b      	lsrs	r3, r3, #6
 8007242:	2200      	movs	r2, #0
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	617a      	str	r2, [r7, #20]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800724e:	f04f 0b00 	mov.w	fp, #0
 8007252:	4652      	mov	r2, sl
 8007254:	465b      	mov	r3, fp
 8007256:	f04f 0000 	mov.w	r0, #0
 800725a:	f04f 0100 	mov.w	r1, #0
 800725e:	0159      	lsls	r1, r3, #5
 8007260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007264:	0150      	lsls	r0, r2, #5
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	ebb2 080a 	subs.w	r8, r2, sl
 800726e:	eb63 090b 	sbc.w	r9, r3, fp
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800727e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007282:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007286:	ebb2 0408 	subs.w	r4, r2, r8
 800728a:	eb63 0509 	sbc.w	r5, r3, r9
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	00eb      	lsls	r3, r5, #3
 8007298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800729c:	00e2      	lsls	r2, r4, #3
 800729e:	4614      	mov	r4, r2
 80072a0:	461d      	mov	r5, r3
 80072a2:	eb14 030a 	adds.w	r3, r4, sl
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	eb45 030b 	adc.w	r3, r5, fp
 80072ac:	607b      	str	r3, [r7, #4]
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072ba:	4629      	mov	r1, r5
 80072bc:	028b      	lsls	r3, r1, #10
 80072be:	4621      	mov	r1, r4
 80072c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c4:	4621      	mov	r1, r4
 80072c6:	028a      	lsls	r2, r1, #10
 80072c8:	4610      	mov	r0, r2
 80072ca:	4619      	mov	r1, r3
 80072cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ce:	2200      	movs	r2, #0
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	60fa      	str	r2, [r7, #12]
 80072d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072d8:	f7f8 ffda 	bl	8000290 <__aeabi_uldivmod>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4613      	mov	r3, r2
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80072e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x180>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	0c1b      	lsrs	r3, r3, #16
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	3301      	adds	r3, #1
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80072f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072fe:	e002      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007300:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x184>)
 8007302:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007308:	4618      	mov	r0, r3
 800730a:	3740      	adds	r7, #64	@ 0x40
 800730c:	46bd      	mov	sp, r7
 800730e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007312:	bf00      	nop
 8007314:	40023800 	.word	0x40023800
 8007318:	00f42400 	.word	0x00f42400
 800731c:	017d7840 	.word	0x017d7840

08007320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007324:	4b03      	ldr	r3, [pc, #12]	@ (8007334 <HAL_RCC_GetHCLKFreq+0x14>)
 8007326:	681b      	ldr	r3, [r3, #0]
}
 8007328:	4618      	mov	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000004 	.word	0x20000004

08007338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e07b      	b.n	8007442 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	d108      	bne.n	8007364 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800735a:	d009      	beq.n	8007370 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	61da      	str	r2, [r3, #28]
 8007362:	e005      	b.n	8007370 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fa fd12 	bl	8001db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f4:	ea42 0103 	orr.w	r1, r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	f003 0104 	and.w	r1, r3, #4
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007416:	f003 0210 	and.w	r2, r3, #16
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007430:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b088      	sub	sp, #32
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800745a:	f7fd fa61 	bl	8004920 <HAL_GetTick>
 800745e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d001      	beq.n	8007474 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
 8007472:	e12a      	b.n	80076ca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_SPI_Transmit+0x36>
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e122      	b.n	80076ca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_SPI_Transmit+0x48>
 800748e:	2302      	movs	r3, #2
 8007490:	e11b      	b.n	80076ca <HAL_SPI_Transmit+0x280>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2203      	movs	r2, #3
 800749e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074e0:	d10f      	bne.n	8007502 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007500:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750c:	2b40      	cmp	r3, #64	@ 0x40
 800750e:	d007      	beq.n	8007520 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800751e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007528:	d152      	bne.n	80075d0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <HAL_SPI_Transmit+0xee>
 8007532:	8b7b      	ldrh	r3, [r7, #26]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d145      	bne.n	80075c4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753c:	881a      	ldrh	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007548:	1c9a      	adds	r2, r3, #2
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800755c:	e032      	b.n	80075c4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b02      	cmp	r3, #2
 800756a:	d112      	bne.n	8007592 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007570:	881a      	ldrh	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757c:	1c9a      	adds	r2, r3, #2
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007590:	e018      	b.n	80075c4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007592:	f7fd f9c5 	bl	8004920 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d803      	bhi.n	80075aa <HAL_SPI_Transmit+0x160>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d102      	bne.n	80075b0 <HAL_SPI_Transmit+0x166>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e082      	b.n	80076ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1c7      	bne.n	800755e <HAL_SPI_Transmit+0x114>
 80075ce:	e053      	b.n	8007678 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_SPI_Transmit+0x194>
 80075d8:	8b7b      	ldrh	r3, [r7, #26]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d147      	bne.n	800766e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007604:	e033      	b.n	800766e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b02      	cmp	r3, #2
 8007612:	d113      	bne.n	800763c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	330c      	adds	r3, #12
 800761e:	7812      	ldrb	r2, [r2, #0]
 8007620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	86da      	strh	r2, [r3, #54]	@ 0x36
 800763a:	e018      	b.n	800766e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800763c:	f7fd f970 	bl	8004920 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d803      	bhi.n	8007654 <HAL_SPI_Transmit+0x20a>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d102      	bne.n	800765a <HAL_SPI_Transmit+0x210>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e02d      	b.n	80076ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1c6      	bne.n	8007606 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fd21 	bl	80080c4 <SPI_EndRxTxTransaction>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e000      	b.n	80076ca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80076c8:	2300      	movs	r3, #0
  }
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b088      	sub	sp, #32
 80076d6:	af02      	add	r7, sp, #8
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	603b      	str	r3, [r7, #0]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d001      	beq.n	80076f2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80076ee:	2302      	movs	r3, #2
 80076f0:	e104      	b.n	80078fc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076fa:	d112      	bne.n	8007722 <HAL_SPI_Receive+0x50>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10e      	bne.n	8007722 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2204      	movs	r2, #4
 8007708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800770c:	88fa      	ldrh	r2, [r7, #6]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 f8f3 	bl	8007904 <HAL_SPI_TransmitReceive>
 800771e:	4603      	mov	r3, r0
 8007720:	e0ec      	b.n	80078fc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007722:	f7fd f8fd 	bl	8004920 <HAL_GetTick>
 8007726:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <HAL_SPI_Receive+0x62>
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0e1      	b.n	80078fc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800773e:	2b01      	cmp	r3, #1
 8007740:	d101      	bne.n	8007746 <HAL_SPI_Receive+0x74>
 8007742:	2302      	movs	r3, #2
 8007744:	e0da      	b.n	80078fc <HAL_SPI_Receive+0x22a>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2204      	movs	r2, #4
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007794:	d10f      	bne.n	80077b6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c0:	2b40      	cmp	r3, #64	@ 0x40
 80077c2:	d007      	beq.n	80077d4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d170      	bne.n	80078be <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077dc:	e035      	b.n	800784a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d115      	bne.n	8007818 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f103 020c 	add.w	r2, r3, #12
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	7812      	ldrb	r2, [r2, #0]
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007816:	e018      	b.n	800784a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007818:	f7fd f882 	bl	8004920 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d803      	bhi.n	8007830 <HAL_SPI_Receive+0x15e>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d102      	bne.n	8007836 <HAL_SPI_Receive+0x164>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e058      	b.n	80078fc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1c4      	bne.n	80077de <HAL_SPI_Receive+0x10c>
 8007854:	e038      	b.n	80078c8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b01      	cmp	r3, #1
 8007862:	d113      	bne.n	800788c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	b292      	uxth	r2, r2
 8007870:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007876:	1c9a      	adds	r2, r3, #2
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800788a:	e018      	b.n	80078be <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800788c:	f7fd f848 	bl	8004920 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d803      	bhi.n	80078a4 <HAL_SPI_Receive+0x1d2>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a2:	d102      	bne.n	80078aa <HAL_SPI_Receive+0x1d8>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e01e      	b.n	80078fc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1c6      	bne.n	8007856 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 fb93 	bl	8007ff8 <SPI_EndRxTransaction>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2220      	movs	r2, #32
 80078dc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80078fa:	2300      	movs	r3, #0
  }
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	@ 0x28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007912:	2301      	movs	r3, #1
 8007914:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007916:	f7fd f803 	bl	8004920 <HAL_GetTick>
 800791a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007922:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800792a:	887b      	ldrh	r3, [r7, #2]
 800792c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800792e:	7ffb      	ldrb	r3, [r7, #31]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d00c      	beq.n	800794e <HAL_SPI_TransmitReceive+0x4a>
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800793a:	d106      	bne.n	800794a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <HAL_SPI_TransmitReceive+0x46>
 8007944:	7ffb      	ldrb	r3, [r7, #31]
 8007946:	2b04      	cmp	r3, #4
 8007948:	d001      	beq.n	800794e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800794a:	2302      	movs	r3, #2
 800794c:	e17f      	b.n	8007c4e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <HAL_SPI_TransmitReceive+0x5c>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <HAL_SPI_TransmitReceive+0x5c>
 800795a:	887b      	ldrh	r3, [r7, #2]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e174      	b.n	8007c4e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x6e>
 800796e:	2302      	movs	r3, #2
 8007970:	e16d      	b.n	8007c4e <HAL_SPI_TransmitReceive+0x34a>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b04      	cmp	r3, #4
 8007984:	d003      	beq.n	800798e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2205      	movs	r2, #5
 800798a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	887a      	ldrh	r2, [r7, #2]
 800799e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	887a      	ldrh	r2, [r7, #2]
 80079a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	887a      	ldrh	r2, [r7, #2]
 80079b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	887a      	ldrh	r2, [r7, #2]
 80079b6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ce:	2b40      	cmp	r3, #64	@ 0x40
 80079d0:	d007      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ea:	d17e      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <HAL_SPI_TransmitReceive+0xf6>
 80079f4:	8afb      	ldrh	r3, [r7, #22]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d16c      	bne.n	8007ad4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fe:	881a      	ldrh	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0a:	1c9a      	adds	r2, r3, #2
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a1e:	e059      	b.n	8007ad4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d11b      	bne.n	8007a66 <HAL_SPI_TransmitReceive+0x162>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d016      	beq.n	8007a66 <HAL_SPI_TransmitReceive+0x162>
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d113      	bne.n	8007a66 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a42:	881a      	ldrh	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4e:	1c9a      	adds	r2, r3, #2
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d119      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x1a4>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d014      	beq.n	8007aa8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a88:	b292      	uxth	r2, r2
 8007a8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a90:	1c9a      	adds	r2, r3, #2
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007aa8:	f7fc ff3a 	bl	8004920 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d80d      	bhi.n	8007ad4 <HAL_SPI_TransmitReceive+0x1d0>
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	d009      	beq.n	8007ad4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e0bc      	b.n	8007c4e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1a0      	bne.n	8007a20 <HAL_SPI_TransmitReceive+0x11c>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d19b      	bne.n	8007a20 <HAL_SPI_TransmitReceive+0x11c>
 8007ae8:	e082      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <HAL_SPI_TransmitReceive+0x1f4>
 8007af2:	8afb      	ldrh	r3, [r7, #22]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d171      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	7812      	ldrb	r2, [r2, #0]
 8007b04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b1e:	e05d      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d11c      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x264>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d017      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0x264>
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d114      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	330c      	adds	r3, #12
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d119      	bne.n	8007baa <HAL_SPI_TransmitReceive+0x2a6>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d014      	beq.n	8007baa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007baa:	f7fc feb9 	bl	8004920 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d803      	bhi.n	8007bc2 <HAL_SPI_TransmitReceive+0x2be>
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d102      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x2c4>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e038      	b.n	8007c4e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d19c      	bne.n	8007b20 <HAL_SPI_TransmitReceive+0x21c>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d197      	bne.n	8007b20 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bf0:	6a3a      	ldr	r2, [r7, #32]
 8007bf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fa65 	bl	80080c4 <SPI_EndRxTxTransaction>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d008      	beq.n	8007c12 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2220      	movs	r2, #32
 8007c04:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e01d      	b.n	8007c4e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
  }
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3728      	adds	r7, #40	@ 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d001      	beq.n	8007c76 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007c72:	2302      	movs	r3, #2
 8007c74:	e097      	b.n	8007da6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_SPI_Transmit_DMA+0x2a>
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e08f      	b.n	8007da6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_SPI_Transmit_DMA+0x3c>
 8007c90:	2302      	movs	r3, #2
 8007c92:	e088      	b.n	8007da6 <HAL_SPI_Transmit_DMA+0x14e>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	88fa      	ldrh	r2, [r7, #6]
 8007cb4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	88fa      	ldrh	r2, [r7, #6]
 8007cba:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ce2:	d10f      	bne.n	8007d04 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d08:	4a29      	ldr	r2, [pc, #164]	@ (8007db0 <HAL_SPI_Transmit_DMA+0x158>)
 8007d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d10:	4a28      	ldr	r2, [pc, #160]	@ (8007db4 <HAL_SPI_Transmit_DMA+0x15c>)
 8007d12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d18:	4a27      	ldr	r2, [pc, #156]	@ (8007db8 <HAL_SPI_Transmit_DMA+0x160>)
 8007d1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d20:	2200      	movs	r2, #0
 8007d22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	330c      	adds	r3, #12
 8007d34:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d3c:	f7fc ffe0 	bl	8004d00 <HAL_DMA_Start_IT>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4a:	f043 0210 	orr.w	r2, r3, #16
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e023      	b.n	8007da6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d68:	2b40      	cmp	r3, #64	@ 0x40
 8007d6a:	d007      	beq.n	8007d7c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d7a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0220 	orr.w	r2, r2, #32
 8007d92:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0202 	orr.w	r2, r2, #2
 8007da2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	08007e8d 	.word	0x08007e8d
 8007db4:	08007de5 	.word	0x08007de5
 8007db8:	08007ea9 	.word	0x08007ea9

08007dbc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007df2:	f7fc fd95 	bl	8004920 <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e06:	d03b      	beq.n	8007e80 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0220 	bic.w	r2, r2, #32
 8007e16:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0202 	bic.w	r2, r2, #2
 8007e26:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	2164      	movs	r1, #100	@ 0x64
 8007e2c:	6978      	ldr	r0, [r7, #20]
 8007e2e:	f000 f949 	bl	80080c4 <SPI_EndRxTxTransaction>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3c:	f043 0220 	orr.w	r2, r3, #32
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2200      	movs	r2, #0
 8007e66:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e78:	6978      	ldr	r0, [r7, #20]
 8007e7a:	f7ff ffa9 	bl	8007dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e7e:	e002      	b.n	8007e86 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007e80:	6978      	ldr	r0, [r7, #20]
 8007e82:	f7fa fab9 	bl	80023f8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff ff8e 	bl	8007dbc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0203 	bic.w	r2, r2, #3
 8007ec4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eca:	f043 0210 	orr.w	r2, r3, #16
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff ff78 	bl	8007dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ee0:	bf00      	nop
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ef8:	f7fc fd12 	bl	8004920 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f08:	f7fc fd0a 	bl	8004920 <HAL_GetTick>
 8007f0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f0e:	4b39      	ldr	r3, [pc, #228]	@ (8007ff4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	015b      	lsls	r3, r3, #5
 8007f14:	0d1b      	lsrs	r3, r3, #20
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	fb02 f303 	mul.w	r3, r2, r3
 8007f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f1e:	e054      	b.n	8007fca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d050      	beq.n	8007fca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f28:	f7fc fcfa 	bl	8004920 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d902      	bls.n	8007f3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d13d      	bne.n	8007fba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f56:	d111      	bne.n	8007f7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f60:	d004      	beq.n	8007f6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f6a:	d107      	bne.n	8007f7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f84:	d10f      	bne.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e017      	b.n	8007fea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	bf0c      	ite	eq
 8007fda:	2301      	moveq	r3, #1
 8007fdc:	2300      	movne	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d19b      	bne.n	8007f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000004 	.word	0x20000004

08007ff8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800800c:	d111      	bne.n	8008032 <SPI_EndRxTransaction+0x3a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008016:	d004      	beq.n	8008022 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008020:	d107      	bne.n	8008032 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008030:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800803a:	d12a      	bne.n	8008092 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008044:	d012      	beq.n	800806c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2200      	movs	r2, #0
 800804e:	2180      	movs	r1, #128	@ 0x80
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff ff49 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d02d      	beq.n	80080b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008060:	f043 0220 	orr.w	r2, r3, #32
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e026      	b.n	80080ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	2101      	movs	r1, #1
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff ff36 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d01a      	beq.n	80080b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008086:	f043 0220 	orr.w	r2, r3, #32
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e013      	b.n	80080ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	2101      	movs	r1, #1
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff ff23 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d007      	beq.n	80080b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ac:	f043 0220 	orr.w	r2, r3, #32
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e000      	b.n	80080ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2201      	movs	r2, #1
 80080d8:	2102      	movs	r1, #2
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7ff ff04 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ea:	f043 0220 	orr.w	r2, r3, #32
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e032      	b.n	800815c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008164 <SPI_EndRxTxTransaction+0xa0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008168 <SPI_EndRxTxTransaction+0xa4>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	0d5b      	lsrs	r3, r3, #21
 8008102:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008114:	d112      	bne.n	800813c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2200      	movs	r2, #0
 800811e:	2180      	movs	r1, #128	@ 0x80
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f7ff fee1 	bl	8007ee8 <SPI_WaitFlagStateUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d016      	beq.n	800815a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008130:	f043 0220 	orr.w	r2, r3, #32
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e00f      	b.n	800815c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	3b01      	subs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008152:	2b80      	cmp	r3, #128	@ 0x80
 8008154:	d0f2      	beq.n	800813c <SPI_EndRxTxTransaction+0x78>
 8008156:	e000      	b.n	800815a <SPI_EndRxTxTransaction+0x96>
        break;
 8008158:	bf00      	nop
  }

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20000004 	.word	0x20000004
 8008168:	165e9f81 	.word	0x165e9f81

0800816c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e041      	b.n	8008202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7fa f868 	bl	8002268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f000 fd6a 	bl	8008c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e041      	b.n	80082a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f839 	bl	80082a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f000 fd1b 	bl	8008c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d109      	bne.n	80082e8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	bf0c      	ite	eq
 80082e0:	2301      	moveq	r3, #1
 80082e2:	2300      	movne	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	e022      	b.n	800832e <HAL_TIM_PWM_Start_DMA+0x72>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d109      	bne.n	8008302 <HAL_TIM_PWM_Start_DMA+0x46>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	bf0c      	ite	eq
 80082fa:	2301      	moveq	r3, #1
 80082fc:	2300      	movne	r3, #0
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	e015      	b.n	800832e <HAL_TIM_PWM_Start_DMA+0x72>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d109      	bne.n	800831c <HAL_TIM_PWM_Start_DMA+0x60>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	bf0c      	ite	eq
 8008314:	2301      	moveq	r3, #1
 8008316:	2300      	movne	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	e008      	b.n	800832e <HAL_TIM_PWM_Start_DMA+0x72>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	bf0c      	ite	eq
 8008328:	2301      	moveq	r3, #1
 800832a:	2300      	movne	r3, #0
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008332:	2302      	movs	r3, #2
 8008334:	e15d      	b.n	80085f2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d109      	bne.n	8008350 <HAL_TIM_PWM_Start_DMA+0x94>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b01      	cmp	r3, #1
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	e022      	b.n	8008396 <HAL_TIM_PWM_Start_DMA+0xda>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b04      	cmp	r3, #4
 8008354:	d109      	bne.n	800836a <HAL_TIM_PWM_Start_DMA+0xae>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b01      	cmp	r3, #1
 8008360:	bf0c      	ite	eq
 8008362:	2301      	moveq	r3, #1
 8008364:	2300      	movne	r3, #0
 8008366:	b2db      	uxtb	r3, r3
 8008368:	e015      	b.n	8008396 <HAL_TIM_PWM_Start_DMA+0xda>
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2b08      	cmp	r3, #8
 800836e:	d109      	bne.n	8008384 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b01      	cmp	r3, #1
 800837a:	bf0c      	ite	eq
 800837c:	2301      	moveq	r3, #1
 800837e:	2300      	movne	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	e008      	b.n	8008396 <HAL_TIM_PWM_Start_DMA+0xda>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	bf0c      	ite	eq
 8008390:	2301      	moveq	r3, #1
 8008392:	2300      	movne	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d024      	beq.n	80083e4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <HAL_TIM_PWM_Start_DMA+0xea>
 80083a0:	887b      	ldrh	r3, [r7, #2]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e123      	b.n	80085f2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d104      	bne.n	80083ba <HAL_TIM_PWM_Start_DMA+0xfe>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083b8:	e016      	b.n	80083e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d104      	bne.n	80083ca <HAL_TIM_PWM_Start_DMA+0x10e>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083c8:	e00e      	b.n	80083e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d104      	bne.n	80083da <HAL_TIM_PWM_Start_DMA+0x11e>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083d8:	e006      	b.n	80083e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2202      	movs	r2, #2
 80083de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083e2:	e001      	b.n	80083e8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e104      	b.n	80085f2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b0c      	cmp	r3, #12
 80083ec:	f200 80ae 	bhi.w	800854c <HAL_TIM_PWM_Start_DMA+0x290>
 80083f0:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	0800842d 	.word	0x0800842d
 80083fc:	0800854d 	.word	0x0800854d
 8008400:	0800854d 	.word	0x0800854d
 8008404:	0800854d 	.word	0x0800854d
 8008408:	08008475 	.word	0x08008475
 800840c:	0800854d 	.word	0x0800854d
 8008410:	0800854d 	.word	0x0800854d
 8008414:	0800854d 	.word	0x0800854d
 8008418:	080084bd 	.word	0x080084bd
 800841c:	0800854d 	.word	0x0800854d
 8008420:	0800854d 	.word	0x0800854d
 8008424:	0800854d 	.word	0x0800854d
 8008428:	08008505 	.word	0x08008505
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008430:	4a72      	ldr	r2, [pc, #456]	@ (80085fc <HAL_TIM_PWM_Start_DMA+0x340>)
 8008432:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008438:	4a71      	ldr	r2, [pc, #452]	@ (8008600 <HAL_TIM_PWM_Start_DMA+0x344>)
 800843a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008440:	4a70      	ldr	r2, [pc, #448]	@ (8008604 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008442:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3334      	adds	r3, #52	@ 0x34
 8008450:	461a      	mov	r2, r3
 8008452:	887b      	ldrh	r3, [r7, #2]
 8008454:	f7fc fc54 	bl	8004d00 <HAL_DMA_Start_IT>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e0c7      	b.n	80085f2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008470:	60da      	str	r2, [r3, #12]
      break;
 8008472:	e06e      	b.n	8008552 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008478:	4a60      	ldr	r2, [pc, #384]	@ (80085fc <HAL_TIM_PWM_Start_DMA+0x340>)
 800847a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008480:	4a5f      	ldr	r2, [pc, #380]	@ (8008600 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008482:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008488:	4a5e      	ldr	r2, [pc, #376]	@ (8008604 <HAL_TIM_PWM_Start_DMA+0x348>)
 800848a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3338      	adds	r3, #56	@ 0x38
 8008498:	461a      	mov	r2, r3
 800849a:	887b      	ldrh	r3, [r7, #2]
 800849c:	f7fc fc30 	bl	8004d00 <HAL_DMA_Start_IT>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e0a3      	b.n	80085f2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80084b8:	60da      	str	r2, [r3, #12]
      break;
 80084ba:	e04a      	b.n	8008552 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c0:	4a4e      	ldr	r2, [pc, #312]	@ (80085fc <HAL_TIM_PWM_Start_DMA+0x340>)
 80084c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	4a4d      	ldr	r2, [pc, #308]	@ (8008600 <HAL_TIM_PWM_Start_DMA+0x344>)
 80084ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d0:	4a4c      	ldr	r2, [pc, #304]	@ (8008604 <HAL_TIM_PWM_Start_DMA+0x348>)
 80084d2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	333c      	adds	r3, #60	@ 0x3c
 80084e0:	461a      	mov	r2, r3
 80084e2:	887b      	ldrh	r3, [r7, #2]
 80084e4:	f7fc fc0c 	bl	8004d00 <HAL_DMA_Start_IT>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e07f      	b.n	80085f2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008500:	60da      	str	r2, [r3, #12]
      break;
 8008502:	e026      	b.n	8008552 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008508:	4a3c      	ldr	r2, [pc, #240]	@ (80085fc <HAL_TIM_PWM_Start_DMA+0x340>)
 800850a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008510:	4a3b      	ldr	r2, [pc, #236]	@ (8008600 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008512:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008518:	4a3a      	ldr	r2, [pc, #232]	@ (8008604 <HAL_TIM_PWM_Start_DMA+0x348>)
 800851a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3340      	adds	r3, #64	@ 0x40
 8008528:	461a      	mov	r2, r3
 800852a:	887b      	ldrh	r3, [r7, #2]
 800852c:	f7fc fbe8 	bl	8004d00 <HAL_DMA_Start_IT>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e05b      	b.n	80085f2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008548:	60da      	str	r2, [r3, #12]
      break;
 800854a:	e002      	b.n	8008552 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	75fb      	strb	r3, [r7, #23]
      break;
 8008550:	bf00      	nop
  }

  if (status == HAL_OK)
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d14b      	bne.n	80085f0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fe41 	bl	80091e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a27      	ldr	r2, [pc, #156]	@ (8008608 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d107      	bne.n	8008580 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800857e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a20      	ldr	r2, [pc, #128]	@ (8008608 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d018      	beq.n	80085bc <HAL_TIM_PWM_Start_DMA+0x300>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008592:	d013      	beq.n	80085bc <HAL_TIM_PWM_Start_DMA+0x300>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1c      	ldr	r2, [pc, #112]	@ (800860c <HAL_TIM_PWM_Start_DMA+0x350>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00e      	beq.n	80085bc <HAL_TIM_PWM_Start_DMA+0x300>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008610 <HAL_TIM_PWM_Start_DMA+0x354>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d009      	beq.n	80085bc <HAL_TIM_PWM_Start_DMA+0x300>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a19      	ldr	r2, [pc, #100]	@ (8008614 <HAL_TIM_PWM_Start_DMA+0x358>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d004      	beq.n	80085bc <HAL_TIM_PWM_Start_DMA+0x300>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a18      	ldr	r2, [pc, #96]	@ (8008618 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d111      	bne.n	80085e0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b06      	cmp	r3, #6
 80085cc:	d010      	beq.n	80085f0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0201 	orr.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085de:	e007      	b.n	80085f0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0201 	orr.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	08008b75 	.word	0x08008b75
 8008600:	08008c1d 	.word	0x08008c1d
 8008604:	08008ae3 	.word	0x08008ae3
 8008608:	40010000 	.word	0x40010000
 800860c:	40000400 	.word	0x40000400
 8008610:	40000800 	.word	0x40000800
 8008614:	40000c00 	.word	0x40000c00
 8008618:	40014000 	.word	0x40014000

0800861c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b0c      	cmp	r3, #12
 800862e:	d855      	bhi.n	80086dc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008630:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	0800866d 	.word	0x0800866d
 800863c:	080086dd 	.word	0x080086dd
 8008640:	080086dd 	.word	0x080086dd
 8008644:	080086dd 	.word	0x080086dd
 8008648:	08008689 	.word	0x08008689
 800864c:	080086dd 	.word	0x080086dd
 8008650:	080086dd 	.word	0x080086dd
 8008654:	080086dd 	.word	0x080086dd
 8008658:	080086a5 	.word	0x080086a5
 800865c:	080086dd 	.word	0x080086dd
 8008660:	080086dd 	.word	0x080086dd
 8008664:	080086dd 	.word	0x080086dd
 8008668:	080086c1 	.word	0x080086c1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800867a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008680:	4618      	mov	r0, r3
 8008682:	f7fc fb95 	bl	8004db0 <HAL_DMA_Abort_IT>
      break;
 8008686:	e02c      	b.n	80086e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008696:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869c:	4618      	mov	r0, r3
 800869e:	f7fc fb87 	bl	8004db0 <HAL_DMA_Abort_IT>
      break;
 80086a2:	e01e      	b.n	80086e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fc fb79 	bl	8004db0 <HAL_DMA_Abort_IT>
      break;
 80086be:	e010      	b.n	80086e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68da      	ldr	r2, [r3, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fc fb6b 	bl	8004db0 <HAL_DMA_Abort_IT>
      break;
 80086da:	e002      	b.n	80086e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
      break;
 80086e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d157      	bne.n	8008798 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2200      	movs	r2, #0
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fd79 	bl	80091e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a2a      	ldr	r2, [pc, #168]	@ (80087a4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d117      	bne.n	8008730 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6a1a      	ldr	r2, [r3, #32]
 8008706:	f241 1311 	movw	r3, #4369	@ 0x1111
 800870a:	4013      	ands	r3, r2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10f      	bne.n	8008730 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	f240 4344 	movw	r3, #1092	@ 0x444
 800871a:	4013      	ands	r3, r2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d107      	bne.n	8008730 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800872e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	f241 1311 	movw	r3, #4369	@ 0x1111
 800873a:	4013      	ands	r3, r2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10f      	bne.n	8008760 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a1a      	ldr	r2, [r3, #32]
 8008746:	f240 4344 	movw	r3, #1092	@ 0x444
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d107      	bne.n	8008760 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d104      	bne.n	8008770 <HAL_TIM_PWM_Stop_DMA+0x154>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800876e:	e013      	b.n	8008798 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b04      	cmp	r3, #4
 8008774:	d104      	bne.n	8008780 <HAL_TIM_PWM_Stop_DMA+0x164>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800877e:	e00b      	b.n	8008798 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b08      	cmp	r3, #8
 8008784:	d104      	bne.n	8008790 <HAL_TIM_PWM_Stop_DMA+0x174>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800878e:	e003      	b.n	8008798 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	40010000 	.word	0x40010000

080087a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e0ae      	b.n	8008924 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b0c      	cmp	r3, #12
 80087d2:	f200 809f 	bhi.w	8008914 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008811 	.word	0x08008811
 80087e0:	08008915 	.word	0x08008915
 80087e4:	08008915 	.word	0x08008915
 80087e8:	08008915 	.word	0x08008915
 80087ec:	08008851 	.word	0x08008851
 80087f0:	08008915 	.word	0x08008915
 80087f4:	08008915 	.word	0x08008915
 80087f8:	08008915 	.word	0x08008915
 80087fc:	08008893 	.word	0x08008893
 8008800:	08008915 	.word	0x08008915
 8008804:	08008915 	.word	0x08008915
 8008808:	08008915 	.word	0x08008915
 800880c:	080088d3 	.word	0x080088d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fac0 	bl	8008d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0208 	orr.w	r2, r2, #8
 800882a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0204 	bic.w	r2, r2, #4
 800883a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6999      	ldr	r1, [r3, #24]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	619a      	str	r2, [r3, #24]
      break;
 800884e:	e064      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fb06 	bl	8008e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800886a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800887a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6999      	ldr	r1, [r3, #24]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	021a      	lsls	r2, r3, #8
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	619a      	str	r2, [r3, #24]
      break;
 8008890:	e043      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fb51 	bl	8008f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69da      	ldr	r2, [r3, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0208 	orr.w	r2, r2, #8
 80088ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69da      	ldr	r2, [r3, #28]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0204 	bic.w	r2, r2, #4
 80088bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69d9      	ldr	r1, [r3, #28]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	61da      	str	r2, [r3, #28]
      break;
 80088d0:	e023      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fb9b 	bl	8009014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69d9      	ldr	r1, [r3, #28]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	021a      	lsls	r2, r3, #8
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	61da      	str	r2, [r3, #28]
      break;
 8008912:	e002      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]
      break;
 8008918:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_TIM_ConfigClockSource+0x1c>
 8008944:	2302      	movs	r3, #2
 8008946:	e0b4      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x186>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800896e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008980:	d03e      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0xd4>
 8008982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008986:	f200 8087 	bhi.w	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898e:	f000 8086 	beq.w	8008a9e <HAL_TIM_ConfigClockSource+0x172>
 8008992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008996:	d87f      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 8008998:	2b70      	cmp	r3, #112	@ 0x70
 800899a:	d01a      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0xa6>
 800899c:	2b70      	cmp	r3, #112	@ 0x70
 800899e:	d87b      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b60      	cmp	r3, #96	@ 0x60
 80089a2:	d050      	beq.n	8008a46 <HAL_TIM_ConfigClockSource+0x11a>
 80089a4:	2b60      	cmp	r3, #96	@ 0x60
 80089a6:	d877      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b50      	cmp	r3, #80	@ 0x50
 80089aa:	d03c      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0xfa>
 80089ac:	2b50      	cmp	r3, #80	@ 0x50
 80089ae:	d873      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b40      	cmp	r3, #64	@ 0x40
 80089b2:	d058      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x13a>
 80089b4:	2b40      	cmp	r3, #64	@ 0x40
 80089b6:	d86f      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089b8:	2b30      	cmp	r3, #48	@ 0x30
 80089ba:	d064      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x15a>
 80089bc:	2b30      	cmp	r3, #48	@ 0x30
 80089be:	d86b      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089c0:	2b20      	cmp	r3, #32
 80089c2:	d060      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x15a>
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d867      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d05c      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x15a>
 80089cc:	2b10      	cmp	r3, #16
 80089ce:	d05a      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x15a>
 80089d0:	e062      	b.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089e2:	f000 fbe1 	bl	80091a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	609a      	str	r2, [r3, #8]
      break;
 80089fe:	e04f      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a10:	f000 fbca 	bl	80091a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a22:	609a      	str	r2, [r3, #8]
      break;
 8008a24:	e03c      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a32:	461a      	mov	r2, r3
 8008a34:	f000 fb3e 	bl	80090b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2150      	movs	r1, #80	@ 0x50
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fb97 	bl	8009172 <TIM_ITRx_SetConfig>
      break;
 8008a44:	e02c      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a52:	461a      	mov	r2, r3
 8008a54:	f000 fb5d 	bl	8009112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2160      	movs	r1, #96	@ 0x60
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fb87 	bl	8009172 <TIM_ITRx_SetConfig>
      break;
 8008a64:	e01c      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a72:	461a      	mov	r2, r3
 8008a74:	f000 fb1e 	bl	80090b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2140      	movs	r1, #64	@ 0x40
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fb77 	bl	8009172 <TIM_ITRx_SetConfig>
      break;
 8008a84:	e00c      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f000 fb6e 	bl	8009172 <TIM_ITRx_SetConfig>
      break;
 8008a96:	e003      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9c:	e000      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d107      	bne.n	8008b0a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b08:	e02a      	b.n	8008b60 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d107      	bne.n	8008b24 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2202      	movs	r2, #2
 8008b18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b22:	e01d      	b.n	8008b60 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d107      	bne.n	8008b3e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2204      	movs	r2, #4
 8008b32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b3c:	e010      	b.n	8008b60 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d107      	bne.n	8008b58 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b56:	e003      	b.n	8008b60 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff ffb4 	bl	8008ace <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
}
 8008b6c:	bf00      	nop
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d10b      	bne.n	8008ba4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d136      	bne.n	8008c08 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ba2:	e031      	b.n	8008c08 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d10b      	bne.n	8008bc6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d125      	bne.n	8008c08 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bc4:	e020      	b.n	8008c08 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d10b      	bne.n	8008be8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d114      	bne.n	8008c08 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008be6:	e00f      	b.n	8008c08 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d10a      	bne.n	8008c08 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d103      	bne.n	8008c08 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f7f8 ff21 	bl	8001a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	771a      	strb	r2, [r3, #28]
}
 8008c14:	bf00      	nop
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d103      	bne.n	8008c3c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2201      	movs	r2, #1
 8008c38:	771a      	strb	r2, [r3, #28]
 8008c3a:	e019      	b.n	8008c70 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d103      	bne.n	8008c4e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	771a      	strb	r2, [r3, #28]
 8008c4c:	e010      	b.n	8008c70 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d103      	bne.n	8008c60 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2204      	movs	r2, #4
 8008c5c:	771a      	strb	r2, [r3, #28]
 8008c5e:	e007      	b.n	8008c70 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d102      	bne.n	8008c70 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f7ff ff22 	bl	8008aba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	771a      	strb	r2, [r3, #28]
}
 8008c7c:	bf00      	nop
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a3a      	ldr	r2, [pc, #232]	@ (8008d80 <TIM_Base_SetConfig+0xfc>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00f      	beq.n	8008cbc <TIM_Base_SetConfig+0x38>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ca2:	d00b      	beq.n	8008cbc <TIM_Base_SetConfig+0x38>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a37      	ldr	r2, [pc, #220]	@ (8008d84 <TIM_Base_SetConfig+0x100>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d007      	beq.n	8008cbc <TIM_Base_SetConfig+0x38>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a36      	ldr	r2, [pc, #216]	@ (8008d88 <TIM_Base_SetConfig+0x104>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_Base_SetConfig+0x38>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a35      	ldr	r2, [pc, #212]	@ (8008d8c <TIM_Base_SetConfig+0x108>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d108      	bne.n	8008cce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8008d80 <TIM_Base_SetConfig+0xfc>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d01b      	beq.n	8008d0e <TIM_Base_SetConfig+0x8a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cdc:	d017      	beq.n	8008d0e <TIM_Base_SetConfig+0x8a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a28      	ldr	r2, [pc, #160]	@ (8008d84 <TIM_Base_SetConfig+0x100>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d013      	beq.n	8008d0e <TIM_Base_SetConfig+0x8a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a27      	ldr	r2, [pc, #156]	@ (8008d88 <TIM_Base_SetConfig+0x104>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00f      	beq.n	8008d0e <TIM_Base_SetConfig+0x8a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a26      	ldr	r2, [pc, #152]	@ (8008d8c <TIM_Base_SetConfig+0x108>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00b      	beq.n	8008d0e <TIM_Base_SetConfig+0x8a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a25      	ldr	r2, [pc, #148]	@ (8008d90 <TIM_Base_SetConfig+0x10c>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d007      	beq.n	8008d0e <TIM_Base_SetConfig+0x8a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a24      	ldr	r2, [pc, #144]	@ (8008d94 <TIM_Base_SetConfig+0x110>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d003      	beq.n	8008d0e <TIM_Base_SetConfig+0x8a>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a23      	ldr	r2, [pc, #140]	@ (8008d98 <TIM_Base_SetConfig+0x114>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d108      	bne.n	8008d20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	689a      	ldr	r2, [r3, #8]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a0e      	ldr	r2, [pc, #56]	@ (8008d80 <TIM_Base_SetConfig+0xfc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d103      	bne.n	8008d54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	691a      	ldr	r2, [r3, #16]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d105      	bne.n	8008d72 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	f023 0201 	bic.w	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	611a      	str	r2, [r3, #16]
  }
}
 8008d72:	bf00      	nop
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	40010000 	.word	0x40010000
 8008d84:	40000400 	.word	0x40000400
 8008d88:	40000800 	.word	0x40000800
 8008d8c:	40000c00 	.word	0x40000c00
 8008d90:	40014000 	.word	0x40014000
 8008d94:	40014400 	.word	0x40014400
 8008d98:	40014800 	.word	0x40014800

08008d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	f023 0201 	bic.w	r2, r3, #1
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0303 	bic.w	r3, r3, #3
 8008dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f023 0302 	bic.w	r3, r3, #2
 8008de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e64 <TIM_OC1_SetConfig+0xc8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d10c      	bne.n	8008e12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f023 0308 	bic.w	r3, r3, #8
 8008dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f023 0304 	bic.w	r3, r3, #4
 8008e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a13      	ldr	r2, [pc, #76]	@ (8008e64 <TIM_OC1_SetConfig+0xc8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d111      	bne.n	8008e3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	621a      	str	r2, [r3, #32]
}
 8008e58:	bf00      	nop
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	40010000 	.word	0x40010000

08008e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	f023 0210 	bic.w	r2, r3, #16
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f023 0320 	bic.w	r3, r3, #32
 8008eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f3c <TIM_OC2_SetConfig+0xd4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d10d      	bne.n	8008ee4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a15      	ldr	r2, [pc, #84]	@ (8008f3c <TIM_OC2_SetConfig+0xd4>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d113      	bne.n	8008f14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	621a      	str	r2, [r3, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40010000 	.word	0x40010000

08008f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	021b      	lsls	r3, r3, #8
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a1d      	ldr	r2, [pc, #116]	@ (8009010 <TIM_OC3_SetConfig+0xd0>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d10d      	bne.n	8008fba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	021b      	lsls	r3, r3, #8
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a14      	ldr	r2, [pc, #80]	@ (8009010 <TIM_OC3_SetConfig+0xd0>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d113      	bne.n	8008fea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	621a      	str	r2, [r3, #32]
}
 8009004:	bf00      	nop
 8009006:	371c      	adds	r7, #28
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	40010000 	.word	0x40010000

08009014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800904a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800905e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	031b      	lsls	r3, r3, #12
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	4313      	orrs	r3, r2
 800906a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a10      	ldr	r2, [pc, #64]	@ (80090b0 <TIM_OC4_SetConfig+0x9c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d109      	bne.n	8009088 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800907a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	019b      	lsls	r3, r3, #6
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	4313      	orrs	r3, r2
 8009086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	621a      	str	r2, [r3, #32]
}
 80090a2:	bf00      	nop
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40010000 	.word	0x40010000

080090b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	f023 0201 	bic.w	r2, r3, #1
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f023 030a 	bic.w	r3, r3, #10
 80090f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	621a      	str	r2, [r3, #32]
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009112:	b480      	push	{r7}
 8009114:	b087      	sub	sp, #28
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	f023 0210 	bic.w	r2, r3, #16
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800913c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	031b      	lsls	r3, r3, #12
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800914e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	621a      	str	r2, [r3, #32]
}
 8009166:	bf00      	nop
 8009168:	371c      	adds	r7, #28
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	f043 0307 	orr.w	r3, r3, #7
 8009194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	609a      	str	r2, [r3, #8]
}
 800919c:	bf00      	nop
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	021a      	lsls	r2, r3, #8
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	431a      	orrs	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	609a      	str	r2, [r3, #8]
}
 80091dc:	bf00      	nop
 80091de:	371c      	adds	r7, #28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f003 031f 	and.w	r3, r3, #31
 80091fa:	2201      	movs	r2, #1
 80091fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a1a      	ldr	r2, [r3, #32]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	43db      	mvns	r3, r3
 800920a:	401a      	ands	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a1a      	ldr	r2, [r3, #32]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f003 031f 	and.w	r3, r3, #31
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	fa01 f303 	lsl.w	r3, r1, r3
 8009220:	431a      	orrs	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	621a      	str	r2, [r3, #32]
}
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
	...

08009234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009244:	2b01      	cmp	r3, #1
 8009246:	d101      	bne.n	800924c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009248:	2302      	movs	r3, #2
 800924a:	e050      	b.n	80092ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2202      	movs	r2, #2
 8009258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a1c      	ldr	r2, [pc, #112]	@ (80092fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d018      	beq.n	80092c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009298:	d013      	beq.n	80092c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a18      	ldr	r2, [pc, #96]	@ (8009300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00e      	beq.n	80092c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a16      	ldr	r2, [pc, #88]	@ (8009304 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d009      	beq.n	80092c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a15      	ldr	r2, [pc, #84]	@ (8009308 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d004      	beq.n	80092c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a13      	ldr	r2, [pc, #76]	@ (800930c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d10c      	bne.n	80092dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40010000 	.word	0x40010000
 8009300:	40000400 	.word	0x40000400
 8009304:	40000800 	.word	0x40000800
 8009308:	40000c00 	.word	0x40000c00
 800930c:	40014000 	.word	0x40014000

08009310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009310:	b084      	sub	sp, #16
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	f107 001c 	add.w	r0, r7, #28
 800931e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009322:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009326:	2b01      	cmp	r3, #1
 8009328:	d123      	bne.n	8009372 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800933e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009352:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009356:	2b01      	cmp	r3, #1
 8009358:	d105      	bne.n	8009366 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 fae8 	bl	800a93c <USB_CoreReset>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]
 8009370:	e01b      	b.n	80093aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 fadc 	bl	800a93c <USB_CoreReset>
 8009384:	4603      	mov	r3, r0
 8009386:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009388:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800938c:	2b00      	cmp	r3, #0
 800938e:	d106      	bne.n	800939e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009394:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	639a      	str	r2, [r3, #56]	@ 0x38
 800939c:	e005      	b.n	80093aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80093aa:	7fbb      	ldrb	r3, [r7, #30]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d10b      	bne.n	80093c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f043 0206 	orr.w	r2, r3, #6
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f043 0220 	orr.w	r2, r3, #32
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093d4:	b004      	add	sp, #16
 80093d6:	4770      	bx	lr

080093d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d165      	bne.n	80094b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4a41      	ldr	r2, [pc, #260]	@ (80094f4 <USB_SetTurnaroundTime+0x11c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d906      	bls.n	8009402 <USB_SetTurnaroundTime+0x2a>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4a40      	ldr	r2, [pc, #256]	@ (80094f8 <USB_SetTurnaroundTime+0x120>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d202      	bcs.n	8009402 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80093fc:	230f      	movs	r3, #15
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	e062      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4a3c      	ldr	r2, [pc, #240]	@ (80094f8 <USB_SetTurnaroundTime+0x120>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d306      	bcc.n	8009418 <USB_SetTurnaroundTime+0x40>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4a3b      	ldr	r2, [pc, #236]	@ (80094fc <USB_SetTurnaroundTime+0x124>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d202      	bcs.n	8009418 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009412:	230e      	movs	r3, #14
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e057      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4a38      	ldr	r2, [pc, #224]	@ (80094fc <USB_SetTurnaroundTime+0x124>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d306      	bcc.n	800942e <USB_SetTurnaroundTime+0x56>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4a37      	ldr	r2, [pc, #220]	@ (8009500 <USB_SetTurnaroundTime+0x128>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d202      	bcs.n	800942e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009428:	230d      	movs	r3, #13
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	e04c      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	4a33      	ldr	r2, [pc, #204]	@ (8009500 <USB_SetTurnaroundTime+0x128>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d306      	bcc.n	8009444 <USB_SetTurnaroundTime+0x6c>
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	4a32      	ldr	r2, [pc, #200]	@ (8009504 <USB_SetTurnaroundTime+0x12c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d802      	bhi.n	8009444 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800943e:	230c      	movs	r3, #12
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	e041      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	4a2f      	ldr	r2, [pc, #188]	@ (8009504 <USB_SetTurnaroundTime+0x12c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d906      	bls.n	800945a <USB_SetTurnaroundTime+0x82>
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4a2e      	ldr	r2, [pc, #184]	@ (8009508 <USB_SetTurnaroundTime+0x130>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d802      	bhi.n	800945a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009454:	230b      	movs	r3, #11
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e036      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	4a2a      	ldr	r2, [pc, #168]	@ (8009508 <USB_SetTurnaroundTime+0x130>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d906      	bls.n	8009470 <USB_SetTurnaroundTime+0x98>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	4a29      	ldr	r2, [pc, #164]	@ (800950c <USB_SetTurnaroundTime+0x134>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d802      	bhi.n	8009470 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800946a:	230a      	movs	r3, #10
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	e02b      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	4a26      	ldr	r2, [pc, #152]	@ (800950c <USB_SetTurnaroundTime+0x134>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d906      	bls.n	8009486 <USB_SetTurnaroundTime+0xae>
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	4a25      	ldr	r2, [pc, #148]	@ (8009510 <USB_SetTurnaroundTime+0x138>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d202      	bcs.n	8009486 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009480:	2309      	movs	r3, #9
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	e020      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	4a21      	ldr	r2, [pc, #132]	@ (8009510 <USB_SetTurnaroundTime+0x138>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d306      	bcc.n	800949c <USB_SetTurnaroundTime+0xc4>
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	4a20      	ldr	r2, [pc, #128]	@ (8009514 <USB_SetTurnaroundTime+0x13c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d802      	bhi.n	800949c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009496:	2308      	movs	r3, #8
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	e015      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	4a1d      	ldr	r2, [pc, #116]	@ (8009514 <USB_SetTurnaroundTime+0x13c>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d906      	bls.n	80094b2 <USB_SetTurnaroundTime+0xda>
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009518 <USB_SetTurnaroundTime+0x140>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d202      	bcs.n	80094b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80094ac:	2307      	movs	r3, #7
 80094ae:	617b      	str	r3, [r7, #20]
 80094b0:	e00a      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80094b2:	2306      	movs	r3, #6
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	e007      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d102      	bne.n	80094c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80094be:	2309      	movs	r3, #9
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	e001      	b.n	80094c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80094c4:	2309      	movs	r3, #9
 80094c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	029b      	lsls	r3, r3, #10
 80094dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80094e0:	431a      	orrs	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	371c      	adds	r7, #28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	00d8acbf 	.word	0x00d8acbf
 80094f8:	00e4e1c0 	.word	0x00e4e1c0
 80094fc:	00f42400 	.word	0x00f42400
 8009500:	01067380 	.word	0x01067380
 8009504:	011a499f 	.word	0x011a499f
 8009508:	01312cff 	.word	0x01312cff
 800950c:	014ca43f 	.word	0x014ca43f
 8009510:	016e3600 	.word	0x016e3600
 8009514:	01a6ab1f 	.word	0x01a6ab1f
 8009518:	01e84800 	.word	0x01e84800

0800951c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f043 0201 	orr.w	r2, r3, #1
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f023 0201 	bic.w	r2, r3, #1
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d115      	bne.n	80095ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800958e:	200a      	movs	r0, #10
 8009590:	f7fb f9d2 	bl	8004938 <HAL_Delay>
      ms += 10U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	330a      	adds	r3, #10
 8009598:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 f93f 	bl	800a81e <USB_GetMode>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d01e      	beq.n	80095e4 <USB_SetCurrentMode+0x84>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80095aa:	d9f0      	bls.n	800958e <USB_SetCurrentMode+0x2e>
 80095ac:	e01a      	b.n	80095e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d115      	bne.n	80095e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80095c0:	200a      	movs	r0, #10
 80095c2:	f7fb f9b9 	bl	8004938 <HAL_Delay>
      ms += 10U;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	330a      	adds	r3, #10
 80095ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 f926 	bl	800a81e <USB_GetMode>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <USB_SetCurrentMode+0x84>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2bc7      	cmp	r3, #199	@ 0xc7
 80095dc:	d9f0      	bls.n	80095c0 <USB_SetCurrentMode+0x60>
 80095de:	e001      	b.n	80095e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e005      	b.n	80095f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80095e8:	d101      	bne.n	80095ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095f8:	b084      	sub	sp, #16
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b086      	sub	sp, #24
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009612:	2300      	movs	r3, #0
 8009614:	613b      	str	r3, [r7, #16]
 8009616:	e009      	b.n	800962c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	3340      	adds	r3, #64	@ 0x40
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	2200      	movs	r2, #0
 8009624:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	3301      	adds	r3, #1
 800962a:	613b      	str	r3, [r7, #16]
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b0e      	cmp	r3, #14
 8009630:	d9f2      	bls.n	8009618 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009632:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009636:	2b00      	cmp	r3, #0
 8009638:	d11c      	bne.n	8009674 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009648:	f043 0302 	orr.w	r3, r3, #2
 800964c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009652:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	639a      	str	r2, [r3, #56]	@ 0x38
 8009672:	e00b      	b.n	800968c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009678:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009684:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009692:	461a      	mov	r2, r3
 8009694:	2300      	movs	r3, #0
 8009696:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009698:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800969c:	2b01      	cmp	r3, #1
 800969e:	d10d      	bne.n	80096bc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f968 	bl	8009980 <USB_SetDevSpeed>
 80096b0:	e008      	b.n	80096c4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096b2:	2101      	movs	r1, #1
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f963 	bl	8009980 <USB_SetDevSpeed>
 80096ba:	e003      	b.n	80096c4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096bc:	2103      	movs	r1, #3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f95e 	bl	8009980 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096c4:	2110      	movs	r1, #16
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f8fa 	bl	80098c0 <USB_FlushTxFifo>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f924 	bl	8009924 <USB_FlushRxFifo>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ec:	461a      	mov	r2, r3
 80096ee:	2300      	movs	r3, #0
 80096f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096f8:	461a      	mov	r2, r3
 80096fa:	2300      	movs	r3, #0
 80096fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009704:	461a      	mov	r2, r3
 8009706:	2300      	movs	r3, #0
 8009708:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800970a:	2300      	movs	r3, #0
 800970c:	613b      	str	r3, [r7, #16]
 800970e:	e043      	b.n	8009798 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009726:	d118      	bne.n	800975a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800973a:	461a      	mov	r2, r3
 800973c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	e013      	b.n	800976c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009750:	461a      	mov	r2, r3
 8009752:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	e008      	b.n	800976c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009766:	461a      	mov	r2, r3
 8009768:	2300      	movs	r3, #0
 800976a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009778:	461a      	mov	r2, r3
 800977a:	2300      	movs	r3, #0
 800977c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800978a:	461a      	mov	r2, r3
 800978c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009790:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	3301      	adds	r3, #1
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800979c:	461a      	mov	r2, r3
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d3b5      	bcc.n	8009710 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097a4:	2300      	movs	r3, #0
 80097a6:	613b      	str	r3, [r7, #16]
 80097a8:	e043      	b.n	8009832 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	015a      	lsls	r2, r3, #5
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097c0:	d118      	bne.n	80097f4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d4:	461a      	mov	r2, r3
 80097d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	e013      	b.n	8009806 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ea:	461a      	mov	r2, r3
 80097ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e008      	b.n	8009806 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009800:	461a      	mov	r2, r3
 8009802:	2300      	movs	r3, #0
 8009804:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009812:	461a      	mov	r2, r3
 8009814:	2300      	movs	r3, #0
 8009816:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009824:	461a      	mov	r2, r3
 8009826:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800982a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	3301      	adds	r3, #1
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009836:	461a      	mov	r2, r3
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	4293      	cmp	r3, r2
 800983c:	d3b5      	bcc.n	80097aa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800984c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009850:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800985e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009860:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009864:	2b00      	cmp	r3, #0
 8009866:	d105      	bne.n	8009874 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	f043 0210 	orr.w	r2, r3, #16
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699a      	ldr	r2, [r3, #24]
 8009878:	4b10      	ldr	r3, [pc, #64]	@ (80098bc <USB_DevInit+0x2c4>)
 800987a:	4313      	orrs	r3, r2
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009880:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	f043 0208 	orr.w	r2, r3, #8
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009894:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009898:	2b01      	cmp	r3, #1
 800989a:	d107      	bne.n	80098ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098a4:	f043 0304 	orr.w	r3, r3, #4
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098b8:	b004      	add	sp, #16
 80098ba:	4770      	bx	lr
 80098bc:	803c3800 	.word	0x803c3800

080098c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098da:	d901      	bls.n	80098e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e01b      	b.n	8009918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	daf2      	bge.n	80098ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	019b      	lsls	r3, r3, #6
 80098f0:	f043 0220 	orr.w	r2, r3, #32
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3301      	adds	r3, #1
 80098fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009904:	d901      	bls.n	800990a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e006      	b.n	8009918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b20      	cmp	r3, #32
 8009914:	d0f0      	beq.n	80098f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3301      	adds	r3, #1
 8009934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800993c:	d901      	bls.n	8009942 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e018      	b.n	8009974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	daf2      	bge.n	8009930 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2210      	movs	r2, #16
 8009952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009960:	d901      	bls.n	8009966 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e006      	b.n	8009974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	f003 0310 	and.w	r3, r3, #16
 800996e:	2b10      	cmp	r3, #16
 8009970:	d0f0      	beq.n	8009954 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	68f9      	ldr	r1, [r7, #12]
 800999c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099a0:	4313      	orrs	r3, r2
 80099a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b087      	sub	sp, #28
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	f003 0306 	and.w	r3, r3, #6
 80099ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d102      	bne.n	80099d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]
 80099d6:	e00a      	b.n	80099ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d002      	beq.n	80099e4 <USB_GetDevSpeed+0x32>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b06      	cmp	r3, #6
 80099e2:	d102      	bne.n	80099ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80099e4:	2302      	movs	r3, #2
 80099e6:	75fb      	strb	r3, [r7, #23]
 80099e8:	e001      	b.n	80099ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80099ea:	230f      	movs	r3, #15
 80099ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	371c      	adds	r7, #28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d13a      	bne.n	8009a8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	f003 030f 	and.w	r3, r3, #15
 8009a28:	2101      	movs	r1, #1
 8009a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	68f9      	ldr	r1, [r7, #12]
 8009a32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a36:	4313      	orrs	r3, r2
 8009a38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d155      	bne.n	8009afc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	791b      	ldrb	r3, [r3, #4]
 8009a6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	059b      	lsls	r3, r3, #22
 8009a72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a74:	4313      	orrs	r3, r2
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	0151      	lsls	r1, r2, #5
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	440a      	add	r2, r1
 8009a7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	e036      	b.n	8009afc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a94:	69da      	ldr	r2, [r3, #28]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	f003 030f 	and.w	r3, r3, #15
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa4:	041b      	lsls	r3, r3, #16
 8009aa6:	68f9      	ldr	r1, [r7, #12]
 8009aa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009aac:	4313      	orrs	r3, r2
 8009aae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d11a      	bne.n	8009afc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	791b      	ldrb	r3, [r3, #4]
 8009ae0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	0151      	lsls	r1, r2, #5
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	440a      	add	r2, r1
 8009aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009afa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
	...

08009b0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	785b      	ldrb	r3, [r3, #1]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d161      	bne.n	8009bec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b3e:	d11f      	bne.n	8009b80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	0151      	lsls	r1, r2, #5
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	440a      	add	r2, r1
 8009b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	0151      	lsls	r1, r2, #5
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	440a      	add	r2, r1
 8009b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	2101      	movs	r1, #1
 8009b92:	fa01 f303 	lsl.w	r3, r1, r3
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	68f9      	ldr	r1, [r7, #12]
 8009b9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009baa:	69da      	ldr	r2, [r3, #28]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	68f9      	ldr	r1, [r7, #12]
 8009bc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	0159      	lsls	r1, r3, #5
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	440b      	add	r3, r1
 8009bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009be2:	4619      	mov	r1, r3
 8009be4:	4b35      	ldr	r3, [pc, #212]	@ (8009cbc <USB_DeactivateEndpoint+0x1b0>)
 8009be6:	4013      	ands	r3, r2
 8009be8:	600b      	str	r3, [r1, #0]
 8009bea:	e060      	b.n	8009cae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c02:	d11f      	bne.n	8009c44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	0151      	lsls	r1, r2, #5
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	440a      	add	r2, r1
 8009c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 030f 	and.w	r3, r3, #15
 8009c54:	2101      	movs	r1, #1
 8009c56:	fa01 f303 	lsl.w	r3, r1, r3
 8009c5a:	041b      	lsls	r3, r3, #16
 8009c5c:	43db      	mvns	r3, r3
 8009c5e:	68f9      	ldr	r1, [r7, #12]
 8009c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c64:	4013      	ands	r3, r2
 8009c66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c6e:	69da      	ldr	r2, [r3, #28]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 030f 	and.w	r3, r3, #15
 8009c78:	2101      	movs	r1, #1
 8009c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	43db      	mvns	r3, r3
 8009c82:	68f9      	ldr	r1, [r7, #12]
 8009c84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c88:	4013      	ands	r3, r2
 8009c8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	0159      	lsls	r1, r3, #5
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	440b      	add	r3, r1
 8009ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <USB_DeactivateEndpoint+0x1b4>)
 8009caa:	4013      	ands	r3, r2
 8009cac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	ec337800 	.word	0xec337800
 8009cc0:	eff37800 	.word	0xeff37800

08009cc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08a      	sub	sp, #40	@ 0x28
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	785b      	ldrb	r3, [r3, #1]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	f040 817f 	bne.w	8009fe4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d132      	bne.n	8009d54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	69ba      	ldr	r2, [r7, #24]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d08:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009d0c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009d10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	0151      	lsls	r1, r2, #5
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	440a      	add	r2, r1
 8009d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	0151      	lsls	r1, r2, #5
 8009d44:	69fa      	ldr	r2, [r7, #28]
 8009d46:	440a      	add	r2, r1
 8009d48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d4c:	0cdb      	lsrs	r3, r3, #19
 8009d4e:	04db      	lsls	r3, r3, #19
 8009d50:	6113      	str	r3, [r2, #16]
 8009d52:	e097      	b.n	8009e84 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	0151      	lsls	r1, r2, #5
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	440a      	add	r2, r1
 8009d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d6e:	0cdb      	lsrs	r3, r3, #19
 8009d70:	04db      	lsls	r3, r3, #19
 8009d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	0151      	lsls	r1, r2, #5
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	440a      	add	r2, r1
 8009d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d8e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009d92:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009d96:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d11a      	bne.n	8009dd4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	691a      	ldr	r2, [r3, #16]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d903      	bls.n	8009db2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	689a      	ldr	r2, [r3, #8]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	69ba      	ldr	r2, [r7, #24]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	69fa      	ldr	r2, [r7, #28]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dd0:	6113      	str	r3, [r2, #16]
 8009dd2:	e044      	b.n	8009e5e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	691a      	ldr	r2, [r3, #16]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	1e5a      	subs	r2, r3, #1
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	8afb      	ldrh	r3, [r7, #22]
 8009dfa:	04d9      	lsls	r1, r3, #19
 8009dfc:	4ba4      	ldr	r3, [pc, #656]	@ (800a090 <USB_EPStartXfer+0x3cc>)
 8009dfe:	400b      	ands	r3, r1
 8009e00:	69b9      	ldr	r1, [r7, #24]
 8009e02:	0148      	lsls	r0, r1, #5
 8009e04:	69f9      	ldr	r1, [r7, #28]
 8009e06:	4401      	add	r1, r0
 8009e08:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	791b      	ldrb	r3, [r3, #4]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d122      	bne.n	8009e5e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	69ba      	ldr	r2, [r7, #24]
 8009e28:	0151      	lsls	r1, r2, #5
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	440a      	add	r2, r1
 8009e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e32:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009e36:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e44:	691a      	ldr	r2, [r3, #16]
 8009e46:	8afb      	ldrh	r3, [r7, #22]
 8009e48:	075b      	lsls	r3, r3, #29
 8009e4a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009e4e:	69b9      	ldr	r1, [r7, #24]
 8009e50:	0148      	lsls	r0, r1, #5
 8009e52:	69f9      	ldr	r1, [r7, #28]
 8009e54:	4401      	add	r1, r0
 8009e56:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e74:	69b9      	ldr	r1, [r7, #24]
 8009e76:	0148      	lsls	r0, r1, #5
 8009e78:	69f9      	ldr	r1, [r7, #28]
 8009e7a:	4401      	add	r1, r0
 8009e7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009e80:	4313      	orrs	r3, r2
 8009e82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d14b      	bne.n	8009f22 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d009      	beq.n	8009ea6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	791b      	ldrb	r3, [r3, #4]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d128      	bne.n	8009f00 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d110      	bne.n	8009ee0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	0151      	lsls	r1, r2, #5
 8009ed0:	69fa      	ldr	r2, [r7, #28]
 8009ed2:	440a      	add	r2, r1
 8009ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ed8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	e00f      	b.n	8009f00 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	0151      	lsls	r1, r2, #5
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	440a      	add	r2, r1
 8009ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009efe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	0151      	lsls	r1, r2, #5
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	440a      	add	r2, r1
 8009f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	e166      	b.n	800a1f0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	0151      	lsls	r1, r2, #5
 8009f34:	69fa      	ldr	r2, [r7, #28]
 8009f36:	440a      	add	r2, r1
 8009f38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009f40:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	791b      	ldrb	r3, [r3, #4]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d015      	beq.n	8009f76 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 814e 	beq.w	800a1f0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	2101      	movs	r1, #1
 8009f66:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6a:	69f9      	ldr	r1, [r7, #28]
 8009f6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f70:	4313      	orrs	r3, r2
 8009f72:	634b      	str	r3, [r1, #52]	@ 0x34
 8009f74:	e13c      	b.n	800a1f0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d110      	bne.n	8009fa8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	e00f      	b.n	8009fc8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	0151      	lsls	r1, r2, #5
 8009fba:	69fa      	ldr	r2, [r7, #28]
 8009fbc:	440a      	add	r2, r1
 8009fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fc6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	68d9      	ldr	r1, [r3, #12]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	781a      	ldrb	r2, [r3, #0]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	b298      	uxth	r0, r3
 8009fd6:	79fb      	ldrb	r3, [r7, #7]
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	4603      	mov	r3, r0
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 f9b9 	bl	800a354 <USB_WritePacket>
 8009fe2:	e105      	b.n	800a1f0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	69ba      	ldr	r2, [r7, #24]
 8009ff4:	0151      	lsls	r1, r2, #5
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	440a      	add	r2, r1
 8009ffa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ffe:	0cdb      	lsrs	r3, r3, #19
 800a000:	04db      	lsls	r3, r3, #19
 800a002:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	69ba      	ldr	r2, [r7, #24]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a01e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a022:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a026:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d132      	bne.n	800a094 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	689a      	ldr	r2, [r3, #8]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a052:	691a      	ldr	r2, [r3, #16]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a05c:	69b9      	ldr	r1, [r7, #24]
 800a05e:	0148      	lsls	r0, r1, #5
 800a060:	69f9      	ldr	r1, [r7, #28]
 800a062:	4401      	add	r1, r0
 800a064:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a068:	4313      	orrs	r3, r2
 800a06a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	0151      	lsls	r1, r2, #5
 800a07e:	69fa      	ldr	r2, [r7, #28]
 800a080:	440a      	add	r2, r1
 800a082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a086:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a08a:	6113      	str	r3, [r2, #16]
 800a08c:	e062      	b.n	800a154 <USB_EPStartXfer+0x490>
 800a08e:	bf00      	nop
 800a090:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d123      	bne.n	800a0e4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0b2:	69b9      	ldr	r1, [r7, #24]
 800a0b4:	0148      	lsls	r0, r1, #5
 800a0b6:	69f9      	ldr	r1, [r7, #28]
 800a0b8:	4401      	add	r1, r0
 800a0ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	0151      	lsls	r1, r2, #5
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	440a      	add	r2, r1
 800a0d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0e0:	6113      	str	r3, [r2, #16]
 800a0e2:	e037      	b.n	800a154 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	691a      	ldr	r2, [r3, #16]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	1e5a      	subs	r2, r3, #1
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	8afa      	ldrh	r2, [r7, #22]
 800a100:	fb03 f202 	mul.w	r2, r3, r2
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a114:	691a      	ldr	r2, [r3, #16]
 800a116:	8afb      	ldrh	r3, [r7, #22]
 800a118:	04d9      	lsls	r1, r3, #19
 800a11a:	4b38      	ldr	r3, [pc, #224]	@ (800a1fc <USB_EPStartXfer+0x538>)
 800a11c:	400b      	ands	r3, r1
 800a11e:	69b9      	ldr	r1, [r7, #24]
 800a120:	0148      	lsls	r0, r1, #5
 800a122:	69f9      	ldr	r1, [r7, #28]
 800a124:	4401      	add	r1, r0
 800a126:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a12a:	4313      	orrs	r3, r2
 800a12c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13a:	691a      	ldr	r2, [r3, #16]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a144:	69b9      	ldr	r1, [r7, #24]
 800a146:	0148      	lsls	r0, r1, #5
 800a148:	69f9      	ldr	r1, [r7, #28]
 800a14a:	4401      	add	r1, r0
 800a14c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a150:	4313      	orrs	r3, r2
 800a152:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d10d      	bne.n	800a176 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	68d9      	ldr	r1, [r3, #12]
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a172:	460a      	mov	r2, r1
 800a174:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d128      	bne.n	800a1d0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d110      	bne.n	800a1b0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	69fa      	ldr	r2, [r7, #28]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	e00f      	b.n	800a1d0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	0151      	lsls	r1, r2, #5
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	440a      	add	r2, r1
 800a1e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a1ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3720      	adds	r7, #32
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	1ff80000 	.word	0x1ff80000

0800a200 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d14a      	bne.n	800a2b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a236:	f040 8086 	bne.w	800a346 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	7812      	ldrb	r2, [r2, #0]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a258:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a25c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	4413      	add	r3, r2
 800a268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	7812      	ldrb	r2, [r2, #0]
 800a272:	0151      	lsls	r1, r2, #5
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	440a      	add	r2, r1
 800a278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a27c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a280:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	3301      	adds	r3, #1
 800a286:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a28e:	4293      	cmp	r3, r2
 800a290:	d902      	bls.n	800a298 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	75fb      	strb	r3, [r7, #23]
          break;
 800a296:	e056      	b.n	800a346 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	015a      	lsls	r2, r3, #5
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2b0:	d0e7      	beq.n	800a282 <USB_EPStopXfer+0x82>
 800a2b2:	e048      	b.n	800a346 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2cc:	d13b      	bne.n	800a346 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	7812      	ldrb	r2, [r2, #0]
 800a2e2:	0151      	lsls	r1, r2, #5
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	440a      	add	r2, r1
 800a2e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a2f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	7812      	ldrb	r2, [r2, #0]
 800a306:	0151      	lsls	r1, r2, #5
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	440a      	add	r2, r1
 800a30c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a310:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a314:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3301      	adds	r3, #1
 800a31a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a322:	4293      	cmp	r3, r2
 800a324:	d902      	bls.n	800a32c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	75fb      	strb	r3, [r7, #23]
          break;
 800a32a:	e00c      	b.n	800a346 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a344:	d0e7      	beq.n	800a316 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a346:	7dfb      	ldrb	r3, [r7, #23]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	371c      	adds	r7, #28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a354:	b480      	push	{r7}
 800a356:	b089      	sub	sp, #36	@ 0x24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	4611      	mov	r1, r2
 800a360:	461a      	mov	r2, r3
 800a362:	460b      	mov	r3, r1
 800a364:	71fb      	strb	r3, [r7, #7]
 800a366:	4613      	mov	r3, r2
 800a368:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a372:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a376:	2b00      	cmp	r3, #0
 800a378:	d123      	bne.n	800a3c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a37a:	88bb      	ldrh	r3, [r7, #4]
 800a37c:	3303      	adds	r3, #3
 800a37e:	089b      	lsrs	r3, r3, #2
 800a380:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a382:	2300      	movs	r3, #0
 800a384:	61bb      	str	r3, [r7, #24]
 800a386:	e018      	b.n	800a3ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	031a      	lsls	r2, r3, #12
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a394:	461a      	mov	r2, r3
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	61bb      	str	r3, [r7, #24]
 800a3ba:	69ba      	ldr	r2, [r7, #24]
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d3e2      	bcc.n	800a388 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3724      	adds	r7, #36	@ 0x24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b08b      	sub	sp, #44	@ 0x2c
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	089b      	lsrs	r3, r3, #2
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a3ee:	88fb      	ldrh	r3, [r7, #6]
 800a3f0:	f003 0303 	and.w	r3, r3, #3
 800a3f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	623b      	str	r3, [r7, #32]
 800a3fa:	e014      	b.n	800a426 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a406:	601a      	str	r2, [r3, #0]
    pDest++;
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	3301      	adds	r3, #1
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a410:	3301      	adds	r3, #1
 800a412:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	3301      	adds	r3, #1
 800a418:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41c:	3301      	adds	r3, #1
 800a41e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	3301      	adds	r3, #1
 800a424:	623b      	str	r3, [r7, #32]
 800a426:	6a3a      	ldr	r2, [r7, #32]
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d3e6      	bcc.n	800a3fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a42e:	8bfb      	ldrh	r3, [r7, #30]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d01e      	beq.n	800a472 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a43e:	461a      	mov	r2, r3
 800a440:	f107 0310 	add.w	r3, r7, #16
 800a444:	6812      	ldr	r2, [r2, #0]
 800a446:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	fa22 f303 	lsr.w	r3, r2, r3
 800a454:	b2da      	uxtb	r2, r3
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	701a      	strb	r2, [r3, #0]
      i++;
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	3301      	adds	r3, #1
 800a45e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	3301      	adds	r3, #1
 800a464:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a466:	8bfb      	ldrh	r3, [r7, #30]
 800a468:	3b01      	subs	r3, #1
 800a46a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a46c:	8bfb      	ldrh	r3, [r7, #30]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1ea      	bne.n	800a448 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a474:	4618      	mov	r0, r3
 800a476:	372c      	adds	r7, #44	@ 0x2c
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	785b      	ldrb	r3, [r3, #1]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d12c      	bne.n	800a4f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	db12      	blt.n	800a4d4 <USB_EPSetStall+0x54>
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00f      	beq.n	800a4d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	0151      	lsls	r1, r2, #5
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	440a      	add	r2, r1
 800a4ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a4d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	0151      	lsls	r1, r2, #5
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	440a      	add	r2, r1
 800a4ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	e02b      	b.n	800a54e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	db12      	blt.n	800a52e <USB_EPSetStall+0xae>
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00f      	beq.n	800a52e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	0151      	lsls	r1, r2, #5
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	440a      	add	r2, r1
 800a524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a528:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a52c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	0151      	lsls	r1, r2, #5
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	440a      	add	r2, r1
 800a544:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a548:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a54c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	785b      	ldrb	r3, [r3, #1]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d128      	bne.n	800a5ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	015a      	lsls	r2, r3, #5
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4413      	add	r3, r2
 800a580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	0151      	lsls	r1, r2, #5
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	440a      	add	r2, r1
 800a58e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a592:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a596:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	791b      	ldrb	r3, [r3, #4]
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d003      	beq.n	800a5a8 <USB_EPClearStall+0x4c>
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	791b      	ldrb	r3, [r3, #4]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d138      	bne.n	800a61a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	e027      	b.n	800a61a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	0151      	lsls	r1, r2, #5
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	440a      	add	r2, r1
 800a5e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a5e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	791b      	ldrb	r3, [r3, #4]
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d003      	beq.n	800a5fa <USB_EPClearStall+0x9e>
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	791b      	ldrb	r3, [r3, #4]
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d10f      	bne.n	800a61a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	0151      	lsls	r1, r2, #5
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	440a      	add	r2, r1
 800a610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a618:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a646:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a64a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	78fb      	ldrb	r3, [r7, #3]
 800a656:	011b      	lsls	r3, r3, #4
 800a658:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a65c:	68f9      	ldr	r1, [r7, #12]
 800a65e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a662:	4313      	orrs	r3, r2
 800a664:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6a2:	f023 0302 	bic.w	r3, r3, #2
 800a6a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b085      	sub	sp, #20
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a6d0:	f023 0303 	bic.w	r3, r3, #3
 800a6d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6e4:	f043 0302 	orr.w	r3, r3, #2
 800a6e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	4013      	ands	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a710:	68fb      	ldr	r3, [r7, #12]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a71e:	b480      	push	{r7}
 800a720:	b085      	sub	sp, #20
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	4013      	ands	r3, r2
 800a740:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	0c1b      	lsrs	r3, r3, #16
}
 800a746:	4618      	mov	r0, r3
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	4013      	ands	r3, r2
 800a774:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	b29b      	uxth	r3, r3
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a786:	b480      	push	{r7}
 800a788:	b085      	sub	sp, #20
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a796:	78fb      	ldrb	r3, [r7, #3]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b087      	sub	sp, #28
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a7e6:	78fb      	ldrb	r3, [r7, #3]
 800a7e8:	f003 030f 	and.w	r3, r3, #15
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f2:	01db      	lsls	r3, r3, #7
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	4013      	ands	r3, r2
 800a80e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a810:	68bb      	ldr	r3, [r7, #8]
}
 800a812:	4618      	mov	r0, r3
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	f003 0301 	and.w	r3, r3, #1
}
 800a82e:	4618      	mov	r0, r3
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b085      	sub	sp, #20
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a854:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a858:	f023 0307 	bic.w	r3, r3, #7
 800a85c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a86c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	460b      	mov	r3, r1
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	333c      	adds	r3, #60	@ 0x3c
 800a896:	3304      	adds	r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4a26      	ldr	r2, [pc, #152]	@ (800a938 <USB_EP0_OutStart+0xb8>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d90a      	bls.n	800a8ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8b4:	d101      	bne.n	800a8ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e037      	b.n	800a92a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8e8:	f043 0318 	orr.w	r3, r3, #24
 800a8ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a900:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d10f      	bne.n	800a928 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a922:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a926:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	4f54300a 	.word	0x4f54300a

0800a93c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3301      	adds	r3, #1
 800a94c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a954:	d901      	bls.n	800a95a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e01b      	b.n	800a992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	daf2      	bge.n	800a948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f043 0201 	orr.w	r2, r3, #1
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a97e:	d901      	bls.n	800a984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e006      	b.n	800a992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d0f0      	beq.n	800a972 <USB_CoreReset+0x36>

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
	...

0800a9a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a9a4:	4904      	ldr	r1, [pc, #16]	@ (800a9b8 <MX_FATFS_Init+0x18>)
 800a9a6:	4805      	ldr	r0, [pc, #20]	@ (800a9bc <MX_FATFS_Init+0x1c>)
 800a9a8:	f004 f9ac 	bl	800ed04 <FATFS_LinkDriver>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4b03      	ldr	r3, [pc, #12]	@ (800a9c0 <MX_FATFS_Init+0x20>)
 800a9b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a9b4:	bf00      	nop
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	2000041c 	.word	0x2000041c
 800a9bc:	20000038 	.word	0x20000038
 800a9c0:	20000418 	.word	0x20000418

0800a9c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a9c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f5 ffb7 	bl	8000954 <SD_disk_initialize>
 800a9e6:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f6 f88f 	bl	8000b20 <SD_disk_status>
 800aa02:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	607a      	str	r2, [r7, #4]
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800aa1c:	7bf8      	ldrb	r0, [r7, #15]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	f7f6 f892 	bl	8000b4c <SD_disk_read>
 800aa28:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800aa42:	7bf8      	ldrb	r0, [r7, #15]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	f7f6 f8e9 	bl	8000c20 <SD_disk_write>
 800aa4e:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	603a      	str	r2, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]
 800aa64:	460b      	mov	r3, r1
 800aa66:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800aa68:	79b9      	ldrb	r1, [r7, #6]
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f6 f95a 	bl	8000d28 <SD_disk_ioctl>
 800aa74:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aa90:	f004 fe14 	bl	800f6bc <USBD_static_malloc>
 800aa94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d109      	bne.n	800aab0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	32b0      	adds	r2, #176	@ 0xb0
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aaac:	2302      	movs	r3, #2
 800aaae:	e0d4      	b.n	800ac5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aab0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aab4:	2100      	movs	r1, #0
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f004 ffbe 	bl	800fa38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	32b0      	adds	r2, #176	@ 0xb0
 800aac6:	68f9      	ldr	r1, [r7, #12]
 800aac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	32b0      	adds	r2, #176	@ 0xb0
 800aad6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	7c1b      	ldrb	r3, [r3, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d138      	bne.n	800ab5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aae8:	4b5e      	ldr	r3, [pc, #376]	@ (800ac64 <USBD_CDC_Init+0x1e4>)
 800aaea:	7819      	ldrb	r1, [r3, #0]
 800aaec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f004 fcbf 	bl	800f476 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aaf8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac64 <USBD_CDC_Init+0x1e4>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f003 020f 	and.w	r2, r3, #15
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	4613      	mov	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	440b      	add	r3, r1
 800ab0c:	3324      	adds	r3, #36	@ 0x24
 800ab0e:	2201      	movs	r2, #1
 800ab10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab12:	4b55      	ldr	r3, [pc, #340]	@ (800ac68 <USBD_CDC_Init+0x1e8>)
 800ab14:	7819      	ldrb	r1, [r3, #0]
 800ab16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f004 fcaa 	bl	800f476 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab22:	4b51      	ldr	r3, [pc, #324]	@ (800ac68 <USBD_CDC_Init+0x1e8>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	f003 020f 	and.w	r2, r3, #15
 800ab2a:	6879      	ldr	r1, [r7, #4]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	440b      	add	r3, r1
 800ab36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab3e:	4b4b      	ldr	r3, [pc, #300]	@ (800ac6c <USBD_CDC_Init+0x1ec>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	f003 020f 	and.w	r2, r3, #15
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	440b      	add	r3, r1
 800ab52:	3326      	adds	r3, #38	@ 0x26
 800ab54:	2210      	movs	r2, #16
 800ab56:	801a      	strh	r2, [r3, #0]
 800ab58:	e035      	b.n	800abc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab5a:	4b42      	ldr	r3, [pc, #264]	@ (800ac64 <USBD_CDC_Init+0x1e4>)
 800ab5c:	7819      	ldrb	r1, [r3, #0]
 800ab5e:	2340      	movs	r3, #64	@ 0x40
 800ab60:	2202      	movs	r2, #2
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f004 fc87 	bl	800f476 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab68:	4b3e      	ldr	r3, [pc, #248]	@ (800ac64 <USBD_CDC_Init+0x1e4>)
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 020f 	and.w	r2, r3, #15
 800ab70:	6879      	ldr	r1, [r7, #4]
 800ab72:	4613      	mov	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	440b      	add	r3, r1
 800ab7c:	3324      	adds	r3, #36	@ 0x24
 800ab7e:	2201      	movs	r2, #1
 800ab80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab82:	4b39      	ldr	r3, [pc, #228]	@ (800ac68 <USBD_CDC_Init+0x1e8>)
 800ab84:	7819      	ldrb	r1, [r3, #0]
 800ab86:	2340      	movs	r3, #64	@ 0x40
 800ab88:	2202      	movs	r2, #2
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f004 fc73 	bl	800f476 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab90:	4b35      	ldr	r3, [pc, #212]	@ (800ac68 <USBD_CDC_Init+0x1e8>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	f003 020f 	and.w	r2, r3, #15
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	440b      	add	r3, r1
 800aba4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aba8:	2201      	movs	r2, #1
 800abaa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800abac:	4b2f      	ldr	r3, [pc, #188]	@ (800ac6c <USBD_CDC_Init+0x1ec>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	f003 020f 	and.w	r2, r3, #15
 800abb4:	6879      	ldr	r1, [r7, #4]
 800abb6:	4613      	mov	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	440b      	add	r3, r1
 800abc0:	3326      	adds	r3, #38	@ 0x26
 800abc2:	2210      	movs	r2, #16
 800abc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800abc6:	4b29      	ldr	r3, [pc, #164]	@ (800ac6c <USBD_CDC_Init+0x1ec>)
 800abc8:	7819      	ldrb	r1, [r3, #0]
 800abca:	2308      	movs	r3, #8
 800abcc:	2203      	movs	r2, #3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f004 fc51 	bl	800f476 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800abd4:	4b25      	ldr	r3, [pc, #148]	@ (800ac6c <USBD_CDC_Init+0x1ec>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	f003 020f 	and.w	r2, r3, #15
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	440b      	add	r3, r1
 800abe8:	3324      	adds	r3, #36	@ 0x24
 800abea:	2201      	movs	r2, #1
 800abec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	33b0      	adds	r3, #176	@ 0xb0
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ac24:	2302      	movs	r3, #2
 800ac26:	e018      	b.n	800ac5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	7c1b      	ldrb	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac30:	4b0d      	ldr	r3, [pc, #52]	@ (800ac68 <USBD_CDC_Init+0x1e8>)
 800ac32:	7819      	ldrb	r1, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f004 fd08 	bl	800f654 <USBD_LL_PrepareReceive>
 800ac44:	e008      	b.n	800ac58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac46:	4b08      	ldr	r3, [pc, #32]	@ (800ac68 <USBD_CDC_Init+0x1e8>)
 800ac48:	7819      	ldrb	r1, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac50:	2340      	movs	r3, #64	@ 0x40
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f004 fcfe 	bl	800f654 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	200000d3 	.word	0x200000d3
 800ac68:	200000d4 	.word	0x200000d4
 800ac6c:	200000d5 	.word	0x200000d5

0800ac70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac7c:	4b3a      	ldr	r3, [pc, #232]	@ (800ad68 <USBD_CDC_DeInit+0xf8>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f004 fc1d 	bl	800f4c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac88:	4b37      	ldr	r3, [pc, #220]	@ (800ad68 <USBD_CDC_DeInit+0xf8>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 020f 	and.w	r2, r3, #15
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	440b      	add	r3, r1
 800ac9c:	3324      	adds	r3, #36	@ 0x24
 800ac9e:	2200      	movs	r2, #0
 800aca0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aca2:	4b32      	ldr	r3, [pc, #200]	@ (800ad6c <USBD_CDC_DeInit+0xfc>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f004 fc0a 	bl	800f4c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800acae:	4b2f      	ldr	r3, [pc, #188]	@ (800ad6c <USBD_CDC_DeInit+0xfc>)
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	f003 020f 	and.w	r2, r3, #15
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	4613      	mov	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800acc6:	2200      	movs	r2, #0
 800acc8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800acca:	4b29      	ldr	r3, [pc, #164]	@ (800ad70 <USBD_CDC_DeInit+0x100>)
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f004 fbf6 	bl	800f4c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800acd6:	4b26      	ldr	r3, [pc, #152]	@ (800ad70 <USBD_CDC_DeInit+0x100>)
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	f003 020f 	and.w	r2, r3, #15
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	3324      	adds	r3, #36	@ 0x24
 800acec:	2200      	movs	r2, #0
 800acee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800acf0:	4b1f      	ldr	r3, [pc, #124]	@ (800ad70 <USBD_CDC_DeInit+0x100>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	f003 020f 	and.w	r2, r3, #15
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	440b      	add	r3, r1
 800ad04:	3326      	adds	r3, #38	@ 0x26
 800ad06:	2200      	movs	r2, #0
 800ad08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	32b0      	adds	r2, #176	@ 0xb0
 800ad14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01f      	beq.n	800ad5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	33b0      	adds	r3, #176	@ 0xb0
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	32b0      	adds	r2, #176	@ 0xb0
 800ad3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f004 fcca 	bl	800f6d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	32b0      	adds	r2, #176	@ 0xb0
 800ad4e:	2100      	movs	r1, #0
 800ad50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	200000d3 	.word	0x200000d3
 800ad6c:	200000d4 	.word	0x200000d4
 800ad70:	200000d5 	.word	0x200000d5

0800ad74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	32b0      	adds	r2, #176	@ 0xb0
 800ad88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad92:	2300      	movs	r3, #0
 800ad94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e0bf      	b.n	800af24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adac:	2b00      	cmp	r3, #0
 800adae:	d050      	beq.n	800ae52 <USBD_CDC_Setup+0xde>
 800adb0:	2b20      	cmp	r3, #32
 800adb2:	f040 80af 	bne.w	800af14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	88db      	ldrh	r3, [r3, #6]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d03a      	beq.n	800ae34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	b25b      	sxtb	r3, r3
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	da1b      	bge.n	800ae00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	33b0      	adds	r3, #176	@ 0xb0
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800adde:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	88d2      	ldrh	r2, [r2, #6]
 800ade4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	88db      	ldrh	r3, [r3, #6]
 800adea:	2b07      	cmp	r3, #7
 800adec:	bf28      	it	cs
 800adee:	2307      	movcs	r3, #7
 800adf0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	89fa      	ldrh	r2, [r7, #14]
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fd93 	bl	800c924 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800adfe:	e090      	b.n	800af22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	785a      	ldrb	r2, [r3, #1]
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	88db      	ldrh	r3, [r3, #6]
 800ae0e:	2b3f      	cmp	r3, #63	@ 0x3f
 800ae10:	d803      	bhi.n	800ae1a <USBD_CDC_Setup+0xa6>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	88db      	ldrh	r3, [r3, #6]
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	e000      	b.n	800ae1c <USBD_CDC_Setup+0xa8>
 800ae1a:	2240      	movs	r2, #64	@ 0x40
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ae22:	6939      	ldr	r1, [r7, #16]
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f001 fda5 	bl	800c97c <USBD_CtlPrepareRx>
      break;
 800ae32:	e076      	b.n	800af22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	33b0      	adds	r3, #176	@ 0xb0
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	7850      	ldrb	r0, [r2, #1]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	4798      	blx	r3
      break;
 800ae50:	e067      	b.n	800af22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	785b      	ldrb	r3, [r3, #1]
 800ae56:	2b0b      	cmp	r3, #11
 800ae58:	d851      	bhi.n	800aefe <USBD_CDC_Setup+0x18a>
 800ae5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae60 <USBD_CDC_Setup+0xec>)
 800ae5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae60:	0800ae91 	.word	0x0800ae91
 800ae64:	0800af0d 	.word	0x0800af0d
 800ae68:	0800aeff 	.word	0x0800aeff
 800ae6c:	0800aeff 	.word	0x0800aeff
 800ae70:	0800aeff 	.word	0x0800aeff
 800ae74:	0800aeff 	.word	0x0800aeff
 800ae78:	0800aeff 	.word	0x0800aeff
 800ae7c:	0800aeff 	.word	0x0800aeff
 800ae80:	0800aeff 	.word	0x0800aeff
 800ae84:	0800aeff 	.word	0x0800aeff
 800ae88:	0800aebb 	.word	0x0800aebb
 800ae8c:	0800aee5 	.word	0x0800aee5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d107      	bne.n	800aeac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae9c:	f107 030a 	add.w	r3, r7, #10
 800aea0:	2202      	movs	r2, #2
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 fd3d 	bl	800c924 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aeaa:	e032      	b.n	800af12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 fcbb 	bl	800c82a <USBD_CtlError>
            ret = USBD_FAIL;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	75fb      	strb	r3, [r7, #23]
          break;
 800aeb8:	e02b      	b.n	800af12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d107      	bne.n	800aed6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aec6:	f107 030d 	add.w	r3, r7, #13
 800aeca:	2201      	movs	r2, #1
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f001 fd28 	bl	800c924 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aed4:	e01d      	b.n	800af12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 fca6 	bl	800c82a <USBD_CtlError>
            ret = USBD_FAIL;
 800aede:	2303      	movs	r3, #3
 800aee0:	75fb      	strb	r3, [r7, #23]
          break;
 800aee2:	e016      	b.n	800af12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d00f      	beq.n	800af10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 fc99 	bl	800c82a <USBD_CtlError>
            ret = USBD_FAIL;
 800aef8:	2303      	movs	r3, #3
 800aefa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aefc:	e008      	b.n	800af10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 fc92 	bl	800c82a <USBD_CtlError>
          ret = USBD_FAIL;
 800af06:	2303      	movs	r3, #3
 800af08:	75fb      	strb	r3, [r7, #23]
          break;
 800af0a:	e002      	b.n	800af12 <USBD_CDC_Setup+0x19e>
          break;
 800af0c:	bf00      	nop
 800af0e:	e008      	b.n	800af22 <USBD_CDC_Setup+0x1ae>
          break;
 800af10:	bf00      	nop
      }
      break;
 800af12:	e006      	b.n	800af22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 fc87 	bl	800c82a <USBD_CtlError>
      ret = USBD_FAIL;
 800af1c:	2303      	movs	r3, #3
 800af1e:	75fb      	strb	r3, [r7, #23]
      break;
 800af20:	bf00      	nop
  }

  return (uint8_t)ret;
 800af22:	7dfb      	ldrb	r3, [r7, #23]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	32b0      	adds	r2, #176	@ 0xb0
 800af4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af52:	2303      	movs	r3, #3
 800af54:	e065      	b.n	800b022 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	32b0      	adds	r2, #176	@ 0xb0
 800af60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af66:	78fb      	ldrb	r3, [r7, #3]
 800af68:	f003 020f 	and.w	r2, r3, #15
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	4613      	mov	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	440b      	add	r3, r1
 800af78:	3318      	adds	r3, #24
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d02f      	beq.n	800afe0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	f003 020f 	and.w	r2, r3, #15
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	4613      	mov	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	440b      	add	r3, r1
 800af92:	3318      	adds	r3, #24
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	f003 010f 	and.w	r1, r3, #15
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	460b      	mov	r3, r1
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	440b      	add	r3, r1
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4403      	add	r3, r0
 800afa8:	331c      	adds	r3, #28
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	fbb2 f1f3 	udiv	r1, r2, r3
 800afb0:	fb01 f303 	mul.w	r3, r1, r3
 800afb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d112      	bne.n	800afe0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800afba:	78fb      	ldrb	r3, [r7, #3]
 800afbc:	f003 020f 	and.w	r2, r3, #15
 800afc0:	6879      	ldr	r1, [r7, #4]
 800afc2:	4613      	mov	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	440b      	add	r3, r1
 800afcc:	3318      	adds	r3, #24
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800afd2:	78f9      	ldrb	r1, [r7, #3]
 800afd4:	2300      	movs	r3, #0
 800afd6:	2200      	movs	r2, #0
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f004 fb1a 	bl	800f612 <USBD_LL_Transmit>
 800afde:	e01f      	b.n	800b020 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	33b0      	adds	r3, #176	@ 0xb0
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4413      	add	r3, r2
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d010      	beq.n	800b020 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	33b0      	adds	r3, #176	@ 0xb0
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b01c:	78fa      	ldrb	r2, [r7, #3]
 800b01e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	460b      	mov	r3, r1
 800b034:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	32b0      	adds	r2, #176	@ 0xb0
 800b040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b044:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	32b0      	adds	r2, #176	@ 0xb0
 800b050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b058:	2303      	movs	r3, #3
 800b05a:	e01a      	b.n	800b092 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b05c:	78fb      	ldrb	r3, [r7, #3]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f004 fb18 	bl	800f696 <USBD_LL_GetRxDataSize>
 800b066:	4602      	mov	r2, r0
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	33b0      	adds	r3, #176	@ 0xb0
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b08c:	4611      	mov	r1, r2
 800b08e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	32b0      	adds	r2, #176	@ 0xb0
 800b0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e024      	b.n	800b106 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	33b0      	adds	r3, #176	@ 0xb0
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d019      	beq.n	800b104 <USBD_CDC_EP0_RxReady+0x6a>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b0d6:	2bff      	cmp	r3, #255	@ 0xff
 800b0d8:	d014      	beq.n	800b104 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	33b0      	adds	r3, #176	@ 0xb0
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b0f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	22ff      	movs	r2, #255	@ 0xff
 800b100:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b118:	2182      	movs	r1, #130	@ 0x82
 800b11a:	4818      	ldr	r0, [pc, #96]	@ (800b17c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b11c:	f000 fd4f 	bl	800bbbe <USBD_GetEpDesc>
 800b120:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b122:	2101      	movs	r1, #1
 800b124:	4815      	ldr	r0, [pc, #84]	@ (800b17c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b126:	f000 fd4a 	bl	800bbbe <USBD_GetEpDesc>
 800b12a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b12c:	2181      	movs	r1, #129	@ 0x81
 800b12e:	4813      	ldr	r0, [pc, #76]	@ (800b17c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b130:	f000 fd45 	bl	800bbbe <USBD_GetEpDesc>
 800b134:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	2210      	movs	r2, #16
 800b140:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d006      	beq.n	800b156 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b150:	711a      	strb	r2, [r3, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d006      	beq.n	800b16a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b164:	711a      	strb	r2, [r3, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2243      	movs	r2, #67	@ 0x43
 800b16e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b170:	4b02      	ldr	r3, [pc, #8]	@ (800b17c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20000090 	.word	0x20000090

0800b180 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b188:	2182      	movs	r1, #130	@ 0x82
 800b18a:	4818      	ldr	r0, [pc, #96]	@ (800b1ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b18c:	f000 fd17 	bl	800bbbe <USBD_GetEpDesc>
 800b190:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b192:	2101      	movs	r1, #1
 800b194:	4815      	ldr	r0, [pc, #84]	@ (800b1ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b196:	f000 fd12 	bl	800bbbe <USBD_GetEpDesc>
 800b19a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b19c:	2181      	movs	r1, #129	@ 0x81
 800b19e:	4813      	ldr	r0, [pc, #76]	@ (800b1ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1a0:	f000 fd0d 	bl	800bbbe <USBD_GetEpDesc>
 800b1a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d006      	beq.n	800b1c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	711a      	strb	r2, [r3, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f042 0202 	orr.w	r2, r2, #2
 800b1c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d006      	beq.n	800b1da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	711a      	strb	r2, [r3, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f042 0202 	orr.w	r2, r2, #2
 800b1d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2243      	movs	r2, #67	@ 0x43
 800b1de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1e0:	4b02      	ldr	r3, [pc, #8]	@ (800b1ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20000090 	.word	0x20000090

0800b1f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1f8:	2182      	movs	r1, #130	@ 0x82
 800b1fa:	4818      	ldr	r0, [pc, #96]	@ (800b25c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1fc:	f000 fcdf 	bl	800bbbe <USBD_GetEpDesc>
 800b200:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b202:	2101      	movs	r1, #1
 800b204:	4815      	ldr	r0, [pc, #84]	@ (800b25c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b206:	f000 fcda 	bl	800bbbe <USBD_GetEpDesc>
 800b20a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b20c:	2181      	movs	r1, #129	@ 0x81
 800b20e:	4813      	ldr	r0, [pc, #76]	@ (800b25c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b210:	f000 fcd5 	bl	800bbbe <USBD_GetEpDesc>
 800b214:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	2210      	movs	r2, #16
 800b220:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d006      	beq.n	800b236 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b230:	711a      	strb	r2, [r3, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d006      	beq.n	800b24a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b244:	711a      	strb	r2, [r3, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2243      	movs	r2, #67	@ 0x43
 800b24e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b250:	4b02      	ldr	r3, [pc, #8]	@ (800b25c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	20000090 	.word	0x20000090

0800b260 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	220a      	movs	r2, #10
 800b26c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b26e:	4b03      	ldr	r3, [pc, #12]	@ (800b27c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b270:	4618      	mov	r0, r3
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	2000004c 	.word	0x2000004c

0800b280 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b290:	2303      	movs	r3, #3
 800b292:	e009      	b.n	800b2a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	33b0      	adds	r3, #176	@ 0xb0
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b087      	sub	sp, #28
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	32b0      	adds	r2, #176	@ 0xb0
 800b2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e008      	b.n	800b2ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	371c      	adds	r7, #28
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	32b0      	adds	r2, #176	@ 0xb0
 800b30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b310:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b318:	2303      	movs	r3, #3
 800b31a:	e004      	b.n	800b326 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
	...

0800b334 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	32b0      	adds	r2, #176	@ 0xb0
 800b346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b34c:	2301      	movs	r3, #1
 800b34e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b356:	2303      	movs	r3, #3
 800b358:	e025      	b.n	800b3a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b360:	2b00      	cmp	r3, #0
 800b362:	d11f      	bne.n	800b3a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2201      	movs	r2, #1
 800b368:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b36c:	4b10      	ldr	r3, [pc, #64]	@ (800b3b0 <USBD_CDC_TransmitPacket+0x7c>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	f003 020f 	and.w	r2, r3, #15
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	4613      	mov	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4403      	add	r3, r0
 800b386:	3318      	adds	r3, #24
 800b388:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b38a:	4b09      	ldr	r3, [pc, #36]	@ (800b3b0 <USBD_CDC_TransmitPacket+0x7c>)
 800b38c:	7819      	ldrb	r1, [r3, #0]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f004 f939 	bl	800f612 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200000d3 	.word	0x200000d3

0800b3b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	32b0      	adds	r2, #176	@ 0xb0
 800b3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	32b0      	adds	r2, #176	@ 0xb0
 800b3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	e018      	b.n	800b414 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	7c1b      	ldrb	r3, [r3, #16]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10a      	bne.n	800b400 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b41c <USBD_CDC_ReceivePacket+0x68>)
 800b3ec:	7819      	ldrb	r1, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f004 f92b 	bl	800f654 <USBD_LL_PrepareReceive>
 800b3fe:	e008      	b.n	800b412 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b400:	4b06      	ldr	r3, [pc, #24]	@ (800b41c <USBD_CDC_ReceivePacket+0x68>)
 800b402:	7819      	ldrb	r1, [r3, #0]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b40a:	2340      	movs	r3, #64	@ 0x40
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f004 f921 	bl	800f654 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	200000d4 	.word	0x200000d4

0800b420 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	4613      	mov	r3, r2
 800b42c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b434:	2303      	movs	r3, #3
 800b436:	e01f      	b.n	800b478 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d003      	beq.n	800b45e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	79fa      	ldrb	r2, [r7, #7]
 800b46a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f003 ff9b 	bl	800f3a8 <USBD_LL_Init>
 800b472:	4603      	mov	r3, r0
 800b474:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b48a:	2300      	movs	r3, #0
 800b48c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b494:	2303      	movs	r3, #3
 800b496:	e025      	b.n	800b4e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	32ae      	adds	r2, #174	@ 0xae
 800b4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00f      	beq.n	800b4d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32ae      	adds	r2, #174	@ 0xae
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c4:	f107 020e 	add.w	r2, r7, #14
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4798      	blx	r3
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f003 ffa3 	bl	800f440 <USBD_LL_Start>
 800b4fa:	4603      	mov	r3, r0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b50c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b084      	sub	sp, #16
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	460b      	mov	r3, r1
 800b524:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b530:	2b00      	cmp	r3, #0
 800b532:	d009      	beq.n	800b548 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	4611      	mov	r1, r2
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	4798      	blx	r3
 800b544:	4603      	mov	r3, r0
 800b546:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b548:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b084      	sub	sp, #16
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	460b      	mov	r3, r1
 800b55c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	78fa      	ldrb	r2, [r7, #3]
 800b56c:	4611      	mov	r1, r2
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	4798      	blx	r3
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b578:	2303      	movs	r3, #3
 800b57a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b596:	6839      	ldr	r1, [r7, #0]
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 f90c 	bl	800c7b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5ba:	f003 031f 	and.w	r3, r3, #31
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d01a      	beq.n	800b5f8 <USBD_LL_SetupStage+0x72>
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d822      	bhi.n	800b60c <USBD_LL_SetupStage+0x86>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <USBD_LL_SetupStage+0x4a>
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d00a      	beq.n	800b5e4 <USBD_LL_SetupStage+0x5e>
 800b5ce:	e01d      	b.n	800b60c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fb63 	bl	800bca4 <USBD_StdDevReq>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e2:	e020      	b.n	800b626 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fbcb 	bl	800bd88 <USBD_StdItfReq>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b5f6:	e016      	b.n	800b626 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fc2d 	bl	800be60 <USBD_StdEPReq>
 800b606:	4603      	mov	r3, r0
 800b608:	73fb      	strb	r3, [r7, #15]
      break;
 800b60a:	e00c      	b.n	800b626 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b612:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b616:	b2db      	uxtb	r3, r3
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f003 ff70 	bl	800f500 <USBD_LL_StallEP>
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]
      break;
 800b624:	bf00      	nop
  }

  return ret;
 800b626:	7bfb      	ldrb	r3, [r7, #15]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	460b      	mov	r3, r1
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b642:	7afb      	ldrb	r3, [r7, #11]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d16e      	bne.n	800b726 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b64e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b656:	2b03      	cmp	r3, #3
 800b658:	f040 8098 	bne.w	800b78c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	689a      	ldr	r2, [r3, #8]
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	429a      	cmp	r2, r3
 800b666:	d913      	bls.n	800b690 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	689a      	ldr	r2, [r3, #8]
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	1ad2      	subs	r2, r2, r3
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	4293      	cmp	r3, r2
 800b680:	bf28      	it	cs
 800b682:	4613      	movcs	r3, r2
 800b684:	461a      	mov	r2, r3
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f001 f994 	bl	800c9b6 <USBD_CtlContinueRx>
 800b68e:	e07d      	b.n	800b78c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b696:	f003 031f 	and.w	r3, r3, #31
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d014      	beq.n	800b6c8 <USBD_LL_DataOutStage+0x98>
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d81d      	bhi.n	800b6de <USBD_LL_DataOutStage+0xae>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <USBD_LL_DataOutStage+0x7c>
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d003      	beq.n	800b6b2 <USBD_LL_DataOutStage+0x82>
 800b6aa:	e018      	b.n	800b6de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	75bb      	strb	r3, [r7, #22]
            break;
 800b6b0:	e018      	b.n	800b6e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 fa64 	bl	800bb8a <USBD_CoreFindIF>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	75bb      	strb	r3, [r7, #22]
            break;
 800b6c6:	e00d      	b.n	800b6e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f000 fa66 	bl	800bba4 <USBD_CoreFindEP>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75bb      	strb	r3, [r7, #22]
            break;
 800b6dc:	e002      	b.n	800b6e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b6e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b6e4:	7dbb      	ldrb	r3, [r7, #22]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d119      	bne.n	800b71e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d113      	bne.n	800b71e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b6f6:	7dba      	ldrb	r2, [r7, #22]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	32ae      	adds	r2, #174	@ 0xae
 800b6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00b      	beq.n	800b71e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b706:	7dba      	ldrb	r2, [r7, #22]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b70e:	7dba      	ldrb	r2, [r7, #22]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	32ae      	adds	r2, #174	@ 0xae
 800b714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f001 f95a 	bl	800c9d8 <USBD_CtlSendStatus>
 800b724:	e032      	b.n	800b78c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b726:	7afb      	ldrb	r3, [r7, #11]
 800b728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	4619      	mov	r1, r3
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f000 fa37 	bl	800bba4 <USBD_CoreFindEP>
 800b736:	4603      	mov	r3, r0
 800b738:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b73a:	7dbb      	ldrb	r3, [r7, #22]
 800b73c:	2bff      	cmp	r3, #255	@ 0xff
 800b73e:	d025      	beq.n	800b78c <USBD_LL_DataOutStage+0x15c>
 800b740:	7dbb      	ldrb	r3, [r7, #22]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d122      	bne.n	800b78c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b03      	cmp	r3, #3
 800b750:	d117      	bne.n	800b782 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b752:	7dba      	ldrb	r2, [r7, #22]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	32ae      	adds	r2, #174	@ 0xae
 800b758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00f      	beq.n	800b782 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b762:	7dba      	ldrb	r2, [r7, #22]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b76a:	7dba      	ldrb	r2, [r7, #22]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	32ae      	adds	r2, #174	@ 0xae
 800b770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	7afa      	ldrb	r2, [r7, #11]
 800b778:	4611      	mov	r1, r2
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	4798      	blx	r3
 800b77e:	4603      	mov	r3, r0
 800b780:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b782:	7dfb      	ldrb	r3, [r7, #23]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	e000      	b.n	800b78e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3718      	adds	r7, #24
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b086      	sub	sp, #24
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	460b      	mov	r3, r1
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b7a4:	7afb      	ldrb	r3, [r7, #11]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d16f      	bne.n	800b88a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	3314      	adds	r3, #20
 800b7ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d15a      	bne.n	800b870 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	689a      	ldr	r2, [r3, #8]
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d914      	bls.n	800b7f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	689a      	ldr	r2, [r3, #8]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	1ad2      	subs	r2, r2, r3
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f001 f8bc 	bl	800c95a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f003 ff33 	bl	800f654 <USBD_LL_PrepareReceive>
 800b7ee:	e03f      	b.n	800b870 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	68da      	ldr	r2, [r3, #12]
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d11c      	bne.n	800b836 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b804:	429a      	cmp	r2, r3
 800b806:	d316      	bcc.n	800b836 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b812:	429a      	cmp	r2, r3
 800b814:	d20f      	bcs.n	800b836 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b816:	2200      	movs	r2, #0
 800b818:	2100      	movs	r1, #0
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f001 f89d 	bl	800c95a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2200      	movs	r2, #0
 800b824:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b828:	2300      	movs	r3, #0
 800b82a:	2200      	movs	r2, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f003 ff10 	bl	800f654 <USBD_LL_PrepareReceive>
 800b834:	e01c      	b.n	800b870 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d10f      	bne.n	800b862 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d009      	beq.n	800b862 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b862:	2180      	movs	r1, #128	@ 0x80
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f003 fe4b 	bl	800f500 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f001 f8c7 	bl	800c9fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d03a      	beq.n	800b8f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff fe42 	bl	800b504 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b888:	e032      	b.n	800b8f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b88a:	7afb      	ldrb	r3, [r7, #11]
 800b88c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b890:	b2db      	uxtb	r3, r3
 800b892:	4619      	mov	r1, r3
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f000 f985 	bl	800bba4 <USBD_CoreFindEP>
 800b89a:	4603      	mov	r3, r0
 800b89c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	2bff      	cmp	r3, #255	@ 0xff
 800b8a2:	d025      	beq.n	800b8f0 <USBD_LL_DataInStage+0x15a>
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d122      	bne.n	800b8f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d11c      	bne.n	800b8f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b8b6:	7dfa      	ldrb	r2, [r7, #23]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	32ae      	adds	r2, #174	@ 0xae
 800b8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d014      	beq.n	800b8f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b8c6:	7dfa      	ldrb	r2, [r7, #23]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b8ce:	7dfa      	ldrb	r2, [r7, #23]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	32ae      	adds	r2, #174	@ 0xae
 800b8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	7afa      	ldrb	r2, [r7, #11]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	4798      	blx	r3
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b8e6:	7dbb      	ldrb	r3, [r7, #22]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b8ec:	7dbb      	ldrb	r3, [r7, #22]
 800b8ee:	e000      	b.n	800b8f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b932:	2b00      	cmp	r3, #0
 800b934:	d014      	beq.n	800b960 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00e      	beq.n	800b960 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6852      	ldr	r2, [r2, #4]
 800b94e:	b2d2      	uxtb	r2, r2
 800b950:	4611      	mov	r1, r2
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	4798      	blx	r3
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b95c:	2303      	movs	r3, #3
 800b95e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b960:	2340      	movs	r3, #64	@ 0x40
 800b962:	2200      	movs	r2, #0
 800b964:	2100      	movs	r1, #0
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f003 fd85 	bl	800f476 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2240      	movs	r2, #64	@ 0x40
 800b978:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b97c:	2340      	movs	r3, #64	@ 0x40
 800b97e:	2200      	movs	r2, #0
 800b980:	2180      	movs	r1, #128	@ 0x80
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f003 fd77 	bl	800f476 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2240      	movs	r2, #64	@ 0x40
 800b992:	621a      	str	r2, [r3, #32]

  return ret;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	78fa      	ldrb	r2, [r7, #3]
 800b9ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b083      	sub	sp, #12
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b04      	cmp	r3, #4
 800b9d0:	d006      	beq.n	800b9e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2204      	movs	r2, #4
 800b9e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9f6:	b480      	push	{r7}
 800b9f8:	b083      	sub	sp, #12
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	d106      	bne.n	800ba18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b082      	sub	sp, #8
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	d110      	bne.n	800ba5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00b      	beq.n	800ba5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d005      	beq.n	800ba5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b082      	sub	sp, #8
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	32ae      	adds	r2, #174	@ 0xae
 800ba7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e01c      	b.n	800bac2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d115      	bne.n	800bac0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	32ae      	adds	r2, #174	@ 0xae
 800ba9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00b      	beq.n	800bac0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	32ae      	adds	r2, #174	@ 0xae
 800bab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	4611      	mov	r1, r2
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	460b      	mov	r3, r1
 800bad4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	32ae      	adds	r2, #174	@ 0xae
 800bae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bae8:	2303      	movs	r3, #3
 800baea:	e01c      	b.n	800bb26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d115      	bne.n	800bb24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	32ae      	adds	r2, #174	@ 0xae
 800bb02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00b      	beq.n	800bb24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	32ae      	adds	r2, #174	@ 0xae
 800bb16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb1c:	78fa      	ldrb	r2, [r7, #3]
 800bb1e:	4611      	mov	r1, r2
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00e      	beq.n	800bb80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	6852      	ldr	r2, [r2, #4]
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	4611      	mov	r1, r2
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	4798      	blx	r3
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b083      	sub	sp, #12
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b086      	sub	sp, #24
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	885b      	ldrh	r3, [r3, #2]
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	7812      	ldrb	r2, [r2, #0]
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d91f      	bls.n	800bc24 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bbea:	e013      	b.n	800bc14 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bbec:	f107 030a 	add.w	r3, r7, #10
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6978      	ldr	r0, [r7, #20]
 800bbf4:	f000 f81b 	bl	800bc2e <USBD_GetNextDesc>
 800bbf8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	785b      	ldrb	r3, [r3, #1]
 800bbfe:	2b05      	cmp	r3, #5
 800bc00:	d108      	bne.n	800bc14 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	789b      	ldrb	r3, [r3, #2]
 800bc0a:	78fa      	ldrb	r2, [r7, #3]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d008      	beq.n	800bc22 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bc10:	2300      	movs	r3, #0
 800bc12:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	885b      	ldrh	r3, [r3, #2]
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	897b      	ldrh	r3, [r7, #10]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d8e5      	bhi.n	800bbec <USBD_GetEpDesc+0x2e>
 800bc20:	e000      	b.n	800bc24 <USBD_GetEpDesc+0x66>
          break;
 800bc22:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bc24:	693b      	ldr	r3, [r7, #16]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b085      	sub	sp, #20
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	7812      	ldrb	r2, [r2, #0]
 800bc44:	4413      	add	r3, r2
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4413      	add	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc58:	68fb      	ldr	r3, [r7, #12]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b087      	sub	sp, #28
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc84:	8a3b      	ldrh	r3, [r7, #16]
 800bc86:	021b      	lsls	r3, r3, #8
 800bc88:	b21a      	sxth	r2, r3
 800bc8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	b21b      	sxth	r3, r3
 800bc92:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc94:	89fb      	ldrh	r3, [r7, #14]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
	...

0800bca4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcba:	2b40      	cmp	r3, #64	@ 0x40
 800bcbc:	d005      	beq.n	800bcca <USBD_StdDevReq+0x26>
 800bcbe:	2b40      	cmp	r3, #64	@ 0x40
 800bcc0:	d857      	bhi.n	800bd72 <USBD_StdDevReq+0xce>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00f      	beq.n	800bce6 <USBD_StdDevReq+0x42>
 800bcc6:	2b20      	cmp	r3, #32
 800bcc8:	d153      	bne.n	800bd72 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	32ae      	adds	r2, #174	@ 0xae
 800bcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	4798      	blx	r3
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]
      break;
 800bce4:	e04a      	b.n	800bd7c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	785b      	ldrb	r3, [r3, #1]
 800bcea:	2b09      	cmp	r3, #9
 800bcec:	d83b      	bhi.n	800bd66 <USBD_StdDevReq+0xc2>
 800bcee:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf4 <USBD_StdDevReq+0x50>)
 800bcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf4:	0800bd49 	.word	0x0800bd49
 800bcf8:	0800bd5d 	.word	0x0800bd5d
 800bcfc:	0800bd67 	.word	0x0800bd67
 800bd00:	0800bd53 	.word	0x0800bd53
 800bd04:	0800bd67 	.word	0x0800bd67
 800bd08:	0800bd27 	.word	0x0800bd27
 800bd0c:	0800bd1d 	.word	0x0800bd1d
 800bd10:	0800bd67 	.word	0x0800bd67
 800bd14:	0800bd3f 	.word	0x0800bd3f
 800bd18:	0800bd31 	.word	0x0800bd31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd1c:	6839      	ldr	r1, [r7, #0]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fa3c 	bl	800c19c <USBD_GetDescriptor>
          break;
 800bd24:	e024      	b.n	800bd70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fba1 	bl	800c470 <USBD_SetAddress>
          break;
 800bd2e:	e01f      	b.n	800bd70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd30:	6839      	ldr	r1, [r7, #0]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fbe0 	bl	800c4f8 <USBD_SetConfig>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]
          break;
 800bd3c:	e018      	b.n	800bd70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fc83 	bl	800c64c <USBD_GetConfig>
          break;
 800bd46:	e013      	b.n	800bd70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fcb4 	bl	800c6b8 <USBD_GetStatus>
          break;
 800bd50:	e00e      	b.n	800bd70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fce3 	bl	800c720 <USBD_SetFeature>
          break;
 800bd5a:	e009      	b.n	800bd70 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fd07 	bl	800c772 <USBD_ClrFeature>
          break;
 800bd64:	e004      	b.n	800bd70 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fd5e 	bl	800c82a <USBD_CtlError>
          break;
 800bd6e:	bf00      	nop
      }
      break;
 800bd70:	e004      	b.n	800bd7c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fd58 	bl	800c82a <USBD_CtlError>
      break;
 800bd7a:	bf00      	nop
  }

  return ret;
 800bd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop

0800bd88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd9e:	2b40      	cmp	r3, #64	@ 0x40
 800bda0:	d005      	beq.n	800bdae <USBD_StdItfReq+0x26>
 800bda2:	2b40      	cmp	r3, #64	@ 0x40
 800bda4:	d852      	bhi.n	800be4c <USBD_StdItfReq+0xc4>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <USBD_StdItfReq+0x26>
 800bdaa:	2b20      	cmp	r3, #32
 800bdac:	d14e      	bne.n	800be4c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d840      	bhi.n	800be3e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	889b      	ldrh	r3, [r3, #4]
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d836      	bhi.n	800be34 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	889b      	ldrh	r3, [r3, #4]
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7ff fedb 	bl	800bb8a <USBD_CoreFindIF>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	2bff      	cmp	r3, #255	@ 0xff
 800bddc:	d01d      	beq.n	800be1a <USBD_StdItfReq+0x92>
 800bdde:	7bbb      	ldrb	r3, [r7, #14]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d11a      	bne.n	800be1a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bde4:	7bba      	ldrb	r2, [r7, #14]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	32ae      	adds	r2, #174	@ 0xae
 800bdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00f      	beq.n	800be14 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bdf4:	7bba      	ldrb	r2, [r7, #14]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bdfc:	7bba      	ldrb	r2, [r7, #14]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	32ae      	adds	r2, #174	@ 0xae
 800be02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	4798      	blx	r3
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be12:	e004      	b.n	800be1e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800be14:	2303      	movs	r3, #3
 800be16:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be18:	e001      	b.n	800be1e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800be1a:	2303      	movs	r3, #3
 800be1c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	88db      	ldrh	r3, [r3, #6]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d110      	bne.n	800be48 <USBD_StdItfReq+0xc0>
 800be26:	7bfb      	ldrb	r3, [r7, #15]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10d      	bne.n	800be48 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fdd3 	bl	800c9d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be32:	e009      	b.n	800be48 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fcf7 	bl	800c82a <USBD_CtlError>
          break;
 800be3c:	e004      	b.n	800be48 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fcf2 	bl	800c82a <USBD_CtlError>
          break;
 800be46:	e000      	b.n	800be4a <USBD_StdItfReq+0xc2>
          break;
 800be48:	bf00      	nop
      }
      break;
 800be4a:	e004      	b.n	800be56 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fceb 	bl	800c82a <USBD_CtlError>
      break;
 800be54:	bf00      	nop
  }

  return ret;
 800be56:	7bfb      	ldrb	r3, [r7, #15]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	889b      	ldrh	r3, [r3, #4]
 800be72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be7c:	2b40      	cmp	r3, #64	@ 0x40
 800be7e:	d007      	beq.n	800be90 <USBD_StdEPReq+0x30>
 800be80:	2b40      	cmp	r3, #64	@ 0x40
 800be82:	f200 817f 	bhi.w	800c184 <USBD_StdEPReq+0x324>
 800be86:	2b00      	cmp	r3, #0
 800be88:	d02a      	beq.n	800bee0 <USBD_StdEPReq+0x80>
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	f040 817a 	bne.w	800c184 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800be90:	7bbb      	ldrb	r3, [r7, #14]
 800be92:	4619      	mov	r1, r3
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7ff fe85 	bl	800bba4 <USBD_CoreFindEP>
 800be9a:	4603      	mov	r3, r0
 800be9c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be9e:	7b7b      	ldrb	r3, [r7, #13]
 800bea0:	2bff      	cmp	r3, #255	@ 0xff
 800bea2:	f000 8174 	beq.w	800c18e <USBD_StdEPReq+0x32e>
 800bea6:	7b7b      	ldrb	r3, [r7, #13]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f040 8170 	bne.w	800c18e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800beae:	7b7a      	ldrb	r2, [r7, #13]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800beb6:	7b7a      	ldrb	r2, [r7, #13]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	32ae      	adds	r2, #174	@ 0xae
 800bebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 8163 	beq.w	800c18e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bec8:	7b7a      	ldrb	r2, [r7, #13]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	32ae      	adds	r2, #174	@ 0xae
 800bece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	4798      	blx	r3
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bede:	e156      	b.n	800c18e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	785b      	ldrb	r3, [r3, #1]
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d008      	beq.n	800befa <USBD_StdEPReq+0x9a>
 800bee8:	2b03      	cmp	r3, #3
 800beea:	f300 8145 	bgt.w	800c178 <USBD_StdEPReq+0x318>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 809b 	beq.w	800c02a <USBD_StdEPReq+0x1ca>
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d03c      	beq.n	800bf72 <USBD_StdEPReq+0x112>
 800bef8:	e13e      	b.n	800c178 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d002      	beq.n	800bf0c <USBD_StdEPReq+0xac>
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d016      	beq.n	800bf38 <USBD_StdEPReq+0xd8>
 800bf0a:	e02c      	b.n	800bf66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf0c:	7bbb      	ldrb	r3, [r7, #14]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00d      	beq.n	800bf2e <USBD_StdEPReq+0xce>
 800bf12:	7bbb      	ldrb	r3, [r7, #14]
 800bf14:	2b80      	cmp	r3, #128	@ 0x80
 800bf16:	d00a      	beq.n	800bf2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf18:	7bbb      	ldrb	r3, [r7, #14]
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f003 faef 	bl	800f500 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf22:	2180      	movs	r1, #128	@ 0x80
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f003 faeb 	bl	800f500 <USBD_LL_StallEP>
 800bf2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf2c:	e020      	b.n	800bf70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fc7a 	bl	800c82a <USBD_CtlError>
              break;
 800bf36:	e01b      	b.n	800bf70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	885b      	ldrh	r3, [r3, #2]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10e      	bne.n	800bf5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf40:	7bbb      	ldrb	r3, [r7, #14]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00b      	beq.n	800bf5e <USBD_StdEPReq+0xfe>
 800bf46:	7bbb      	ldrb	r3, [r7, #14]
 800bf48:	2b80      	cmp	r3, #128	@ 0x80
 800bf4a:	d008      	beq.n	800bf5e <USBD_StdEPReq+0xfe>
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	88db      	ldrh	r3, [r3, #6]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d104      	bne.n	800bf5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f003 fad1 	bl	800f500 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fd3a 	bl	800c9d8 <USBD_CtlSendStatus>

              break;
 800bf64:	e004      	b.n	800bf70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fc5e 	bl	800c82a <USBD_CtlError>
              break;
 800bf6e:	bf00      	nop
          }
          break;
 800bf70:	e107      	b.n	800c182 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d002      	beq.n	800bf84 <USBD_StdEPReq+0x124>
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	d016      	beq.n	800bfb0 <USBD_StdEPReq+0x150>
 800bf82:	e04b      	b.n	800c01c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf84:	7bbb      	ldrb	r3, [r7, #14]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00d      	beq.n	800bfa6 <USBD_StdEPReq+0x146>
 800bf8a:	7bbb      	ldrb	r3, [r7, #14]
 800bf8c:	2b80      	cmp	r3, #128	@ 0x80
 800bf8e:	d00a      	beq.n	800bfa6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f003 fab3 	bl	800f500 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf9a:	2180      	movs	r1, #128	@ 0x80
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f003 faaf 	bl	800f500 <USBD_LL_StallEP>
 800bfa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfa4:	e040      	b.n	800c028 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fc3e 	bl	800c82a <USBD_CtlError>
              break;
 800bfae:	e03b      	b.n	800c028 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	885b      	ldrh	r3, [r3, #2]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d136      	bne.n	800c026 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bfb8:	7bbb      	ldrb	r3, [r7, #14]
 800bfba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d004      	beq.n	800bfcc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f003 fab9 	bl	800f53e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fd03 	bl	800c9d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff fde4 	bl	800bba4 <USBD_CoreFindEP>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfe0:	7b7b      	ldrb	r3, [r7, #13]
 800bfe2:	2bff      	cmp	r3, #255	@ 0xff
 800bfe4:	d01f      	beq.n	800c026 <USBD_StdEPReq+0x1c6>
 800bfe6:	7b7b      	ldrb	r3, [r7, #13]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d11c      	bne.n	800c026 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bfec:	7b7a      	ldrb	r2, [r7, #13]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bff4:	7b7a      	ldrb	r2, [r7, #13]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	32ae      	adds	r2, #174	@ 0xae
 800bffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d010      	beq.n	800c026 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c004:	7b7a      	ldrb	r2, [r7, #13]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	32ae      	adds	r2, #174	@ 0xae
 800c00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4798      	blx	r3
 800c016:	4603      	mov	r3, r0
 800c018:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c01a:	e004      	b.n	800c026 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fc03 	bl	800c82a <USBD_CtlError>
              break;
 800c024:	e000      	b.n	800c028 <USBD_StdEPReq+0x1c8>
              break;
 800c026:	bf00      	nop
          }
          break;
 800c028:	e0ab      	b.n	800c182 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b02      	cmp	r3, #2
 800c034:	d002      	beq.n	800c03c <USBD_StdEPReq+0x1dc>
 800c036:	2b03      	cmp	r3, #3
 800c038:	d032      	beq.n	800c0a0 <USBD_StdEPReq+0x240>
 800c03a:	e097      	b.n	800c16c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c03c:	7bbb      	ldrb	r3, [r7, #14]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d007      	beq.n	800c052 <USBD_StdEPReq+0x1f2>
 800c042:	7bbb      	ldrb	r3, [r7, #14]
 800c044:	2b80      	cmp	r3, #128	@ 0x80
 800c046:	d004      	beq.n	800c052 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fbed 	bl	800c82a <USBD_CtlError>
                break;
 800c050:	e091      	b.n	800c176 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c056:	2b00      	cmp	r3, #0
 800c058:	da0b      	bge.n	800c072 <USBD_StdEPReq+0x212>
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	3310      	adds	r3, #16
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	4413      	add	r3, r2
 800c06e:	3304      	adds	r3, #4
 800c070:	e00b      	b.n	800c08a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c072:	7bbb      	ldrb	r3, [r7, #14]
 800c074:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c078:	4613      	mov	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	4413      	add	r3, r2
 800c088:	3304      	adds	r3, #4
 800c08a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2200      	movs	r2, #0
 800c090:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2202      	movs	r2, #2
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fc43 	bl	800c924 <USBD_CtlSendData>
              break;
 800c09e:	e06a      	b.n	800c176 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	da11      	bge.n	800c0cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	f003 020f 	and.w	r2, r3, #15
 800c0ae:	6879      	ldr	r1, [r7, #4]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	440b      	add	r3, r1
 800c0ba:	3324      	adds	r3, #36	@ 0x24
 800c0bc:	881b      	ldrh	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d117      	bne.n	800c0f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fbb0 	bl	800c82a <USBD_CtlError>
                  break;
 800c0ca:	e054      	b.n	800c176 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	f003 020f 	and.w	r2, r3, #15
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	440b      	add	r3, r1
 800c0de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c0e2:	881b      	ldrh	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d104      	bne.n	800c0f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 fb9d 	bl	800c82a <USBD_CtlError>
                  break;
 800c0f0:	e041      	b.n	800c176 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	da0b      	bge.n	800c112 <USBD_StdEPReq+0x2b2>
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c100:	4613      	mov	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	3310      	adds	r3, #16
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	4413      	add	r3, r2
 800c10e:	3304      	adds	r3, #4
 800c110:	e00b      	b.n	800c12a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c118:	4613      	mov	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	4413      	add	r3, r2
 800c128:	3304      	adds	r3, #4
 800c12a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d002      	beq.n	800c138 <USBD_StdEPReq+0x2d8>
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b80      	cmp	r3, #128	@ 0x80
 800c136:	d103      	bne.n	800c140 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e00e      	b.n	800c15e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f003 fa19 	bl	800f57c <USBD_LL_IsStallEP>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2201      	movs	r2, #1
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	e002      	b.n	800c15e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2200      	movs	r2, #0
 800c15c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2202      	movs	r2, #2
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fbdd 	bl	800c924 <USBD_CtlSendData>
              break;
 800c16a:	e004      	b.n	800c176 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fb5b 	bl	800c82a <USBD_CtlError>
              break;
 800c174:	bf00      	nop
          }
          break;
 800c176:	e004      	b.n	800c182 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fb55 	bl	800c82a <USBD_CtlError>
          break;
 800c180:	bf00      	nop
      }
      break;
 800c182:	e005      	b.n	800c190 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fb4f 	bl	800c82a <USBD_CtlError>
      break;
 800c18c:	e000      	b.n	800c190 <USBD_StdEPReq+0x330>
      break;
 800c18e:	bf00      	nop
  }

  return ret;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	0a1b      	lsrs	r3, r3, #8
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b06      	cmp	r3, #6
 800c1be:	f200 8128 	bhi.w	800c412 <USBD_GetDescriptor+0x276>
 800c1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c8 <USBD_GetDescriptor+0x2c>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1e5 	.word	0x0800c1e5
 800c1cc:	0800c1fd 	.word	0x0800c1fd
 800c1d0:	0800c23d 	.word	0x0800c23d
 800c1d4:	0800c413 	.word	0x0800c413
 800c1d8:	0800c413 	.word	0x0800c413
 800c1dc:	0800c3b3 	.word	0x0800c3b3
 800c1e0:	0800c3df 	.word	0x0800c3df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	7c12      	ldrb	r2, [r2, #16]
 800c1f0:	f107 0108 	add.w	r1, r7, #8
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	4798      	blx	r3
 800c1f8:	60f8      	str	r0, [r7, #12]
      break;
 800c1fa:	e112      	b.n	800c422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	7c1b      	ldrb	r3, [r3, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10d      	bne.n	800c220 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c20c:	f107 0208 	add.w	r2, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3301      	adds	r3, #1
 800c21a:	2202      	movs	r2, #2
 800c21c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c21e:	e100      	b.n	800c422 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c228:	f107 0208 	add.w	r2, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	2202      	movs	r2, #2
 800c238:	701a      	strb	r2, [r3, #0]
      break;
 800c23a:	e0f2      	b.n	800c422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	885b      	ldrh	r3, [r3, #2]
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b05      	cmp	r3, #5
 800c244:	f200 80ac 	bhi.w	800c3a0 <USBD_GetDescriptor+0x204>
 800c248:	a201      	add	r2, pc, #4	@ (adr r2, 800c250 <USBD_GetDescriptor+0xb4>)
 800c24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24e:	bf00      	nop
 800c250:	0800c269 	.word	0x0800c269
 800c254:	0800c29d 	.word	0x0800c29d
 800c258:	0800c2d1 	.word	0x0800c2d1
 800c25c:	0800c305 	.word	0x0800c305
 800c260:	0800c339 	.word	0x0800c339
 800c264:	0800c36d 	.word	0x0800c36d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00b      	beq.n	800c28c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	7c12      	ldrb	r2, [r2, #16]
 800c280:	f107 0108 	add.w	r1, r7, #8
 800c284:	4610      	mov	r0, r2
 800c286:	4798      	blx	r3
 800c288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c28a:	e091      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 facb 	bl	800c82a <USBD_CtlError>
            err++;
 800c294:	7afb      	ldrb	r3, [r7, #11]
 800c296:	3301      	adds	r3, #1
 800c298:	72fb      	strb	r3, [r7, #11]
          break;
 800c29a:	e089      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00b      	beq.n	800c2c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	7c12      	ldrb	r2, [r2, #16]
 800c2b4:	f107 0108 	add.w	r1, r7, #8
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	4798      	blx	r3
 800c2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2be:	e077      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fab1 	bl	800c82a <USBD_CtlError>
            err++;
 800c2c8:	7afb      	ldrb	r3, [r7, #11]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ce:	e06f      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	7c12      	ldrb	r2, [r2, #16]
 800c2e8:	f107 0108 	add.w	r1, r7, #8
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4798      	blx	r3
 800c2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2f2:	e05d      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fa97 	bl	800c82a <USBD_CtlError>
            err++;
 800c2fc:	7afb      	ldrb	r3, [r7, #11]
 800c2fe:	3301      	adds	r3, #1
 800c300:	72fb      	strb	r3, [r7, #11]
          break;
 800c302:	e055      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	7c12      	ldrb	r2, [r2, #16]
 800c31c:	f107 0108 	add.w	r1, r7, #8
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
 800c324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c326:	e043      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fa7d 	bl	800c82a <USBD_CtlError>
            err++;
 800c330:	7afb      	ldrb	r3, [r7, #11]
 800c332:	3301      	adds	r3, #1
 800c334:	72fb      	strb	r3, [r7, #11]
          break;
 800c336:	e03b      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00b      	beq.n	800c35c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c34a:	695b      	ldr	r3, [r3, #20]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	7c12      	ldrb	r2, [r2, #16]
 800c350:	f107 0108 	add.w	r1, r7, #8
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c35a:	e029      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fa63 	bl	800c82a <USBD_CtlError>
            err++;
 800c364:	7afb      	ldrb	r3, [r7, #11]
 800c366:	3301      	adds	r3, #1
 800c368:	72fb      	strb	r3, [r7, #11]
          break;
 800c36a:	e021      	b.n	800c3b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	7c12      	ldrb	r2, [r2, #16]
 800c384:	f107 0108 	add.w	r1, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c38e:	e00f      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fa49 	bl	800c82a <USBD_CtlError>
            err++;
 800c398:	7afb      	ldrb	r3, [r7, #11]
 800c39a:	3301      	adds	r3, #1
 800c39c:	72fb      	strb	r3, [r7, #11]
          break;
 800c39e:	e007      	b.n	800c3b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fa41 	bl	800c82a <USBD_CtlError>
          err++;
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c3ae:	bf00      	nop
      }
      break;
 800c3b0:	e037      	b.n	800c422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	7c1b      	ldrb	r3, [r3, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d109      	bne.n	800c3ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3c2:	f107 0208 	add.w	r2, r7, #8
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	4798      	blx	r3
 800c3ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3cc:	e029      	b.n	800c422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fa2a 	bl	800c82a <USBD_CtlError>
        err++;
 800c3d6:	7afb      	ldrb	r3, [r7, #11]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	72fb      	strb	r3, [r7, #11]
      break;
 800c3dc:	e021      	b.n	800c422 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7c1b      	ldrb	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10d      	bne.n	800c402 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ee:	f107 0208 	add.w	r2, r7, #8
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	4798      	blx	r3
 800c3f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	2207      	movs	r2, #7
 800c3fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c400:	e00f      	b.n	800c422 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fa10 	bl	800c82a <USBD_CtlError>
        err++;
 800c40a:	7afb      	ldrb	r3, [r7, #11]
 800c40c:	3301      	adds	r3, #1
 800c40e:	72fb      	strb	r3, [r7, #11]
      break;
 800c410:	e007      	b.n	800c422 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fa08 	bl	800c82a <USBD_CtlError>
      err++;
 800c41a:	7afb      	ldrb	r3, [r7, #11]
 800c41c:	3301      	adds	r3, #1
 800c41e:	72fb      	strb	r3, [r7, #11]
      break;
 800c420:	bf00      	nop
  }

  if (err != 0U)
 800c422:	7afb      	ldrb	r3, [r7, #11]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d11e      	bne.n	800c466 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	88db      	ldrh	r3, [r3, #6]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d016      	beq.n	800c45e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c430:	893b      	ldrh	r3, [r7, #8]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00e      	beq.n	800c454 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	88da      	ldrh	r2, [r3, #6]
 800c43a:	893b      	ldrh	r3, [r7, #8]
 800c43c:	4293      	cmp	r3, r2
 800c43e:	bf28      	it	cs
 800c440:	4613      	movcs	r3, r2
 800c442:	b29b      	uxth	r3, r3
 800c444:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c446:	893b      	ldrh	r3, [r7, #8]
 800c448:	461a      	mov	r2, r3
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fa69 	bl	800c924 <USBD_CtlSendData>
 800c452:	e009      	b.n	800c468 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f9e7 	bl	800c82a <USBD_CtlError>
 800c45c:	e004      	b.n	800c468 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 faba 	bl	800c9d8 <USBD_CtlSendStatus>
 800c464:	e000      	b.n	800c468 <USBD_GetDescriptor+0x2cc>
    return;
 800c466:	bf00      	nop
  }
}
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop

0800c470 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	889b      	ldrh	r3, [r3, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d131      	bne.n	800c4e6 <USBD_SetAddress+0x76>
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	88db      	ldrh	r3, [r3, #6]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d12d      	bne.n	800c4e6 <USBD_SetAddress+0x76>
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	885b      	ldrh	r3, [r3, #2]
 800c48e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c490:	d829      	bhi.n	800c4e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	885b      	ldrh	r3, [r3, #2]
 800c496:	b2db      	uxtb	r3, r3
 800c498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c49c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d104      	bne.n	800c4b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f9bc 	bl	800c82a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4b2:	e01d      	b.n	800c4f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	7bfa      	ldrb	r2, [r7, #15]
 800c4b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	4619      	mov	r1, r3
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f003 f887 	bl	800f5d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fa86 	bl	800c9d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d004      	beq.n	800c4dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4da:	e009      	b.n	800c4f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e4:	e004      	b.n	800c4f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f99e 	bl	800c82a <USBD_CtlError>
  }
}
 800c4ee:	bf00      	nop
 800c4f0:	bf00      	nop
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	885b      	ldrh	r3, [r3, #2]
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	4b4e      	ldr	r3, [pc, #312]	@ (800c648 <USBD_SetConfig+0x150>)
 800c50e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c510:	4b4d      	ldr	r3, [pc, #308]	@ (800c648 <USBD_SetConfig+0x150>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d905      	bls.n	800c524 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f985 	bl	800c82a <USBD_CtlError>
    return USBD_FAIL;
 800c520:	2303      	movs	r3, #3
 800c522:	e08c      	b.n	800c63e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d002      	beq.n	800c536 <USBD_SetConfig+0x3e>
 800c530:	2b03      	cmp	r3, #3
 800c532:	d029      	beq.n	800c588 <USBD_SetConfig+0x90>
 800c534:	e075      	b.n	800c622 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c536:	4b44      	ldr	r3, [pc, #272]	@ (800c648 <USBD_SetConfig+0x150>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d020      	beq.n	800c580 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c53e:	4b42      	ldr	r3, [pc, #264]	@ (800c648 <USBD_SetConfig+0x150>)
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	461a      	mov	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c548:	4b3f      	ldr	r3, [pc, #252]	@ (800c648 <USBD_SetConfig+0x150>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7fe ffe3 	bl	800b51a <USBD_SetClassConfig>
 800c554:	4603      	mov	r3, r0
 800c556:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c558:	7bfb      	ldrb	r3, [r7, #15]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d008      	beq.n	800c570 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c55e:	6839      	ldr	r1, [r7, #0]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f962 	bl	800c82a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2202      	movs	r2, #2
 800c56a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c56e:	e065      	b.n	800c63c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fa31 	bl	800c9d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2203      	movs	r2, #3
 800c57a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c57e:	e05d      	b.n	800c63c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fa29 	bl	800c9d8 <USBD_CtlSendStatus>
      break;
 800c586:	e059      	b.n	800c63c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c588:	4b2f      	ldr	r3, [pc, #188]	@ (800c648 <USBD_SetConfig+0x150>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d112      	bne.n	800c5b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2202      	movs	r2, #2
 800c594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c598:	4b2b      	ldr	r3, [pc, #172]	@ (800c648 <USBD_SetConfig+0x150>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	461a      	mov	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5a2:	4b29      	ldr	r3, [pc, #164]	@ (800c648 <USBD_SetConfig+0x150>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7fe ffd2 	bl	800b552 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa12 	bl	800c9d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5b4:	e042      	b.n	800c63c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c5b6:	4b24      	ldr	r3, [pc, #144]	@ (800c648 <USBD_SetConfig+0x150>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d02a      	beq.n	800c61a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7fe ffc0 	bl	800b552 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c5d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c648 <USBD_SetConfig+0x150>)
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c648 <USBD_SetConfig+0x150>)
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7fe ff99 	bl	800b51a <USBD_SetClassConfig>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00f      	beq.n	800c612 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f918 	bl	800c82a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	4619      	mov	r1, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7fe ffa5 	bl	800b552 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2202      	movs	r2, #2
 800c60c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c610:	e014      	b.n	800c63c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f9e0 	bl	800c9d8 <USBD_CtlSendStatus>
      break;
 800c618:	e010      	b.n	800c63c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f9dc 	bl	800c9d8 <USBD_CtlSendStatus>
      break;
 800c620:	e00c      	b.n	800c63c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f900 	bl	800c82a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c62a:	4b07      	ldr	r3, [pc, #28]	@ (800c648 <USBD_SetConfig+0x150>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7fe ff8e 	bl	800b552 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c636:	2303      	movs	r3, #3
 800c638:	73fb      	strb	r3, [r7, #15]
      break;
 800c63a:	bf00      	nop
  }

  return ret;
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20000420 	.word	0x20000420

0800c64c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	88db      	ldrh	r3, [r3, #6]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d004      	beq.n	800c668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f8e2 	bl	800c82a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c666:	e023      	b.n	800c6b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b02      	cmp	r3, #2
 800c672:	dc02      	bgt.n	800c67a <USBD_GetConfig+0x2e>
 800c674:	2b00      	cmp	r3, #0
 800c676:	dc03      	bgt.n	800c680 <USBD_GetConfig+0x34>
 800c678:	e015      	b.n	800c6a6 <USBD_GetConfig+0x5a>
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d00b      	beq.n	800c696 <USBD_GetConfig+0x4a>
 800c67e:	e012      	b.n	800c6a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	3308      	adds	r3, #8
 800c68a:	2201      	movs	r2, #1
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f948 	bl	800c924 <USBD_CtlSendData>
        break;
 800c694:	e00c      	b.n	800c6b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3304      	adds	r3, #4
 800c69a:	2201      	movs	r2, #1
 800c69c:	4619      	mov	r1, r3
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f940 	bl	800c924 <USBD_CtlSendData>
        break;
 800c6a4:	e004      	b.n	800c6b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f8be 	bl	800c82a <USBD_CtlError>
        break;
 800c6ae:	bf00      	nop
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d81e      	bhi.n	800c70e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	88db      	ldrh	r3, [r3, #6]
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d004      	beq.n	800c6e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f8a5 	bl	800c82a <USBD_CtlError>
        break;
 800c6e0:	e01a      	b.n	800c718 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d005      	beq.n	800c6fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	f043 0202 	orr.w	r2, r3, #2
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	330c      	adds	r3, #12
 800c702:	2202      	movs	r2, #2
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 f90c 	bl	800c924 <USBD_CtlSendData>
      break;
 800c70c:	e004      	b.n	800c718 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 f88a 	bl	800c82a <USBD_CtlError>
      break;
 800c716:	bf00      	nop
  }
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	885b      	ldrh	r3, [r3, #2]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d107      	bne.n	800c742 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f94c 	bl	800c9d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c740:	e013      	b.n	800c76a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	885b      	ldrh	r3, [r3, #2]
 800c746:	2b02      	cmp	r3, #2
 800c748:	d10b      	bne.n	800c762 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	889b      	ldrh	r3, [r3, #4]
 800c74e:	0a1b      	lsrs	r3, r3, #8
 800c750:	b29b      	uxth	r3, r3
 800c752:	b2da      	uxtb	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f93c 	bl	800c9d8 <USBD_CtlSendStatus>
}
 800c760:	e003      	b.n	800c76a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f860 	bl	800c82a <USBD_CtlError>
}
 800c76a:	bf00      	nop
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b082      	sub	sp, #8
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c782:	b2db      	uxtb	r3, r3
 800c784:	3b01      	subs	r3, #1
 800c786:	2b02      	cmp	r3, #2
 800c788:	d80b      	bhi.n	800c7a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	885b      	ldrh	r3, [r3, #2]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d10c      	bne.n	800c7ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f91c 	bl	800c9d8 <USBD_CtlSendStatus>
      }
      break;
 800c7a0:	e004      	b.n	800c7ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f840 	bl	800c82a <USBD_CtlError>
      break;
 800c7aa:	e000      	b.n	800c7ae <USBD_ClrFeature+0x3c>
      break;
 800c7ac:	bf00      	nop
  }
}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b084      	sub	sp, #16
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	781a      	ldrb	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	781a      	ldrb	r2, [r3, #0]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff fa40 	bl	800bc66 <SWAPBYTE>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7ff fa33 	bl	800bc66 <SWAPBYTE>
 800c800:	4603      	mov	r3, r0
 800c802:	461a      	mov	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3301      	adds	r3, #1
 800c80c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3301      	adds	r3, #1
 800c812:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f7ff fa26 	bl	800bc66 <SWAPBYTE>
 800c81a:	4603      	mov	r3, r0
 800c81c:	461a      	mov	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	80da      	strh	r2, [r3, #6]
}
 800c822:	bf00      	nop
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c834:	2180      	movs	r1, #128	@ 0x80
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f002 fe62 	bl	800f500 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c83c:	2100      	movs	r1, #0
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f002 fe5e 	bl	800f500 <USBD_LL_StallEP>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c858:	2300      	movs	r3, #0
 800c85a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d042      	beq.n	800c8e8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c866:	6938      	ldr	r0, [r7, #16]
 800c868:	f000 f842 	bl	800c8f0 <USBD_GetLen>
 800c86c:	4603      	mov	r3, r0
 800c86e:	3301      	adds	r3, #1
 800c870:	005b      	lsls	r3, r3, #1
 800c872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c876:	d808      	bhi.n	800c88a <USBD_GetString+0x3e>
 800c878:	6938      	ldr	r0, [r7, #16]
 800c87a:	f000 f839 	bl	800c8f0 <USBD_GetLen>
 800c87e:	4603      	mov	r3, r0
 800c880:	3301      	adds	r3, #1
 800c882:	b29b      	uxth	r3, r3
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	b29a      	uxth	r2, r3
 800c888:	e001      	b.n	800c88e <USBD_GetString+0x42>
 800c88a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	4413      	add	r3, r2
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	7812      	ldrb	r2, [r2, #0]
 800c89c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c89e:	7dfb      	ldrb	r3, [r7, #23]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8a4:	7dfb      	ldrb	r3, [r7, #23]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	2203      	movs	r2, #3
 800c8ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8b4:	e013      	b.n	800c8de <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c8b6:	7dfb      	ldrb	r3, [r7, #23]
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	693a      	ldr	r2, [r7, #16]
 800c8be:	7812      	ldrb	r2, [r2, #0]
 800c8c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	613b      	str	r3, [r7, #16]
    idx++;
 800c8c8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8ce:	7dfb      	ldrb	r3, [r7, #23]
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e7      	bne.n	800c8b6 <USBD_GetString+0x6a>
 800c8e6:	e000      	b.n	800c8ea <USBD_GetString+0x9e>
    return;
 800c8e8:	bf00      	nop
  }
}
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c900:	e005      	b.n	800c90e <USBD_GetLen+0x1e>
  {
    len++;
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	3301      	adds	r3, #1
 800c906:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	3301      	adds	r3, #1
 800c90c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1f5      	bne.n	800c902 <USBD_GetLen+0x12>
  }

  return len;
 800c916:	7bfb      	ldrb	r3, [r7, #15]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2202      	movs	r2, #2
 800c934:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	2100      	movs	r1, #0
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f002 fe61 	bl	800f612 <USBD_LL_Transmit>

  return USBD_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	60f8      	str	r0, [r7, #12]
 800c962:	60b9      	str	r1, [r7, #8]
 800c964:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	2100      	movs	r1, #0
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f002 fe50 	bl	800f612 <USBD_LL_Transmit>

  return USBD_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2203      	movs	r2, #3
 800c98c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f002 fe54 	bl	800f654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b084      	sub	sp, #16
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	60f8      	str	r0, [r7, #12]
 800c9be:	60b9      	str	r1, [r7, #8]
 800c9c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f002 fe43 	bl	800f654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2204      	movs	r2, #4
 800c9e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f002 fe0f 	bl	800f612 <USBD_LL_Transmit>

  return USBD_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2205      	movs	r2, #5
 800ca0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca0e:	2300      	movs	r3, #0
 800ca10:	2200      	movs	r2, #0
 800ca12:	2100      	movs	r1, #0
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f002 fe1d 	bl	800f654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	4a08      	ldr	r2, [pc, #32]	@ (800ca54 <disk_status+0x30>)
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	79fa      	ldrb	r2, [r7, #7]
 800ca3c:	4905      	ldr	r1, [pc, #20]	@ (800ca54 <disk_status+0x30>)
 800ca3e:	440a      	add	r2, r1
 800ca40:	7a12      	ldrb	r2, [r2, #8]
 800ca42:	4610      	mov	r0, r2
 800ca44:	4798      	blx	r3
 800ca46:	4603      	mov	r3, r0
 800ca48:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	2000044c 	.word	0x2000044c

0800ca58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	4a0e      	ldr	r2, [pc, #56]	@ (800caa4 <disk_initialize+0x4c>)
 800ca6a:	5cd3      	ldrb	r3, [r2, r3]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d114      	bne.n	800ca9a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	4a0c      	ldr	r2, [pc, #48]	@ (800caa4 <disk_initialize+0x4c>)
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4413      	add	r3, r2
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	79fa      	ldrb	r2, [r7, #7]
 800ca7e:	4909      	ldr	r1, [pc, #36]	@ (800caa4 <disk_initialize+0x4c>)
 800ca80:	440a      	add	r2, r1
 800ca82:	7a12      	ldrb	r2, [r2, #8]
 800ca84:	4610      	mov	r0, r2
 800ca86:	4798      	blx	r3
 800ca88:	4603      	mov	r3, r0
 800ca8a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d103      	bne.n	800ca9a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	4a03      	ldr	r2, [pc, #12]	@ (800caa4 <disk_initialize+0x4c>)
 800ca96:	2101      	movs	r1, #1
 800ca98:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	2000044c 	.word	0x2000044c

0800caa8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800caa8:	b590      	push	{r4, r7, lr}
 800caaa:	b087      	sub	sp, #28
 800caac:	af00      	add	r7, sp, #0
 800caae:	60b9      	str	r1, [r7, #8]
 800cab0:	607a      	str	r2, [r7, #4]
 800cab2:	603b      	str	r3, [r7, #0]
 800cab4:	4603      	mov	r3, r0
 800cab6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cab8:	7bfb      	ldrb	r3, [r7, #15]
 800caba:	4a0a      	ldr	r2, [pc, #40]	@ (800cae4 <disk_read+0x3c>)
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4413      	add	r3, r2
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	689c      	ldr	r4, [r3, #8]
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	4a07      	ldr	r2, [pc, #28]	@ (800cae4 <disk_read+0x3c>)
 800cac8:	4413      	add	r3, r2
 800caca:	7a18      	ldrb	r0, [r3, #8]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	68b9      	ldr	r1, [r7, #8]
 800cad2:	47a0      	blx	r4
 800cad4:	4603      	mov	r3, r0
 800cad6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	371c      	adds	r7, #28
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd90      	pop	{r4, r7, pc}
 800cae2:	bf00      	nop
 800cae4:	2000044c 	.word	0x2000044c

0800cae8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cae8:	b590      	push	{r4, r7, lr}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
 800caf2:	603b      	str	r3, [r7, #0]
 800caf4:	4603      	mov	r3, r0
 800caf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	4a0a      	ldr	r2, [pc, #40]	@ (800cb24 <disk_write+0x3c>)
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4413      	add	r3, r2
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	68dc      	ldr	r4, [r3, #12]
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
 800cb06:	4a07      	ldr	r2, [pc, #28]	@ (800cb24 <disk_write+0x3c>)
 800cb08:	4413      	add	r3, r2
 800cb0a:	7a18      	ldrb	r0, [r3, #8]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	68b9      	ldr	r1, [r7, #8]
 800cb12:	47a0      	blx	r4
 800cb14:	4603      	mov	r3, r0
 800cb16:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	371c      	adds	r7, #28
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd90      	pop	{r4, r7, pc}
 800cb22:	bf00      	nop
 800cb24:	2000044c 	.word	0x2000044c

0800cb28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	603a      	str	r2, [r7, #0]
 800cb32:	71fb      	strb	r3, [r7, #7]
 800cb34:	460b      	mov	r3, r1
 800cb36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cb38:	79fb      	ldrb	r3, [r7, #7]
 800cb3a:	4a09      	ldr	r2, [pc, #36]	@ (800cb60 <disk_ioctl+0x38>)
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	79fa      	ldrb	r2, [r7, #7]
 800cb46:	4906      	ldr	r1, [pc, #24]	@ (800cb60 <disk_ioctl+0x38>)
 800cb48:	440a      	add	r2, r1
 800cb4a:	7a10      	ldrb	r0, [r2, #8]
 800cb4c:	79b9      	ldrb	r1, [r7, #6]
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	4798      	blx	r3
 800cb52:	4603      	mov	r3, r0
 800cb54:	73fb      	strb	r3, [r7, #15]
  return res;
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	2000044c 	.word	0x2000044c

0800cb64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cb74:	89fb      	ldrh	r3, [r7, #14]
 800cb76:	021b      	lsls	r3, r3, #8
 800cb78:	b21a      	sxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	b21b      	sxth	r3, r3
 800cb80:	4313      	orrs	r3, r2
 800cb82:	b21b      	sxth	r3, r3
 800cb84:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cb86:	89fb      	ldrh	r3, [r7, #14]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3303      	adds	r3, #3
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	021b      	lsls	r3, r3, #8
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	3202      	adds	r2, #2
 800cbac:	7812      	ldrb	r2, [r2, #0]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	021b      	lsls	r3, r3, #8
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	3201      	adds	r2, #1
 800cbba:	7812      	ldrb	r2, [r2, #0]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	021b      	lsls	r3, r3, #8
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	7812      	ldrb	r2, [r2, #0]
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	60fb      	str	r3, [r7, #12]
	return rv;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cbda:	b480      	push	{r7}
 800cbdc:	b083      	sub	sp, #12
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	1c5a      	adds	r2, r3, #1
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	887a      	ldrh	r2, [r7, #2]
 800cbee:	b2d2      	uxtb	r2, r2
 800cbf0:	701a      	strb	r2, [r3, #0]
 800cbf2:	887b      	ldrh	r3, [r7, #2]
 800cbf4:	0a1b      	lsrs	r3, r3, #8
 800cbf6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	607a      	str	r2, [r7, #4]
 800cbfe:	887a      	ldrh	r2, [r7, #2]
 800cc00:	b2d2      	uxtb	r2, r2
 800cc02:	701a      	strb	r2, [r3, #0]
}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	1c5a      	adds	r2, r3, #1
 800cc1e:	607a      	str	r2, [r7, #4]
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	b2d2      	uxtb	r2, r2
 800cc24:	701a      	strb	r2, [r3, #0]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	0a1b      	lsrs	r3, r3, #8
 800cc2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	1c5a      	adds	r2, r3, #1
 800cc30:	607a      	str	r2, [r7, #4]
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	b2d2      	uxtb	r2, r2
 800cc36:	701a      	strb	r2, [r3, #0]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	0a1b      	lsrs	r3, r3, #8
 800cc3c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	0a1b      	lsrs	r3, r3, #8
 800cc4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	607a      	str	r2, [r7, #4]
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	b2d2      	uxtb	r2, r2
 800cc5a:	701a      	strb	r2, [r3, #0]
}
 800cc5c:	bf00      	nop
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cc68:	b480      	push	{r7}
 800cc6a:	b087      	sub	sp, #28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00d      	beq.n	800cc9e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	1c53      	adds	r3, r2, #1
 800cc86:	613b      	str	r3, [r7, #16]
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	1c59      	adds	r1, r3, #1
 800cc8c:	6179      	str	r1, [r7, #20]
 800cc8e:	7812      	ldrb	r2, [r2, #0]
 800cc90:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	607b      	str	r3, [r7, #4]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1f1      	bne.n	800cc82 <mem_cpy+0x1a>
	}
}
 800cc9e:	bf00      	nop
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ccaa:	b480      	push	{r7}
 800ccac:	b087      	sub	sp, #28
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	60f8      	str	r0, [r7, #12]
 800ccb2:	60b9      	str	r1, [r7, #8]
 800ccb4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	617a      	str	r2, [r7, #20]
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	b2d2      	uxtb	r2, r2
 800ccc4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1f3      	bne.n	800ccba <mem_set+0x10>
}
 800ccd2:	bf00      	nop
 800ccd4:	bf00      	nop
 800ccd6:	371c      	adds	r7, #28
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cce0:	b480      	push	{r7}
 800cce2:	b089      	sub	sp, #36	@ 0x24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	61fb      	str	r3, [r7, #28]
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	61fa      	str	r2, [r7, #28]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	4619      	mov	r1, r3
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	61ba      	str	r2, [r7, #24]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	1acb      	subs	r3, r1, r3
 800cd0c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	607b      	str	r3, [r7, #4]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <mem_cmp+0x40>
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d0eb      	beq.n	800ccf8 <mem_cmp+0x18>

	return r;
 800cd20:	697b      	ldr	r3, [r7, #20]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3724      	adds	r7, #36	@ 0x24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cd38:	e002      	b.n	800cd40 <chk_chr+0x12>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	607b      	str	r3, [r7, #4]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d005      	beq.n	800cd54 <chk_chr+0x26>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d1f2      	bne.n	800cd3a <chk_chr+0xc>
	return *str;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	781b      	ldrb	r3, [r3, #0]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60bb      	str	r3, [r7, #8]
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	e029      	b.n	800cdcc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cd78:	4a27      	ldr	r2, [pc, #156]	@ (800ce18 <chk_lock+0xb4>)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	011b      	lsls	r3, r3, #4
 800cd7e:	4413      	add	r3, r2
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d01d      	beq.n	800cdc2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd86:	4a24      	ldr	r2, [pc, #144]	@ (800ce18 <chk_lock+0xb4>)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	011b      	lsls	r3, r3, #4
 800cd8c:	4413      	add	r3, r2
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d116      	bne.n	800cdc6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cd98:	4a1f      	ldr	r2, [pc, #124]	@ (800ce18 <chk_lock+0xb4>)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	011b      	lsls	r3, r3, #4
 800cd9e:	4413      	add	r3, r2
 800cda0:	3304      	adds	r3, #4
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d10c      	bne.n	800cdc6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cdac:	4a1a      	ldr	r2, [pc, #104]	@ (800ce18 <chk_lock+0xb4>)
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	011b      	lsls	r3, r3, #4
 800cdb2:	4413      	add	r3, r2
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d102      	bne.n	800cdc6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cdc0:	e007      	b.n	800cdd2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d9d2      	bls.n	800cd78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d109      	bne.n	800cdec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d102      	bne.n	800cde4 <chk_lock+0x80>
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d101      	bne.n	800cde8 <chk_lock+0x84>
 800cde4:	2300      	movs	r3, #0
 800cde6:	e010      	b.n	800ce0a <chk_lock+0xa6>
 800cde8:	2312      	movs	r3, #18
 800cdea:	e00e      	b.n	800ce0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d108      	bne.n	800ce04 <chk_lock+0xa0>
 800cdf2:	4a09      	ldr	r2, [pc, #36]	@ (800ce18 <chk_lock+0xb4>)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	011b      	lsls	r3, r3, #4
 800cdf8:	4413      	add	r3, r2
 800cdfa:	330c      	adds	r3, #12
 800cdfc:	881b      	ldrh	r3, [r3, #0]
 800cdfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce02:	d101      	bne.n	800ce08 <chk_lock+0xa4>
 800ce04:	2310      	movs	r3, #16
 800ce06:	e000      	b.n	800ce0a <chk_lock+0xa6>
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	2000042c 	.word	0x2000042c

0800ce1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce22:	2300      	movs	r3, #0
 800ce24:	607b      	str	r3, [r7, #4]
 800ce26:	e002      	b.n	800ce2e <enq_lock+0x12>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	607b      	str	r3, [r7, #4]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d806      	bhi.n	800ce42 <enq_lock+0x26>
 800ce34:	4a09      	ldr	r2, [pc, #36]	@ (800ce5c <enq_lock+0x40>)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	011b      	lsls	r3, r3, #4
 800ce3a:	4413      	add	r3, r2
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1f2      	bne.n	800ce28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	bf14      	ite	ne
 800ce48:	2301      	movne	r3, #1
 800ce4a:	2300      	moveq	r3, #0
 800ce4c:	b2db      	uxtb	r3, r3
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	370c      	adds	r7, #12
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	2000042c 	.word	0x2000042c

0800ce60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	60fb      	str	r3, [r7, #12]
 800ce6e:	e01f      	b.n	800ceb0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ce70:	4a41      	ldr	r2, [pc, #260]	@ (800cf78 <inc_lock+0x118>)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	011b      	lsls	r3, r3, #4
 800ce76:	4413      	add	r3, r2
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d113      	bne.n	800ceaa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ce82:	4a3d      	ldr	r2, [pc, #244]	@ (800cf78 <inc_lock+0x118>)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	011b      	lsls	r3, r3, #4
 800ce88:	4413      	add	r3, r2
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d109      	bne.n	800ceaa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ce96:	4a38      	ldr	r2, [pc, #224]	@ (800cf78 <inc_lock+0x118>)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	011b      	lsls	r3, r3, #4
 800ce9c:	4413      	add	r3, r2
 800ce9e:	3308      	adds	r3, #8
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d006      	beq.n	800ceb8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3301      	adds	r3, #1
 800ceae:	60fb      	str	r3, [r7, #12]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d9dc      	bls.n	800ce70 <inc_lock+0x10>
 800ceb6:	e000      	b.n	800ceba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ceb8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d132      	bne.n	800cf26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cec0:	2300      	movs	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	e002      	b.n	800cecc <inc_lock+0x6c>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3301      	adds	r3, #1
 800ceca:	60fb      	str	r3, [r7, #12]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d806      	bhi.n	800cee0 <inc_lock+0x80>
 800ced2:	4a29      	ldr	r2, [pc, #164]	@ (800cf78 <inc_lock+0x118>)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	011b      	lsls	r3, r3, #4
 800ced8:	4413      	add	r3, r2
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1f2      	bne.n	800cec6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d101      	bne.n	800ceea <inc_lock+0x8a>
 800cee6:	2300      	movs	r3, #0
 800cee8:	e040      	b.n	800cf6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	4922      	ldr	r1, [pc, #136]	@ (800cf78 <inc_lock+0x118>)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	011b      	lsls	r3, r3, #4
 800cef4:	440b      	add	r3, r1
 800cef6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	689a      	ldr	r2, [r3, #8]
 800cefc:	491e      	ldr	r1, [pc, #120]	@ (800cf78 <inc_lock+0x118>)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	011b      	lsls	r3, r3, #4
 800cf02:	440b      	add	r3, r1
 800cf04:	3304      	adds	r3, #4
 800cf06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	695a      	ldr	r2, [r3, #20]
 800cf0c:	491a      	ldr	r1, [pc, #104]	@ (800cf78 <inc_lock+0x118>)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	011b      	lsls	r3, r3, #4
 800cf12:	440b      	add	r3, r1
 800cf14:	3308      	adds	r3, #8
 800cf16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cf18:	4a17      	ldr	r2, [pc, #92]	@ (800cf78 <inc_lock+0x118>)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	011b      	lsls	r3, r3, #4
 800cf1e:	4413      	add	r3, r2
 800cf20:	330c      	adds	r3, #12
 800cf22:	2200      	movs	r2, #0
 800cf24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d009      	beq.n	800cf40 <inc_lock+0xe0>
 800cf2c:	4a12      	ldr	r2, [pc, #72]	@ (800cf78 <inc_lock+0x118>)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	011b      	lsls	r3, r3, #4
 800cf32:	4413      	add	r3, r2
 800cf34:	330c      	adds	r3, #12
 800cf36:	881b      	ldrh	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d001      	beq.n	800cf40 <inc_lock+0xe0>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e015      	b.n	800cf6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d108      	bne.n	800cf58 <inc_lock+0xf8>
 800cf46:	4a0c      	ldr	r2, [pc, #48]	@ (800cf78 <inc_lock+0x118>)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	011b      	lsls	r3, r3, #4
 800cf4c:	4413      	add	r3, r2
 800cf4e:	330c      	adds	r3, #12
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	3301      	adds	r3, #1
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	e001      	b.n	800cf5c <inc_lock+0xfc>
 800cf58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf5c:	4906      	ldr	r1, [pc, #24]	@ (800cf78 <inc_lock+0x118>)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	011b      	lsls	r3, r3, #4
 800cf62:	440b      	add	r3, r1
 800cf64:	330c      	adds	r3, #12
 800cf66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	3301      	adds	r3, #1
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr
 800cf78:	2000042c 	.word	0x2000042c

0800cf7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3b01      	subs	r3, #1
 800cf88:	607b      	str	r3, [r7, #4]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d825      	bhi.n	800cfdc <dec_lock+0x60>
		n = Files[i].ctr;
 800cf90:	4a17      	ldr	r2, [pc, #92]	@ (800cff0 <dec_lock+0x74>)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	011b      	lsls	r3, r3, #4
 800cf96:	4413      	add	r3, r2
 800cf98:	330c      	adds	r3, #12
 800cf9a:	881b      	ldrh	r3, [r3, #0]
 800cf9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cf9e:	89fb      	ldrh	r3, [r7, #14]
 800cfa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfa4:	d101      	bne.n	800cfaa <dec_lock+0x2e>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cfaa:	89fb      	ldrh	r3, [r7, #14]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <dec_lock+0x3a>
 800cfb0:	89fb      	ldrh	r3, [r7, #14]
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cfb6:	4a0e      	ldr	r2, [pc, #56]	@ (800cff0 <dec_lock+0x74>)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	011b      	lsls	r3, r3, #4
 800cfbc:	4413      	add	r3, r2
 800cfbe:	330c      	adds	r3, #12
 800cfc0:	89fa      	ldrh	r2, [r7, #14]
 800cfc2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cfc4:	89fb      	ldrh	r3, [r7, #14]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d105      	bne.n	800cfd6 <dec_lock+0x5a>
 800cfca:	4a09      	ldr	r2, [pc, #36]	@ (800cff0 <dec_lock+0x74>)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	011b      	lsls	r3, r3, #4
 800cfd0:	4413      	add	r3, r2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	737b      	strb	r3, [r7, #13]
 800cfda:	e001      	b.n	800cfe0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cfdc:	2302      	movs	r3, #2
 800cfde:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cfe0:	7b7b      	ldrb	r3, [r7, #13]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	2000042c 	.word	0x2000042c

0800cff4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cffc:	2300      	movs	r3, #0
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	e010      	b.n	800d024 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d002:	4a0d      	ldr	r2, [pc, #52]	@ (800d038 <clear_lock+0x44>)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	011b      	lsls	r3, r3, #4
 800d008:	4413      	add	r3, r2
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d105      	bne.n	800d01e <clear_lock+0x2a>
 800d012:	4a09      	ldr	r2, [pc, #36]	@ (800d038 <clear_lock+0x44>)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	011b      	lsls	r3, r3, #4
 800d018:	4413      	add	r3, r2
 800d01a:	2200      	movs	r2, #0
 800d01c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3301      	adds	r3, #1
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2b01      	cmp	r3, #1
 800d028:	d9eb      	bls.n	800d002 <clear_lock+0xe>
	}
}
 800d02a:	bf00      	nop
 800d02c:	bf00      	nop
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	2000042c 	.word	0x2000042c

0800d03c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	78db      	ldrb	r3, [r3, #3]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d034      	beq.n	800d0ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d054:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	7858      	ldrb	r0, [r3, #1]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d060:	2301      	movs	r3, #1
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	f7ff fd40 	bl	800cae8 <disk_write>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d002      	beq.n	800d074 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d06e:	2301      	movs	r3, #1
 800d070:	73fb      	strb	r3, [r7, #15]
 800d072:	e022      	b.n	800d0ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	1ad2      	subs	r2, r2, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	429a      	cmp	r2, r3
 800d088:	d217      	bcs.n	800d0ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	789b      	ldrb	r3, [r3, #2]
 800d08e:	613b      	str	r3, [r7, #16]
 800d090:	e010      	b.n	800d0b4 <sync_window+0x78>
					wsect += fs->fsize;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	697a      	ldr	r2, [r7, #20]
 800d098:	4413      	add	r3, r2
 800d09a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	7858      	ldrb	r0, [r3, #1]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	f7ff fd1d 	bl	800cae8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	613b      	str	r3, [r7, #16]
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d8eb      	bhi.n	800d092 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d01b      	beq.n	800d114 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f7ff ffad 	bl	800d03c <sync_window>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d113      	bne.n	800d114 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7858      	ldrb	r0, [r3, #1]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	f7ff fcd5 	bl	800caa8 <disk_read>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d004      	beq.n	800d10e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d104:	f04f 33ff 	mov.w	r3, #4294967295
 800d108:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	683a      	ldr	r2, [r7, #0]
 800d112:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d114:	7bfb      	ldrb	r3, [r7, #15]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff ff87 	bl	800d03c <sync_window>
 800d12e:	4603      	mov	r3, r0
 800d130:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d158      	bne.n	800d1ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	2b03      	cmp	r3, #3
 800d13e:	d148      	bne.n	800d1d2 <sync_fs+0xb2>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	791b      	ldrb	r3, [r3, #4]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d144      	bne.n	800d1d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3330      	adds	r3, #48	@ 0x30
 800d14c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d150:	2100      	movs	r1, #0
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff fda9 	bl	800ccaa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3330      	adds	r3, #48	@ 0x30
 800d15c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d160:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d164:	4618      	mov	r0, r3
 800d166:	f7ff fd38 	bl	800cbda <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	3330      	adds	r3, #48	@ 0x30
 800d16e:	4921      	ldr	r1, [pc, #132]	@ (800d1f4 <sync_fs+0xd4>)
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff fd4d 	bl	800cc10 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	3330      	adds	r3, #48	@ 0x30
 800d17a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d17e:	491e      	ldr	r1, [pc, #120]	@ (800d1f8 <sync_fs+0xd8>)
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff fd45 	bl	800cc10 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	3330      	adds	r3, #48	@ 0x30
 800d18a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	4619      	mov	r1, r3
 800d194:	4610      	mov	r0, r2
 800d196:	f7ff fd3b 	bl	800cc10 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3330      	adds	r3, #48	@ 0x30
 800d19e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	f7ff fd31 	bl	800cc10 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	69db      	ldr	r3, [r3, #28]
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	7858      	ldrb	r0, [r3, #1]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	f7ff fc8e 	bl	800cae8 <disk_write>
			fs->fsi_flag = 0;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	785b      	ldrb	r3, [r3, #1]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	2100      	movs	r1, #0
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7ff fca4 	bl	800cb28 <disk_ioctl>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <sync_fs+0xca>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	41615252 	.word	0x41615252
 800d1f8:	61417272 	.word	0x61417272

0800d1fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	3b02      	subs	r3, #2
 800d20a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	695b      	ldr	r3, [r3, #20]
 800d210:	3b02      	subs	r3, #2
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	429a      	cmp	r2, r3
 800d216:	d301      	bcc.n	800d21c <clust2sect+0x20>
 800d218:	2300      	movs	r3, #0
 800d21a:	e008      	b.n	800d22e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	895b      	ldrh	r3, [r3, #10]
 800d220:	461a      	mov	r2, r3
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	fb03 f202 	mul.w	r2, r3, r2
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d22c:	4413      	add	r3, r2
}
 800d22e:	4618      	mov	r0, r3
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr

0800d23a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b086      	sub	sp, #24
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d904      	bls.n	800d25a <get_fat+0x20>
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	429a      	cmp	r2, r3
 800d258:	d302      	bcc.n	800d260 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d25a:	2301      	movs	r3, #1
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	e08e      	b.n	800d37e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d260:	f04f 33ff 	mov.w	r3, #4294967295
 800d264:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d061      	beq.n	800d332 <get_fat+0xf8>
 800d26e:	2b03      	cmp	r3, #3
 800d270:	dc7b      	bgt.n	800d36a <get_fat+0x130>
 800d272:	2b01      	cmp	r3, #1
 800d274:	d002      	beq.n	800d27c <get_fat+0x42>
 800d276:	2b02      	cmp	r3, #2
 800d278:	d041      	beq.n	800d2fe <get_fat+0xc4>
 800d27a:	e076      	b.n	800d36a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	085b      	lsrs	r3, r3, #1
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	4413      	add	r3, r2
 800d288:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	6a1a      	ldr	r2, [r3, #32]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	0a5b      	lsrs	r3, r3, #9
 800d292:	4413      	add	r3, r2
 800d294:	4619      	mov	r1, r3
 800d296:	6938      	ldr	r0, [r7, #16]
 800d298:	f7ff ff14 	bl	800d0c4 <move_window>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d166      	bne.n	800d370 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	60fa      	str	r2, [r7, #12]
 800d2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ac:	693a      	ldr	r2, [r7, #16]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	6a1a      	ldr	r2, [r3, #32]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	0a5b      	lsrs	r3, r3, #9
 800d2be:	4413      	add	r3, r2
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6938      	ldr	r0, [r7, #16]
 800d2c4:	f7ff fefe 	bl	800d0c4 <move_window>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d152      	bne.n	800d374 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d4:	693a      	ldr	r2, [r7, #16]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2dc:	021b      	lsls	r3, r3, #8
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	f003 0301 	and.w	r3, r3, #1
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d002      	beq.n	800d2f4 <get_fat+0xba>
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	091b      	lsrs	r3, r3, #4
 800d2f2:	e002      	b.n	800d2fa <get_fat+0xc0>
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2fa:	617b      	str	r3, [r7, #20]
			break;
 800d2fc:	e03f      	b.n	800d37e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	6a1a      	ldr	r2, [r3, #32]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	0a1b      	lsrs	r3, r3, #8
 800d306:	4413      	add	r3, r2
 800d308:	4619      	mov	r1, r3
 800d30a:	6938      	ldr	r0, [r7, #16]
 800d30c:	f7ff feda 	bl	800d0c4 <move_window>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d130      	bne.n	800d378 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	005b      	lsls	r3, r3, #1
 800d320:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d324:	4413      	add	r3, r2
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fc1c 	bl	800cb64 <ld_word>
 800d32c:	4603      	mov	r3, r0
 800d32e:	617b      	str	r3, [r7, #20]
			break;
 800d330:	e025      	b.n	800d37e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	6a1a      	ldr	r2, [r3, #32]
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	09db      	lsrs	r3, r3, #7
 800d33a:	4413      	add	r3, r2
 800d33c:	4619      	mov	r1, r3
 800d33e:	6938      	ldr	r0, [r7, #16]
 800d340:	f7ff fec0 	bl	800d0c4 <move_window>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d118      	bne.n	800d37c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d358:	4413      	add	r3, r2
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7ff fc1a 	bl	800cb94 <ld_dword>
 800d360:	4603      	mov	r3, r0
 800d362:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d366:	617b      	str	r3, [r7, #20]
			break;
 800d368:	e009      	b.n	800d37e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d36a:	2301      	movs	r3, #1
 800d36c:	617b      	str	r3, [r7, #20]
 800d36e:	e006      	b.n	800d37e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d370:	bf00      	nop
 800d372:	e004      	b.n	800d37e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d374:	bf00      	nop
 800d376:	e002      	b.n	800d37e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d378:	bf00      	nop
 800d37a:	e000      	b.n	800d37e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d37c:	bf00      	nop
		}
	}

	return val;
 800d37e:	697b      	ldr	r3, [r7, #20]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3718      	adds	r7, #24
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d388:	b590      	push	{r4, r7, lr}
 800d38a:	b089      	sub	sp, #36	@ 0x24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d394:	2302      	movs	r3, #2
 800d396:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	f240 80d9 	bls.w	800d552 <put_fat+0x1ca>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	695b      	ldr	r3, [r3, #20]
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	f080 80d3 	bcs.w	800d552 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	f000 8096 	beq.w	800d4e2 <put_fat+0x15a>
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	f300 80cb 	bgt.w	800d552 <put_fat+0x1ca>
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d002      	beq.n	800d3c6 <put_fat+0x3e>
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d06e      	beq.n	800d4a2 <put_fat+0x11a>
 800d3c4:	e0c5      	b.n	800d552 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	61bb      	str	r3, [r7, #24]
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	085b      	lsrs	r3, r3, #1
 800d3ce:	69ba      	ldr	r2, [r7, #24]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6a1a      	ldr	r2, [r3, #32]
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	0a5b      	lsrs	r3, r3, #9
 800d3dc:	4413      	add	r3, r2
 800d3de:	4619      	mov	r1, r3
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7ff fe6f 	bl	800d0c4 <move_window>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3ea:	7ffb      	ldrb	r3, [r7, #31]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 80a9 	bne.w	800d544 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	1c59      	adds	r1, r3, #1
 800d3fc:	61b9      	str	r1, [r7, #24]
 800d3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d402:	4413      	add	r3, r2
 800d404:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	f003 0301 	and.w	r3, r3, #1
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00d      	beq.n	800d42c <put_fat+0xa4>
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	b25b      	sxtb	r3, r3
 800d416:	f003 030f 	and.w	r3, r3, #15
 800d41a:	b25a      	sxtb	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	011b      	lsls	r3, r3, #4
 800d422:	b25b      	sxtb	r3, r3
 800d424:	4313      	orrs	r3, r2
 800d426:	b25b      	sxtb	r3, r3
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	e001      	b.n	800d430 <put_fat+0xa8>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2201      	movs	r2, #1
 800d438:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6a1a      	ldr	r2, [r3, #32]
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	0a5b      	lsrs	r3, r3, #9
 800d442:	4413      	add	r3, r2
 800d444:	4619      	mov	r1, r3
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f7ff fe3c 	bl	800d0c4 <move_window>
 800d44c:	4603      	mov	r3, r0
 800d44e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d450:	7ffb      	ldrb	r3, [r7, #31]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d178      	bne.n	800d548 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d462:	4413      	add	r3, r2
 800d464:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f003 0301 	and.w	r3, r3, #1
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <put_fat+0xf0>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	091b      	lsrs	r3, r3, #4
 800d474:	b2db      	uxtb	r3, r3
 800d476:	e00e      	b.n	800d496 <put_fat+0x10e>
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	b25b      	sxtb	r3, r3
 800d47e:	f023 030f 	bic.w	r3, r3, #15
 800d482:	b25a      	sxtb	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	0a1b      	lsrs	r3, r3, #8
 800d488:	b25b      	sxtb	r3, r3
 800d48a:	f003 030f 	and.w	r3, r3, #15
 800d48e:	b25b      	sxtb	r3, r3
 800d490:	4313      	orrs	r3, r2
 800d492:	b25b      	sxtb	r3, r3
 800d494:	b2db      	uxtb	r3, r3
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2201      	movs	r2, #1
 800d49e:	70da      	strb	r2, [r3, #3]
			break;
 800d4a0:	e057      	b.n	800d552 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6a1a      	ldr	r2, [r3, #32]
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	0a1b      	lsrs	r3, r3, #8
 800d4aa:	4413      	add	r3, r2
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f7ff fe08 	bl	800d0c4 <move_window>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4b8:	7ffb      	ldrb	r3, [r7, #31]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d146      	bne.n	800d54c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d4cc:	4413      	add	r3, r2
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	b292      	uxth	r2, r2
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff fb80 	bl	800cbda <st_word>
			fs->wflag = 1;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2201      	movs	r2, #1
 800d4de:	70da      	strb	r2, [r3, #3]
			break;
 800d4e0:	e037      	b.n	800d552 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6a1a      	ldr	r2, [r3, #32]
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	09db      	lsrs	r3, r3, #7
 800d4ea:	4413      	add	r3, r2
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f7ff fde8 	bl	800d0c4 <move_window>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4f8:	7ffb      	ldrb	r3, [r7, #31]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d128      	bne.n	800d550 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d512:	4413      	add	r3, r2
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fb3d 	bl	800cb94 <ld_dword>
 800d51a:	4603      	mov	r3, r0
 800d51c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d520:	4323      	orrs	r3, r4
 800d522:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d532:	4413      	add	r3, r2
 800d534:	6879      	ldr	r1, [r7, #4]
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff fb6a 	bl	800cc10 <st_dword>
			fs->wflag = 1;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2201      	movs	r2, #1
 800d540:	70da      	strb	r2, [r3, #3]
			break;
 800d542:	e006      	b.n	800d552 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d544:	bf00      	nop
 800d546:	e004      	b.n	800d552 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d548:	bf00      	nop
 800d54a:	e002      	b.n	800d552 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d54c:	bf00      	nop
 800d54e:	e000      	b.n	800d552 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d550:	bf00      	nop
		}
	}
	return res;
 800d552:	7ffb      	ldrb	r3, [r7, #31]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3724      	adds	r7, #36	@ 0x24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd90      	pop	{r4, r7, pc}

0800d55c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b088      	sub	sp, #32
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d568:	2300      	movs	r3, #0
 800d56a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d904      	bls.n	800d582 <remove_chain+0x26>
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	68ba      	ldr	r2, [r7, #8]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d301      	bcc.n	800d586 <remove_chain+0x2a>
 800d582:	2302      	movs	r3, #2
 800d584:	e04b      	b.n	800d61e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00c      	beq.n	800d5a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d58c:	f04f 32ff 	mov.w	r2, #4294967295
 800d590:	6879      	ldr	r1, [r7, #4]
 800d592:	69b8      	ldr	r0, [r7, #24]
 800d594:	f7ff fef8 	bl	800d388 <put_fat>
 800d598:	4603      	mov	r3, r0
 800d59a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d59c:	7ffb      	ldrb	r3, [r7, #31]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <remove_chain+0x4a>
 800d5a2:	7ffb      	ldrb	r3, [r7, #31]
 800d5a4:	e03b      	b.n	800d61e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7ff fe46 	bl	800d23a <get_fat>
 800d5ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d031      	beq.n	800d61a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d101      	bne.n	800d5c0 <remove_chain+0x64>
 800d5bc:	2302      	movs	r3, #2
 800d5be:	e02e      	b.n	800d61e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c6:	d101      	bne.n	800d5cc <remove_chain+0x70>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e028      	b.n	800d61e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	69b8      	ldr	r0, [r7, #24]
 800d5d2:	f7ff fed9 	bl	800d388 <put_fat>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d5da:	7ffb      	ldrb	r3, [r7, #31]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <remove_chain+0x88>
 800d5e0:	7ffb      	ldrb	r3, [r7, #31]
 800d5e2:	e01c      	b.n	800d61e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	691a      	ldr	r2, [r3, #16]
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	3b02      	subs	r3, #2
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d20b      	bcs.n	800d60a <remove_chain+0xae>
			fs->free_clst++;
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	691b      	ldr	r3, [r3, #16]
 800d5f6:	1c5a      	adds	r2, r3, #1
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	791b      	ldrb	r3, [r3, #4]
 800d600:	f043 0301 	orr.w	r3, r3, #1
 800d604:	b2da      	uxtb	r2, r3
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	429a      	cmp	r2, r3
 800d616:	d3c6      	bcc.n	800d5a6 <remove_chain+0x4a>
 800d618:	e000      	b.n	800d61c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d61a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3720      	adds	r7, #32
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b088      	sub	sp, #32
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
 800d62e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10d      	bne.n	800d658 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d004      	beq.n	800d652 <create_chain+0x2c>
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	695b      	ldr	r3, [r3, #20]
 800d64c:	69ba      	ldr	r2, [r7, #24]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d31b      	bcc.n	800d68a <create_chain+0x64>
 800d652:	2301      	movs	r3, #1
 800d654:	61bb      	str	r3, [r7, #24]
 800d656:	e018      	b.n	800d68a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7ff fded 	bl	800d23a <get_fat>
 800d660:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d801      	bhi.n	800d66c <create_chain+0x46>
 800d668:	2301      	movs	r3, #1
 800d66a:	e070      	b.n	800d74e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d672:	d101      	bne.n	800d678 <create_chain+0x52>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	e06a      	b.n	800d74e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d201      	bcs.n	800d686 <create_chain+0x60>
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	e063      	b.n	800d74e <create_chain+0x128>
		scl = clst;
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	3301      	adds	r3, #1
 800d692:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	695b      	ldr	r3, [r3, #20]
 800d698:	69fa      	ldr	r2, [r7, #28]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d307      	bcc.n	800d6ae <create_chain+0x88>
				ncl = 2;
 800d69e:	2302      	movs	r3, #2
 800d6a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d6a2:	69fa      	ldr	r2, [r7, #28]
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d901      	bls.n	800d6ae <create_chain+0x88>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	e04f      	b.n	800d74e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d6ae:	69f9      	ldr	r1, [r7, #28]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff fdc2 	bl	800d23a <get_fat>
 800d6b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00e      	beq.n	800d6dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d003      	beq.n	800d6cc <create_chain+0xa6>
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ca:	d101      	bne.n	800d6d0 <create_chain+0xaa>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	e03e      	b.n	800d74e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d6d0:	69fa      	ldr	r2, [r7, #28]
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d1da      	bne.n	800d68e <create_chain+0x68>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	e038      	b.n	800d74e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d6dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d6de:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e2:	69f9      	ldr	r1, [r7, #28]
 800d6e4:	6938      	ldr	r0, [r7, #16]
 800d6e6:	f7ff fe4f 	bl	800d388 <put_fat>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d109      	bne.n	800d708 <create_chain+0xe2>
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d006      	beq.n	800d708 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d6fa:	69fa      	ldr	r2, [r7, #28]
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	6938      	ldr	r0, [r7, #16]
 800d700:	f7ff fe42 	bl	800d388 <put_fat>
 800d704:	4603      	mov	r3, r0
 800d706:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d708:	7dfb      	ldrb	r3, [r7, #23]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d116      	bne.n	800d73c <create_chain+0x116>
		fs->last_clst = ncl;
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	69fa      	ldr	r2, [r7, #28]
 800d712:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	691a      	ldr	r2, [r3, #16]
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	3b02      	subs	r3, #2
 800d71e:	429a      	cmp	r2, r3
 800d720:	d804      	bhi.n	800d72c <create_chain+0x106>
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	1e5a      	subs	r2, r3, #1
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	791b      	ldrb	r3, [r3, #4]
 800d730:	f043 0301 	orr.w	r3, r3, #1
 800d734:	b2da      	uxtb	r2, r3
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	711a      	strb	r2, [r3, #4]
 800d73a:	e007      	b.n	800d74c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d102      	bne.n	800d748 <create_chain+0x122>
 800d742:	f04f 33ff 	mov.w	r3, #4294967295
 800d746:	e000      	b.n	800d74a <create_chain+0x124>
 800d748:	2301      	movs	r3, #1
 800d74a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d74c:	69fb      	ldr	r3, [r7, #28]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3720      	adds	r7, #32
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d756:	b480      	push	{r7}
 800d758:	b087      	sub	sp, #28
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d76a:	3304      	adds	r3, #4
 800d76c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	0a5b      	lsrs	r3, r3, #9
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	8952      	ldrh	r2, [r2, #10]
 800d776:	fbb3 f3f2 	udiv	r3, r3, r2
 800d77a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	1d1a      	adds	r2, r3, #4
 800d780:	613a      	str	r2, [r7, #16]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <clmt_clust+0x3a>
 800d78c:	2300      	movs	r3, #0
 800d78e:	e010      	b.n	800d7b2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d790:	697a      	ldr	r2, [r7, #20]
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	429a      	cmp	r2, r3
 800d796:	d307      	bcc.n	800d7a8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d798:	697a      	ldr	r2, [r7, #20]
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	1ad3      	subs	r3, r2, r3
 800d79e:	617b      	str	r3, [r7, #20]
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d7a6:	e7e9      	b.n	800d77c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d7a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	4413      	add	r3, r2
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	371c      	adds	r7, #28
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b086      	sub	sp, #24
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7d4:	d204      	bcs.n	800d7e0 <dir_sdi+0x22>
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	f003 031f 	and.w	r3, r3, #31
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	e063      	b.n	800d8ac <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d106      	bne.n	800d804 <dir_sdi+0x46>
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d902      	bls.n	800d804 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d802:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10c      	bne.n	800d824 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	095b      	lsrs	r3, r3, #5
 800d80e:	693a      	ldr	r2, [r7, #16]
 800d810:	8912      	ldrh	r2, [r2, #8]
 800d812:	4293      	cmp	r3, r2
 800d814:	d301      	bcc.n	800d81a <dir_sdi+0x5c>
 800d816:	2302      	movs	r3, #2
 800d818:	e048      	b.n	800d8ac <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	61da      	str	r2, [r3, #28]
 800d822:	e029      	b.n	800d878 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	895b      	ldrh	r3, [r3, #10]
 800d828:	025b      	lsls	r3, r3, #9
 800d82a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d82c:	e019      	b.n	800d862 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6979      	ldr	r1, [r7, #20]
 800d832:	4618      	mov	r0, r3
 800d834:	f7ff fd01 	bl	800d23a <get_fat>
 800d838:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d840:	d101      	bne.n	800d846 <dir_sdi+0x88>
 800d842:	2301      	movs	r3, #1
 800d844:	e032      	b.n	800d8ac <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d904      	bls.n	800d856 <dir_sdi+0x98>
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	429a      	cmp	r2, r3
 800d854:	d301      	bcc.n	800d85a <dir_sdi+0x9c>
 800d856:	2302      	movs	r3, #2
 800d858:	e028      	b.n	800d8ac <dir_sdi+0xee>
			ofs -= csz;
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	429a      	cmp	r2, r3
 800d868:	d2e1      	bcs.n	800d82e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d86a:	6979      	ldr	r1, [r7, #20]
 800d86c:	6938      	ldr	r0, [r7, #16]
 800d86e:	f7ff fcc5 	bl	800d1fc <clust2sect>
 800d872:	4602      	mov	r2, r0
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	697a      	ldr	r2, [r7, #20]
 800d87c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	69db      	ldr	r3, [r3, #28]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <dir_sdi+0xcc>
 800d886:	2302      	movs	r3, #2
 800d888:	e010      	b.n	800d8ac <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	69da      	ldr	r2, [r3, #28]
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	0a5b      	lsrs	r3, r3, #9
 800d892:	441a      	add	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8a4:	441a      	add	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3718      	adds	r7, #24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	695b      	ldr	r3, [r3, #20]
 800d8c8:	3320      	adds	r3, #32
 800d8ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	69db      	ldr	r3, [r3, #28]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d003      	beq.n	800d8dc <dir_next+0x28>
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8da:	d301      	bcc.n	800d8e0 <dir_next+0x2c>
 800d8dc:	2304      	movs	r3, #4
 800d8de:	e0aa      	b.n	800da36 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f040 8098 	bne.w	800da1c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	69db      	ldr	r3, [r3, #28]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d10b      	bne.n	800d916 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	095b      	lsrs	r3, r3, #5
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	8912      	ldrh	r2, [r2, #8]
 800d906:	4293      	cmp	r3, r2
 800d908:	f0c0 8088 	bcc.w	800da1c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	61da      	str	r2, [r3, #28]
 800d912:	2304      	movs	r3, #4
 800d914:	e08f      	b.n	800da36 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	0a5b      	lsrs	r3, r3, #9
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	8952      	ldrh	r2, [r2, #10]
 800d91e:	3a01      	subs	r2, #1
 800d920:	4013      	ands	r3, r2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d17a      	bne.n	800da1c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	699b      	ldr	r3, [r3, #24]
 800d92c:	4619      	mov	r1, r3
 800d92e:	4610      	mov	r0, r2
 800d930:	f7ff fc83 	bl	800d23a <get_fat>
 800d934:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d801      	bhi.n	800d940 <dir_next+0x8c>
 800d93c:	2302      	movs	r3, #2
 800d93e:	e07a      	b.n	800da36 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d946:	d101      	bne.n	800d94c <dir_next+0x98>
 800d948:	2301      	movs	r3, #1
 800d94a:	e074      	b.n	800da36 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	697a      	ldr	r2, [r7, #20]
 800d952:	429a      	cmp	r2, r3
 800d954:	d358      	bcc.n	800da08 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d104      	bne.n	800d966 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	61da      	str	r2, [r3, #28]
 800d962:	2304      	movs	r3, #4
 800d964:	e067      	b.n	800da36 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	4619      	mov	r1, r3
 800d96e:	4610      	mov	r0, r2
 800d970:	f7ff fe59 	bl	800d626 <create_chain>
 800d974:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d101      	bne.n	800d980 <dir_next+0xcc>
 800d97c:	2307      	movs	r3, #7
 800d97e:	e05a      	b.n	800da36 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d101      	bne.n	800d98a <dir_next+0xd6>
 800d986:	2302      	movs	r3, #2
 800d988:	e055      	b.n	800da36 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d990:	d101      	bne.n	800d996 <dir_next+0xe2>
 800d992:	2301      	movs	r3, #1
 800d994:	e04f      	b.n	800da36 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f7ff fb50 	bl	800d03c <sync_window>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <dir_next+0xf2>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e047      	b.n	800da36 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3330      	adds	r3, #48	@ 0x30
 800d9aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff f97a 	bl	800ccaa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	613b      	str	r3, [r7, #16]
 800d9ba:	6979      	ldr	r1, [r7, #20]
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f7ff fc1d 	bl	800d1fc <clust2sect>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d9c8:	e012      	b.n	800d9f0 <dir_next+0x13c>
						fs->wflag = 1;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f7ff fb33 	bl	800d03c <sync_window>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d001      	beq.n	800d9e0 <dir_next+0x12c>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e02a      	b.n	800da36 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	613b      	str	r3, [r7, #16]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	895b      	ldrh	r3, [r3, #10]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d3e6      	bcc.n	800d9ca <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	1ad2      	subs	r2, r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	697a      	ldr	r2, [r7, #20]
 800da0c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800da0e:	6979      	ldr	r1, [r7, #20]
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f7ff fbf3 	bl	800d1fc <clust2sect>
 800da16:	4602      	mov	r2, r0
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da2e:	441a      	add	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b086      	sub	sp, #24
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800da4e:	2100      	movs	r1, #0
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff feb4 	bl	800d7be <dir_sdi>
 800da56:	4603      	mov	r3, r0
 800da58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d12b      	bne.n	800dab8 <dir_alloc+0x7a>
		n = 0;
 800da60:	2300      	movs	r3, #0
 800da62:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	69db      	ldr	r3, [r3, #28]
 800da68:	4619      	mov	r1, r3
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f7ff fb2a 	bl	800d0c4 <move_window>
 800da70:	4603      	mov	r3, r0
 800da72:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da74:	7dfb      	ldrb	r3, [r7, #23]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d11d      	bne.n	800dab6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a1b      	ldr	r3, [r3, #32]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2be5      	cmp	r3, #229	@ 0xe5
 800da82:	d004      	beq.n	800da8e <dir_alloc+0x50>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a1b      	ldr	r3, [r3, #32]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d107      	bne.n	800da9e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	3301      	adds	r3, #1
 800da92:	613b      	str	r3, [r7, #16]
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d102      	bne.n	800daa2 <dir_alloc+0x64>
 800da9c:	e00c      	b.n	800dab8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800da9e:	2300      	movs	r3, #0
 800daa0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800daa2:	2101      	movs	r1, #1
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff ff05 	bl	800d8b4 <dir_next>
 800daaa:	4603      	mov	r3, r0
 800daac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800daae:	7dfb      	ldrb	r3, [r7, #23]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d0d7      	beq.n	800da64 <dir_alloc+0x26>
 800dab4:	e000      	b.n	800dab8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dab6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
 800daba:	2b04      	cmp	r3, #4
 800dabc:	d101      	bne.n	800dac2 <dir_alloc+0x84>
 800dabe:	2307      	movs	r3, #7
 800dac0:	75fb      	strb	r3, [r7, #23]
	return res;
 800dac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	331a      	adds	r3, #26
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff f842 	bl	800cb64 <ld_word>
 800dae0:	4603      	mov	r3, r0
 800dae2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	2b03      	cmp	r3, #3
 800daea:	d109      	bne.n	800db00 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	3314      	adds	r3, #20
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff f837 	bl	800cb64 <ld_word>
 800daf6:	4603      	mov	r3, r0
 800daf8:	041b      	lsls	r3, r3, #16
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	4313      	orrs	r3, r2
 800dafe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800db00:	68fb      	ldr	r3, [r7, #12]
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b084      	sub	sp, #16
 800db0e:	af00      	add	r7, sp, #0
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	60b9      	str	r1, [r7, #8]
 800db14:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	331a      	adds	r3, #26
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	b292      	uxth	r2, r2
 800db1e:	4611      	mov	r1, r2
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff f85a 	bl	800cbda <st_word>
	if (fs->fs_type == FS_FAT32) {
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b03      	cmp	r3, #3
 800db2c:	d109      	bne.n	800db42 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	f103 0214 	add.w	r2, r3, #20
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	0c1b      	lsrs	r3, r3, #16
 800db38:	b29b      	uxth	r3, r3
 800db3a:	4619      	mov	r1, r3
 800db3c:	4610      	mov	r0, r2
 800db3e:	f7ff f84c 	bl	800cbda <st_word>
	}
}
 800db42:	bf00      	nop
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b086      	sub	sp, #24
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db58:	2100      	movs	r1, #0
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f7ff fe2f 	bl	800d7be <dir_sdi>
 800db60:	4603      	mov	r3, r0
 800db62:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800db64:	7dfb      	ldrb	r3, [r7, #23]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <dir_find+0x24>
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
 800db6c:	e03e      	b.n	800dbec <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	69db      	ldr	r3, [r3, #28]
 800db72:	4619      	mov	r1, r3
 800db74:	6938      	ldr	r0, [r7, #16]
 800db76:	f7ff faa5 	bl	800d0c4 <move_window>
 800db7a:	4603      	mov	r3, r0
 800db7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d12f      	bne.n	800dbe4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a1b      	ldr	r3, [r3, #32]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d102      	bne.n	800db98 <dir_find+0x4e>
 800db92:	2304      	movs	r3, #4
 800db94:	75fb      	strb	r3, [r7, #23]
 800db96:	e028      	b.n	800dbea <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	330b      	adds	r3, #11
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	330b      	adds	r3, #11
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	f003 0308 	and.w	r3, r3, #8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10a      	bne.n	800dbd0 <dir_find+0x86>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a18      	ldr	r0, [r3, #32]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	3324      	adds	r3, #36	@ 0x24
 800dbc2:	220b      	movs	r2, #11
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f7ff f88b 	bl	800cce0 <mem_cmp>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00b      	beq.n	800dbe8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7ff fe6e 	bl	800d8b4 <dir_next>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dbdc:	7dfb      	ldrb	r3, [r7, #23]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d0c5      	beq.n	800db6e <dir_find+0x24>
 800dbe2:	e002      	b.n	800dbea <dir_find+0xa0>
		if (res != FR_OK) break;
 800dbe4:	bf00      	nop
 800dbe6:	e000      	b.n	800dbea <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dbe8:	bf00      	nop

	return res;
 800dbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dc02:	2101      	movs	r1, #1
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7ff ff1a 	bl	800da3e <dir_alloc>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d11c      	bne.n	800dc4e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	69db      	ldr	r3, [r3, #28]
 800dc18:	4619      	mov	r1, r3
 800dc1a:	68b8      	ldr	r0, [r7, #8]
 800dc1c:	f7ff fa52 	bl	800d0c4 <move_window>
 800dc20:	4603      	mov	r3, r0
 800dc22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d111      	bne.n	800dc4e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	2100      	movs	r1, #0
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7ff f839 	bl	800ccaa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a18      	ldr	r0, [r3, #32]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3324      	adds	r3, #36	@ 0x24
 800dc40:	220b      	movs	r2, #11
 800dc42:	4619      	mov	r1, r3
 800dc44:	f7ff f810 	bl	800cc68 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b088      	sub	sp, #32
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	3324      	adds	r3, #36	@ 0x24
 800dc6c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dc6e:	220b      	movs	r2, #11
 800dc70:	2120      	movs	r1, #32
 800dc72:	68b8      	ldr	r0, [r7, #8]
 800dc74:	f7ff f819 	bl	800ccaa <mem_set>
	si = i = 0; ni = 8;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	613b      	str	r3, [r7, #16]
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	61fb      	str	r3, [r7, #28]
 800dc80:	2308      	movs	r3, #8
 800dc82:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	1c5a      	adds	r2, r3, #1
 800dc88:	61fa      	str	r2, [r7, #28]
 800dc8a:	68fa      	ldr	r2, [r7, #12]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dc92:	7efb      	ldrb	r3, [r7, #27]
 800dc94:	2b20      	cmp	r3, #32
 800dc96:	d94e      	bls.n	800dd36 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dc98:	7efb      	ldrb	r3, [r7, #27]
 800dc9a:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc9c:	d006      	beq.n	800dcac <create_name+0x54>
 800dc9e:	7efb      	ldrb	r3, [r7, #27]
 800dca0:	2b5c      	cmp	r3, #92	@ 0x5c
 800dca2:	d110      	bne.n	800dcc6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dca4:	e002      	b.n	800dcac <create_name+0x54>
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	61fb      	str	r3, [r7, #28]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b2f      	cmp	r3, #47	@ 0x2f
 800dcb6:	d0f6      	beq.n	800dca6 <create_name+0x4e>
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	2b5c      	cmp	r3, #92	@ 0x5c
 800dcc2:	d0f0      	beq.n	800dca6 <create_name+0x4e>
			break;
 800dcc4:	e038      	b.n	800dd38 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dcc6:	7efb      	ldrb	r3, [r7, #27]
 800dcc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcca:	d003      	beq.n	800dcd4 <create_name+0x7c>
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d30c      	bcc.n	800dcee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2b0b      	cmp	r3, #11
 800dcd8:	d002      	beq.n	800dce0 <create_name+0x88>
 800dcda:	7efb      	ldrb	r3, [r7, #27]
 800dcdc:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcde:	d001      	beq.n	800dce4 <create_name+0x8c>
 800dce0:	2306      	movs	r3, #6
 800dce2:	e044      	b.n	800dd6e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dce4:	2308      	movs	r3, #8
 800dce6:	613b      	str	r3, [r7, #16]
 800dce8:	230b      	movs	r3, #11
 800dcea:	617b      	str	r3, [r7, #20]
			continue;
 800dcec:	e022      	b.n	800dd34 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dcee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	da04      	bge.n	800dd00 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dcf6:	7efb      	ldrb	r3, [r7, #27]
 800dcf8:	3b80      	subs	r3, #128	@ 0x80
 800dcfa:	4a1f      	ldr	r2, [pc, #124]	@ (800dd78 <create_name+0x120>)
 800dcfc:	5cd3      	ldrb	r3, [r2, r3]
 800dcfe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dd00:	7efb      	ldrb	r3, [r7, #27]
 800dd02:	4619      	mov	r1, r3
 800dd04:	481d      	ldr	r0, [pc, #116]	@ (800dd7c <create_name+0x124>)
 800dd06:	f7ff f812 	bl	800cd2e <chk_chr>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d001      	beq.n	800dd14 <create_name+0xbc>
 800dd10:	2306      	movs	r3, #6
 800dd12:	e02c      	b.n	800dd6e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dd14:	7efb      	ldrb	r3, [r7, #27]
 800dd16:	2b60      	cmp	r3, #96	@ 0x60
 800dd18:	d905      	bls.n	800dd26 <create_name+0xce>
 800dd1a:	7efb      	ldrb	r3, [r7, #27]
 800dd1c:	2b7a      	cmp	r3, #122	@ 0x7a
 800dd1e:	d802      	bhi.n	800dd26 <create_name+0xce>
 800dd20:	7efb      	ldrb	r3, [r7, #27]
 800dd22:	3b20      	subs	r3, #32
 800dd24:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	613a      	str	r2, [r7, #16]
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	4413      	add	r3, r2
 800dd30:	7efa      	ldrb	r2, [r7, #27]
 800dd32:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dd34:	e7a6      	b.n	800dc84 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dd36:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	441a      	add	r2, r3
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <create_name+0xf4>
 800dd48:	2306      	movs	r3, #6
 800dd4a:	e010      	b.n	800dd6e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2be5      	cmp	r3, #229	@ 0xe5
 800dd52:	d102      	bne.n	800dd5a <create_name+0x102>
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2205      	movs	r2, #5
 800dd58:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd5a:	7efb      	ldrb	r3, [r7, #27]
 800dd5c:	2b20      	cmp	r3, #32
 800dd5e:	d801      	bhi.n	800dd64 <create_name+0x10c>
 800dd60:	2204      	movs	r2, #4
 800dd62:	e000      	b.n	800dd66 <create_name+0x10e>
 800dd64:	2200      	movs	r2, #0
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	330b      	adds	r3, #11
 800dd6a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dd6c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3720      	adds	r7, #32
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	08017f74 	.word	0x08017f74
 800dd7c:	08010450 	.word	0x08010450

0800dd80 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd94:	e002      	b.n	800dd9c <follow_path+0x1c>
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	603b      	str	r3, [r7, #0]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	2b2f      	cmp	r3, #47	@ 0x2f
 800dda2:	d0f8      	beq.n	800dd96 <follow_path+0x16>
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	2b5c      	cmp	r3, #92	@ 0x5c
 800ddaa:	d0f4      	beq.n	800dd96 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b1f      	cmp	r3, #31
 800ddb8:	d80a      	bhi.n	800ddd0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2280      	movs	r2, #128	@ 0x80
 800ddbe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7ff fcfa 	bl	800d7be <dir_sdi>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	75fb      	strb	r3, [r7, #23]
 800ddce:	e043      	b.n	800de58 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ddd0:	463b      	mov	r3, r7
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7ff ff3f 	bl	800dc58 <create_name>
 800ddda:	4603      	mov	r3, r0
 800dddc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d134      	bne.n	800de4e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7ff feb0 	bl	800db4a <dir_find>
 800ddea:	4603      	mov	r3, r0
 800ddec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ddf4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ddf6:	7dfb      	ldrb	r3, [r7, #23]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00a      	beq.n	800de12 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ddfc:	7dfb      	ldrb	r3, [r7, #23]
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	d127      	bne.n	800de52 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800de02:	7afb      	ldrb	r3, [r7, #11]
 800de04:	f003 0304 	and.w	r3, r3, #4
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d122      	bne.n	800de52 <follow_path+0xd2>
 800de0c:	2305      	movs	r3, #5
 800de0e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800de10:	e01f      	b.n	800de52 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de12:	7afb      	ldrb	r3, [r7, #11]
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d11c      	bne.n	800de56 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	799b      	ldrb	r3, [r3, #6]
 800de20:	f003 0310 	and.w	r3, r3, #16
 800de24:	2b00      	cmp	r3, #0
 800de26:	d102      	bne.n	800de2e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800de28:	2305      	movs	r3, #5
 800de2a:	75fb      	strb	r3, [r7, #23]
 800de2c:	e014      	b.n	800de58 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	695b      	ldr	r3, [r3, #20]
 800de38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3c:	4413      	add	r3, r2
 800de3e:	4619      	mov	r1, r3
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f7ff fe43 	bl	800dacc <ld_clust>
 800de46:	4602      	mov	r2, r0
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de4c:	e7c0      	b.n	800ddd0 <follow_path+0x50>
			if (res != FR_OK) break;
 800de4e:	bf00      	nop
 800de50:	e002      	b.n	800de58 <follow_path+0xd8>
				break;
 800de52:	bf00      	nop
 800de54:	e000      	b.n	800de58 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de56:	bf00      	nop
			}
		}
	}

	return res;
 800de58:	7dfb      	ldrb	r3, [r7, #23]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3718      	adds	r7, #24
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de62:	b480      	push	{r7}
 800de64:	b087      	sub	sp, #28
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de6a:	f04f 33ff 	mov.w	r3, #4294967295
 800de6e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d031      	beq.n	800dedc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	617b      	str	r3, [r7, #20]
 800de7e:	e002      	b.n	800de86 <get_ldnumber+0x24>
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	3301      	adds	r3, #1
 800de84:	617b      	str	r3, [r7, #20]
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	2b20      	cmp	r3, #32
 800de8c:	d903      	bls.n	800de96 <get_ldnumber+0x34>
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	2b3a      	cmp	r3, #58	@ 0x3a
 800de94:	d1f4      	bne.n	800de80 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	2b3a      	cmp	r3, #58	@ 0x3a
 800de9c:	d11c      	bne.n	800ded8 <get_ldnumber+0x76>
			tp = *path;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	1c5a      	adds	r2, r3, #1
 800dea8:	60fa      	str	r2, [r7, #12]
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	3b30      	subs	r3, #48	@ 0x30
 800deae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2b09      	cmp	r3, #9
 800deb4:	d80e      	bhi.n	800ded4 <get_ldnumber+0x72>
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	429a      	cmp	r2, r3
 800debc:	d10a      	bne.n	800ded4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d107      	bne.n	800ded4 <get_ldnumber+0x72>
					vol = (int)i;
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	3301      	adds	r3, #1
 800decc:	617b      	str	r3, [r7, #20]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	e002      	b.n	800dede <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ded8:	2300      	movs	r3, #0
 800deda:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dedc:	693b      	ldr	r3, [r7, #16]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	371c      	adds	r7, #28
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
	...

0800deec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	70da      	strb	r2, [r3, #3]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f04f 32ff 	mov.w	r2, #4294967295
 800df02:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df04:	6839      	ldr	r1, [r7, #0]
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f7ff f8dc 	bl	800d0c4 <move_window>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <check_fs+0x2a>
 800df12:	2304      	movs	r3, #4
 800df14:	e038      	b.n	800df88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3330      	adds	r3, #48	@ 0x30
 800df1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fe fe20 	bl	800cb64 <ld_word>
 800df24:	4603      	mov	r3, r0
 800df26:	461a      	mov	r2, r3
 800df28:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d001      	beq.n	800df34 <check_fs+0x48>
 800df30:	2303      	movs	r3, #3
 800df32:	e029      	b.n	800df88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df3a:	2be9      	cmp	r3, #233	@ 0xe9
 800df3c:	d009      	beq.n	800df52 <check_fs+0x66>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df44:	2beb      	cmp	r3, #235	@ 0xeb
 800df46:	d11e      	bne.n	800df86 <check_fs+0x9a>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800df4e:	2b90      	cmp	r3, #144	@ 0x90
 800df50:	d119      	bne.n	800df86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	3330      	adds	r3, #48	@ 0x30
 800df56:	3336      	adds	r3, #54	@ 0x36
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe fe1b 	bl	800cb94 <ld_dword>
 800df5e:	4603      	mov	r3, r0
 800df60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800df64:	4a0a      	ldr	r2, [pc, #40]	@ (800df90 <check_fs+0xa4>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d101      	bne.n	800df6e <check_fs+0x82>
 800df6a:	2300      	movs	r3, #0
 800df6c:	e00c      	b.n	800df88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	3330      	adds	r3, #48	@ 0x30
 800df72:	3352      	adds	r3, #82	@ 0x52
 800df74:	4618      	mov	r0, r3
 800df76:	f7fe fe0d 	bl	800cb94 <ld_dword>
 800df7a:	4603      	mov	r3, r0
 800df7c:	4a05      	ldr	r2, [pc, #20]	@ (800df94 <check_fs+0xa8>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d101      	bne.n	800df86 <check_fs+0x9a>
 800df82:	2300      	movs	r3, #0
 800df84:	e000      	b.n	800df88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df86:	2302      	movs	r3, #2
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	00544146 	.word	0x00544146
 800df94:	33544146 	.word	0x33544146

0800df98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b096      	sub	sp, #88	@ 0x58
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f7ff ff58 	bl	800de62 <get_ldnumber>
 800dfb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dfb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	da01      	bge.n	800dfbe <find_volume+0x26>
 800dfba:	230b      	movs	r3, #11
 800dfbc:	e22d      	b.n	800e41a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dfbe:	4aa1      	ldr	r2, [pc, #644]	@ (800e244 <find_volume+0x2ac>)
 800dfc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfc6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d101      	bne.n	800dfd2 <find_volume+0x3a>
 800dfce:	230c      	movs	r3, #12
 800dfd0:	e223      	b.n	800e41a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	f023 0301 	bic.w	r3, r3, #1
 800dfde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d01a      	beq.n	800e01e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfea:	785b      	ldrb	r3, [r3, #1]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fe fd19 	bl	800ca24 <disk_status>
 800dff2:	4603      	mov	r3, r0
 800dff4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dff8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10c      	bne.n	800e01e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d007      	beq.n	800e01a <find_volume+0x82>
 800e00a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e00e:	f003 0304 	and.w	r3, r3, #4
 800e012:	2b00      	cmp	r3, #0
 800e014:	d001      	beq.n	800e01a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e016:	230a      	movs	r3, #10
 800e018:	e1ff      	b.n	800e41a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e01a:	2300      	movs	r3, #0
 800e01c:	e1fd      	b.n	800e41a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e020:	2200      	movs	r2, #0
 800e022:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e026:	b2da      	uxtb	r2, r3
 800e028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02e:	785b      	ldrb	r3, [r3, #1]
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe fd11 	bl	800ca58 <disk_initialize>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e03c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	d001      	beq.n	800e04c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e048:	2303      	movs	r3, #3
 800e04a:	e1e6      	b.n	800e41a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e04c:	79fb      	ldrb	r3, [r7, #7]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d007      	beq.n	800e062 <find_volume+0xca>
 800e052:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e056:	f003 0304 	and.w	r3, r3, #4
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e05e:	230a      	movs	r3, #10
 800e060:	e1db      	b.n	800e41a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e062:	2300      	movs	r3, #0
 800e064:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e066:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e068:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e06a:	f7ff ff3f 	bl	800deec <check_fs>
 800e06e:	4603      	mov	r3, r0
 800e070:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e074:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e078:	2b02      	cmp	r3, #2
 800e07a:	d149      	bne.n	800e110 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e07c:	2300      	movs	r3, #0
 800e07e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e080:	e01e      	b.n	800e0c0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e084:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e08a:	011b      	lsls	r3, r3, #4
 800e08c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e090:	4413      	add	r3, r2
 800e092:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e096:	3304      	adds	r3, #4
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d006      	beq.n	800e0ac <find_volume+0x114>
 800e09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a0:	3308      	adds	r3, #8
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fe fd76 	bl	800cb94 <ld_dword>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	e000      	b.n	800e0ae <find_volume+0x116>
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	3358      	adds	r3, #88	@ 0x58
 800e0b4:	443b      	add	r3, r7
 800e0b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e0ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0bc:	3301      	adds	r3, #1
 800e0be:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0c2:	2b03      	cmp	r3, #3
 800e0c4:	d9dd      	bls.n	800e082 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e0ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <find_volume+0x13e>
 800e0d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e0d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	3358      	adds	r3, #88	@ 0x58
 800e0dc:	443b      	add	r3, r7
 800e0de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e0e2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e0e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d005      	beq.n	800e0f6 <find_volume+0x15e>
 800e0ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e0ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e0ee:	f7ff fefd 	bl	800deec <check_fs>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	e000      	b.n	800e0f8 <find_volume+0x160>
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e100:	2b01      	cmp	r3, #1
 800e102:	d905      	bls.n	800e110 <find_volume+0x178>
 800e104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e106:	3301      	adds	r3, #1
 800e108:	643b      	str	r3, [r7, #64]	@ 0x40
 800e10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e10c:	2b03      	cmp	r3, #3
 800e10e:	d9e2      	bls.n	800e0d6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e110:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e114:	2b04      	cmp	r3, #4
 800e116:	d101      	bne.n	800e11c <find_volume+0x184>
 800e118:	2301      	movs	r3, #1
 800e11a:	e17e      	b.n	800e41a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e11c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e120:	2b01      	cmp	r3, #1
 800e122:	d901      	bls.n	800e128 <find_volume+0x190>
 800e124:	230d      	movs	r3, #13
 800e126:	e178      	b.n	800e41a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12a:	3330      	adds	r3, #48	@ 0x30
 800e12c:	330b      	adds	r3, #11
 800e12e:	4618      	mov	r0, r3
 800e130:	f7fe fd18 	bl	800cb64 <ld_word>
 800e134:	4603      	mov	r3, r0
 800e136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e13a:	d001      	beq.n	800e140 <find_volume+0x1a8>
 800e13c:	230d      	movs	r3, #13
 800e13e:	e16c      	b.n	800e41a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e142:	3330      	adds	r3, #48	@ 0x30
 800e144:	3316      	adds	r3, #22
 800e146:	4618      	mov	r0, r3
 800e148:	f7fe fd0c 	bl	800cb64 <ld_word>
 800e14c:	4603      	mov	r3, r0
 800e14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <find_volume+0x1cc>
 800e156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e158:	3330      	adds	r3, #48	@ 0x30
 800e15a:	3324      	adds	r3, #36	@ 0x24
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fe fd19 	bl	800cb94 <ld_dword>
 800e162:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e166:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e168:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e16c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e172:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e176:	789b      	ldrb	r3, [r3, #2]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d005      	beq.n	800e188 <find_volume+0x1f0>
 800e17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17e:	789b      	ldrb	r3, [r3, #2]
 800e180:	2b02      	cmp	r3, #2
 800e182:	d001      	beq.n	800e188 <find_volume+0x1f0>
 800e184:	230d      	movs	r3, #13
 800e186:	e148      	b.n	800e41a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18a:	789b      	ldrb	r3, [r3, #2]
 800e18c:	461a      	mov	r2, r3
 800e18e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e190:	fb02 f303 	mul.w	r3, r2, r3
 800e194:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e19c:	461a      	mov	r2, r3
 800e19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a4:	895b      	ldrh	r3, [r3, #10]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d008      	beq.n	800e1bc <find_volume+0x224>
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ac:	895b      	ldrh	r3, [r3, #10]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b2:	895b      	ldrh	r3, [r3, #10]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	4013      	ands	r3, r2
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d001      	beq.n	800e1c0 <find_volume+0x228>
 800e1bc:	230d      	movs	r3, #13
 800e1be:	e12c      	b.n	800e41a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c2:	3330      	adds	r3, #48	@ 0x30
 800e1c4:	3311      	adds	r3, #17
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe fccc 	bl	800cb64 <ld_word>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d6:	891b      	ldrh	r3, [r3, #8]
 800e1d8:	f003 030f 	and.w	r3, r3, #15
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <find_volume+0x24e>
 800e1e2:	230d      	movs	r3, #13
 800e1e4:	e119      	b.n	800e41a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e8:	3330      	adds	r3, #48	@ 0x30
 800e1ea:	3313      	adds	r3, #19
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fe fcb9 	bl	800cb64 <ld_word>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d106      	bne.n	800e20a <find_volume+0x272>
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1fe:	3330      	adds	r3, #48	@ 0x30
 800e200:	3320      	adds	r3, #32
 800e202:	4618      	mov	r0, r3
 800e204:	f7fe fcc6 	bl	800cb94 <ld_dword>
 800e208:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e20c:	3330      	adds	r3, #48	@ 0x30
 800e20e:	330e      	adds	r3, #14
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe fca7 	bl	800cb64 <ld_word>
 800e216:	4603      	mov	r3, r0
 800e218:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e21a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d101      	bne.n	800e224 <find_volume+0x28c>
 800e220:	230d      	movs	r3, #13
 800e222:	e0fa      	b.n	800e41a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e224:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e228:	4413      	add	r3, r2
 800e22a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e22c:	8912      	ldrh	r2, [r2, #8]
 800e22e:	0912      	lsrs	r2, r2, #4
 800e230:	b292      	uxth	r2, r2
 800e232:	4413      	add	r3, r2
 800e234:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d204      	bcs.n	800e248 <find_volume+0x2b0>
 800e23e:	230d      	movs	r3, #13
 800e240:	e0eb      	b.n	800e41a <find_volume+0x482>
 800e242:	bf00      	nop
 800e244:	20000424 	.word	0x20000424
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e248:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e250:	8952      	ldrh	r2, [r2, #10]
 800e252:	fbb3 f3f2 	udiv	r3, r3, r2
 800e256:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <find_volume+0x2ca>
 800e25e:	230d      	movs	r3, #13
 800e260:	e0db      	b.n	800e41a <find_volume+0x482>
		fmt = FS_FAT32;
 800e262:	2303      	movs	r3, #3
 800e264:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e26e:	4293      	cmp	r3, r2
 800e270:	d802      	bhi.n	800e278 <find_volume+0x2e0>
 800e272:	2302      	movs	r3, #2
 800e274:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e27e:	4293      	cmp	r3, r2
 800e280:	d802      	bhi.n	800e288 <find_volume+0x2f0>
 800e282:	2301      	movs	r3, #1
 800e284:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28a:	1c9a      	adds	r2, r3, #2
 800e28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e28e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e292:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e294:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e296:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e29a:	441a      	add	r2, r3
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e2a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a4:	441a      	add	r2, r3
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e2aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2ae:	2b03      	cmp	r3, #3
 800e2b0:	d11e      	bne.n	800e2f0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b4:	3330      	adds	r3, #48	@ 0x30
 800e2b6:	332a      	adds	r3, #42	@ 0x2a
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe fc53 	bl	800cb64 <ld_word>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <find_volume+0x330>
 800e2c4:	230d      	movs	r3, #13
 800e2c6:	e0a8      	b.n	800e41a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ca:	891b      	ldrh	r3, [r3, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d001      	beq.n	800e2d4 <find_volume+0x33c>
 800e2d0:	230d      	movs	r3, #13
 800e2d2:	e0a2      	b.n	800e41a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d6:	3330      	adds	r3, #48	@ 0x30
 800e2d8:	332c      	adds	r3, #44	@ 0x2c
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe fc5a 	bl	800cb94 <ld_dword>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e8:	695b      	ldr	r3, [r3, #20]
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2ee:	e01f      	b.n	800e330 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f2:	891b      	ldrh	r3, [r3, #8]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d101      	bne.n	800e2fc <find_volume+0x364>
 800e2f8:	230d      	movs	r3, #13
 800e2fa:	e08e      	b.n	800e41a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fe:	6a1a      	ldr	r2, [r3, #32]
 800e300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e302:	441a      	add	r2, r3
 800e304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e306:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e308:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d103      	bne.n	800e318 <find_volume+0x380>
 800e310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e312:	695b      	ldr	r3, [r3, #20]
 800e314:	005b      	lsls	r3, r3, #1
 800e316:	e00a      	b.n	800e32e <find_volume+0x396>
 800e318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31a:	695a      	ldr	r2, [r3, #20]
 800e31c:	4613      	mov	r3, r2
 800e31e:	005b      	lsls	r3, r3, #1
 800e320:	4413      	add	r3, r2
 800e322:	085a      	lsrs	r2, r3, #1
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	695b      	ldr	r3, [r3, #20]
 800e328:	f003 0301 	and.w	r3, r3, #1
 800e32c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e32e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e332:	699a      	ldr	r2, [r3, #24]
 800e334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e336:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e33a:	0a5b      	lsrs	r3, r3, #9
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d201      	bcs.n	800e344 <find_volume+0x3ac>
 800e340:	230d      	movs	r3, #13
 800e342:	e06a      	b.n	800e41a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e346:	f04f 32ff 	mov.w	r2, #4294967295
 800e34a:	611a      	str	r2, [r3, #16]
 800e34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34e:	691a      	ldr	r2, [r3, #16]
 800e350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e352:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e356:	2280      	movs	r2, #128	@ 0x80
 800e358:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e35a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e35e:	2b03      	cmp	r3, #3
 800e360:	d149      	bne.n	800e3f6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e364:	3330      	adds	r3, #48	@ 0x30
 800e366:	3330      	adds	r3, #48	@ 0x30
 800e368:	4618      	mov	r0, r3
 800e36a:	f7fe fbfb 	bl	800cb64 <ld_word>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b01      	cmp	r3, #1
 800e372:	d140      	bne.n	800e3f6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e376:	3301      	adds	r3, #1
 800e378:	4619      	mov	r1, r3
 800e37a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e37c:	f7fe fea2 	bl	800d0c4 <move_window>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d137      	bne.n	800e3f6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e388:	2200      	movs	r2, #0
 800e38a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38e:	3330      	adds	r3, #48	@ 0x30
 800e390:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e394:	4618      	mov	r0, r3
 800e396:	f7fe fbe5 	bl	800cb64 <ld_word>
 800e39a:	4603      	mov	r3, r0
 800e39c:	461a      	mov	r2, r3
 800e39e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d127      	bne.n	800e3f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a8:	3330      	adds	r3, #48	@ 0x30
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fe fbf2 	bl	800cb94 <ld_dword>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	4a1c      	ldr	r2, [pc, #112]	@ (800e424 <find_volume+0x48c>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d11e      	bne.n	800e3f6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ba:	3330      	adds	r3, #48	@ 0x30
 800e3bc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fe fbe7 	bl	800cb94 <ld_dword>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	4a17      	ldr	r2, [pc, #92]	@ (800e428 <find_volume+0x490>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d113      	bne.n	800e3f6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d0:	3330      	adds	r3, #48	@ 0x30
 800e3d2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fbdc 	bl	800cb94 <ld_dword>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e4:	3330      	adds	r3, #48	@ 0x30
 800e3e6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7fe fbd2 	bl	800cb94 <ld_dword>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e3fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3fe:	4b0b      	ldr	r3, [pc, #44]	@ (800e42c <find_volume+0x494>)
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	3301      	adds	r3, #1
 800e404:	b29a      	uxth	r2, r3
 800e406:	4b09      	ldr	r3, [pc, #36]	@ (800e42c <find_volume+0x494>)
 800e408:	801a      	strh	r2, [r3, #0]
 800e40a:	4b08      	ldr	r3, [pc, #32]	@ (800e42c <find_volume+0x494>)
 800e40c:	881a      	ldrh	r2, [r3, #0]
 800e40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e410:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e412:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e414:	f7fe fdee 	bl	800cff4 <clear_lock>
#endif
	return FR_OK;
 800e418:	2300      	movs	r3, #0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3758      	adds	r7, #88	@ 0x58
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	41615252 	.word	0x41615252
 800e428:	61417272 	.word	0x61417272
 800e42c:	20000428 	.word	0x20000428

0800e430 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e43a:	2309      	movs	r3, #9
 800e43c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d01c      	beq.n	800e47e <validate+0x4e>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d018      	beq.n	800e47e <validate+0x4e>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d013      	beq.n	800e47e <validate+0x4e>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	889a      	ldrh	r2, [r3, #4]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	88db      	ldrh	r3, [r3, #6]
 800e460:	429a      	cmp	r2, r3
 800e462:	d10c      	bne.n	800e47e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	785b      	ldrb	r3, [r3, #1]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fe fada 	bl	800ca24 <disk_status>
 800e470:	4603      	mov	r3, r0
 800e472:	f003 0301 	and.w	r3, r3, #1
 800e476:	2b00      	cmp	r3, #0
 800e478:	d101      	bne.n	800e47e <validate+0x4e>
			res = FR_OK;
 800e47a:	2300      	movs	r3, #0
 800e47c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d102      	bne.n	800e48a <validate+0x5a>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	e000      	b.n	800e48c <validate+0x5c>
 800e48a:	2300      	movs	r3, #0
 800e48c:	683a      	ldr	r2, [r7, #0]
 800e48e:	6013      	str	r3, [r2, #0]
	return res;
 800e490:	7bfb      	ldrb	r3, [r7, #15]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e4ae:	f107 0310 	add.w	r3, r7, #16
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff fcd5 	bl	800de62 <get_ldnumber>
 800e4b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	da01      	bge.n	800e4c4 <f_mount+0x28>
 800e4c0:	230b      	movs	r3, #11
 800e4c2:	e02b      	b.n	800e51c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e4c4:	4a17      	ldr	r2, [pc, #92]	@ (800e524 <f_mount+0x88>)
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d005      	beq.n	800e4e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e4d4:	69b8      	ldr	r0, [r7, #24]
 800e4d6:	f7fe fd8d 	bl	800cff4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d002      	beq.n	800e4ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	490d      	ldr	r1, [pc, #52]	@ (800e524 <f_mount+0x88>)
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <f_mount+0x66>
 800e4fc:	79fb      	ldrb	r3, [r7, #7]
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d001      	beq.n	800e506 <f_mount+0x6a>
 800e502:	2300      	movs	r3, #0
 800e504:	e00a      	b.n	800e51c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e506:	f107 010c 	add.w	r1, r7, #12
 800e50a:	f107 0308 	add.w	r3, r7, #8
 800e50e:	2200      	movs	r2, #0
 800e510:	4618      	mov	r0, r3
 800e512:	f7ff fd41 	bl	800df98 <find_volume>
 800e516:	4603      	mov	r3, r0
 800e518:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3720      	adds	r7, #32
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	20000424 	.word	0x20000424

0800e528 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b098      	sub	sp, #96	@ 0x60
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	4613      	mov	r3, r2
 800e534:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d101      	bne.n	800e540 <f_open+0x18>
 800e53c:	2309      	movs	r3, #9
 800e53e:	e1a9      	b.n	800e894 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e546:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e548:	79fa      	ldrb	r2, [r7, #7]
 800e54a:	f107 0110 	add.w	r1, r7, #16
 800e54e:	f107 0308 	add.w	r3, r7, #8
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff fd20 	bl	800df98 <find_volume>
 800e558:	4603      	mov	r3, r0
 800e55a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e55e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e562:	2b00      	cmp	r3, #0
 800e564:	f040 818d 	bne.w	800e882 <f_open+0x35a>
		dj.obj.fs = fs;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	f107 0314 	add.w	r3, r7, #20
 800e572:	4611      	mov	r1, r2
 800e574:	4618      	mov	r0, r3
 800e576:	f7ff fc03 	bl	800dd80 <follow_path>
 800e57a:	4603      	mov	r3, r0
 800e57c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e580:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e584:	2b00      	cmp	r3, #0
 800e586:	d118      	bne.n	800e5ba <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e588:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e58c:	b25b      	sxtb	r3, r3
 800e58e:	2b00      	cmp	r3, #0
 800e590:	da03      	bge.n	800e59a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e592:	2306      	movs	r3, #6
 800e594:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e598:	e00f      	b.n	800e5ba <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e59a:	79fb      	ldrb	r3, [r7, #7]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	bf8c      	ite	hi
 800e5a0:	2301      	movhi	r3, #1
 800e5a2:	2300      	movls	r3, #0
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f107 0314 	add.w	r3, r7, #20
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe fbd8 	bl	800cd64 <chk_lock>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	f003 031c 	and.w	r3, r3, #28
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d07f      	beq.n	800e6c4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d017      	beq.n	800e5fc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e5d0:	2b04      	cmp	r3, #4
 800e5d2:	d10e      	bne.n	800e5f2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e5d4:	f7fe fc22 	bl	800ce1c <enq_lock>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d006      	beq.n	800e5ec <f_open+0xc4>
 800e5de:	f107 0314 	add.w	r3, r7, #20
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7ff fb06 	bl	800dbf4 <dir_register>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	e000      	b.n	800e5ee <f_open+0xc6>
 800e5ec:	2312      	movs	r3, #18
 800e5ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	f043 0308 	orr.w	r3, r3, #8
 800e5f8:	71fb      	strb	r3, [r7, #7]
 800e5fa:	e010      	b.n	800e61e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5fc:	7ebb      	ldrb	r3, [r7, #26]
 800e5fe:	f003 0311 	and.w	r3, r3, #17
 800e602:	2b00      	cmp	r3, #0
 800e604:	d003      	beq.n	800e60e <f_open+0xe6>
					res = FR_DENIED;
 800e606:	2307      	movs	r3, #7
 800e608:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e60c:	e007      	b.n	800e61e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	f003 0304 	and.w	r3, r3, #4
 800e614:	2b00      	cmp	r3, #0
 800e616:	d002      	beq.n	800e61e <f_open+0xf6>
 800e618:	2308      	movs	r3, #8
 800e61a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e61e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e622:	2b00      	cmp	r3, #0
 800e624:	d168      	bne.n	800e6f8 <f_open+0x1d0>
 800e626:	79fb      	ldrb	r3, [r7, #7]
 800e628:	f003 0308 	and.w	r3, r3, #8
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d063      	beq.n	800e6f8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e630:	f7fc f9c8 	bl	800a9c4 <get_fattime>
 800e634:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e638:	330e      	adds	r3, #14
 800e63a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fe fae7 	bl	800cc10 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e644:	3316      	adds	r3, #22
 800e646:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe fae1 	bl	800cc10 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e650:	330b      	adds	r3, #11
 800e652:	2220      	movs	r2, #32
 800e654:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e65a:	4611      	mov	r1, r2
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7ff fa35 	bl	800dacc <ld_clust>
 800e662:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e668:	2200      	movs	r2, #0
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7ff fa4d 	bl	800db0a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e672:	331c      	adds	r3, #28
 800e674:	2100      	movs	r1, #0
 800e676:	4618      	mov	r0, r3
 800e678:	f7fe faca 	bl	800cc10 <st_dword>
					fs->wflag = 1;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	2201      	movs	r2, #1
 800e680:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e684:	2b00      	cmp	r3, #0
 800e686:	d037      	beq.n	800e6f8 <f_open+0x1d0>
						dw = fs->winsect;
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e68c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e68e:	f107 0314 	add.w	r3, r7, #20
 800e692:	2200      	movs	r2, #0
 800e694:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe ff60 	bl	800d55c <remove_chain>
 800e69c:	4603      	mov	r3, r0
 800e69e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e6a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d126      	bne.n	800e6f8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fe fd08 	bl	800d0c4 <move_window>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e6be:	3a01      	subs	r2, #1
 800e6c0:	60da      	str	r2, [r3, #12]
 800e6c2:	e019      	b.n	800e6f8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e6c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d115      	bne.n	800e6f8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e6cc:	7ebb      	ldrb	r3, [r7, #26]
 800e6ce:	f003 0310 	and.w	r3, r3, #16
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d003      	beq.n	800e6de <f_open+0x1b6>
					res = FR_NO_FILE;
 800e6d6:	2304      	movs	r3, #4
 800e6d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e6dc:	e00c      	b.n	800e6f8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e6de:	79fb      	ldrb	r3, [r7, #7]
 800e6e0:	f003 0302 	and.w	r3, r3, #2
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d007      	beq.n	800e6f8 <f_open+0x1d0>
 800e6e8:	7ebb      	ldrb	r3, [r7, #26]
 800e6ea:	f003 0301 	and.w	r3, r3, #1
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d002      	beq.n	800e6f8 <f_open+0x1d0>
						res = FR_DENIED;
 800e6f2:	2307      	movs	r3, #7
 800e6f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d126      	bne.n	800e74e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	f003 0308 	and.w	r3, r3, #8
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e70a:	79fb      	ldrb	r3, [r7, #7]
 800e70c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e710:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e71a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e720:	79fb      	ldrb	r3, [r7, #7]
 800e722:	2b01      	cmp	r3, #1
 800e724:	bf8c      	ite	hi
 800e726:	2301      	movhi	r3, #1
 800e728:	2300      	movls	r3, #0
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	461a      	mov	r2, r3
 800e72e:	f107 0314 	add.w	r3, r7, #20
 800e732:	4611      	mov	r1, r2
 800e734:	4618      	mov	r0, r3
 800e736:	f7fe fb93 	bl	800ce60 <inc_lock>
 800e73a:	4602      	mov	r2, r0
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d102      	bne.n	800e74e <f_open+0x226>
 800e748:	2302      	movs	r3, #2
 800e74a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e74e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e752:	2b00      	cmp	r3, #0
 800e754:	f040 8095 	bne.w	800e882 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e75c:	4611      	mov	r1, r2
 800e75e:	4618      	mov	r0, r3
 800e760:	f7ff f9b4 	bl	800dacc <ld_clust>
 800e764:	4602      	mov	r2, r0
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e76c:	331c      	adds	r3, #28
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fa10 	bl	800cb94 <ld_dword>
 800e774:	4602      	mov	r2, r0
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	88da      	ldrh	r2, [r3, #6]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	79fa      	ldrb	r2, [r7, #7]
 800e792:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2200      	movs	r2, #0
 800e798:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2200      	movs	r2, #0
 800e79e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3330      	adds	r3, #48	@ 0x30
 800e7aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7ae:	2100      	movs	r1, #0
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe fa7a 	bl	800ccaa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e7b6:	79fb      	ldrb	r3, [r7, #7]
 800e7b8:	f003 0320 	and.w	r3, r3, #32
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d060      	beq.n	800e882 <f_open+0x35a>
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d05c      	beq.n	800e882 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	68da      	ldr	r2, [r3, #12]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	895b      	ldrh	r3, [r3, #10]
 800e7d4:	025b      	lsls	r3, r3, #9
 800e7d6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800e7e4:	e016      	b.n	800e814 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe fd25 	bl	800d23a <get_fat>
 800e7f0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e7f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d802      	bhi.n	800e7fe <f_open+0x2d6>
 800e7f8:	2302      	movs	r3, #2
 800e7fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e804:	d102      	bne.n	800e80c <f_open+0x2e4>
 800e806:	2301      	movs	r3, #1
 800e808:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e80c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e80e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	657b      	str	r3, [r7, #84]	@ 0x54
 800e814:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d103      	bne.n	800e824 <f_open+0x2fc>
 800e81c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e81e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e820:	429a      	cmp	r2, r3
 800e822:	d8e0      	bhi.n	800e7e6 <f_open+0x2be>
				}
				fp->clust = clst;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e828:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e82a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d127      	bne.n	800e882 <f_open+0x35a>
 800e832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d022      	beq.n	800e882 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e840:	4618      	mov	r0, r3
 800e842:	f7fe fcdb 	bl	800d1fc <clust2sect>
 800e846:	6478      	str	r0, [r7, #68]	@ 0x44
 800e848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d103      	bne.n	800e856 <f_open+0x32e>
						res = FR_INT_ERR;
 800e84e:	2302      	movs	r3, #2
 800e850:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e854:	e015      	b.n	800e882 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e858:	0a5a      	lsrs	r2, r3, #9
 800e85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e85c:	441a      	add	r2, r3
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	7858      	ldrb	r0, [r3, #1]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6a1a      	ldr	r2, [r3, #32]
 800e870:	2301      	movs	r3, #1
 800e872:	f7fe f919 	bl	800caa8 <disk_read>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <f_open+0x35a>
 800e87c:	2301      	movs	r3, #1
 800e87e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e882:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e886:	2b00      	cmp	r3, #0
 800e888:	d002      	beq.n	800e890 <f_open+0x368>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2200      	movs	r2, #0
 800e88e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e890:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e894:	4618      	mov	r0, r3
 800e896:	3760      	adds	r7, #96	@ 0x60
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b08e      	sub	sp, #56	@ 0x38
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]
 800e8a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f107 0214 	add.w	r2, r7, #20
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff fdb7 	bl	800e430 <validate>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d107      	bne.n	800e8e0 <f_read+0x44>
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	7d5b      	ldrb	r3, [r3, #21]
 800e8d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e8d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d002      	beq.n	800e8e6 <f_read+0x4a>
 800e8e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e8e4:	e115      	b.n	800eb12 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <f_read+0x5a>
 800e8f2:	2307      	movs	r3, #7
 800e8f4:	e10d      	b.n	800eb12 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	68da      	ldr	r2, [r3, #12]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	699b      	ldr	r3, [r3, #24]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	429a      	cmp	r2, r3
 800e908:	f240 80fe 	bls.w	800eb08 <f_read+0x26c>
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e910:	e0fa      	b.n	800eb08 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f040 80c6 	bne.w	800eaac <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	699b      	ldr	r3, [r3, #24]
 800e924:	0a5b      	lsrs	r3, r3, #9
 800e926:	697a      	ldr	r2, [r7, #20]
 800e928:	8952      	ldrh	r2, [r2, #10]
 800e92a:	3a01      	subs	r2, #1
 800e92c:	4013      	ands	r3, r2
 800e92e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d12f      	bne.n	800e996 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d103      	bne.n	800e946 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	633b      	str	r3, [r7, #48]	@ 0x30
 800e944:	e013      	b.n	800e96e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d007      	beq.n	800e95e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	699b      	ldr	r3, [r3, #24]
 800e952:	4619      	mov	r1, r3
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f7fe fefe 	bl	800d756 <clmt_clust>
 800e95a:	6338      	str	r0, [r7, #48]	@ 0x30
 800e95c:	e007      	b.n	800e96e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	4619      	mov	r1, r3
 800e966:	4610      	mov	r0, r2
 800e968:	f7fe fc67 	bl	800d23a <get_fat>
 800e96c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e970:	2b01      	cmp	r3, #1
 800e972:	d804      	bhi.n	800e97e <f_read+0xe2>
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2202      	movs	r2, #2
 800e978:	755a      	strb	r2, [r3, #21]
 800e97a:	2302      	movs	r3, #2
 800e97c:	e0c9      	b.n	800eb12 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e984:	d104      	bne.n	800e990 <f_read+0xf4>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2201      	movs	r2, #1
 800e98a:	755a      	strb	r2, [r3, #21]
 800e98c:	2301      	movs	r3, #1
 800e98e:	e0c0      	b.n	800eb12 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e994:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e996:	697a      	ldr	r2, [r7, #20]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	69db      	ldr	r3, [r3, #28]
 800e99c:	4619      	mov	r1, r3
 800e99e:	4610      	mov	r0, r2
 800e9a0:	f7fe fc2c 	bl	800d1fc <clust2sect>
 800e9a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d104      	bne.n	800e9b6 <f_read+0x11a>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2202      	movs	r2, #2
 800e9b0:	755a      	strb	r2, [r3, #21]
 800e9b2:	2302      	movs	r3, #2
 800e9b4:	e0ad      	b.n	800eb12 <f_read+0x276>
			sect += csect;
 800e9b6:	69ba      	ldr	r2, [r7, #24]
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	0a5b      	lsrs	r3, r3, #9
 800e9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d039      	beq.n	800ea3e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9ca:	69fa      	ldr	r2, [r7, #28]
 800e9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ce:	4413      	add	r3, r2
 800e9d0:	697a      	ldr	r2, [r7, #20]
 800e9d2:	8952      	ldrh	r2, [r2, #10]
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d905      	bls.n	800e9e4 <f_read+0x148>
					cc = fs->csize - csect;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	895b      	ldrh	r3, [r3, #10]
 800e9dc:	461a      	mov	r2, r3
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	7858      	ldrb	r0, [r3, #1]
 800e9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ea:	69ba      	ldr	r2, [r7, #24]
 800e9ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e9ee:	f7fe f85b 	bl	800caa8 <disk_read>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d004      	beq.n	800ea02 <f_read+0x166>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	755a      	strb	r2, [r3, #21]
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e087      	b.n	800eb12 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	7d1b      	ldrb	r3, [r3, #20]
 800ea06:	b25b      	sxtb	r3, r3
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	da14      	bge.n	800ea36 <f_read+0x19a>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6a1a      	ldr	r2, [r3, #32]
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	1ad3      	subs	r3, r2, r3
 800ea14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d90d      	bls.n	800ea36 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6a1a      	ldr	r2, [r3, #32]
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	025b      	lsls	r3, r3, #9
 800ea24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea26:	18d0      	adds	r0, r2, r3
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	3330      	adds	r3, #48	@ 0x30
 800ea2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea30:	4619      	mov	r1, r3
 800ea32:	f7fe f919 	bl	800cc68 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea38:	025b      	lsls	r3, r3, #9
 800ea3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ea3c:	e050      	b.n	800eae0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	69ba      	ldr	r2, [r7, #24]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d02e      	beq.n	800eaa6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	7d1b      	ldrb	r3, [r3, #20]
 800ea4c:	b25b      	sxtb	r3, r3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	da18      	bge.n	800ea84 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	7858      	ldrb	r0, [r3, #1]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6a1a      	ldr	r2, [r3, #32]
 800ea60:	2301      	movs	r3, #1
 800ea62:	f7fe f841 	bl	800cae8 <disk_write>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d004      	beq.n	800ea76 <f_read+0x1da>
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	755a      	strb	r2, [r3, #21]
 800ea72:	2301      	movs	r3, #1
 800ea74:	e04d      	b.n	800eb12 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	7d1b      	ldrb	r3, [r3, #20]
 800ea7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	7858      	ldrb	r0, [r3, #1]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea8e:	2301      	movs	r3, #1
 800ea90:	69ba      	ldr	r2, [r7, #24]
 800ea92:	f7fe f809 	bl	800caa8 <disk_read>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d004      	beq.n	800eaa6 <f_read+0x20a>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	755a      	strb	r2, [r3, #21]
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e035      	b.n	800eb12 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	69ba      	ldr	r2, [r7, #24]
 800eaaa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eab4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800eab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eaba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d901      	bls.n	800eac6 <f_read+0x22a>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ead4:	4413      	add	r3, r2
 800ead6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ead8:	4619      	mov	r1, r3
 800eada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eadc:	f7fe f8c4 	bl	800cc68 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae4:	4413      	add	r3, r2
 800eae6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	699a      	ldr	r2, [r3, #24]
 800eaec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaee:	441a      	add	r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	619a      	str	r2, [r3, #24]
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafa:	441a      	add	r2, r3
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f47f af01 	bne.w	800e912 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eb10:	2300      	movs	r3, #0
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3738      	adds	r7, #56	@ 0x38
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b086      	sub	sp, #24
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f107 0208 	add.w	r2, r7, #8
 800eb28:	4611      	mov	r1, r2
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7ff fc80 	bl	800e430 <validate>
 800eb30:	4603      	mov	r3, r0
 800eb32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d168      	bne.n	800ec0c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	7d1b      	ldrb	r3, [r3, #20]
 800eb3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d062      	beq.n	800ec0c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7d1b      	ldrb	r3, [r3, #20]
 800eb4a:	b25b      	sxtb	r3, r3
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	da15      	bge.n	800eb7c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	7858      	ldrb	r0, [r3, #1]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a1a      	ldr	r2, [r3, #32]
 800eb5e:	2301      	movs	r3, #1
 800eb60:	f7fd ffc2 	bl	800cae8 <disk_write>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d001      	beq.n	800eb6e <f_sync+0x54>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e04f      	b.n	800ec0e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	7d1b      	ldrb	r3, [r3, #20]
 800eb72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eb7c:	f7fb ff22 	bl	800a9c4 <get_fattime>
 800eb80:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4610      	mov	r0, r2
 800eb8c:	f7fe fa9a 	bl	800d0c4 <move_window>
 800eb90:	4603      	mov	r3, r0
 800eb92:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eb94:	7dfb      	ldrb	r3, [r7, #23]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d138      	bne.n	800ec0c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb9e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	330b      	adds	r3, #11
 800eba4:	781a      	ldrb	r2, [r3, #0]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	330b      	adds	r3, #11
 800ebaa:	f042 0220 	orr.w	r2, r2, #32
 800ebae:	b2d2      	uxtb	r2, r2
 800ebb0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6818      	ldr	r0, [r3, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	68f9      	ldr	r1, [r7, #12]
 800ebbe:	f7fe ffa4 	bl	800db0a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f103 021c 	add.w	r2, r3, #28
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	4610      	mov	r0, r2
 800ebd0:	f7fe f81e 	bl	800cc10 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	3316      	adds	r3, #22
 800ebd8:	6939      	ldr	r1, [r7, #16]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fe f818 	bl	800cc10 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	3312      	adds	r3, #18
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fd fff7 	bl	800cbda <st_word>
					fs->wflag = 1;
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7fe fa93 	bl	800d120 <sync_fs>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	7d1b      	ldrb	r3, [r3, #20]
 800ec02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3718      	adds	r7, #24
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b084      	sub	sp, #16
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7ff ff7b 	bl	800eb1a <f_sync>
 800ec24:	4603      	mov	r3, r0
 800ec26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d118      	bne.n	800ec60 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f107 0208 	add.w	r2, r7, #8
 800ec34:	4611      	mov	r1, r2
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7ff fbfa 	bl	800e430 <validate>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10c      	bne.n	800ec60 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	691b      	ldr	r3, [r3, #16]
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fe f996 	bl	800cf7c <dec_lock>
 800ec50:	4603      	mov	r3, r0
 800ec52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d102      	bne.n	800ec60 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
	...

0800ec6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b087      	sub	sp, #28
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	60f8      	str	r0, [r7, #12]
 800ec74:	60b9      	str	r1, [r7, #8]
 800ec76:	4613      	mov	r3, r2
 800ec78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec82:	4b1f      	ldr	r3, [pc, #124]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800ec84:	7a5b      	ldrb	r3, [r3, #9]
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d131      	bne.n	800ecf0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec8c:	4b1c      	ldr	r3, [pc, #112]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800ec8e:	7a5b      	ldrb	r3, [r3, #9]
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	461a      	mov	r2, r3
 800ec94:	4b1a      	ldr	r3, [pc, #104]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800ec96:	2100      	movs	r1, #0
 800ec98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec9a:	4b19      	ldr	r3, [pc, #100]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800ec9c:	7a5b      	ldrb	r3, [r3, #9]
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	4a17      	ldr	r2, [pc, #92]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	4413      	add	r3, r2
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ecaa:	4b15      	ldr	r3, [pc, #84]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800ecac:	7a5b      	ldrb	r3, [r3, #9]
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	4b13      	ldr	r3, [pc, #76]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800ecb4:	4413      	add	r3, r2
 800ecb6:	79fa      	ldrb	r2, [r7, #7]
 800ecb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ecba:	4b11      	ldr	r3, [pc, #68]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800ecbc:	7a5b      	ldrb	r3, [r3, #9]
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	1c5a      	adds	r2, r3, #1
 800ecc2:	b2d1      	uxtb	r1, r2
 800ecc4:	4a0e      	ldr	r2, [pc, #56]	@ (800ed00 <FATFS_LinkDriverEx+0x94>)
 800ecc6:	7251      	strb	r1, [r2, #9]
 800ecc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ecca:	7dbb      	ldrb	r3, [r7, #22]
 800eccc:	3330      	adds	r3, #48	@ 0x30
 800ecce:	b2da      	uxtb	r2, r3
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	223a      	movs	r2, #58	@ 0x3a
 800ecda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	3302      	adds	r3, #2
 800ece0:	222f      	movs	r2, #47	@ 0x2f
 800ece2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	3303      	adds	r3, #3
 800ece8:	2200      	movs	r2, #0
 800ecea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ecf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	371c      	adds	r7, #28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	2000044c 	.word	0x2000044c

0800ed04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed0e:	2200      	movs	r2, #0
 800ed10:	6839      	ldr	r1, [r7, #0]
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7ff ffaa 	bl	800ec6c <FATFS_LinkDriverEx>
 800ed18:	4603      	mov	r3, r0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	4912      	ldr	r1, [pc, #72]	@ (800ed74 <MX_USB_DEVICE_Init+0x50>)
 800ed2c:	4812      	ldr	r0, [pc, #72]	@ (800ed78 <MX_USB_DEVICE_Init+0x54>)
 800ed2e:	f7fc fb77 	bl	800b420 <USBD_Init>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d001      	beq.n	800ed3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ed38:	f7f2 fd42 	bl	80017c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ed3c:	490f      	ldr	r1, [pc, #60]	@ (800ed7c <MX_USB_DEVICE_Init+0x58>)
 800ed3e:	480e      	ldr	r0, [pc, #56]	@ (800ed78 <MX_USB_DEVICE_Init+0x54>)
 800ed40:	f7fc fb9e 	bl	800b480 <USBD_RegisterClass>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d001      	beq.n	800ed4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ed4a:	f7f2 fd39 	bl	80017c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ed4e:	490c      	ldr	r1, [pc, #48]	@ (800ed80 <MX_USB_DEVICE_Init+0x5c>)
 800ed50:	4809      	ldr	r0, [pc, #36]	@ (800ed78 <MX_USB_DEVICE_Init+0x54>)
 800ed52:	f7fc fa95 	bl	800b280 <USBD_CDC_RegisterInterface>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d001      	beq.n	800ed60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ed5c:	f7f2 fd30 	bl	80017c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ed60:	4805      	ldr	r0, [pc, #20]	@ (800ed78 <MX_USB_DEVICE_Init+0x54>)
 800ed62:	f7fc fbc3 	bl	800b4ec <USBD_Start>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ed6c:	f7f2 fd28 	bl	80017c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ed70:	bf00      	nop
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	200000ec 	.word	0x200000ec
 800ed78:	20000458 	.word	0x20000458
 800ed7c:	20000058 	.word	0x20000058
 800ed80:	200000d8 	.word	0x200000d8

0800ed84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ed88:	2200      	movs	r2, #0
 800ed8a:	4905      	ldr	r1, [pc, #20]	@ (800eda0 <CDC_Init_FS+0x1c>)
 800ed8c:	4805      	ldr	r0, [pc, #20]	@ (800eda4 <CDC_Init_FS+0x20>)
 800ed8e:	f7fc fa91 	bl	800b2b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ed92:	4905      	ldr	r1, [pc, #20]	@ (800eda8 <CDC_Init_FS+0x24>)
 800ed94:	4803      	ldr	r0, [pc, #12]	@ (800eda4 <CDC_Init_FS+0x20>)
 800ed96:	f7fc faaf 	bl	800b2f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20000b34 	.word	0x20000b34
 800eda4:	20000458 	.word	0x20000458
 800eda8:	20000734 	.word	0x20000734

0800edac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800edac:	b480      	push	{r7}
 800edae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800edb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	4603      	mov	r3, r0
 800edc4:	6039      	str	r1, [r7, #0]
 800edc6:	71fb      	strb	r3, [r7, #7]
 800edc8:	4613      	mov	r3, r2
 800edca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800edcc:	79fb      	ldrb	r3, [r7, #7]
 800edce:	2b23      	cmp	r3, #35	@ 0x23
 800edd0:	d84a      	bhi.n	800ee68 <CDC_Control_FS+0xac>
 800edd2:	a201      	add	r2, pc, #4	@ (adr r2, 800edd8 <CDC_Control_FS+0x1c>)
 800edd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd8:	0800ee69 	.word	0x0800ee69
 800eddc:	0800ee69 	.word	0x0800ee69
 800ede0:	0800ee69 	.word	0x0800ee69
 800ede4:	0800ee69 	.word	0x0800ee69
 800ede8:	0800ee69 	.word	0x0800ee69
 800edec:	0800ee69 	.word	0x0800ee69
 800edf0:	0800ee69 	.word	0x0800ee69
 800edf4:	0800ee69 	.word	0x0800ee69
 800edf8:	0800ee69 	.word	0x0800ee69
 800edfc:	0800ee69 	.word	0x0800ee69
 800ee00:	0800ee69 	.word	0x0800ee69
 800ee04:	0800ee69 	.word	0x0800ee69
 800ee08:	0800ee69 	.word	0x0800ee69
 800ee0c:	0800ee69 	.word	0x0800ee69
 800ee10:	0800ee69 	.word	0x0800ee69
 800ee14:	0800ee69 	.word	0x0800ee69
 800ee18:	0800ee69 	.word	0x0800ee69
 800ee1c:	0800ee69 	.word	0x0800ee69
 800ee20:	0800ee69 	.word	0x0800ee69
 800ee24:	0800ee69 	.word	0x0800ee69
 800ee28:	0800ee69 	.word	0x0800ee69
 800ee2c:	0800ee69 	.word	0x0800ee69
 800ee30:	0800ee69 	.word	0x0800ee69
 800ee34:	0800ee69 	.word	0x0800ee69
 800ee38:	0800ee69 	.word	0x0800ee69
 800ee3c:	0800ee69 	.word	0x0800ee69
 800ee40:	0800ee69 	.word	0x0800ee69
 800ee44:	0800ee69 	.word	0x0800ee69
 800ee48:	0800ee69 	.word	0x0800ee69
 800ee4c:	0800ee69 	.word	0x0800ee69
 800ee50:	0800ee69 	.word	0x0800ee69
 800ee54:	0800ee69 	.word	0x0800ee69
 800ee58:	0800ee69 	.word	0x0800ee69
 800ee5c:	0800ee69 	.word	0x0800ee69
 800ee60:	0800ee69 	.word	0x0800ee69
 800ee64:	0800ee69 	.word	0x0800ee69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee68:	bf00      	nop
  }

  return (USBD_OK);
 800ee6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee82:	6879      	ldr	r1, [r7, #4]
 800ee84:	4805      	ldr	r0, [pc, #20]	@ (800ee9c <CDC_Receive_FS+0x24>)
 800ee86:	f7fc fa37 	bl	800b2f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee8a:	4804      	ldr	r0, [pc, #16]	@ (800ee9c <CDC_Receive_FS+0x24>)
 800ee8c:	f7fc fa92 	bl	800b3b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ee90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20000458 	.word	0x20000458

0800eea0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	460b      	mov	r3, r1
 800eeaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eeac:	2300      	movs	r3, #0
 800eeae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eeb0:	4b0d      	ldr	r3, [pc, #52]	@ (800eee8 <CDC_Transmit_FS+0x48>)
 800eeb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eeb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e00b      	b.n	800eede <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eec6:	887b      	ldrh	r3, [r7, #2]
 800eec8:	461a      	mov	r2, r3
 800eeca:	6879      	ldr	r1, [r7, #4]
 800eecc:	4806      	ldr	r0, [pc, #24]	@ (800eee8 <CDC_Transmit_FS+0x48>)
 800eece:	f7fc f9f1 	bl	800b2b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eed2:	4805      	ldr	r0, [pc, #20]	@ (800eee8 <CDC_Transmit_FS+0x48>)
 800eed4:	f7fc fa2e 	bl	800b334 <USBD_CDC_TransmitPacket>
 800eed8:	4603      	mov	r3, r0
 800eeda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	20000458 	.word	0x20000458

0800eeec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b087      	sub	sp, #28
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	4613      	mov	r3, r2
 800eef8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eefa:	2300      	movs	r3, #0
 800eefc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eefe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	371c      	adds	r7, #28
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr
	...

0800ef10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	4603      	mov	r3, r0
 800ef18:	6039      	str	r1, [r7, #0]
 800ef1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	2212      	movs	r2, #18
 800ef20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ef22:	4b03      	ldr	r3, [pc, #12]	@ (800ef30 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	20000108 	.word	0x20000108

0800ef34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	6039      	str	r1, [r7, #0]
 800ef3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2204      	movs	r2, #4
 800ef44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef46:	4b03      	ldr	r3, [pc, #12]	@ (800ef54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr
 800ef54:	2000011c 	.word	0x2000011c

0800ef58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	4603      	mov	r3, r0
 800ef60:	6039      	str	r1, [r7, #0]
 800ef62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d105      	bne.n	800ef76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	4907      	ldr	r1, [pc, #28]	@ (800ef8c <USBD_FS_ProductStrDescriptor+0x34>)
 800ef6e:	4808      	ldr	r0, [pc, #32]	@ (800ef90 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef70:	f7fd fc6c 	bl	800c84c <USBD_GetString>
 800ef74:	e004      	b.n	800ef80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef76:	683a      	ldr	r2, [r7, #0]
 800ef78:	4904      	ldr	r1, [pc, #16]	@ (800ef8c <USBD_FS_ProductStrDescriptor+0x34>)
 800ef7a:	4805      	ldr	r0, [pc, #20]	@ (800ef90 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef7c:	f7fd fc66 	bl	800c84c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef80:	4b02      	ldr	r3, [pc, #8]	@ (800ef8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20000f34 	.word	0x20000f34
 800ef90:	08010494 	.word	0x08010494

0800ef94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	6039      	str	r1, [r7, #0]
 800ef9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	4904      	ldr	r1, [pc, #16]	@ (800efb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800efa4:	4804      	ldr	r0, [pc, #16]	@ (800efb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800efa6:	f7fd fc51 	bl	800c84c <USBD_GetString>
  return USBD_StrDesc;
 800efaa:	4b02      	ldr	r3, [pc, #8]	@ (800efb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800efac:	4618      	mov	r0, r3
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	20000f34 	.word	0x20000f34
 800efb8:	080104ac 	.word	0x080104ac

0800efbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	4603      	mov	r3, r0
 800efc4:	6039      	str	r1, [r7, #0]
 800efc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	221a      	movs	r2, #26
 800efcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800efce:	f000 f843 	bl	800f058 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800efd2:	4b02      	ldr	r3, [pc, #8]	@ (800efdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	20000120 	.word	0x20000120

0800efe0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	4603      	mov	r3, r0
 800efe8:	6039      	str	r1, [r7, #0]
 800efea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efec:	79fb      	ldrb	r3, [r7, #7]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d105      	bne.n	800effe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eff2:	683a      	ldr	r2, [r7, #0]
 800eff4:	4907      	ldr	r1, [pc, #28]	@ (800f014 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eff6:	4808      	ldr	r0, [pc, #32]	@ (800f018 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eff8:	f7fd fc28 	bl	800c84c <USBD_GetString>
 800effc:	e004      	b.n	800f008 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800effe:	683a      	ldr	r2, [r7, #0]
 800f000:	4904      	ldr	r1, [pc, #16]	@ (800f014 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f002:	4805      	ldr	r0, [pc, #20]	@ (800f018 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f004:	f7fd fc22 	bl	800c84c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f008:	4b02      	ldr	r3, [pc, #8]	@ (800f014 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	20000f34 	.word	0x20000f34
 800f018:	080104c0 	.word	0x080104c0

0800f01c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	6039      	str	r1, [r7, #0]
 800f026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d105      	bne.n	800f03a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	4907      	ldr	r1, [pc, #28]	@ (800f050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f032:	4808      	ldr	r0, [pc, #32]	@ (800f054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f034:	f7fd fc0a 	bl	800c84c <USBD_GetString>
 800f038:	e004      	b.n	800f044 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	4904      	ldr	r1, [pc, #16]	@ (800f050 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f03e:	4805      	ldr	r0, [pc, #20]	@ (800f054 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f040:	f7fd fc04 	bl	800c84c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f044:	4b02      	ldr	r3, [pc, #8]	@ (800f050 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	20000f34 	.word	0x20000f34
 800f054:	080104cc 	.word	0x080104cc

0800f058 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f05e:	4b0f      	ldr	r3, [pc, #60]	@ (800f09c <Get_SerialNum+0x44>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f064:	4b0e      	ldr	r3, [pc, #56]	@ (800f0a0 <Get_SerialNum+0x48>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f06a:	4b0e      	ldr	r3, [pc, #56]	@ (800f0a4 <Get_SerialNum+0x4c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4413      	add	r3, r2
 800f076:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d009      	beq.n	800f092 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f07e:	2208      	movs	r2, #8
 800f080:	4909      	ldr	r1, [pc, #36]	@ (800f0a8 <Get_SerialNum+0x50>)
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f000 f814 	bl	800f0b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f088:	2204      	movs	r2, #4
 800f08a:	4908      	ldr	r1, [pc, #32]	@ (800f0ac <Get_SerialNum+0x54>)
 800f08c:	68b8      	ldr	r0, [r7, #8]
 800f08e:	f000 f80f 	bl	800f0b0 <IntToUnicode>
  }
}
 800f092:	bf00      	nop
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	1fff7a10 	.word	0x1fff7a10
 800f0a0:	1fff7a14 	.word	0x1fff7a14
 800f0a4:	1fff7a18 	.word	0x1fff7a18
 800f0a8:	20000122 	.word	0x20000122
 800f0ac:	20000132 	.word	0x20000132

0800f0b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b087      	sub	sp, #28
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	75fb      	strb	r3, [r7, #23]
 800f0c6:	e027      	b.n	800f118 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	0f1b      	lsrs	r3, r3, #28
 800f0cc:	2b09      	cmp	r3, #9
 800f0ce:	d80b      	bhi.n	800f0e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	0f1b      	lsrs	r3, r3, #28
 800f0d4:	b2da      	uxtb	r2, r3
 800f0d6:	7dfb      	ldrb	r3, [r7, #23]
 800f0d8:	005b      	lsls	r3, r3, #1
 800f0da:	4619      	mov	r1, r3
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	440b      	add	r3, r1
 800f0e0:	3230      	adds	r2, #48	@ 0x30
 800f0e2:	b2d2      	uxtb	r2, r2
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	e00a      	b.n	800f0fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	0f1b      	lsrs	r3, r3, #28
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	7dfb      	ldrb	r3, [r7, #23]
 800f0f0:	005b      	lsls	r3, r3, #1
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	440b      	add	r3, r1
 800f0f8:	3237      	adds	r2, #55	@ 0x37
 800f0fa:	b2d2      	uxtb	r2, r2
 800f0fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	011b      	lsls	r3, r3, #4
 800f102:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f104:	7dfb      	ldrb	r3, [r7, #23]
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	3301      	adds	r3, #1
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	4413      	add	r3, r2
 800f10e:	2200      	movs	r2, #0
 800f110:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	3301      	adds	r3, #1
 800f116:	75fb      	strb	r3, [r7, #23]
 800f118:	7dfa      	ldrb	r2, [r7, #23]
 800f11a:	79fb      	ldrb	r3, [r7, #7]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d3d3      	bcc.n	800f0c8 <IntToUnicode+0x18>
  }
}
 800f120:	bf00      	nop
 800f122:	bf00      	nop
 800f124:	371c      	adds	r7, #28
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
	...

0800f130 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b08a      	sub	sp, #40	@ 0x28
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f138:	f107 0314 	add.w	r3, r7, #20
 800f13c:	2200      	movs	r2, #0
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	605a      	str	r2, [r3, #4]
 800f142:	609a      	str	r2, [r3, #8]
 800f144:	60da      	str	r2, [r3, #12]
 800f146:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f150:	d13a      	bne.n	800f1c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f152:	2300      	movs	r3, #0
 800f154:	613b      	str	r3, [r7, #16]
 800f156:	4b1e      	ldr	r3, [pc, #120]	@ (800f1d0 <HAL_PCD_MspInit+0xa0>)
 800f158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f15a:	4a1d      	ldr	r2, [pc, #116]	@ (800f1d0 <HAL_PCD_MspInit+0xa0>)
 800f15c:	f043 0301 	orr.w	r3, r3, #1
 800f160:	6313      	str	r3, [r2, #48]	@ 0x30
 800f162:	4b1b      	ldr	r3, [pc, #108]	@ (800f1d0 <HAL_PCD_MspInit+0xa0>)
 800f164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	613b      	str	r3, [r7, #16]
 800f16c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f16e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f174:	2302      	movs	r3, #2
 800f176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f178:	2300      	movs	r3, #0
 800f17a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f17c:	2303      	movs	r3, #3
 800f17e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f180:	230a      	movs	r3, #10
 800f182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f184:	f107 0314 	add.w	r3, r7, #20
 800f188:	4619      	mov	r1, r3
 800f18a:	4812      	ldr	r0, [pc, #72]	@ (800f1d4 <HAL_PCD_MspInit+0xa4>)
 800f18c:	f7f6 f89c 	bl	80052c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f190:	4b0f      	ldr	r3, [pc, #60]	@ (800f1d0 <HAL_PCD_MspInit+0xa0>)
 800f192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f194:	4a0e      	ldr	r2, [pc, #56]	@ (800f1d0 <HAL_PCD_MspInit+0xa0>)
 800f196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f19a:	6353      	str	r3, [r2, #52]	@ 0x34
 800f19c:	2300      	movs	r3, #0
 800f19e:	60fb      	str	r3, [r7, #12]
 800f1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f1d0 <HAL_PCD_MspInit+0xa0>)
 800f1a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1a4:	4a0a      	ldr	r2, [pc, #40]	@ (800f1d0 <HAL_PCD_MspInit+0xa0>)
 800f1a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f1aa:	6453      	str	r3, [r2, #68]	@ 0x44
 800f1ac:	4b08      	ldr	r3, [pc, #32]	@ (800f1d0 <HAL_PCD_MspInit+0xa0>)
 800f1ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f1b4:	60fb      	str	r3, [r7, #12]
 800f1b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	2043      	movs	r0, #67	@ 0x43
 800f1be:	f7f5 fcba 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f1c2:	2043      	movs	r0, #67	@ 0x43
 800f1c4:	f7f5 fcd3 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f1c8:	bf00      	nop
 800f1ca:	3728      	adds	r7, #40	@ 0x28
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	40023800 	.word	0x40023800
 800f1d4:	40020000 	.word	0x40020000

0800f1d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	4610      	mov	r0, r2
 800f1f0:	f7fc f9c9 	bl	800b586 <USBD_LL_SetupStage>
}
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f20e:	78fa      	ldrb	r2, [r7, #3]
 800f210:	6879      	ldr	r1, [r7, #4]
 800f212:	4613      	mov	r3, r2
 800f214:	00db      	lsls	r3, r3, #3
 800f216:	4413      	add	r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	440b      	add	r3, r1
 800f21c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	78fb      	ldrb	r3, [r7, #3]
 800f224:	4619      	mov	r1, r3
 800f226:	f7fc fa03 	bl	800b630 <USBD_LL_DataOutStage>
}
 800f22a:	bf00      	nop
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b082      	sub	sp, #8
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	460b      	mov	r3, r1
 800f23c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f244:	78fa      	ldrb	r2, [r7, #3]
 800f246:	6879      	ldr	r1, [r7, #4]
 800f248:	4613      	mov	r3, r2
 800f24a:	00db      	lsls	r3, r3, #3
 800f24c:	4413      	add	r3, r2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	440b      	add	r3, r1
 800f252:	3320      	adds	r3, #32
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	78fb      	ldrb	r3, [r7, #3]
 800f258:	4619      	mov	r1, r3
 800f25a:	f7fc fa9c 	bl	800b796 <USBD_LL_DataInStage>
}
 800f25e:	bf00      	nop
 800f260:	3708      	adds	r7, #8
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b082      	sub	sp, #8
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f274:	4618      	mov	r0, r3
 800f276:	f7fc fbd6 	bl	800ba26 <USBD_LL_SOF>
}
 800f27a:	bf00      	nop
 800f27c:	3708      	adds	r7, #8
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b084      	sub	sp, #16
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f28a:	2301      	movs	r3, #1
 800f28c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	79db      	ldrb	r3, [r3, #7]
 800f292:	2b02      	cmp	r3, #2
 800f294:	d001      	beq.n	800f29a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f296:	f7f2 fa93 	bl	80017c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2a0:	7bfa      	ldrb	r2, [r7, #15]
 800f2a2:	4611      	mov	r1, r2
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fc fb7a 	bl	800b99e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fc fb22 	bl	800b8fa <USBD_LL_Reset>
}
 800f2b6:	bf00      	nop
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
	...

0800f2c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fc fb75 	bl	800b9be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	6812      	ldr	r2, [r2, #0]
 800f2e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f2e6:	f043 0301 	orr.w	r3, r3, #1
 800f2ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	7adb      	ldrb	r3, [r3, #11]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d005      	beq.n	800f300 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2f4:	4b04      	ldr	r3, [pc, #16]	@ (800f308 <HAL_PCD_SuspendCallback+0x48>)
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	4a03      	ldr	r2, [pc, #12]	@ (800f308 <HAL_PCD_SuspendCallback+0x48>)
 800f2fa:	f043 0306 	orr.w	r3, r3, #6
 800f2fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	e000ed00 	.word	0xe000ed00

0800f30c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fc fb6b 	bl	800b9f6 <USBD_LL_Resume>
}
 800f320:	bf00      	nop
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	460b      	mov	r3, r1
 800f332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f33a:	78fa      	ldrb	r2, [r7, #3]
 800f33c:	4611      	mov	r1, r2
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fc fbc3 	bl	800baca <USBD_LL_IsoOUTIncomplete>
}
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	460b      	mov	r3, r1
 800f356:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f35e:	78fa      	ldrb	r2, [r7, #3]
 800f360:	4611      	mov	r1, r2
 800f362:	4618      	mov	r0, r3
 800f364:	f7fc fb7f 	bl	800ba66 <USBD_LL_IsoINIncomplete>
}
 800f368:	bf00      	nop
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fc fbd5 	bl	800bb2e <USBD_LL_DevConnected>
}
 800f384:	bf00      	nop
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fc fbd2 	bl	800bb44 <USBD_LL_DevDisconnected>
}
 800f3a0:	bf00      	nop
 800f3a2:	3708      	adds	r7, #8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d13c      	bne.n	800f432 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f3b8:	4a20      	ldr	r2, [pc, #128]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4a1e      	ldr	r2, [pc, #120]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f3c8:	4b1c      	ldr	r3, [pc, #112]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f3ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f3d0:	4b1a      	ldr	r3, [pc, #104]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3d2:	2204      	movs	r2, #4
 800f3d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f3d6:	4b19      	ldr	r3, [pc, #100]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3d8:	2202      	movs	r2, #2
 800f3da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f3dc:	4b17      	ldr	r3, [pc, #92]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3de:	2200      	movs	r2, #0
 800f3e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3e2:	4b16      	ldr	r3, [pc, #88]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3e8:	4b14      	ldr	r3, [pc, #80]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f3ee:	4b13      	ldr	r3, [pc, #76]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3f4:	4b11      	ldr	r3, [pc, #68]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3fa:	4b10      	ldr	r3, [pc, #64]	@ (800f43c <USBD_LL_Init+0x94>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f400:	4b0e      	ldr	r3, [pc, #56]	@ (800f43c <USBD_LL_Init+0x94>)
 800f402:	2200      	movs	r2, #0
 800f404:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f406:	480d      	ldr	r0, [pc, #52]	@ (800f43c <USBD_LL_Init+0x94>)
 800f408:	f7f6 f914 	bl	8005634 <HAL_PCD_Init>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d001      	beq.n	800f416 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f412:	f7f2 f9d5 	bl	80017c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f416:	2180      	movs	r1, #128	@ 0x80
 800f418:	4808      	ldr	r0, [pc, #32]	@ (800f43c <USBD_LL_Init+0x94>)
 800f41a:	f7f7 fb40 	bl	8006a9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f41e:	2240      	movs	r2, #64	@ 0x40
 800f420:	2100      	movs	r1, #0
 800f422:	4806      	ldr	r0, [pc, #24]	@ (800f43c <USBD_LL_Init+0x94>)
 800f424:	f7f7 faf4 	bl	8006a10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f428:	2280      	movs	r2, #128	@ 0x80
 800f42a:	2101      	movs	r1, #1
 800f42c:	4803      	ldr	r0, [pc, #12]	@ (800f43c <USBD_LL_Init+0x94>)
 800f42e:	f7f7 faef 	bl	8006a10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f432:	2300      	movs	r3, #0
}
 800f434:	4618      	mov	r0, r3
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	20001134 	.word	0x20001134

0800f440 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f448:	2300      	movs	r3, #0
 800f44a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f44c:	2300      	movs	r3, #0
 800f44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f456:	4618      	mov	r0, r3
 800f458:	f7f6 f9fb 	bl	8005852 <HAL_PCD_Start>
 800f45c:	4603      	mov	r3, r0
 800f45e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f460:	7bfb      	ldrb	r3, [r7, #15]
 800f462:	4618      	mov	r0, r3
 800f464:	f000 f942 	bl	800f6ec <USBD_Get_USB_Status>
 800f468:	4603      	mov	r3, r0
 800f46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
 800f47e:	4608      	mov	r0, r1
 800f480:	4611      	mov	r1, r2
 800f482:	461a      	mov	r2, r3
 800f484:	4603      	mov	r3, r0
 800f486:	70fb      	strb	r3, [r7, #3]
 800f488:	460b      	mov	r3, r1
 800f48a:	70bb      	strb	r3, [r7, #2]
 800f48c:	4613      	mov	r3, r2
 800f48e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f494:	2300      	movs	r3, #0
 800f496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f49e:	78bb      	ldrb	r3, [r7, #2]
 800f4a0:	883a      	ldrh	r2, [r7, #0]
 800f4a2:	78f9      	ldrb	r1, [r7, #3]
 800f4a4:	f7f6 fecf 	bl	8006246 <HAL_PCD_EP_Open>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4ac:	7bfb      	ldrb	r3, [r7, #15]
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f000 f91c 	bl	800f6ec <USBD_Get_USB_Status>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b084      	sub	sp, #16
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4dc:	78fa      	ldrb	r2, [r7, #3]
 800f4de:	4611      	mov	r1, r2
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7f6 ff1a 	bl	800631a <HAL_PCD_EP_Close>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4ea:	7bfb      	ldrb	r3, [r7, #15]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 f8fd 	bl	800f6ec <USBD_Get_USB_Status>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3710      	adds	r7, #16
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	460b      	mov	r3, r1
 800f50a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f50c:	2300      	movs	r3, #0
 800f50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f510:	2300      	movs	r3, #0
 800f512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f51a:	78fa      	ldrb	r2, [r7, #3]
 800f51c:	4611      	mov	r1, r2
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f6 ffd2 	bl	80064c8 <HAL_PCD_EP_SetStall>
 800f524:	4603      	mov	r3, r0
 800f526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f528:	7bfb      	ldrb	r3, [r7, #15]
 800f52a:	4618      	mov	r0, r3
 800f52c:	f000 f8de 	bl	800f6ec <USBD_Get_USB_Status>
 800f530:	4603      	mov	r3, r0
 800f532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f534:	7bbb      	ldrb	r3, [r7, #14]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3710      	adds	r7, #16
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b084      	sub	sp, #16
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
 800f546:	460b      	mov	r3, r1
 800f548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f54a:	2300      	movs	r3, #0
 800f54c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f54e:	2300      	movs	r3, #0
 800f550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f558:	78fa      	ldrb	r2, [r7, #3]
 800f55a:	4611      	mov	r1, r2
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7f7 f816 	bl	800658e <HAL_PCD_EP_ClrStall>
 800f562:	4603      	mov	r3, r0
 800f564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f566:	7bfb      	ldrb	r3, [r7, #15]
 800f568:	4618      	mov	r0, r3
 800f56a:	f000 f8bf 	bl	800f6ec <USBD_Get_USB_Status>
 800f56e:	4603      	mov	r3, r0
 800f570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f572:	7bbb      	ldrb	r3, [r7, #14]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	460b      	mov	r3, r1
 800f586:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f58e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f594:	2b00      	cmp	r3, #0
 800f596:	da0b      	bge.n	800f5b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f598:	78fb      	ldrb	r3, [r7, #3]
 800f59a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f59e:	68f9      	ldr	r1, [r7, #12]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	4413      	add	r3, r2
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	440b      	add	r3, r1
 800f5aa:	3316      	adds	r3, #22
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	e00b      	b.n	800f5c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f5b0:	78fb      	ldrb	r3, [r7, #3]
 800f5b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f5b6:	68f9      	ldr	r1, [r7, #12]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	4413      	add	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	440b      	add	r3, r1
 800f5c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f5c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3714      	adds	r7, #20
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f5ee:	78fa      	ldrb	r2, [r7, #3]
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7f6 fe03 	bl	80061fe <HAL_PCD_SetAddress>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f000 f874 	bl	800f6ec <USBD_Get_USB_Status>
 800f604:	4603      	mov	r3, r0
 800f606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f608:	7bbb      	ldrb	r3, [r7, #14]
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b086      	sub	sp, #24
 800f616:	af00      	add	r7, sp, #0
 800f618:	60f8      	str	r0, [r7, #12]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	603b      	str	r3, [r7, #0]
 800f61e:	460b      	mov	r3, r1
 800f620:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f622:	2300      	movs	r3, #0
 800f624:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f626:	2300      	movs	r3, #0
 800f628:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f630:	7af9      	ldrb	r1, [r7, #11]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	f7f6 ff0d 	bl	8006454 <HAL_PCD_EP_Transmit>
 800f63a:	4603      	mov	r3, r0
 800f63c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f63e:	7dfb      	ldrb	r3, [r7, #23]
 800f640:	4618      	mov	r0, r3
 800f642:	f000 f853 	bl	800f6ec <USBD_Get_USB_Status>
 800f646:	4603      	mov	r3, r0
 800f648:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f64a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3718      	adds	r7, #24
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	607a      	str	r2, [r7, #4]
 800f65e:	603b      	str	r3, [r7, #0]
 800f660:	460b      	mov	r3, r1
 800f662:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f664:	2300      	movs	r3, #0
 800f666:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f672:	7af9      	ldrb	r1, [r7, #11]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	f7f6 fe99 	bl	80063ae <HAL_PCD_EP_Receive>
 800f67c:	4603      	mov	r3, r0
 800f67e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f680:	7dfb      	ldrb	r3, [r7, #23]
 800f682:	4618      	mov	r0, r3
 800f684:	f000 f832 	bl	800f6ec <USBD_Get_USB_Status>
 800f688:	4603      	mov	r3, r0
 800f68a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f68c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f696:	b580      	push	{r7, lr}
 800f698:	b082      	sub	sp, #8
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
 800f69e:	460b      	mov	r3, r1
 800f6a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6a8:	78fa      	ldrb	r2, [r7, #3]
 800f6aa:	4611      	mov	r1, r2
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7f6 feb9 	bl	8006424 <HAL_PCD_EP_GetRxCount>
 800f6b2:	4603      	mov	r3, r0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f6c4:	4b03      	ldr	r3, [pc, #12]	@ (800f6d4 <USBD_static_malloc+0x18>)
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	20001618 	.word	0x20001618

0800f6d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]

}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b085      	sub	sp, #20
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6fa:	79fb      	ldrb	r3, [r7, #7]
 800f6fc:	2b03      	cmp	r3, #3
 800f6fe:	d817      	bhi.n	800f730 <USBD_Get_USB_Status+0x44>
 800f700:	a201      	add	r2, pc, #4	@ (adr r2, 800f708 <USBD_Get_USB_Status+0x1c>)
 800f702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f706:	bf00      	nop
 800f708:	0800f719 	.word	0x0800f719
 800f70c:	0800f71f 	.word	0x0800f71f
 800f710:	0800f725 	.word	0x0800f725
 800f714:	0800f72b 	.word	0x0800f72b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f718:	2300      	movs	r3, #0
 800f71a:	73fb      	strb	r3, [r7, #15]
    break;
 800f71c:	e00b      	b.n	800f736 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f71e:	2303      	movs	r3, #3
 800f720:	73fb      	strb	r3, [r7, #15]
    break;
 800f722:	e008      	b.n	800f736 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f724:	2301      	movs	r3, #1
 800f726:	73fb      	strb	r3, [r7, #15]
    break;
 800f728:	e005      	b.n	800f736 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f72a:	2303      	movs	r3, #3
 800f72c:	73fb      	strb	r3, [r7, #15]
    break;
 800f72e:	e002      	b.n	800f736 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f730:	2303      	movs	r3, #3
 800f732:	73fb      	strb	r3, [r7, #15]
    break;
 800f734:	bf00      	nop
  }
  return usb_status;
 800f736:	7bfb      	ldrb	r3, [r7, #15]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3714      	adds	r7, #20
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <_ZdlPvj>:
 800f744:	f000 b811 	b.w	800f76a <_ZdlPv>

0800f748 <_Znwj>:
 800f748:	2801      	cmp	r0, #1
 800f74a:	bf38      	it	cc
 800f74c:	2001      	movcc	r0, #1
 800f74e:	b510      	push	{r4, lr}
 800f750:	4604      	mov	r4, r0
 800f752:	4620      	mov	r0, r4
 800f754:	f000 f836 	bl	800f7c4 <malloc>
 800f758:	b100      	cbz	r0, 800f75c <_Znwj+0x14>
 800f75a:	bd10      	pop	{r4, pc}
 800f75c:	f000 f808 	bl	800f770 <_ZSt15get_new_handlerv>
 800f760:	b908      	cbnz	r0, 800f766 <_Znwj+0x1e>
 800f762:	f000 f80d 	bl	800f780 <abort>
 800f766:	4780      	blx	r0
 800f768:	e7f3      	b.n	800f752 <_Znwj+0xa>

0800f76a <_ZdlPv>:
 800f76a:	f000 b833 	b.w	800f7d4 <free>
	...

0800f770 <_ZSt15get_new_handlerv>:
 800f770:	4b02      	ldr	r3, [pc, #8]	@ (800f77c <_ZSt15get_new_handlerv+0xc>)
 800f772:	6818      	ldr	r0, [r3, #0]
 800f774:	f3bf 8f5b 	dmb	ish
 800f778:	4770      	bx	lr
 800f77a:	bf00      	nop
 800f77c:	20001838 	.word	0x20001838

0800f780 <abort>:
 800f780:	b508      	push	{r3, lr}
 800f782:	2006      	movs	r0, #6
 800f784:	f000 f9ae 	bl	800fae4 <raise>
 800f788:	2001      	movs	r0, #1
 800f78a:	f7f2 fca3 	bl	80020d4 <_exit>

0800f78e <__itoa>:
 800f78e:	1e93      	subs	r3, r2, #2
 800f790:	2b22      	cmp	r3, #34	@ 0x22
 800f792:	b510      	push	{r4, lr}
 800f794:	460c      	mov	r4, r1
 800f796:	d904      	bls.n	800f7a2 <__itoa+0x14>
 800f798:	2300      	movs	r3, #0
 800f79a:	700b      	strb	r3, [r1, #0]
 800f79c:	461c      	mov	r4, r3
 800f79e:	4620      	mov	r0, r4
 800f7a0:	bd10      	pop	{r4, pc}
 800f7a2:	2a0a      	cmp	r2, #10
 800f7a4:	d109      	bne.n	800f7ba <__itoa+0x2c>
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	da07      	bge.n	800f7ba <__itoa+0x2c>
 800f7aa:	232d      	movs	r3, #45	@ 0x2d
 800f7ac:	700b      	strb	r3, [r1, #0]
 800f7ae:	4240      	negs	r0, r0
 800f7b0:	2101      	movs	r1, #1
 800f7b2:	4421      	add	r1, r4
 800f7b4:	f000 f8c4 	bl	800f940 <__utoa>
 800f7b8:	e7f1      	b.n	800f79e <__itoa+0x10>
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	e7f9      	b.n	800f7b2 <__itoa+0x24>

0800f7be <itoa>:
 800f7be:	f7ff bfe6 	b.w	800f78e <__itoa>
	...

0800f7c4 <malloc>:
 800f7c4:	4b02      	ldr	r3, [pc, #8]	@ (800f7d0 <malloc+0xc>)
 800f7c6:	4601      	mov	r1, r0
 800f7c8:	6818      	ldr	r0, [r3, #0]
 800f7ca:	f000 b82d 	b.w	800f828 <_malloc_r>
 800f7ce:	bf00      	nop
 800f7d0:	2000013c 	.word	0x2000013c

0800f7d4 <free>:
 800f7d4:	4b02      	ldr	r3, [pc, #8]	@ (800f7e0 <free+0xc>)
 800f7d6:	4601      	mov	r1, r0
 800f7d8:	6818      	ldr	r0, [r3, #0]
 800f7da:	f000 b9e9 	b.w	800fbb0 <_free_r>
 800f7de:	bf00      	nop
 800f7e0:	2000013c 	.word	0x2000013c

0800f7e4 <sbrk_aligned>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	4e0f      	ldr	r6, [pc, #60]	@ (800f824 <sbrk_aligned+0x40>)
 800f7e8:	460c      	mov	r4, r1
 800f7ea:	6831      	ldr	r1, [r6, #0]
 800f7ec:	4605      	mov	r5, r0
 800f7ee:	b911      	cbnz	r1, 800f7f6 <sbrk_aligned+0x12>
 800f7f0:	f000 f994 	bl	800fb1c <_sbrk_r>
 800f7f4:	6030      	str	r0, [r6, #0]
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f000 f98f 	bl	800fb1c <_sbrk_r>
 800f7fe:	1c43      	adds	r3, r0, #1
 800f800:	d103      	bne.n	800f80a <sbrk_aligned+0x26>
 800f802:	f04f 34ff 	mov.w	r4, #4294967295
 800f806:	4620      	mov	r0, r4
 800f808:	bd70      	pop	{r4, r5, r6, pc}
 800f80a:	1cc4      	adds	r4, r0, #3
 800f80c:	f024 0403 	bic.w	r4, r4, #3
 800f810:	42a0      	cmp	r0, r4
 800f812:	d0f8      	beq.n	800f806 <sbrk_aligned+0x22>
 800f814:	1a21      	subs	r1, r4, r0
 800f816:	4628      	mov	r0, r5
 800f818:	f000 f980 	bl	800fb1c <_sbrk_r>
 800f81c:	3001      	adds	r0, #1
 800f81e:	d1f2      	bne.n	800f806 <sbrk_aligned+0x22>
 800f820:	e7ef      	b.n	800f802 <sbrk_aligned+0x1e>
 800f822:	bf00      	nop
 800f824:	2000183c 	.word	0x2000183c

0800f828 <_malloc_r>:
 800f828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f82c:	1ccd      	adds	r5, r1, #3
 800f82e:	f025 0503 	bic.w	r5, r5, #3
 800f832:	3508      	adds	r5, #8
 800f834:	2d0c      	cmp	r5, #12
 800f836:	bf38      	it	cc
 800f838:	250c      	movcc	r5, #12
 800f83a:	2d00      	cmp	r5, #0
 800f83c:	4606      	mov	r6, r0
 800f83e:	db01      	blt.n	800f844 <_malloc_r+0x1c>
 800f840:	42a9      	cmp	r1, r5
 800f842:	d904      	bls.n	800f84e <_malloc_r+0x26>
 800f844:	230c      	movs	r3, #12
 800f846:	6033      	str	r3, [r6, #0]
 800f848:	2000      	movs	r0, #0
 800f84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f84e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f924 <_malloc_r+0xfc>
 800f852:	f000 f869 	bl	800f928 <__malloc_lock>
 800f856:	f8d8 3000 	ldr.w	r3, [r8]
 800f85a:	461c      	mov	r4, r3
 800f85c:	bb44      	cbnz	r4, 800f8b0 <_malloc_r+0x88>
 800f85e:	4629      	mov	r1, r5
 800f860:	4630      	mov	r0, r6
 800f862:	f7ff ffbf 	bl	800f7e4 <sbrk_aligned>
 800f866:	1c43      	adds	r3, r0, #1
 800f868:	4604      	mov	r4, r0
 800f86a:	d158      	bne.n	800f91e <_malloc_r+0xf6>
 800f86c:	f8d8 4000 	ldr.w	r4, [r8]
 800f870:	4627      	mov	r7, r4
 800f872:	2f00      	cmp	r7, #0
 800f874:	d143      	bne.n	800f8fe <_malloc_r+0xd6>
 800f876:	2c00      	cmp	r4, #0
 800f878:	d04b      	beq.n	800f912 <_malloc_r+0xea>
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	4639      	mov	r1, r7
 800f87e:	4630      	mov	r0, r6
 800f880:	eb04 0903 	add.w	r9, r4, r3
 800f884:	f000 f94a 	bl	800fb1c <_sbrk_r>
 800f888:	4581      	cmp	r9, r0
 800f88a:	d142      	bne.n	800f912 <_malloc_r+0xea>
 800f88c:	6821      	ldr	r1, [r4, #0]
 800f88e:	1a6d      	subs	r5, r5, r1
 800f890:	4629      	mov	r1, r5
 800f892:	4630      	mov	r0, r6
 800f894:	f7ff ffa6 	bl	800f7e4 <sbrk_aligned>
 800f898:	3001      	adds	r0, #1
 800f89a:	d03a      	beq.n	800f912 <_malloc_r+0xea>
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	442b      	add	r3, r5
 800f8a0:	6023      	str	r3, [r4, #0]
 800f8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800f8a6:	685a      	ldr	r2, [r3, #4]
 800f8a8:	bb62      	cbnz	r2, 800f904 <_malloc_r+0xdc>
 800f8aa:	f8c8 7000 	str.w	r7, [r8]
 800f8ae:	e00f      	b.n	800f8d0 <_malloc_r+0xa8>
 800f8b0:	6822      	ldr	r2, [r4, #0]
 800f8b2:	1b52      	subs	r2, r2, r5
 800f8b4:	d420      	bmi.n	800f8f8 <_malloc_r+0xd0>
 800f8b6:	2a0b      	cmp	r2, #11
 800f8b8:	d917      	bls.n	800f8ea <_malloc_r+0xc2>
 800f8ba:	1961      	adds	r1, r4, r5
 800f8bc:	42a3      	cmp	r3, r4
 800f8be:	6025      	str	r5, [r4, #0]
 800f8c0:	bf18      	it	ne
 800f8c2:	6059      	strne	r1, [r3, #4]
 800f8c4:	6863      	ldr	r3, [r4, #4]
 800f8c6:	bf08      	it	eq
 800f8c8:	f8c8 1000 	streq.w	r1, [r8]
 800f8cc:	5162      	str	r2, [r4, r5]
 800f8ce:	604b      	str	r3, [r1, #4]
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f000 f82f 	bl	800f934 <__malloc_unlock>
 800f8d6:	f104 000b 	add.w	r0, r4, #11
 800f8da:	1d23      	adds	r3, r4, #4
 800f8dc:	f020 0007 	bic.w	r0, r0, #7
 800f8e0:	1ac2      	subs	r2, r0, r3
 800f8e2:	bf1c      	itt	ne
 800f8e4:	1a1b      	subne	r3, r3, r0
 800f8e6:	50a3      	strne	r3, [r4, r2]
 800f8e8:	e7af      	b.n	800f84a <_malloc_r+0x22>
 800f8ea:	6862      	ldr	r2, [r4, #4]
 800f8ec:	42a3      	cmp	r3, r4
 800f8ee:	bf0c      	ite	eq
 800f8f0:	f8c8 2000 	streq.w	r2, [r8]
 800f8f4:	605a      	strne	r2, [r3, #4]
 800f8f6:	e7eb      	b.n	800f8d0 <_malloc_r+0xa8>
 800f8f8:	4623      	mov	r3, r4
 800f8fa:	6864      	ldr	r4, [r4, #4]
 800f8fc:	e7ae      	b.n	800f85c <_malloc_r+0x34>
 800f8fe:	463c      	mov	r4, r7
 800f900:	687f      	ldr	r7, [r7, #4]
 800f902:	e7b6      	b.n	800f872 <_malloc_r+0x4a>
 800f904:	461a      	mov	r2, r3
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	42a3      	cmp	r3, r4
 800f90a:	d1fb      	bne.n	800f904 <_malloc_r+0xdc>
 800f90c:	2300      	movs	r3, #0
 800f90e:	6053      	str	r3, [r2, #4]
 800f910:	e7de      	b.n	800f8d0 <_malloc_r+0xa8>
 800f912:	230c      	movs	r3, #12
 800f914:	6033      	str	r3, [r6, #0]
 800f916:	4630      	mov	r0, r6
 800f918:	f000 f80c 	bl	800f934 <__malloc_unlock>
 800f91c:	e794      	b.n	800f848 <_malloc_r+0x20>
 800f91e:	6005      	str	r5, [r0, #0]
 800f920:	e7d6      	b.n	800f8d0 <_malloc_r+0xa8>
 800f922:	bf00      	nop
 800f924:	20001840 	.word	0x20001840

0800f928 <__malloc_lock>:
 800f928:	4801      	ldr	r0, [pc, #4]	@ (800f930 <__malloc_lock+0x8>)
 800f92a:	f000 b931 	b.w	800fb90 <__retarget_lock_acquire_recursive>
 800f92e:	bf00      	nop
 800f930:	20001980 	.word	0x20001980

0800f934 <__malloc_unlock>:
 800f934:	4801      	ldr	r0, [pc, #4]	@ (800f93c <__malloc_unlock+0x8>)
 800f936:	f000 b92c 	b.w	800fb92 <__retarget_lock_release_recursive>
 800f93a:	bf00      	nop
 800f93c:	20001980 	.word	0x20001980

0800f940 <__utoa>:
 800f940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f942:	4c1f      	ldr	r4, [pc, #124]	@ (800f9c0 <__utoa+0x80>)
 800f944:	b08b      	sub	sp, #44	@ 0x2c
 800f946:	4605      	mov	r5, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	466e      	mov	r6, sp
 800f94c:	f104 0c20 	add.w	ip, r4, #32
 800f950:	6820      	ldr	r0, [r4, #0]
 800f952:	6861      	ldr	r1, [r4, #4]
 800f954:	4637      	mov	r7, r6
 800f956:	c703      	stmia	r7!, {r0, r1}
 800f958:	3408      	adds	r4, #8
 800f95a:	4564      	cmp	r4, ip
 800f95c:	463e      	mov	r6, r7
 800f95e:	d1f7      	bne.n	800f950 <__utoa+0x10>
 800f960:	7921      	ldrb	r1, [r4, #4]
 800f962:	7139      	strb	r1, [r7, #4]
 800f964:	1e91      	subs	r1, r2, #2
 800f966:	6820      	ldr	r0, [r4, #0]
 800f968:	6038      	str	r0, [r7, #0]
 800f96a:	2922      	cmp	r1, #34	@ 0x22
 800f96c:	f04f 0100 	mov.w	r1, #0
 800f970:	d904      	bls.n	800f97c <__utoa+0x3c>
 800f972:	7019      	strb	r1, [r3, #0]
 800f974:	460b      	mov	r3, r1
 800f976:	4618      	mov	r0, r3
 800f978:	b00b      	add	sp, #44	@ 0x2c
 800f97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f97c:	1e58      	subs	r0, r3, #1
 800f97e:	4684      	mov	ip, r0
 800f980:	fbb5 f7f2 	udiv	r7, r5, r2
 800f984:	fb02 5617 	mls	r6, r2, r7, r5
 800f988:	3628      	adds	r6, #40	@ 0x28
 800f98a:	446e      	add	r6, sp
 800f98c:	460c      	mov	r4, r1
 800f98e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f992:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f996:	462e      	mov	r6, r5
 800f998:	42b2      	cmp	r2, r6
 800f99a:	f101 0101 	add.w	r1, r1, #1
 800f99e:	463d      	mov	r5, r7
 800f9a0:	d9ee      	bls.n	800f980 <__utoa+0x40>
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	545a      	strb	r2, [r3, r1]
 800f9a6:	1919      	adds	r1, r3, r4
 800f9a8:	1aa5      	subs	r5, r4, r2
 800f9aa:	42aa      	cmp	r2, r5
 800f9ac:	dae3      	bge.n	800f976 <__utoa+0x36>
 800f9ae:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f9b2:	780e      	ldrb	r6, [r1, #0]
 800f9b4:	7006      	strb	r6, [r0, #0]
 800f9b6:	3201      	adds	r2, #1
 800f9b8:	f801 5901 	strb.w	r5, [r1], #-1
 800f9bc:	e7f4      	b.n	800f9a8 <__utoa+0x68>
 800f9be:	bf00      	nop
 800f9c0:	08017ff4 	.word	0x08017ff4

0800f9c4 <_vsniprintf_r>:
 800f9c4:	b530      	push	{r4, r5, lr}
 800f9c6:	4614      	mov	r4, r2
 800f9c8:	2c00      	cmp	r4, #0
 800f9ca:	b09b      	sub	sp, #108	@ 0x6c
 800f9cc:	4605      	mov	r5, r0
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	da05      	bge.n	800f9de <_vsniprintf_r+0x1a>
 800f9d2:	238b      	movs	r3, #139	@ 0x8b
 800f9d4:	6003      	str	r3, [r0, #0]
 800f9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9da:	b01b      	add	sp, #108	@ 0x6c
 800f9dc:	bd30      	pop	{r4, r5, pc}
 800f9de:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f9e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f9e6:	bf14      	ite	ne
 800f9e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f9ec:	4623      	moveq	r3, r4
 800f9ee:	9302      	str	r3, [sp, #8]
 800f9f0:	9305      	str	r3, [sp, #20]
 800f9f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9f6:	9100      	str	r1, [sp, #0]
 800f9f8:	9104      	str	r1, [sp, #16]
 800f9fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9fe:	4669      	mov	r1, sp
 800fa00:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fa02:	f000 f97b 	bl	800fcfc <_svfiprintf_r>
 800fa06:	1c43      	adds	r3, r0, #1
 800fa08:	bfbc      	itt	lt
 800fa0a:	238b      	movlt	r3, #139	@ 0x8b
 800fa0c:	602b      	strlt	r3, [r5, #0]
 800fa0e:	2c00      	cmp	r4, #0
 800fa10:	d0e3      	beq.n	800f9da <_vsniprintf_r+0x16>
 800fa12:	9b00      	ldr	r3, [sp, #0]
 800fa14:	2200      	movs	r2, #0
 800fa16:	701a      	strb	r2, [r3, #0]
 800fa18:	e7df      	b.n	800f9da <_vsniprintf_r+0x16>
	...

0800fa1c <vsniprintf>:
 800fa1c:	b507      	push	{r0, r1, r2, lr}
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	4613      	mov	r3, r2
 800fa22:	460a      	mov	r2, r1
 800fa24:	4601      	mov	r1, r0
 800fa26:	4803      	ldr	r0, [pc, #12]	@ (800fa34 <vsniprintf+0x18>)
 800fa28:	6800      	ldr	r0, [r0, #0]
 800fa2a:	f7ff ffcb 	bl	800f9c4 <_vsniprintf_r>
 800fa2e:	b003      	add	sp, #12
 800fa30:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa34:	2000013c 	.word	0x2000013c

0800fa38 <memset>:
 800fa38:	4402      	add	r2, r0
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d100      	bne.n	800fa42 <memset+0xa>
 800fa40:	4770      	bx	lr
 800fa42:	f803 1b01 	strb.w	r1, [r3], #1
 800fa46:	e7f9      	b.n	800fa3c <memset+0x4>

0800fa48 <strncat>:
 800fa48:	b530      	push	{r4, r5, lr}
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	7825      	ldrb	r5, [r4, #0]
 800fa4e:	4623      	mov	r3, r4
 800fa50:	3401      	adds	r4, #1
 800fa52:	2d00      	cmp	r5, #0
 800fa54:	d1fa      	bne.n	800fa4c <strncat+0x4>
 800fa56:	3a01      	subs	r2, #1
 800fa58:	d304      	bcc.n	800fa64 <strncat+0x1c>
 800fa5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa5e:	f803 4b01 	strb.w	r4, [r3], #1
 800fa62:	b904      	cbnz	r4, 800fa66 <strncat+0x1e>
 800fa64:	bd30      	pop	{r4, r5, pc}
 800fa66:	2a00      	cmp	r2, #0
 800fa68:	d1f5      	bne.n	800fa56 <strncat+0xe>
 800fa6a:	701a      	strb	r2, [r3, #0]
 800fa6c:	e7f3      	b.n	800fa56 <strncat+0xe>

0800fa6e <strncpy>:
 800fa6e:	b510      	push	{r4, lr}
 800fa70:	3901      	subs	r1, #1
 800fa72:	4603      	mov	r3, r0
 800fa74:	b132      	cbz	r2, 800fa84 <strncpy+0x16>
 800fa76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fa7a:	f803 4b01 	strb.w	r4, [r3], #1
 800fa7e:	3a01      	subs	r2, #1
 800fa80:	2c00      	cmp	r4, #0
 800fa82:	d1f7      	bne.n	800fa74 <strncpy+0x6>
 800fa84:	441a      	add	r2, r3
 800fa86:	2100      	movs	r1, #0
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d100      	bne.n	800fa8e <strncpy+0x20>
 800fa8c:	bd10      	pop	{r4, pc}
 800fa8e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa92:	e7f9      	b.n	800fa88 <strncpy+0x1a>

0800fa94 <_raise_r>:
 800fa94:	291f      	cmp	r1, #31
 800fa96:	b538      	push	{r3, r4, r5, lr}
 800fa98:	4605      	mov	r5, r0
 800fa9a:	460c      	mov	r4, r1
 800fa9c:	d904      	bls.n	800faa8 <_raise_r+0x14>
 800fa9e:	2316      	movs	r3, #22
 800faa0:	6003      	str	r3, [r0, #0]
 800faa2:	f04f 30ff 	mov.w	r0, #4294967295
 800faa6:	bd38      	pop	{r3, r4, r5, pc}
 800faa8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800faaa:	b112      	cbz	r2, 800fab2 <_raise_r+0x1e>
 800faac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fab0:	b94b      	cbnz	r3, 800fac6 <_raise_r+0x32>
 800fab2:	4628      	mov	r0, r5
 800fab4:	f000 f830 	bl	800fb18 <_getpid_r>
 800fab8:	4622      	mov	r2, r4
 800faba:	4601      	mov	r1, r0
 800fabc:	4628      	mov	r0, r5
 800fabe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fac2:	f000 b817 	b.w	800faf4 <_kill_r>
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d00a      	beq.n	800fae0 <_raise_r+0x4c>
 800faca:	1c59      	adds	r1, r3, #1
 800facc:	d103      	bne.n	800fad6 <_raise_r+0x42>
 800face:	2316      	movs	r3, #22
 800fad0:	6003      	str	r3, [r0, #0]
 800fad2:	2001      	movs	r0, #1
 800fad4:	e7e7      	b.n	800faa6 <_raise_r+0x12>
 800fad6:	2100      	movs	r1, #0
 800fad8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fadc:	4620      	mov	r0, r4
 800fade:	4798      	blx	r3
 800fae0:	2000      	movs	r0, #0
 800fae2:	e7e0      	b.n	800faa6 <_raise_r+0x12>

0800fae4 <raise>:
 800fae4:	4b02      	ldr	r3, [pc, #8]	@ (800faf0 <raise+0xc>)
 800fae6:	4601      	mov	r1, r0
 800fae8:	6818      	ldr	r0, [r3, #0]
 800faea:	f7ff bfd3 	b.w	800fa94 <_raise_r>
 800faee:	bf00      	nop
 800faf0:	2000013c 	.word	0x2000013c

0800faf4 <_kill_r>:
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	4d07      	ldr	r5, [pc, #28]	@ (800fb14 <_kill_r+0x20>)
 800faf8:	2300      	movs	r3, #0
 800fafa:	4604      	mov	r4, r0
 800fafc:	4608      	mov	r0, r1
 800fafe:	4611      	mov	r1, r2
 800fb00:	602b      	str	r3, [r5, #0]
 800fb02:	f7f2 fad7 	bl	80020b4 <_kill>
 800fb06:	1c43      	adds	r3, r0, #1
 800fb08:	d102      	bne.n	800fb10 <_kill_r+0x1c>
 800fb0a:	682b      	ldr	r3, [r5, #0]
 800fb0c:	b103      	cbz	r3, 800fb10 <_kill_r+0x1c>
 800fb0e:	6023      	str	r3, [r4, #0]
 800fb10:	bd38      	pop	{r3, r4, r5, pc}
 800fb12:	bf00      	nop
 800fb14:	2000197c 	.word	0x2000197c

0800fb18 <_getpid_r>:
 800fb18:	f7f2 bac4 	b.w	80020a4 <_getpid>

0800fb1c <_sbrk_r>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	4d06      	ldr	r5, [pc, #24]	@ (800fb38 <_sbrk_r+0x1c>)
 800fb20:	2300      	movs	r3, #0
 800fb22:	4604      	mov	r4, r0
 800fb24:	4608      	mov	r0, r1
 800fb26:	602b      	str	r3, [r5, #0]
 800fb28:	f7f2 fae0 	bl	80020ec <_sbrk>
 800fb2c:	1c43      	adds	r3, r0, #1
 800fb2e:	d102      	bne.n	800fb36 <_sbrk_r+0x1a>
 800fb30:	682b      	ldr	r3, [r5, #0]
 800fb32:	b103      	cbz	r3, 800fb36 <_sbrk_r+0x1a>
 800fb34:	6023      	str	r3, [r4, #0]
 800fb36:	bd38      	pop	{r3, r4, r5, pc}
 800fb38:	2000197c 	.word	0x2000197c

0800fb3c <__errno>:
 800fb3c:	4b01      	ldr	r3, [pc, #4]	@ (800fb44 <__errno+0x8>)
 800fb3e:	6818      	ldr	r0, [r3, #0]
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	2000013c 	.word	0x2000013c

0800fb48 <__libc_init_array>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	4d0d      	ldr	r5, [pc, #52]	@ (800fb80 <__libc_init_array+0x38>)
 800fb4c:	4c0d      	ldr	r4, [pc, #52]	@ (800fb84 <__libc_init_array+0x3c>)
 800fb4e:	1b64      	subs	r4, r4, r5
 800fb50:	10a4      	asrs	r4, r4, #2
 800fb52:	2600      	movs	r6, #0
 800fb54:	42a6      	cmp	r6, r4
 800fb56:	d109      	bne.n	800fb6c <__libc_init_array+0x24>
 800fb58:	4d0b      	ldr	r5, [pc, #44]	@ (800fb88 <__libc_init_array+0x40>)
 800fb5a:	4c0c      	ldr	r4, [pc, #48]	@ (800fb8c <__libc_init_array+0x44>)
 800fb5c:	f000 fba8 	bl	80102b0 <_init>
 800fb60:	1b64      	subs	r4, r4, r5
 800fb62:	10a4      	asrs	r4, r4, #2
 800fb64:	2600      	movs	r6, #0
 800fb66:	42a6      	cmp	r6, r4
 800fb68:	d105      	bne.n	800fb76 <__libc_init_array+0x2e>
 800fb6a:	bd70      	pop	{r4, r5, r6, pc}
 800fb6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb70:	4798      	blx	r3
 800fb72:	3601      	adds	r6, #1
 800fb74:	e7ee      	b.n	800fb54 <__libc_init_array+0xc>
 800fb76:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb7a:	4798      	blx	r3
 800fb7c:	3601      	adds	r6, #1
 800fb7e:	e7f2      	b.n	800fb66 <__libc_init_array+0x1e>
 800fb80:	08018054 	.word	0x08018054
 800fb84:	08018054 	.word	0x08018054
 800fb88:	08018054 	.word	0x08018054
 800fb8c:	08018060 	.word	0x08018060

0800fb90 <__retarget_lock_acquire_recursive>:
 800fb90:	4770      	bx	lr

0800fb92 <__retarget_lock_release_recursive>:
 800fb92:	4770      	bx	lr

0800fb94 <memcpy>:
 800fb94:	440a      	add	r2, r1
 800fb96:	4291      	cmp	r1, r2
 800fb98:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb9c:	d100      	bne.n	800fba0 <memcpy+0xc>
 800fb9e:	4770      	bx	lr
 800fba0:	b510      	push	{r4, lr}
 800fba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbaa:	4291      	cmp	r1, r2
 800fbac:	d1f9      	bne.n	800fba2 <memcpy+0xe>
 800fbae:	bd10      	pop	{r4, pc}

0800fbb0 <_free_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	2900      	cmp	r1, #0
 800fbb6:	d041      	beq.n	800fc3c <_free_r+0x8c>
 800fbb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbbc:	1f0c      	subs	r4, r1, #4
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	bfb8      	it	lt
 800fbc2:	18e4      	addlt	r4, r4, r3
 800fbc4:	f7ff feb0 	bl	800f928 <__malloc_lock>
 800fbc8:	4a1d      	ldr	r2, [pc, #116]	@ (800fc40 <_free_r+0x90>)
 800fbca:	6813      	ldr	r3, [r2, #0]
 800fbcc:	b933      	cbnz	r3, 800fbdc <_free_r+0x2c>
 800fbce:	6063      	str	r3, [r4, #4]
 800fbd0:	6014      	str	r4, [r2, #0]
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbd8:	f7ff beac 	b.w	800f934 <__malloc_unlock>
 800fbdc:	42a3      	cmp	r3, r4
 800fbde:	d908      	bls.n	800fbf2 <_free_r+0x42>
 800fbe0:	6820      	ldr	r0, [r4, #0]
 800fbe2:	1821      	adds	r1, r4, r0
 800fbe4:	428b      	cmp	r3, r1
 800fbe6:	bf01      	itttt	eq
 800fbe8:	6819      	ldreq	r1, [r3, #0]
 800fbea:	685b      	ldreq	r3, [r3, #4]
 800fbec:	1809      	addeq	r1, r1, r0
 800fbee:	6021      	streq	r1, [r4, #0]
 800fbf0:	e7ed      	b.n	800fbce <_free_r+0x1e>
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	b10b      	cbz	r3, 800fbfc <_free_r+0x4c>
 800fbf8:	42a3      	cmp	r3, r4
 800fbfa:	d9fa      	bls.n	800fbf2 <_free_r+0x42>
 800fbfc:	6811      	ldr	r1, [r2, #0]
 800fbfe:	1850      	adds	r0, r2, r1
 800fc00:	42a0      	cmp	r0, r4
 800fc02:	d10b      	bne.n	800fc1c <_free_r+0x6c>
 800fc04:	6820      	ldr	r0, [r4, #0]
 800fc06:	4401      	add	r1, r0
 800fc08:	1850      	adds	r0, r2, r1
 800fc0a:	4283      	cmp	r3, r0
 800fc0c:	6011      	str	r1, [r2, #0]
 800fc0e:	d1e0      	bne.n	800fbd2 <_free_r+0x22>
 800fc10:	6818      	ldr	r0, [r3, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	6053      	str	r3, [r2, #4]
 800fc16:	4408      	add	r0, r1
 800fc18:	6010      	str	r0, [r2, #0]
 800fc1a:	e7da      	b.n	800fbd2 <_free_r+0x22>
 800fc1c:	d902      	bls.n	800fc24 <_free_r+0x74>
 800fc1e:	230c      	movs	r3, #12
 800fc20:	602b      	str	r3, [r5, #0]
 800fc22:	e7d6      	b.n	800fbd2 <_free_r+0x22>
 800fc24:	6820      	ldr	r0, [r4, #0]
 800fc26:	1821      	adds	r1, r4, r0
 800fc28:	428b      	cmp	r3, r1
 800fc2a:	bf04      	itt	eq
 800fc2c:	6819      	ldreq	r1, [r3, #0]
 800fc2e:	685b      	ldreq	r3, [r3, #4]
 800fc30:	6063      	str	r3, [r4, #4]
 800fc32:	bf04      	itt	eq
 800fc34:	1809      	addeq	r1, r1, r0
 800fc36:	6021      	streq	r1, [r4, #0]
 800fc38:	6054      	str	r4, [r2, #4]
 800fc3a:	e7ca      	b.n	800fbd2 <_free_r+0x22>
 800fc3c:	bd38      	pop	{r3, r4, r5, pc}
 800fc3e:	bf00      	nop
 800fc40:	20001840 	.word	0x20001840

0800fc44 <__ssputs_r>:
 800fc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc48:	688e      	ldr	r6, [r1, #8]
 800fc4a:	461f      	mov	r7, r3
 800fc4c:	42be      	cmp	r6, r7
 800fc4e:	680b      	ldr	r3, [r1, #0]
 800fc50:	4682      	mov	sl, r0
 800fc52:	460c      	mov	r4, r1
 800fc54:	4690      	mov	r8, r2
 800fc56:	d82d      	bhi.n	800fcb4 <__ssputs_r+0x70>
 800fc58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc60:	d026      	beq.n	800fcb0 <__ssputs_r+0x6c>
 800fc62:	6965      	ldr	r5, [r4, #20]
 800fc64:	6909      	ldr	r1, [r1, #16]
 800fc66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc6a:	eba3 0901 	sub.w	r9, r3, r1
 800fc6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc72:	1c7b      	adds	r3, r7, #1
 800fc74:	444b      	add	r3, r9
 800fc76:	106d      	asrs	r5, r5, #1
 800fc78:	429d      	cmp	r5, r3
 800fc7a:	bf38      	it	cc
 800fc7c:	461d      	movcc	r5, r3
 800fc7e:	0553      	lsls	r3, r2, #21
 800fc80:	d527      	bpl.n	800fcd2 <__ssputs_r+0x8e>
 800fc82:	4629      	mov	r1, r5
 800fc84:	f7ff fdd0 	bl	800f828 <_malloc_r>
 800fc88:	4606      	mov	r6, r0
 800fc8a:	b360      	cbz	r0, 800fce6 <__ssputs_r+0xa2>
 800fc8c:	6921      	ldr	r1, [r4, #16]
 800fc8e:	464a      	mov	r2, r9
 800fc90:	f7ff ff80 	bl	800fb94 <memcpy>
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	6126      	str	r6, [r4, #16]
 800fca2:	6165      	str	r5, [r4, #20]
 800fca4:	444e      	add	r6, r9
 800fca6:	eba5 0509 	sub.w	r5, r5, r9
 800fcaa:	6026      	str	r6, [r4, #0]
 800fcac:	60a5      	str	r5, [r4, #8]
 800fcae:	463e      	mov	r6, r7
 800fcb0:	42be      	cmp	r6, r7
 800fcb2:	d900      	bls.n	800fcb6 <__ssputs_r+0x72>
 800fcb4:	463e      	mov	r6, r7
 800fcb6:	6820      	ldr	r0, [r4, #0]
 800fcb8:	4632      	mov	r2, r6
 800fcba:	4641      	mov	r1, r8
 800fcbc:	f000 faa8 	bl	8010210 <memmove>
 800fcc0:	68a3      	ldr	r3, [r4, #8]
 800fcc2:	1b9b      	subs	r3, r3, r6
 800fcc4:	60a3      	str	r3, [r4, #8]
 800fcc6:	6823      	ldr	r3, [r4, #0]
 800fcc8:	4433      	add	r3, r6
 800fcca:	6023      	str	r3, [r4, #0]
 800fccc:	2000      	movs	r0, #0
 800fcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd2:	462a      	mov	r2, r5
 800fcd4:	f000 fab6 	bl	8010244 <_realloc_r>
 800fcd8:	4606      	mov	r6, r0
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d1e0      	bne.n	800fca0 <__ssputs_r+0x5c>
 800fcde:	6921      	ldr	r1, [r4, #16]
 800fce0:	4650      	mov	r0, sl
 800fce2:	f7ff ff65 	bl	800fbb0 <_free_r>
 800fce6:	230c      	movs	r3, #12
 800fce8:	f8ca 3000 	str.w	r3, [sl]
 800fcec:	89a3      	ldrh	r3, [r4, #12]
 800fcee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcf2:	81a3      	strh	r3, [r4, #12]
 800fcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf8:	e7e9      	b.n	800fcce <__ssputs_r+0x8a>
	...

0800fcfc <_svfiprintf_r>:
 800fcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd00:	4698      	mov	r8, r3
 800fd02:	898b      	ldrh	r3, [r1, #12]
 800fd04:	061b      	lsls	r3, r3, #24
 800fd06:	b09d      	sub	sp, #116	@ 0x74
 800fd08:	4607      	mov	r7, r0
 800fd0a:	460d      	mov	r5, r1
 800fd0c:	4614      	mov	r4, r2
 800fd0e:	d510      	bpl.n	800fd32 <_svfiprintf_r+0x36>
 800fd10:	690b      	ldr	r3, [r1, #16]
 800fd12:	b973      	cbnz	r3, 800fd32 <_svfiprintf_r+0x36>
 800fd14:	2140      	movs	r1, #64	@ 0x40
 800fd16:	f7ff fd87 	bl	800f828 <_malloc_r>
 800fd1a:	6028      	str	r0, [r5, #0]
 800fd1c:	6128      	str	r0, [r5, #16]
 800fd1e:	b930      	cbnz	r0, 800fd2e <_svfiprintf_r+0x32>
 800fd20:	230c      	movs	r3, #12
 800fd22:	603b      	str	r3, [r7, #0]
 800fd24:	f04f 30ff 	mov.w	r0, #4294967295
 800fd28:	b01d      	add	sp, #116	@ 0x74
 800fd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2e:	2340      	movs	r3, #64	@ 0x40
 800fd30:	616b      	str	r3, [r5, #20]
 800fd32:	2300      	movs	r3, #0
 800fd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd36:	2320      	movs	r3, #32
 800fd38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd40:	2330      	movs	r3, #48	@ 0x30
 800fd42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fee0 <_svfiprintf_r+0x1e4>
 800fd46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd4a:	f04f 0901 	mov.w	r9, #1
 800fd4e:	4623      	mov	r3, r4
 800fd50:	469a      	mov	sl, r3
 800fd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd56:	b10a      	cbz	r2, 800fd5c <_svfiprintf_r+0x60>
 800fd58:	2a25      	cmp	r2, #37	@ 0x25
 800fd5a:	d1f9      	bne.n	800fd50 <_svfiprintf_r+0x54>
 800fd5c:	ebba 0b04 	subs.w	fp, sl, r4
 800fd60:	d00b      	beq.n	800fd7a <_svfiprintf_r+0x7e>
 800fd62:	465b      	mov	r3, fp
 800fd64:	4622      	mov	r2, r4
 800fd66:	4629      	mov	r1, r5
 800fd68:	4638      	mov	r0, r7
 800fd6a:	f7ff ff6b 	bl	800fc44 <__ssputs_r>
 800fd6e:	3001      	adds	r0, #1
 800fd70:	f000 80a7 	beq.w	800fec2 <_svfiprintf_r+0x1c6>
 800fd74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd76:	445a      	add	r2, fp
 800fd78:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f000 809f 	beq.w	800fec2 <_svfiprintf_r+0x1c6>
 800fd84:	2300      	movs	r3, #0
 800fd86:	f04f 32ff 	mov.w	r2, #4294967295
 800fd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd8e:	f10a 0a01 	add.w	sl, sl, #1
 800fd92:	9304      	str	r3, [sp, #16]
 800fd94:	9307      	str	r3, [sp, #28]
 800fd96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd9c:	4654      	mov	r4, sl
 800fd9e:	2205      	movs	r2, #5
 800fda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fda4:	484e      	ldr	r0, [pc, #312]	@ (800fee0 <_svfiprintf_r+0x1e4>)
 800fda6:	f7f0 fa23 	bl	80001f0 <memchr>
 800fdaa:	9a04      	ldr	r2, [sp, #16]
 800fdac:	b9d8      	cbnz	r0, 800fde6 <_svfiprintf_r+0xea>
 800fdae:	06d0      	lsls	r0, r2, #27
 800fdb0:	bf44      	itt	mi
 800fdb2:	2320      	movmi	r3, #32
 800fdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdb8:	0711      	lsls	r1, r2, #28
 800fdba:	bf44      	itt	mi
 800fdbc:	232b      	movmi	r3, #43	@ 0x2b
 800fdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdc2:	f89a 3000 	ldrb.w	r3, [sl]
 800fdc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdc8:	d015      	beq.n	800fdf6 <_svfiprintf_r+0xfa>
 800fdca:	9a07      	ldr	r2, [sp, #28]
 800fdcc:	4654      	mov	r4, sl
 800fdce:	2000      	movs	r0, #0
 800fdd0:	f04f 0c0a 	mov.w	ip, #10
 800fdd4:	4621      	mov	r1, r4
 800fdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdda:	3b30      	subs	r3, #48	@ 0x30
 800fddc:	2b09      	cmp	r3, #9
 800fdde:	d94b      	bls.n	800fe78 <_svfiprintf_r+0x17c>
 800fde0:	b1b0      	cbz	r0, 800fe10 <_svfiprintf_r+0x114>
 800fde2:	9207      	str	r2, [sp, #28]
 800fde4:	e014      	b.n	800fe10 <_svfiprintf_r+0x114>
 800fde6:	eba0 0308 	sub.w	r3, r0, r8
 800fdea:	fa09 f303 	lsl.w	r3, r9, r3
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	9304      	str	r3, [sp, #16]
 800fdf2:	46a2      	mov	sl, r4
 800fdf4:	e7d2      	b.n	800fd9c <_svfiprintf_r+0xa0>
 800fdf6:	9b03      	ldr	r3, [sp, #12]
 800fdf8:	1d19      	adds	r1, r3, #4
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	9103      	str	r1, [sp, #12]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	bfbb      	ittet	lt
 800fe02:	425b      	neglt	r3, r3
 800fe04:	f042 0202 	orrlt.w	r2, r2, #2
 800fe08:	9307      	strge	r3, [sp, #28]
 800fe0a:	9307      	strlt	r3, [sp, #28]
 800fe0c:	bfb8      	it	lt
 800fe0e:	9204      	strlt	r2, [sp, #16]
 800fe10:	7823      	ldrb	r3, [r4, #0]
 800fe12:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe14:	d10a      	bne.n	800fe2c <_svfiprintf_r+0x130>
 800fe16:	7863      	ldrb	r3, [r4, #1]
 800fe18:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe1a:	d132      	bne.n	800fe82 <_svfiprintf_r+0x186>
 800fe1c:	9b03      	ldr	r3, [sp, #12]
 800fe1e:	1d1a      	adds	r2, r3, #4
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	9203      	str	r2, [sp, #12]
 800fe24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe28:	3402      	adds	r4, #2
 800fe2a:	9305      	str	r3, [sp, #20]
 800fe2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fef0 <_svfiprintf_r+0x1f4>
 800fe30:	7821      	ldrb	r1, [r4, #0]
 800fe32:	2203      	movs	r2, #3
 800fe34:	4650      	mov	r0, sl
 800fe36:	f7f0 f9db 	bl	80001f0 <memchr>
 800fe3a:	b138      	cbz	r0, 800fe4c <_svfiprintf_r+0x150>
 800fe3c:	9b04      	ldr	r3, [sp, #16]
 800fe3e:	eba0 000a 	sub.w	r0, r0, sl
 800fe42:	2240      	movs	r2, #64	@ 0x40
 800fe44:	4082      	lsls	r2, r0
 800fe46:	4313      	orrs	r3, r2
 800fe48:	3401      	adds	r4, #1
 800fe4a:	9304      	str	r3, [sp, #16]
 800fe4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe50:	4824      	ldr	r0, [pc, #144]	@ (800fee4 <_svfiprintf_r+0x1e8>)
 800fe52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe56:	2206      	movs	r2, #6
 800fe58:	f7f0 f9ca 	bl	80001f0 <memchr>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	d036      	beq.n	800fece <_svfiprintf_r+0x1d2>
 800fe60:	4b21      	ldr	r3, [pc, #132]	@ (800fee8 <_svfiprintf_r+0x1ec>)
 800fe62:	bb1b      	cbnz	r3, 800feac <_svfiprintf_r+0x1b0>
 800fe64:	9b03      	ldr	r3, [sp, #12]
 800fe66:	3307      	adds	r3, #7
 800fe68:	f023 0307 	bic.w	r3, r3, #7
 800fe6c:	3308      	adds	r3, #8
 800fe6e:	9303      	str	r3, [sp, #12]
 800fe70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe72:	4433      	add	r3, r6
 800fe74:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe76:	e76a      	b.n	800fd4e <_svfiprintf_r+0x52>
 800fe78:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	2001      	movs	r0, #1
 800fe80:	e7a8      	b.n	800fdd4 <_svfiprintf_r+0xd8>
 800fe82:	2300      	movs	r3, #0
 800fe84:	3401      	adds	r4, #1
 800fe86:	9305      	str	r3, [sp, #20]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	f04f 0c0a 	mov.w	ip, #10
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe94:	3a30      	subs	r2, #48	@ 0x30
 800fe96:	2a09      	cmp	r2, #9
 800fe98:	d903      	bls.n	800fea2 <_svfiprintf_r+0x1a6>
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d0c6      	beq.n	800fe2c <_svfiprintf_r+0x130>
 800fe9e:	9105      	str	r1, [sp, #20]
 800fea0:	e7c4      	b.n	800fe2c <_svfiprintf_r+0x130>
 800fea2:	fb0c 2101 	mla	r1, ip, r1, r2
 800fea6:	4604      	mov	r4, r0
 800fea8:	2301      	movs	r3, #1
 800feaa:	e7f0      	b.n	800fe8e <_svfiprintf_r+0x192>
 800feac:	ab03      	add	r3, sp, #12
 800feae:	9300      	str	r3, [sp, #0]
 800feb0:	462a      	mov	r2, r5
 800feb2:	4b0e      	ldr	r3, [pc, #56]	@ (800feec <_svfiprintf_r+0x1f0>)
 800feb4:	a904      	add	r1, sp, #16
 800feb6:	4638      	mov	r0, r7
 800feb8:	f3af 8000 	nop.w
 800febc:	1c42      	adds	r2, r0, #1
 800febe:	4606      	mov	r6, r0
 800fec0:	d1d6      	bne.n	800fe70 <_svfiprintf_r+0x174>
 800fec2:	89ab      	ldrh	r3, [r5, #12]
 800fec4:	065b      	lsls	r3, r3, #25
 800fec6:	f53f af2d 	bmi.w	800fd24 <_svfiprintf_r+0x28>
 800feca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fecc:	e72c      	b.n	800fd28 <_svfiprintf_r+0x2c>
 800fece:	ab03      	add	r3, sp, #12
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	462a      	mov	r2, r5
 800fed4:	4b05      	ldr	r3, [pc, #20]	@ (800feec <_svfiprintf_r+0x1f0>)
 800fed6:	a904      	add	r1, sp, #16
 800fed8:	4638      	mov	r0, r7
 800feda:	f000 f879 	bl	800ffd0 <_printf_i>
 800fede:	e7ed      	b.n	800febc <_svfiprintf_r+0x1c0>
 800fee0:	08018019 	.word	0x08018019
 800fee4:	08018023 	.word	0x08018023
 800fee8:	00000000 	.word	0x00000000
 800feec:	0800fc45 	.word	0x0800fc45
 800fef0:	0801801f 	.word	0x0801801f

0800fef4 <_printf_common>:
 800fef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fef8:	4616      	mov	r6, r2
 800fefa:	4698      	mov	r8, r3
 800fefc:	688a      	ldr	r2, [r1, #8]
 800fefe:	690b      	ldr	r3, [r1, #16]
 800ff00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff04:	4293      	cmp	r3, r2
 800ff06:	bfb8      	it	lt
 800ff08:	4613      	movlt	r3, r2
 800ff0a:	6033      	str	r3, [r6, #0]
 800ff0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff10:	4607      	mov	r7, r0
 800ff12:	460c      	mov	r4, r1
 800ff14:	b10a      	cbz	r2, 800ff1a <_printf_common+0x26>
 800ff16:	3301      	adds	r3, #1
 800ff18:	6033      	str	r3, [r6, #0]
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	0699      	lsls	r1, r3, #26
 800ff1e:	bf42      	ittt	mi
 800ff20:	6833      	ldrmi	r3, [r6, #0]
 800ff22:	3302      	addmi	r3, #2
 800ff24:	6033      	strmi	r3, [r6, #0]
 800ff26:	6825      	ldr	r5, [r4, #0]
 800ff28:	f015 0506 	ands.w	r5, r5, #6
 800ff2c:	d106      	bne.n	800ff3c <_printf_common+0x48>
 800ff2e:	f104 0a19 	add.w	sl, r4, #25
 800ff32:	68e3      	ldr	r3, [r4, #12]
 800ff34:	6832      	ldr	r2, [r6, #0]
 800ff36:	1a9b      	subs	r3, r3, r2
 800ff38:	42ab      	cmp	r3, r5
 800ff3a:	dc26      	bgt.n	800ff8a <_printf_common+0x96>
 800ff3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ff40:	6822      	ldr	r2, [r4, #0]
 800ff42:	3b00      	subs	r3, #0
 800ff44:	bf18      	it	ne
 800ff46:	2301      	movne	r3, #1
 800ff48:	0692      	lsls	r2, r2, #26
 800ff4a:	d42b      	bmi.n	800ffa4 <_printf_common+0xb0>
 800ff4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff50:	4641      	mov	r1, r8
 800ff52:	4638      	mov	r0, r7
 800ff54:	47c8      	blx	r9
 800ff56:	3001      	adds	r0, #1
 800ff58:	d01e      	beq.n	800ff98 <_printf_common+0xa4>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	6922      	ldr	r2, [r4, #16]
 800ff5e:	f003 0306 	and.w	r3, r3, #6
 800ff62:	2b04      	cmp	r3, #4
 800ff64:	bf02      	ittt	eq
 800ff66:	68e5      	ldreq	r5, [r4, #12]
 800ff68:	6833      	ldreq	r3, [r6, #0]
 800ff6a:	1aed      	subeq	r5, r5, r3
 800ff6c:	68a3      	ldr	r3, [r4, #8]
 800ff6e:	bf0c      	ite	eq
 800ff70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff74:	2500      	movne	r5, #0
 800ff76:	4293      	cmp	r3, r2
 800ff78:	bfc4      	itt	gt
 800ff7a:	1a9b      	subgt	r3, r3, r2
 800ff7c:	18ed      	addgt	r5, r5, r3
 800ff7e:	2600      	movs	r6, #0
 800ff80:	341a      	adds	r4, #26
 800ff82:	42b5      	cmp	r5, r6
 800ff84:	d11a      	bne.n	800ffbc <_printf_common+0xc8>
 800ff86:	2000      	movs	r0, #0
 800ff88:	e008      	b.n	800ff9c <_printf_common+0xa8>
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	4652      	mov	r2, sl
 800ff8e:	4641      	mov	r1, r8
 800ff90:	4638      	mov	r0, r7
 800ff92:	47c8      	blx	r9
 800ff94:	3001      	adds	r0, #1
 800ff96:	d103      	bne.n	800ffa0 <_printf_common+0xac>
 800ff98:	f04f 30ff 	mov.w	r0, #4294967295
 800ff9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffa0:	3501      	adds	r5, #1
 800ffa2:	e7c6      	b.n	800ff32 <_printf_common+0x3e>
 800ffa4:	18e1      	adds	r1, r4, r3
 800ffa6:	1c5a      	adds	r2, r3, #1
 800ffa8:	2030      	movs	r0, #48	@ 0x30
 800ffaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ffae:	4422      	add	r2, r4
 800ffb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ffb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ffb8:	3302      	adds	r3, #2
 800ffba:	e7c7      	b.n	800ff4c <_printf_common+0x58>
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	4622      	mov	r2, r4
 800ffc0:	4641      	mov	r1, r8
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	47c8      	blx	r9
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	d0e6      	beq.n	800ff98 <_printf_common+0xa4>
 800ffca:	3601      	adds	r6, #1
 800ffcc:	e7d9      	b.n	800ff82 <_printf_common+0x8e>
	...

0800ffd0 <_printf_i>:
 800ffd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffd4:	7e0f      	ldrb	r7, [r1, #24]
 800ffd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ffd8:	2f78      	cmp	r7, #120	@ 0x78
 800ffda:	4691      	mov	r9, r2
 800ffdc:	4680      	mov	r8, r0
 800ffde:	460c      	mov	r4, r1
 800ffe0:	469a      	mov	sl, r3
 800ffe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ffe6:	d807      	bhi.n	800fff8 <_printf_i+0x28>
 800ffe8:	2f62      	cmp	r7, #98	@ 0x62
 800ffea:	d80a      	bhi.n	8010002 <_printf_i+0x32>
 800ffec:	2f00      	cmp	r7, #0
 800ffee:	f000 80d2 	beq.w	8010196 <_printf_i+0x1c6>
 800fff2:	2f58      	cmp	r7, #88	@ 0x58
 800fff4:	f000 80b9 	beq.w	801016a <_printf_i+0x19a>
 800fff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010000:	e03a      	b.n	8010078 <_printf_i+0xa8>
 8010002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010006:	2b15      	cmp	r3, #21
 8010008:	d8f6      	bhi.n	800fff8 <_printf_i+0x28>
 801000a:	a101      	add	r1, pc, #4	@ (adr r1, 8010010 <_printf_i+0x40>)
 801000c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010010:	08010069 	.word	0x08010069
 8010014:	0801007d 	.word	0x0801007d
 8010018:	0800fff9 	.word	0x0800fff9
 801001c:	0800fff9 	.word	0x0800fff9
 8010020:	0800fff9 	.word	0x0800fff9
 8010024:	0800fff9 	.word	0x0800fff9
 8010028:	0801007d 	.word	0x0801007d
 801002c:	0800fff9 	.word	0x0800fff9
 8010030:	0800fff9 	.word	0x0800fff9
 8010034:	0800fff9 	.word	0x0800fff9
 8010038:	0800fff9 	.word	0x0800fff9
 801003c:	0801017d 	.word	0x0801017d
 8010040:	080100a7 	.word	0x080100a7
 8010044:	08010137 	.word	0x08010137
 8010048:	0800fff9 	.word	0x0800fff9
 801004c:	0800fff9 	.word	0x0800fff9
 8010050:	0801019f 	.word	0x0801019f
 8010054:	0800fff9 	.word	0x0800fff9
 8010058:	080100a7 	.word	0x080100a7
 801005c:	0800fff9 	.word	0x0800fff9
 8010060:	0800fff9 	.word	0x0800fff9
 8010064:	0801013f 	.word	0x0801013f
 8010068:	6833      	ldr	r3, [r6, #0]
 801006a:	1d1a      	adds	r2, r3, #4
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	6032      	str	r2, [r6, #0]
 8010070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010078:	2301      	movs	r3, #1
 801007a:	e09d      	b.n	80101b8 <_printf_i+0x1e8>
 801007c:	6833      	ldr	r3, [r6, #0]
 801007e:	6820      	ldr	r0, [r4, #0]
 8010080:	1d19      	adds	r1, r3, #4
 8010082:	6031      	str	r1, [r6, #0]
 8010084:	0606      	lsls	r6, r0, #24
 8010086:	d501      	bpl.n	801008c <_printf_i+0xbc>
 8010088:	681d      	ldr	r5, [r3, #0]
 801008a:	e003      	b.n	8010094 <_printf_i+0xc4>
 801008c:	0645      	lsls	r5, r0, #25
 801008e:	d5fb      	bpl.n	8010088 <_printf_i+0xb8>
 8010090:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010094:	2d00      	cmp	r5, #0
 8010096:	da03      	bge.n	80100a0 <_printf_i+0xd0>
 8010098:	232d      	movs	r3, #45	@ 0x2d
 801009a:	426d      	negs	r5, r5
 801009c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100a0:	4859      	ldr	r0, [pc, #356]	@ (8010208 <_printf_i+0x238>)
 80100a2:	230a      	movs	r3, #10
 80100a4:	e011      	b.n	80100ca <_printf_i+0xfa>
 80100a6:	6821      	ldr	r1, [r4, #0]
 80100a8:	6833      	ldr	r3, [r6, #0]
 80100aa:	0608      	lsls	r0, r1, #24
 80100ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80100b0:	d402      	bmi.n	80100b8 <_printf_i+0xe8>
 80100b2:	0649      	lsls	r1, r1, #25
 80100b4:	bf48      	it	mi
 80100b6:	b2ad      	uxthmi	r5, r5
 80100b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80100ba:	4853      	ldr	r0, [pc, #332]	@ (8010208 <_printf_i+0x238>)
 80100bc:	6033      	str	r3, [r6, #0]
 80100be:	bf14      	ite	ne
 80100c0:	230a      	movne	r3, #10
 80100c2:	2308      	moveq	r3, #8
 80100c4:	2100      	movs	r1, #0
 80100c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80100ca:	6866      	ldr	r6, [r4, #4]
 80100cc:	60a6      	str	r6, [r4, #8]
 80100ce:	2e00      	cmp	r6, #0
 80100d0:	bfa2      	ittt	ge
 80100d2:	6821      	ldrge	r1, [r4, #0]
 80100d4:	f021 0104 	bicge.w	r1, r1, #4
 80100d8:	6021      	strge	r1, [r4, #0]
 80100da:	b90d      	cbnz	r5, 80100e0 <_printf_i+0x110>
 80100dc:	2e00      	cmp	r6, #0
 80100de:	d04b      	beq.n	8010178 <_printf_i+0x1a8>
 80100e0:	4616      	mov	r6, r2
 80100e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80100e6:	fb03 5711 	mls	r7, r3, r1, r5
 80100ea:	5dc7      	ldrb	r7, [r0, r7]
 80100ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80100f0:	462f      	mov	r7, r5
 80100f2:	42bb      	cmp	r3, r7
 80100f4:	460d      	mov	r5, r1
 80100f6:	d9f4      	bls.n	80100e2 <_printf_i+0x112>
 80100f8:	2b08      	cmp	r3, #8
 80100fa:	d10b      	bne.n	8010114 <_printf_i+0x144>
 80100fc:	6823      	ldr	r3, [r4, #0]
 80100fe:	07df      	lsls	r7, r3, #31
 8010100:	d508      	bpl.n	8010114 <_printf_i+0x144>
 8010102:	6923      	ldr	r3, [r4, #16]
 8010104:	6861      	ldr	r1, [r4, #4]
 8010106:	4299      	cmp	r1, r3
 8010108:	bfde      	ittt	le
 801010a:	2330      	movle	r3, #48	@ 0x30
 801010c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010110:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010114:	1b92      	subs	r2, r2, r6
 8010116:	6122      	str	r2, [r4, #16]
 8010118:	f8cd a000 	str.w	sl, [sp]
 801011c:	464b      	mov	r3, r9
 801011e:	aa03      	add	r2, sp, #12
 8010120:	4621      	mov	r1, r4
 8010122:	4640      	mov	r0, r8
 8010124:	f7ff fee6 	bl	800fef4 <_printf_common>
 8010128:	3001      	adds	r0, #1
 801012a:	d14a      	bne.n	80101c2 <_printf_i+0x1f2>
 801012c:	f04f 30ff 	mov.w	r0, #4294967295
 8010130:	b004      	add	sp, #16
 8010132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	f043 0320 	orr.w	r3, r3, #32
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	4833      	ldr	r0, [pc, #204]	@ (801020c <_printf_i+0x23c>)
 8010140:	2778      	movs	r7, #120	@ 0x78
 8010142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010146:	6823      	ldr	r3, [r4, #0]
 8010148:	6831      	ldr	r1, [r6, #0]
 801014a:	061f      	lsls	r7, r3, #24
 801014c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010150:	d402      	bmi.n	8010158 <_printf_i+0x188>
 8010152:	065f      	lsls	r7, r3, #25
 8010154:	bf48      	it	mi
 8010156:	b2ad      	uxthmi	r5, r5
 8010158:	6031      	str	r1, [r6, #0]
 801015a:	07d9      	lsls	r1, r3, #31
 801015c:	bf44      	itt	mi
 801015e:	f043 0320 	orrmi.w	r3, r3, #32
 8010162:	6023      	strmi	r3, [r4, #0]
 8010164:	b11d      	cbz	r5, 801016e <_printf_i+0x19e>
 8010166:	2310      	movs	r3, #16
 8010168:	e7ac      	b.n	80100c4 <_printf_i+0xf4>
 801016a:	4827      	ldr	r0, [pc, #156]	@ (8010208 <_printf_i+0x238>)
 801016c:	e7e9      	b.n	8010142 <_printf_i+0x172>
 801016e:	6823      	ldr	r3, [r4, #0]
 8010170:	f023 0320 	bic.w	r3, r3, #32
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	e7f6      	b.n	8010166 <_printf_i+0x196>
 8010178:	4616      	mov	r6, r2
 801017a:	e7bd      	b.n	80100f8 <_printf_i+0x128>
 801017c:	6833      	ldr	r3, [r6, #0]
 801017e:	6825      	ldr	r5, [r4, #0]
 8010180:	6961      	ldr	r1, [r4, #20]
 8010182:	1d18      	adds	r0, r3, #4
 8010184:	6030      	str	r0, [r6, #0]
 8010186:	062e      	lsls	r6, r5, #24
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	d501      	bpl.n	8010190 <_printf_i+0x1c0>
 801018c:	6019      	str	r1, [r3, #0]
 801018e:	e002      	b.n	8010196 <_printf_i+0x1c6>
 8010190:	0668      	lsls	r0, r5, #25
 8010192:	d5fb      	bpl.n	801018c <_printf_i+0x1bc>
 8010194:	8019      	strh	r1, [r3, #0]
 8010196:	2300      	movs	r3, #0
 8010198:	6123      	str	r3, [r4, #16]
 801019a:	4616      	mov	r6, r2
 801019c:	e7bc      	b.n	8010118 <_printf_i+0x148>
 801019e:	6833      	ldr	r3, [r6, #0]
 80101a0:	1d1a      	adds	r2, r3, #4
 80101a2:	6032      	str	r2, [r6, #0]
 80101a4:	681e      	ldr	r6, [r3, #0]
 80101a6:	6862      	ldr	r2, [r4, #4]
 80101a8:	2100      	movs	r1, #0
 80101aa:	4630      	mov	r0, r6
 80101ac:	f7f0 f820 	bl	80001f0 <memchr>
 80101b0:	b108      	cbz	r0, 80101b6 <_printf_i+0x1e6>
 80101b2:	1b80      	subs	r0, r0, r6
 80101b4:	6060      	str	r0, [r4, #4]
 80101b6:	6863      	ldr	r3, [r4, #4]
 80101b8:	6123      	str	r3, [r4, #16]
 80101ba:	2300      	movs	r3, #0
 80101bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101c0:	e7aa      	b.n	8010118 <_printf_i+0x148>
 80101c2:	6923      	ldr	r3, [r4, #16]
 80101c4:	4632      	mov	r2, r6
 80101c6:	4649      	mov	r1, r9
 80101c8:	4640      	mov	r0, r8
 80101ca:	47d0      	blx	sl
 80101cc:	3001      	adds	r0, #1
 80101ce:	d0ad      	beq.n	801012c <_printf_i+0x15c>
 80101d0:	6823      	ldr	r3, [r4, #0]
 80101d2:	079b      	lsls	r3, r3, #30
 80101d4:	d413      	bmi.n	80101fe <_printf_i+0x22e>
 80101d6:	68e0      	ldr	r0, [r4, #12]
 80101d8:	9b03      	ldr	r3, [sp, #12]
 80101da:	4298      	cmp	r0, r3
 80101dc:	bfb8      	it	lt
 80101de:	4618      	movlt	r0, r3
 80101e0:	e7a6      	b.n	8010130 <_printf_i+0x160>
 80101e2:	2301      	movs	r3, #1
 80101e4:	4632      	mov	r2, r6
 80101e6:	4649      	mov	r1, r9
 80101e8:	4640      	mov	r0, r8
 80101ea:	47d0      	blx	sl
 80101ec:	3001      	adds	r0, #1
 80101ee:	d09d      	beq.n	801012c <_printf_i+0x15c>
 80101f0:	3501      	adds	r5, #1
 80101f2:	68e3      	ldr	r3, [r4, #12]
 80101f4:	9903      	ldr	r1, [sp, #12]
 80101f6:	1a5b      	subs	r3, r3, r1
 80101f8:	42ab      	cmp	r3, r5
 80101fa:	dcf2      	bgt.n	80101e2 <_printf_i+0x212>
 80101fc:	e7eb      	b.n	80101d6 <_printf_i+0x206>
 80101fe:	2500      	movs	r5, #0
 8010200:	f104 0619 	add.w	r6, r4, #25
 8010204:	e7f5      	b.n	80101f2 <_printf_i+0x222>
 8010206:	bf00      	nop
 8010208:	0801802a 	.word	0x0801802a
 801020c:	0801803b 	.word	0x0801803b

08010210 <memmove>:
 8010210:	4288      	cmp	r0, r1
 8010212:	b510      	push	{r4, lr}
 8010214:	eb01 0402 	add.w	r4, r1, r2
 8010218:	d902      	bls.n	8010220 <memmove+0x10>
 801021a:	4284      	cmp	r4, r0
 801021c:	4623      	mov	r3, r4
 801021e:	d807      	bhi.n	8010230 <memmove+0x20>
 8010220:	1e43      	subs	r3, r0, #1
 8010222:	42a1      	cmp	r1, r4
 8010224:	d008      	beq.n	8010238 <memmove+0x28>
 8010226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801022a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801022e:	e7f8      	b.n	8010222 <memmove+0x12>
 8010230:	4402      	add	r2, r0
 8010232:	4601      	mov	r1, r0
 8010234:	428a      	cmp	r2, r1
 8010236:	d100      	bne.n	801023a <memmove+0x2a>
 8010238:	bd10      	pop	{r4, pc}
 801023a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801023e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010242:	e7f7      	b.n	8010234 <memmove+0x24>

08010244 <_realloc_r>:
 8010244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010248:	4680      	mov	r8, r0
 801024a:	4615      	mov	r5, r2
 801024c:	460c      	mov	r4, r1
 801024e:	b921      	cbnz	r1, 801025a <_realloc_r+0x16>
 8010250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010254:	4611      	mov	r1, r2
 8010256:	f7ff bae7 	b.w	800f828 <_malloc_r>
 801025a:	b92a      	cbnz	r2, 8010268 <_realloc_r+0x24>
 801025c:	f7ff fca8 	bl	800fbb0 <_free_r>
 8010260:	2400      	movs	r4, #0
 8010262:	4620      	mov	r0, r4
 8010264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010268:	f000 f81a 	bl	80102a0 <_malloc_usable_size_r>
 801026c:	4285      	cmp	r5, r0
 801026e:	4606      	mov	r6, r0
 8010270:	d802      	bhi.n	8010278 <_realloc_r+0x34>
 8010272:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010276:	d8f4      	bhi.n	8010262 <_realloc_r+0x1e>
 8010278:	4629      	mov	r1, r5
 801027a:	4640      	mov	r0, r8
 801027c:	f7ff fad4 	bl	800f828 <_malloc_r>
 8010280:	4607      	mov	r7, r0
 8010282:	2800      	cmp	r0, #0
 8010284:	d0ec      	beq.n	8010260 <_realloc_r+0x1c>
 8010286:	42b5      	cmp	r5, r6
 8010288:	462a      	mov	r2, r5
 801028a:	4621      	mov	r1, r4
 801028c:	bf28      	it	cs
 801028e:	4632      	movcs	r2, r6
 8010290:	f7ff fc80 	bl	800fb94 <memcpy>
 8010294:	4621      	mov	r1, r4
 8010296:	4640      	mov	r0, r8
 8010298:	f7ff fc8a 	bl	800fbb0 <_free_r>
 801029c:	463c      	mov	r4, r7
 801029e:	e7e0      	b.n	8010262 <_realloc_r+0x1e>

080102a0 <_malloc_usable_size_r>:
 80102a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102a4:	1f18      	subs	r0, r3, #4
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	bfbc      	itt	lt
 80102aa:	580b      	ldrlt	r3, [r1, r0]
 80102ac:	18c0      	addlt	r0, r0, r3
 80102ae:	4770      	bx	lr

080102b0 <_init>:
 80102b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102b2:	bf00      	nop
 80102b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102b6:	bc08      	pop	{r3}
 80102b8:	469e      	mov	lr, r3
 80102ba:	4770      	bx	lr

080102bc <_fini>:
 80102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102be:	bf00      	nop
 80102c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102c2:	bc08      	pop	{r3}
 80102c4:	469e      	mov	lr, r3
 80102c6:	4770      	bx	lr
